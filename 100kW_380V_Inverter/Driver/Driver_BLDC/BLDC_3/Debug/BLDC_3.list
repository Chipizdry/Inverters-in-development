
BLDC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b2a4  0800b2a4  0000c2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b33c  0800b33c  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b33c  0800b33c  0000c33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b344  0800b344  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b344  0800b344  0000c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b348  0800b348  0000c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b34c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fbc  20000068  0800b3b4  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005024  0800b3b4  0000e024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021999  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ca  00000000  00000000  0002ea31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00034ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b6f  00000000  00000000  00035ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207b9  00000000  00000000  0005ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee0ce  00000000  00000000  0007c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eac  00000000  00000000  0016a32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001711d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b28c 	.word	0x0800b28c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b28c 	.word	0x0800b28c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <SWITCH>:
 *  Created on: Jun 20, 2024
 *      Author: chipi
 */
#include "BLDC.h"

uint8_t SWITCH( bool coils[]){
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b25a      	sxtb	r2, r3
 8000564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000568:	4313      	orrs	r3, r2
 800056a:	b25b      	sxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	b25b      	sxtb	r3, r3
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000584:	4313      	orrs	r3, r2
 8000586:	b25b      	sxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3302      	adds	r3, #2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b25b      	sxtb	r3, r3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	b25a      	sxtb	r2, r3
 800059c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	73fb      	strb	r3, [r7, #15]
return connector;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <Phaze_A_ON>:

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);}
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <Phaze_A_ON+0x18>)
 80005bc:	f006 fa2c 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 80005c0:	2100      	movs	r1, #0
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <Phaze_A_ON+0x18>)
 80005c4:	f004 fd9c 	bl	8005100 <HAL_TIM_PWM_Start>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200002cc 	.word	0x200002cc

080005d0 <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005d8:	f004 fe8c 	bl	80052f4 <HAL_TIM_PWM_Stop>
 80005dc:	2100      	movs	r1, #0
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005e0:	f006 f958 	bl	8006894 <HAL_TIMEx_PWMN_Start>
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002cc 	.word	0x200002cc

080005ec <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);}
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005f4:	f004 fe7e 	bl	80052f4 <HAL_TIM_PWM_Stop>
 80005f8:	2100      	movs	r1, #0
 80005fa:	4802      	ldr	r0, [pc, #8]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005fc:	f006 fa0c 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002cc 	.word	0x200002cc

08000608 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);}
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
 800060c:	2104      	movs	r1, #4
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <Phaze_B_ON+0x18>)
 8000610:	f006 fa02 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 8000614:	2104      	movs	r1, #4
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <Phaze_B_ON+0x18>)
 8000618:	f004 fd72 	bl	8005100 <HAL_TIM_PWM_Start>
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200002cc 	.word	0x200002cc

08000624 <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); }
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <Phaze_B_OFF+0x18>)
 800062c:	f004 fe62 	bl	80052f4 <HAL_TIM_PWM_Stop>
 8000630:	2104      	movs	r1, #4
 8000632:	4802      	ldr	r0, [pc, #8]	@ (800063c <Phaze_B_OFF+0x18>)
 8000634:	f006 f92e 	bl	8006894 <HAL_TIMEx_PWMN_Start>
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002cc 	.word	0x200002cc

08000640 <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
 8000644:	2104      	movs	r1, #4
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000648:	f004 fe54 	bl	80052f4 <HAL_TIM_PWM_Stop>
 800064c:	2104      	movs	r1, #4
 800064e:	4802      	ldr	r0, [pc, #8]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000650:	f006 f9e2 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200002cc 	.word	0x200002cc

0800065c <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  }
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	2108      	movs	r1, #8
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <Phaze_C_ON+0x18>)
 8000664:	f006 f9d8 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 8000668:	2108      	movs	r1, #8
 800066a:	4802      	ldr	r0, [pc, #8]	@ (8000674 <Phaze_C_ON+0x18>)
 800066c:	f004 fd48 	bl	8005100 <HAL_TIM_PWM_Start>
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200002cc 	.word	0x200002cc

08000678 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);}
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000680:	f004 fe38 	bl	80052f4 <HAL_TIM_PWM_Stop>
 8000684:	2108      	movs	r1, #8
 8000686:	4802      	ldr	r0, [pc, #8]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000688:	f006 f904 	bl	8006894 <HAL_TIMEx_PWMN_Start>
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002cc 	.word	0x200002cc

08000694 <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);}
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <Phaze_C_ZZ+0x18>)
 800069c:	f004 fe2a 	bl	80052f4 <HAL_TIM_PWM_Stop>
 80006a0:	2108      	movs	r1, #8
 80006a2:	4802      	ldr	r0, [pc, #8]	@ (80006ac <Phaze_C_ZZ+0x18>)
 80006a4:	f006 f9b8 	bl	8006a18 <HAL_TIMEx_PWMN_Stop>
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200002cc 	.word	0x200002cc

080006b0 <BLDC_MotorCommutation>:


void BLDC_MotorCommutation(uint8_t halls  ){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]

	 switch (halls) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d84b      	bhi.n	8000758 <BLDC_MotorCommutation+0xa8>
 80006c0:	a201      	add	r2, pc, #4	@ (adr r2, 80006c8 <BLDC_MotorCommutation+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	0800074b 	.word	0x0800074b
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f7 	.word	0x080006f7
 80006d4:	08000705 	.word	0x08000705
 80006d8:	08000713 	.word	0x08000713
 80006dc:	08000721 	.word	0x08000721
 80006e0:	0800072f 	.word	0x0800072f
 80006e4:	0800073d 	.word	0x0800073d

	case 1:

    Phaze_A_ON();
 80006e8:	f7ff ff64 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_ZZ();
 80006ec:	f7ff ffa8 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_OFF();
 80006f0:	f7ff ffc2 	bl	8000678 <Phaze_C_OFF>

	break;
 80006f4:	e031      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 2:

    Phaze_A_OFF();
 80006f6:	f7ff ff6b 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ON();
 80006fa:	f7ff ff85 	bl	8000608 <Phaze_B_ON>
    Phaze_C_ZZ();
 80006fe:	f7ff ffc9 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000702:	e02a      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 3:

	Phaze_A_ZZ();
 8000704:	f7ff ff72 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ON();
 8000708:	f7ff ff7e 	bl	8000608 <Phaze_B_ON>
	Phaze_C_OFF();
 800070c:	f7ff ffb4 	bl	8000678 <Phaze_C_OFF>

	break;
 8000710:	e023      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 4:

	Phaze_A_ZZ();
 8000712:	f7ff ff6b 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_OFF();
 8000716:	f7ff ff85 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ON();
 800071a:	f7ff ff9f 	bl	800065c <Phaze_C_ON>


	break;
 800071e:	e01c      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 5:

	Phaze_A_ON();
 8000720:	f7ff ff48 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_OFF();
 8000724:	f7ff ff7e 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ZZ();
 8000728:	f7ff ffb4 	bl	8000694 <Phaze_C_ZZ>

	break;
 800072c:	e015      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 6:

	Phaze_A_OFF();
 800072e:	f7ff ff4f 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ZZ();
 8000732:	f7ff ff85 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ON();
 8000736:	f7ff ff91 	bl	800065c <Phaze_C_ON>

	break;
 800073a:	e00e      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 7:

	Phaze_A_ZZ();
 800073c:	f7ff ff56 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 8000740:	f7ff ff7e 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000744:	f7ff ffa6 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000748:	e007      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 0:

	Phaze_A_ZZ();
 800074a:	f7ff ff4f 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 800074e:	f7ff ff77 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000752:	f7ff ff9f 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000756:	e000      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	default:
	break;}
 8000758:	bf00      	nop

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop

08000764 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b55      	ldr	r3, [pc, #340]	@ (80008cc <Registers_handler+0x168>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d021      	beq.n	80007c2 <Registers_handler+0x5e>
 800077e:	2300      	movs	r3, #0
 8000780:	82fb      	strh	r3, [r7, #22]
 8000782:	e007      	b.n	8000794 <Registers_handler+0x30>
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	3301      	adds	r3, #1
 8000792:	82fb      	strh	r3, [r7, #22]
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	2b3f      	cmp	r3, #63	@ 0x3f
 8000798:	d9f4      	bls.n	8000784 <Registers_handler+0x20>
	     RX_2;
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a0:	484b      	ldr	r0, [pc, #300]	@ (80008d0 <Registers_handler+0x16c>)
 80007a2:	f003 fa0b 	bl	8003bbc <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	484a      	ldr	r0, [pc, #296]	@ (80008d4 <Registers_handler+0x170>)
 80007ac:	f007 fdf3 	bl	8008396 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007b0:	4b49      	ldr	r3, [pc, #292]	@ (80008d8 <Registers_handler+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <Registers_handler+0x174>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0208 	bic.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
		return;}
 80007c0:	e081      	b.n	80008c6 <Registers_handler+0x162>


	if (Size < 4) {
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d805      	bhi.n	80007d4 <Registers_handler+0x70>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80007c8:	2202      	movs	r2, #2
 80007ca:	2103      	movs	r1, #3
 80007cc:	4841      	ldr	r0, [pc, #260]	@ (80008d4 <Registers_handler+0x170>)
 80007ce:	f001 f817 	bl	8001800 <sendError>

	        return;
 80007d2:	e078      	b.n	80008c6 <Registers_handler+0x162>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	3b02      	subs	r3, #2
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3b02      	subs	r3, #2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 ff7f 	bl	8001704 <calcCRC16ModBus>
 8000806:	4603      	mov	r3, r0
 8000808:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 800080a:	8aba      	ldrh	r2, [r7, #20]
 800080c:	8a7b      	ldrh	r3, [r7, #18]
 800080e:	429a      	cmp	r2, r3
 8000810:	d005      	beq.n	800081e <Registers_handler+0xba>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 8000812:	2203      	movs	r2, #3
 8000814:	2103      	movs	r1, #3
 8000816:	482f      	ldr	r0, [pc, #188]	@ (80008d4 <Registers_handler+0x170>)
 8000818:	f000 fff2 	bl	8001800 <sendError>

	        return;
 800081c:	e053      	b.n	80008c6 <Registers_handler+0x162>
	    }


                       uint8_t opCode = rxFrame[1];
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000824:	7c7b      	ldrb	r3, [r7, #17]
 8000826:	3b01      	subs	r3, #1
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d845      	bhi.n	80008b8 <Registers_handler+0x154>
 800082c:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <Registers_handler+0xd0>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000875 	.word	0x08000875
 8000838:	08000883 	.word	0x08000883
 800083c:	08000891 	.word	0x08000891
 8000840:	0800089b 	.word	0x0800089b
 8000844:	080008b9 	.word	0x080008b9
 8000848:	080008a5 	.word	0x080008a5
 800084c:	080008b9 	.word	0x080008b9
 8000850:	080008b9 	.word	0x080008b9
 8000854:	080008b9 	.word	0x080008b9
 8000858:	080008b9 	.word	0x080008b9
 800085c:	080008b9 	.word	0x080008b9
 8000860:	080008b9 	.word	0x080008b9
 8000864:	080008b9 	.word	0x080008b9
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008b9 	.word	0x080008b9
 8000870:	080008af 	.word	0x080008af
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <Registers_handler+0x178>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4816      	ldr	r0, [pc, #88]	@ (80008d4 <Registers_handler+0x170>)
 800087c:	f001 f8e2 	bl	8001a44 <handleReadCoils>
				  			   break;
 8000880:	e021      	b.n	80008c6 <Registers_handler+0x162>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <Registers_handler+0x17c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <Registers_handler+0x170>)
 800088a:	f001 f945 	bl	8001b18 <handleReadDiscreteInputs>
							   break;
 800088e:	e01a      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <Registers_handler+0x170>)
 8000894:	f000 ffe4 	bl	8001860 <handleReadHoldingRegs>
				  			   break;
 8000898:	e015      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <Registers_handler+0x170>)
 800089e:	f001 f857 	bl	8001950 <handleReadInputRegs>

				  			   break;
 80008a2:	e010      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <Registers_handler+0x170>)
 80008a8:	f001 f9a4 	bl	8001bf4 <handleWriteMulyipleHandlingRegister>

                               break;
 80008ac:	e00b      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <Registers_handler+0x170>)
 80008b2:	f001 f99f 	bl	8001bf4 <handleWriteMulyipleHandlingRegister>

                               break;
 80008b6:	e006      	b.n	80008c6 <Registers_handler+0x162>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80008b8:	7c7b      	ldrb	r3, [r7, #17]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <Registers_handler+0x170>)
 80008c0:	f000 ff9e 	bl	8001800 <sendError>
				  			   break;
 80008c4:	bf00      	nop
				  			     }



                          }
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20000364 	.word	0x20000364
 80008d8:	200003ec 	.word	0x200003ec
 80008dc:	20000209 	.word	0x20000209
 80008e0:	20000208 	.word	0x20000208

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008e8:	f000 fec8 	bl	800167c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f001 fdd1 	bl	8002492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f8d4 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 fb82 	bl	8000ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80008f8:	f000 fb5a 	bl	8000fb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80008fc:	f000 f9ca 	bl	8000c94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000900:	f000 fa8e 	bl	8000e20 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fb24 	bl	8000f50 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000908:	f000 f934 	bl	8000b74 <MX_ADC1_Init>
  MX_SPI1_Init();
 800090c:	f000 f984 	bl	8000c18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TX_2;
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000916:	4855      	ldr	r0, [pc, #340]	@ (8000a6c <main+0x188>)
 8000918:	f003 f950 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_1_ON ;
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	4853      	ldr	r0, [pc, #332]	@ (8000a70 <main+0x18c>)
 8000922:	f003 f94b 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_2_ON ;
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	4851      	ldr	r0, [pc, #324]	@ (8000a70 <main+0x18c>)
 800092c:	f003 f946 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_3_ON ;
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	@ 0x40
 8000934:	484e      	ldr	r0, [pc, #312]	@ (8000a70 <main+0x18c>)
 8000936:	f003 f941 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_4_ON ;
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <main+0x18c>)
 8000940:	f003 f93c 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_5_ON ;
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094a:	4849      	ldr	r0, [pc, #292]	@ (8000a70 <main+0x18c>)
 800094c:	f003 f936 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_6_ON ;
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	4846      	ldr	r0, [pc, #280]	@ (8000a70 <main+0x18c>)
 8000958:	f003 f930 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_7_ON ;
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000962:	4843      	ldr	r0, [pc, #268]	@ (8000a70 <main+0x18c>)
 8000964:	f003 f92a 	bl	8003bbc <HAL_GPIO_WritePin>
  LED_8_ON ;
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096e:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <main+0x18c>)
 8000970:	f003 f924 	bl	8003bbc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000978:	f001 fdb8 	bl	80024ec <HAL_Delay>
  DRIVE_1_ON;
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	483b      	ldr	r0, [pc, #236]	@ (8000a70 <main+0x18c>)
 8000982:	f003 f91b 	bl	8003bbc <HAL_GPIO_WritePin>
  DRIVE_2_ON;
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4839      	ldr	r0, [pc, #228]	@ (8000a70 <main+0x18c>)
 800098c:	f003 f916 	bl	8003bbc <HAL_GPIO_WritePin>
  DRIVE_3_ON;
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	4836      	ldr	r0, [pc, #216]	@ (8000a70 <main+0x18c>)
 8000996:	f003 f911 	bl	8003bbc <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800099a:	2240      	movs	r2, #64	@ 0x40
 800099c:	4935      	ldr	r1, [pc, #212]	@ (8000a74 <main+0x190>)
 800099e:	4836      	ldr	r0, [pc, #216]	@ (8000a78 <main+0x194>)
 80009a0:	f007 fcf9 	bl	8008396 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80009a4:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <main+0x198>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b34      	ldr	r3, [pc, #208]	@ (8000a7c <main+0x198>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 0208 	bic.w	r2, r2, #8
 80009b2:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim2);
 80009b4:	4832      	ldr	r0, [pc, #200]	@ (8000a80 <main+0x19c>)
 80009b6:	f004 fac9 	bl	8004f4c <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	4830      	ldr	r0, [pc, #192]	@ (8000a80 <main+0x19c>)
 80009be:	f004 fd7b 	bl	80054b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	482e      	ldr	r0, [pc, #184]	@ (8000a80 <main+0x19c>)
 80009c6:	f004 fd77 	bl	80054b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80009ca:	2108      	movs	r1, #8
 80009cc:	482c      	ldr	r0, [pc, #176]	@ (8000a80 <main+0x19c>)
 80009ce:	f004 fd73 	bl	80054b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80009d2:	210c      	movs	r1, #12
 80009d4:	482a      	ldr	r0, [pc, #168]	@ (8000a80 <main+0x19c>)
 80009d6:	f004 fd6f 	bl	80054b8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
*/
    LED_1_OFF ;
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4824      	ldr	r0, [pc, #144]	@ (8000a70 <main+0x18c>)
 80009e0:	f003 f8ec 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_2_OFF ;
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	4821      	ldr	r0, [pc, #132]	@ (8000a70 <main+0x18c>)
 80009ea:	f003 f8e7 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_3_OFF ;
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	481f      	ldr	r0, [pc, #124]	@ (8000a70 <main+0x18c>)
 80009f4:	f003 f8e2 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_4_OFF ;
 80009f8:	2200      	movs	r2, #0
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <main+0x18c>)
 80009fe:	f003 f8dd 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_5_OFF ;
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a08:	4819      	ldr	r0, [pc, #100]	@ (8000a70 <main+0x18c>)
 8000a0a:	f003 f8d7 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_6_OFF ;
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <main+0x18c>)
 8000a16:	f003 f8d1 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_7_OFF ;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a20:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <main+0x18c>)
 8000a22:	f003 f8cb 	bl	8003bbc <HAL_GPIO_WritePin>
    LED_8_OFF ;
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <main+0x18c>)
 8000a2e:	f003 f8c5 	bl	8003bbc <HAL_GPIO_WritePin>
  //  DRIVE_1_OFF;
  //  DRIVE_2_OFF;
  //  DRIVE_3_OFF;
    RX_2;
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <main+0x188>)
 8000a3a:	f003 f8bf 	bl	8003bbc <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a3e:	f007 fd05 	bl	800844c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a42:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <main+0x1a0>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <main+0x1a4>)
 8000a48:	f007 fd6a 	bl	8008520 <osThreadNew>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <main+0x1a8>)
 8000a50:	6013      	str	r3, [r2, #0]

  /* creation of ModBusData */
  ModBusDataHandle = osThreadNew(StartTask02, NULL, &ModBusData_attributes);
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <main+0x1ac>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480f      	ldr	r0, [pc, #60]	@ (8000a94 <main+0x1b0>)
 8000a58:	f007 fd62 	bl	8008520 <osThreadNew>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <main+0x1b4>)
 8000a60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a62:	f007 fd27 	bl	80084b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a66:	bf00      	nop
 8000a68:	e7fd      	b.n	8000a66 <main+0x182>
 8000a6a:	bf00      	nop
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40020800 	.word	0x40020800
 8000a74:	20000088 	.word	0x20000088
 8000a78:	20000364 	.word	0x20000364
 8000a7c:	200003ec 	.word	0x200003ec
 8000a80:	20000318 	.word	0x20000318
 8000a84:	0800b2d4 	.word	0x0800b2d4
 8000a88:	0800145d 	.word	0x0800145d
 8000a8c:	200004ac 	.word	0x200004ac
 8000a90:	0800b2f8 	.word	0x0800b2f8
 8000a94:	08001475 	.word	0x08001475
 8000a98:	200004b0 	.word	0x200004b0

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f00a fafe 	bl	800b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a29      	ldr	r2, [pc, #164]	@ (8000b6c <SystemClock_Config+0xd0>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <SystemClock_Config+0xd0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a24      	ldr	r2, [pc, #144]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000ade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b04:	2308      	movs	r3, #8
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b08:	23d8      	movs	r3, #216	@ 0xd8
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f8d1 	bl	8003cc0 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b24:	f000 fde8 	bl	80016f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b28:	f003 f87a 	bl	8003c20 <HAL_PWREx_EnableOverDrive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b32:	f000 fde1 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2107      	movs	r1, #7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fb57 	bl	8004208 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b60:	f000 fdca 	bl	80016f8 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	@ 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <MX_ADC1_Init+0x9c>)
 8000b8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000b8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bb6:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <MX_ADC1_Init+0xa0>)
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd4:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bd6:	f001 fcad 	bl	8002534 <HAL_ADC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 fd8a 	bl	80016f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_ADC1_Init+0x98>)
 8000bf6:	f001 fce1 	bl	80025bc <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c00:	f000 fd7a 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000220 	.word	0x20000220
 8000c10:	40012000 	.word	0x40012000
 8000c14:	0f000001 	.word	0x0f000001

08000c18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <MX_SPI1_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c32:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c66:	2207      	movs	r2, #7
 8000c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c72:	2208      	movs	r2, #8
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_SPI1_Init+0x74>)
 8000c78:	f004 f866 	bl	8004d48 <HAL_SPI_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f000 fd39 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000268 	.word	0x20000268
 8000c90:	40013000 	.word	0x40013000

08000c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	@ 0x68
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	222c      	movs	r2, #44	@ 0x2c
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a f9ec 	bl	800b0ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd4:	4b50      	ldr	r3, [pc, #320]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000cd6:	4a51      	ldr	r2, [pc, #324]	@ (8000e1c <MX_TIM1_Init+0x188>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cda:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000ce8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf4:	4b48      	ldr	r3, [pc, #288]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b47      	ldr	r3, [pc, #284]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d00:	4845      	ldr	r0, [pc, #276]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d02:	f004 f8cc 	bl	8004e9e <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 fcf4 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	483e      	ldr	r0, [pc, #248]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d1e:	f004 ffd3 	bl	8005cc8 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d28:	f000 fce6 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d2c:	483a      	ldr	r0, [pc, #232]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d2e:	f004 f985 	bl	800503c <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d38:	f000 fcde 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4832      	ldr	r0, [pc, #200]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d50:	f005 fec0 	bl	8006ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d5a:	f000 fccd 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5e:	2360      	movs	r3, #96	@ 0x60
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d70:	2304      	movs	r3, #4
 8000d72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4824      	ldr	r0, [pc, #144]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d86:	f004 fe8b 	bl	8005aa0 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000d90:	f000 fcb2 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000d9e:	f004 fe7f 	bl	8005aa0 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000da8:	f000 fca6 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db0:	2208      	movs	r2, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000db6:	f004 fe73 	bl	8005aa0 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000dc0:	f000 fc9a 	bl	80016f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000dd0:	23ff      	movs	r3, #255	@ 0xff
 8000dd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ddc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000dfa:	f005 fef9 	bl	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000e04:	f000 fc78 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM1_Init+0x184>)
 8000e0a:	f001 f8df 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3768      	adds	r7, #104	@ 0x68
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002cc 	.word	0x200002cc
 8000e1c:	40010000 	.word	0x40010000

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e60:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b37      	ldr	r3, [pc, #220]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e74:	4835      	ldr	r0, [pc, #212]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e76:	f004 f812 	bl	8004e9e <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000e80:	f000 fc3a 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e88:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482e      	ldr	r0, [pc, #184]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000e92:	f004 ff19 	bl	8005cc8 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e9c:	f000 fc2c 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ea0:	482a      	ldr	r0, [pc, #168]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000ea2:	f004 faa7 	bl	80053f4 <HAL_TIM_IC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000eac:	f000 fc24 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4823      	ldr	r0, [pc, #140]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000ec0:	f005 fe08 	bl	8006ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000eca:	f000 fc15 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4819      	ldr	r0, [pc, #100]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000ee6:	f004 fd3e 	bl	8005966 <HAL_TIM_IC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000ef0:	f000 fc02 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2204      	movs	r2, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000f00:	f004 fd31 	bl	8005966 <HAL_TIM_IC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f0a:	f000 fbf5 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2208      	movs	r2, #8
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000f1a:	f004 fd24 	bl	8005966 <HAL_TIM_IC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000f24:	f000 fbe8 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_TIM2_Init+0x12c>)
 8000f34:	f004 fd17 	bl	8005966 <HAL_TIM_IC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000f3e:	f000 fbdb 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	@ 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000318 	.word	0x20000318

08000f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <MX_USART1_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f94:	f005 feed 	bl	8006d72 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 fbab 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000364 	.word	0x20000364
 8000fac:	40011000 	.word	0x40011000

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_DMA_Init+0x48>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <MX_DMA_Init+0x48>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_DMA_Init+0x48>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203a      	movs	r0, #58	@ 0x3a
 8000fd4:	f001 fe1e 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fd8:	203a      	movs	r0, #58	@ 0x3a
 8000fda:	f001 fe37 	bl	8002c4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2046      	movs	r0, #70	@ 0x46
 8000fe4:	f001 fe16 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fe8:	2046      	movs	r0, #70	@ 0x46
 8000fea:	f001 fe2f 	bl	8002c4c <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a40      	ldr	r2, [pc, #256]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <MX_GPIO_Init+0x11c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a3a      	ldr	r2, [pc, #232]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b35      	ldr	r3, [pc, #212]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a34      	ldr	r2, [pc, #208]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <MX_GPIO_Init+0x11c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a2e      	ldr	r2, [pc, #184]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <MX_GPIO_Init+0x11c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 8001072:	2200      	movs	r2, #0
 8001074:	f640 71df 	movw	r1, #4063	@ 0xfdf
 8001078:	4828      	ldr	r0, [pc, #160]	@ (800111c <MX_GPIO_Init+0x120>)
 800107a:	f002 fd9f 	bl	8003bbc <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 8001084:	4826      	ldr	r0, [pc, #152]	@ (8001120 <MX_GPIO_Init+0x124>)
 8001086:	f002 fd99 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Port_1_Pin Port_2_Pin Port_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin LED_7_Pin LED_8_Pin */
  GPIO_InitStruct.Pin = Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 800108a:	f640 73df 	movw	r3, #4063	@ 0xfdf
 800108e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	481e      	ldr	r0, [pc, #120]	@ (800111c <MX_GPIO_Init+0x120>)
 80010a4:	f002 fada 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80010a8:	2307      	movs	r3, #7
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ac:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4818      	ldr	r0, [pc, #96]	@ (8001120 <MX_GPIO_Init+0x124>)
 80010be:	f002 facd 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_3_Pin DIRECT_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin;
 80010c2:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_GPIO_Init+0x124>)
 80010dc:	f002 fabe 	bl	800365c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2006      	movs	r0, #6
 80010e6:	f001 fd95 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ea:	2006      	movs	r0, #6
 80010ec:	f001 fdae 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2105      	movs	r1, #5
 80010f4:	2007      	movs	r0, #7
 80010f6:	f001 fd8d 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010fa:	2007      	movs	r0, #7
 80010fc:	f001 fda6 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2105      	movs	r1, #5
 8001104:	2008      	movs	r0, #8
 8001106:	f001 fd85 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800110a:	2008      	movs	r0, #8
 800110c:	f001 fd9e 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020400 	.word	0x40020400

08001124 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */


uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001132:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <Reset_USART1>:



void Reset_USART1(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_4_ON;
 8001150:	2201      	movs	r2, #1
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	4826      	ldr	r0, [pc, #152]	@ (80011f0 <Reset_USART1+0xa4>)
 8001156:	f002 fd31 	bl	8003bbc <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 800115a:	4826      	ldr	r0, [pc, #152]	@ (80011f4 <Reset_USART1+0xa8>)
 800115c:	f005 ff10 	bl	8006f80 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001160:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <Reset_USART1+0xac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Reset_USART1+0x22>
        HAL_DMA_Abort(&hdma_usart1_rx);
 8001168:	4823      	ldr	r0, [pc, #140]	@ (80011f8 <Reset_USART1+0xac>)
 800116a:	f001 ff6f 	bl	800304c <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Reset_USART1+0xb0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <Reset_USART1+0x30>
        HAL_DMA_Abort(&hdma_usart1_tx);
 8001176:	4821      	ldr	r0, [pc, #132]	@ (80011fc <Reset_USART1+0xb0>)
 8001178:	f001 ff68 	bl	800304c <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <Reset_USART1+0xa8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <Reset_USART1+0xa8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800118a:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <Reset_USART1+0xa8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <Reset_USART1+0xa8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2202      	movs	r2, #2
 800119a:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <Reset_USART1+0xb4>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <Reset_USART1+0xb4>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_Delay(1); // Задержка для завершения сброса
 80011a8:	2001      	movs	r0, #1
 80011aa:	f001 f99f 	bl	80024ec <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <Reset_USART1+0xb4>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <Reset_USART1+0xb4>)
 80011b4:	f023 0310 	bic.w	r3, r3, #16
 80011b8:	6253      	str	r3, [r2, #36]	@ 0x24

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80011ba:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <Reset_USART1+0xa8>)
 80011bc:	f005 fe27 	bl	8006e0e <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80011c0:	f7ff fec6 	bl	8000f50 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80011c4:	f7ff fef4 	bl	8000fb0 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80011c8:	2240      	movs	r2, #64	@ 0x40
 80011ca:	490e      	ldr	r1, [pc, #56]	@ (8001204 <Reset_USART1+0xb8>)
 80011cc:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <Reset_USART1+0xa8>)
 80011ce:	f007 f8e2 	bl	8008396 <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <Reset_USART1+0xac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <Reset_USART1+0xac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0208 	bic.w	r2, r2, #8
 80011e0:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 80011e2:	f001 f977 	bl	80024d4 <HAL_GetTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <Reset_USART1+0xbc>)
 80011ea:	6013      	str	r3, [r2, #0]


}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020800 	.word	0x40020800
 80011f4:	20000364 	.word	0x20000364
 80011f8:	200003ec 	.word	0x200003ec
 80011fc:	2000044c 	.word	0x2000044c
 8001200:	40023800 	.word	0x40023800
 8001204:	20000088 	.word	0x20000088
 8001208:	20000084 	.word	0x20000084

0800120c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	    RX_2;
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121a:	4813      	ldr	r0, [pc, #76]	@ (8001268 <HAL_UART_TxCpltCallback+0x5c>)
 800121c:	f002 fcce 	bl	8003bbc <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001220:	f001 f958 	bl	80024d4 <HAL_GetTick>
 8001224:	4603      	mov	r3, r0
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_UART_TxCpltCallback+0x60>)
 8001228:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800122a:	2240      	movs	r2, #64	@ 0x40
 800122c:	4910      	ldr	r1, [pc, #64]	@ (8001270 <HAL_UART_TxCpltCallback+0x64>)
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_UART_TxCpltCallback+0x68>)
 8001230:	f007 f8b1 	bl	8008396 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_UART_TxCpltCallback+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_UART_TxCpltCallback+0x68>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0210 	orr.w	r2, r2, #16
 8001242:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_UART_TxCpltCallback+0x6c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <HAL_UART_TxCpltCallback+0x6c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
       LED_4_OFF;
 8001254:	2200      	movs	r2, #0
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <HAL_UART_TxCpltCallback+0x70>)
 800125a:	f002 fcaf 	bl	8003bbc <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020400 	.word	0x40020400
 800126c:	20000084 	.word	0x20000084
 8001270:	20000088 	.word	0x20000088
 8001274:	20000364 	.word	0x20000364
 8001278:	200003ec 	.word	0x200003ec
 800127c:	40020800 	.word	0x40020800

08001280 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_UARTEx_RxEventCallback+0x4c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d115      	bne.n	80012c2 <HAL_UARTEx_RxEventCallback+0x42>
	{

		lastActivityTime = HAL_GetTick();
 8001296:	f001 f91d 	bl	80024d4 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_UARTEx_RxEventCallback+0x50>)
 800129e:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80012b0:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <HAL_UARTEx_RxEventCallback+0x58>)
 80012b2:	f001 fecb 	bl	800304c <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80012ba:	4909      	ldr	r1, [pc, #36]	@ (80012e0 <HAL_UARTEx_RxEventCallback+0x60>)
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <HAL_UARTEx_RxEventCallback+0x64>)
 80012be:	f7ff fa51 	bl	8000764 <Registers_handler>

	}
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40011000 	.word	0x40011000
 80012d0:	20000084 	.word	0x20000084
 80012d4:	20000364 	.word	0x20000364
 80012d8:	200003ec 	.word	0x200003ec
 80012dc:	200001e8 	.word	0x200001e8
 80012e0:	200001c8 	.word	0x200001c8
 80012e4:	20000088 	.word	0x20000088

080012e8 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80012ec:	f001 f8f2 	bl	80024d4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <Check_USART1_Timeout+0x2c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80012fc:	d307      	bcc.n	800130e <Check_USART1_Timeout+0x26>
     {
         Reset_USART1();
 80012fe:	f7ff ff25 	bl	800114c <Reset_USART1>
         RX_2;
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <Check_USART1_Timeout+0x30>)
 800130a:	f002 fc57 	bl	8003bbc <HAL_GPIO_WritePin>
     }
 }
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000084 	.word	0x20000084
 8001318:	40020400 	.word	0x40020400

0800131c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == HALL_A_Pin) // Прерывание по PB0
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d12c      	bne.n	8001386 <HAL_GPIO_EXTI_Callback+0x6a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 800132c:	2101      	movs	r1, #1
 800132e:	4848      	ldr	r0, [pc, #288]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 8001330:	f002 fc2c 	bl	8003b8c <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10f      	bne.n	800135a <HAL_GPIO_EXTI_Callback+0x3e>
        {
            LED_1_ON;
 800133a:	2201      	movs	r2, #1
 800133c:	2108      	movs	r1, #8
 800133e:	4845      	ldr	r0, [pc, #276]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 8001340:	f002 fc3c 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 0;
 8001344:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800134a:	4843      	ldr	r0, [pc, #268]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 800134c:	f7ff f8fe 	bl	800054c <SWITCH>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f9ac 	bl	80006b0 <BLDC_MotorCommutation>
 8001358:	e015      	b.n	8001386 <HAL_GPIO_EXTI_Callback+0x6a>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 800135a:	2101      	movs	r1, #1
 800135c:	483c      	ldr	r0, [pc, #240]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 800135e:	f002 fc15 	bl	8003b8c <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10e      	bne.n	8001386 <HAL_GPIO_EXTI_Callback+0x6a>
        {
            LED_1_OFF;
 8001368:	2200      	movs	r2, #0
 800136a:	2108      	movs	r1, #8
 800136c:	4839      	ldr	r0, [pc, #228]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 800136e:	f002 fc25 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 1;
 8001372:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001378:	4837      	ldr	r0, [pc, #220]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 800137a:	f7ff f8e7 	bl	800054c <SWITCH>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f995 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_B_Pin) // Прерывание по PB1
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d12c      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0xca>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 800138c:	2102      	movs	r1, #2
 800138e:	4830      	ldr	r0, [pc, #192]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 8001390:	f002 fbfc 	bl	8003b8c <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10f      	bne.n	80013ba <HAL_GPIO_EXTI_Callback+0x9e>
        {
            LED_2_ON;
 800139a:	2201      	movs	r2, #1
 800139c:	2110      	movs	r1, #16
 800139e:	482d      	ldr	r0, [pc, #180]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 80013a0:	f002 fc0c 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 0;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013aa:	482b      	ldr	r0, [pc, #172]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013ac:	f7ff f8ce 	bl	800054c <SWITCH>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f97c 	bl	80006b0 <BLDC_MotorCommutation>
 80013b8:	e015      	b.n	80013e6 <HAL_GPIO_EXTI_Callback+0xca>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 80013ba:	2102      	movs	r1, #2
 80013bc:	4824      	ldr	r0, [pc, #144]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 80013be:	f002 fbe5 	bl	8003b8c <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10e      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0xca>
        {
            LED_2_OFF;
 80013c8:	2200      	movs	r2, #0
 80013ca:	2110      	movs	r1, #16
 80013cc:	4821      	ldr	r0, [pc, #132]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 80013ce:	f002 fbf5 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 1;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013d8:	481f      	ldr	r0, [pc, #124]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013da:	f7ff f8b7 	bl	800054c <SWITCH>
 80013de:	4603      	mov	r3, r0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f965 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_C_Pin) // Прерывание по PB2
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d12c      	bne.n	8001446 <HAL_GPIO_EXTI_Callback+0x12a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 80013ec:	2104      	movs	r1, #4
 80013ee:	4818      	ldr	r0, [pc, #96]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 80013f0:	f002 fbcc 	bl	8003b8c <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10f      	bne.n	800141a <HAL_GPIO_EXTI_Callback+0xfe>
        {
            LED_3_ON;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	4815      	ldr	r0, [pc, #84]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 8001400:	f002 fbdc 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 0;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800140a:	4813      	ldr	r0, [pc, #76]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 800140c:	f7ff f89e 	bl	800054c <SWITCH>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f94c 	bl	80006b0 <BLDC_MotorCommutation>
            LED_3_OFF;
            BLDC_STATE[2] = 1;
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
        }
    }
}
 8001418:	e015      	b.n	8001446 <HAL_GPIO_EXTI_Callback+0x12a>
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 800141a:	2104      	movs	r1, #4
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <HAL_GPIO_EXTI_Callback+0x134>)
 800141e:	f002 fbb5 	bl	8003b8c <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10e      	bne.n	8001446 <HAL_GPIO_EXTI_Callback+0x12a>
            LED_3_OFF;
 8001428:	2200      	movs	r2, #0
 800142a:	2140      	movs	r1, #64	@ 0x40
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x138>)
 800142e:	f002 fbc5 	bl	8003bbc <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 1;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001434:	2201      	movs	r2, #1
 8001436:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001438:	4807      	ldr	r0, [pc, #28]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x13c>)
 800143a:	f7ff f887 	bl	800054c <SWITCH>
 800143e:	4603      	mov	r3, r0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f935 	bl	80006b0 <BLDC_MotorCommutation>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	20000218 	.word	0x20000218

0800145c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001464:	f7ff ff40 	bl	80012e8 <Check_USART1_Timeout>
	      osDelay(2000); // Проверяем каждые 100 мс (можно настроить)
 8001468:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800146c:	f007 f8fe 	bl	800866c <osDelay>
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001470:	bf00      	nop
 8001472:	e7f7      	b.n	8001464 <StartDefaultTask+0x8>

08001474 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if(auto_mode==0){
 800147c:	4b72      	ldr	r3, [pc, #456]	@ (8001648 <StartTask02+0x1d4>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d021      	beq.n	80014ce <StartTask02+0x5a>

	         pwm=rcv_data_reg[0];
 800148a:	4b70      	ldr	r3, [pc, #448]	@ (800164c <StartTask02+0x1d8>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b6f      	ldr	r3, [pc, #444]	@ (8001650 <StartTask02+0x1dc>)
 8001492:	601a      	str	r2, [r3, #0]
	         if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 8001494:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <StartTask02+0x1e0>)
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	4b6d      	ldr	r3, [pc, #436]	@ (8001650 <StartTask02+0x1dc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d803      	bhi.n	80014a8 <StartTask02+0x34>
 80014a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001654 <StartTask02+0x1e0>)
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001650 <StartTask02+0x1dc>)
 80014a6:	6013      	str	r3, [r2, #0]
	         if(pwm<=0){pwm=0;}
 80014a8:	4b69      	ldr	r3, [pc, #420]	@ (8001650 <StartTask02+0x1dc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <StartTask02+0x42>
 80014b0:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <StartTask02+0x1dc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

	         TIM1->CCR1=pwm;
 80014b6:	4a67      	ldr	r2, [pc, #412]	@ (8001654 <StartTask02+0x1e0>)
 80014b8:	4b65      	ldr	r3, [pc, #404]	@ (8001650 <StartTask02+0x1dc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6353      	str	r3, [r2, #52]	@ 0x34
	         TIM1->CCR2=pwm;
 80014be:	4a65      	ldr	r2, [pc, #404]	@ (8001654 <StartTask02+0x1e0>)
 80014c0:	4b63      	ldr	r3, [pc, #396]	@ (8001650 <StartTask02+0x1dc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6393      	str	r3, [r2, #56]	@ 0x38
	         TIM1->CCR3=pwm;
 80014c6:	4a63      	ldr	r2, [pc, #396]	@ (8001654 <StartTask02+0x1e0>)
 80014c8:	4b61      	ldr	r3, [pc, #388]	@ (8001650 <StartTask02+0x1dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	63d3      	str	r3, [r2, #60]	@ 0x3c

		  }

		  if(auto_mode==1){
 80014ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <StartTask02+0x1d4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d030      	beq.n	8001538 <StartTask02+0xc4>

			  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 80014d6:	f000 fffd 	bl	80024d4 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001658 <StartTask02+0x1e4>)
 80014de:	8812      	ldrh	r2, [r2, #0]
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014e6:	d327      	bcc.n	8001538 <StartTask02+0xc4>
	           pwm=pwm+5;
 80014e8:	4b59      	ldr	r3, [pc, #356]	@ (8001650 <StartTask02+0x1dc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3305      	adds	r3, #5
 80014ee:	4a58      	ldr	r2, [pc, #352]	@ (8001650 <StartTask02+0x1dc>)
 80014f0:	6013      	str	r3, [r2, #0]
	           if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 80014f2:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <StartTask02+0x1e0>)
 80014f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f6:	4b56      	ldr	r3, [pc, #344]	@ (8001650 <StartTask02+0x1dc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d803      	bhi.n	8001506 <StartTask02+0x92>
 80014fe:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <StartTask02+0x1e0>)
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	4a53      	ldr	r2, [pc, #332]	@ (8001650 <StartTask02+0x1dc>)
 8001504:	6013      	str	r3, [r2, #0]
	           if(pwm<=0){pwm=0;}
 8001506:	4b52      	ldr	r3, [pc, #328]	@ (8001650 <StartTask02+0x1dc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <StartTask02+0xa0>
 800150e:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <StartTask02+0x1dc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

	           TIM1->CCR1=pwm;
 8001514:	4a4f      	ldr	r2, [pc, #316]	@ (8001654 <StartTask02+0x1e0>)
 8001516:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <StartTask02+0x1dc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6353      	str	r3, [r2, #52]	@ 0x34
	           TIM1->CCR2=pwm;
 800151c:	4a4d      	ldr	r2, [pc, #308]	@ (8001654 <StartTask02+0x1e0>)
 800151e:	4b4c      	ldr	r3, [pc, #304]	@ (8001650 <StartTask02+0x1dc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6393      	str	r3, [r2, #56]	@ 0x38
	           TIM1->CCR3=pwm;
 8001524:	4a4b      	ldr	r2, [pc, #300]	@ (8001654 <StartTask02+0x1e0>)
 8001526:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <StartTask02+0x1dc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	63d3      	str	r3, [r2, #60]	@ 0x3c


			  auto_mode_timer=HAL_GetTick();}
 800152c:	f000 ffd2 	bl	80024d4 <HAL_GetTick>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b48      	ldr	r3, [pc, #288]	@ (8001658 <StartTask02+0x1e4>)
 8001536:	801a      	strh	r2, [r3, #0]
		  }



	TIM1->ARR= rcv_data_reg[4];
 8001538:	4b44      	ldr	r3, [pc, #272]	@ (800164c <StartTask02+0x1d8>)
 800153a:	891a      	ldrh	r2, [r3, #8]
 800153c:	4b45      	ldr	r3, [pc, #276]	@ (8001654 <StartTask02+0x1e0>)
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
	data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 8001540:	4b46      	ldr	r3, [pc, #280]	@ (800165c <StartTask02+0x1e8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4843      	ldr	r0, [pc, #268]	@ (8001654 <StartTask02+0x1e0>)
 8001548:	f7ff fdec 	bl	8001124 <calculateTimerFrequency>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <StartTask02+0x1ec>)
 8001552:	801a      	strh	r2, [r3, #0]
	data_reg[2]=rpm;
 8001554:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <StartTask02+0x1f0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <StartTask02+0x1ec>)
 800155c:	809a      	strh	r2, [r3, #4]
    osDelay(100);
 800155e:	2064      	movs	r0, #100	@ 0x64
 8001560:	f007 f884 	bl	800866c <osDelay>
    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 8001564:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <StartTask02+0x1e8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	483a      	ldr	r0, [pc, #232]	@ (8001654 <StartTask02+0x1e0>)
 800156c:	f7ff fdda 	bl	8001124 <calculateTimerFrequency>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b3a      	ldr	r3, [pc, #232]	@ (8001660 <StartTask02+0x1ec>)
 8001576:	801a      	strh	r2, [r3, #0]
   	data_reg[1]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 8001578:	4b38      	ldr	r3, [pc, #224]	@ (800165c <StartTask02+0x1e8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4835      	ldr	r0, [pc, #212]	@ (8001654 <StartTask02+0x1e0>)
 8001580:	f7ff fdd0 	bl	8001124 <calculateTimerFrequency>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <StartTask02+0x1ec>)
 800158a:	805a      	strh	r2, [r3, #2]
   	    data_reg[2]=rpm;       //Скорость об.мин
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <StartTask02+0x1f0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <StartTask02+0x1ec>)
 8001594:	809a      	strh	r2, [r3, #4]
   	    data_reg[3]=TIM1->ARR; //Период таймера 1
 8001596:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <StartTask02+0x1e0>)
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <StartTask02+0x1ec>)
 800159e:	80da      	strh	r2, [r3, #6]
   	    data_reg[4]=pwm;       //Значение ШИМ
 80015a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001650 <StartTask02+0x1dc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <StartTask02+0x1ec>)
 80015a8:	811a      	strh	r2, [r3, #8]


    coil_1= (rcv_data_reg[7]>>1)&0x01;
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <StartTask02+0x1d8>)
 80015ac:	89db      	ldrh	r3, [r3, #14]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <StartTask02+0x1f4>)
 80015c2:	701a      	strb	r2, [r3, #0]
    coil_2= (rcv_data_reg[7]>>2)&0x01;
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <StartTask02+0x1d8>)
 80015c6:	89db      	ldrh	r3, [r3, #14]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <StartTask02+0x1f8>)
 80015dc:	701a      	strb	r2, [r3, #0]
    coil_3= (rcv_data_reg[7]>>3)&0x01;
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <StartTask02+0x1d8>)
 80015e0:	89db      	ldrh	r3, [r3, #14]
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <StartTask02+0x1fc>)
 80015f6:	701a      	strb	r2, [r3, #0]
    coil_4= (rcv_data_reg[7]>>4)&0x01;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <StartTask02+0x1d8>)
 80015fa:	89db      	ldrh	r3, [r3, #14]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <StartTask02+0x200>)
 8001610:	701a      	strb	r2, [r3, #0]
 auto_mode= (rcv_data_reg[7]>>5)&0x01;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <StartTask02+0x1d8>)
 8001614:	89db      	ldrh	r3, [r3, #14]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b29b      	uxth	r3, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <StartTask02+0x1d4>)
 800162a:	701a      	strb	r2, [r3, #0]
    pwr_on= (rcv_data_reg[7]>>6)&0x01;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <StartTask02+0x1d8>)
 800162e:	89db      	ldrh	r3, [r3, #14]
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	b29b      	uxth	r3, r3
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <StartTask02+0x204>)
 8001644:	701a      	strb	r2, [r3, #0]
	  if(auto_mode==0){
 8001646:	e719      	b.n	800147c <StartTask02+0x8>
 8001648:	2000021b 	.word	0x2000021b
 800164c:	200001e8 	.word	0x200001e8
 8001650:	2000020c 	.word	0x2000020c
 8001654:	40010000 	.word	0x40010000
 8001658:	2000020a 	.word	0x2000020a
 800165c:	20000004 	.word	0x20000004
 8001660:	200001c8 	.word	0x200001c8
 8001664:	20000210 	.word	0x20000210
 8001668:	20000214 	.word	0x20000214
 800166c:	20000215 	.word	0x20000215
 8001670:	20000216 	.word	0x20000216
 8001674:	20000217 	.word	0x20000217
 8001678:	2000021c 	.word	0x2000021c

0800167c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800168e:	f001 faf9 	bl	8002c84 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001696:	2300      	movs	r3, #0
 8001698:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800169e:	231f      	movs	r3, #31
 80016a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016a2:	2387      	movs	r3, #135	@ 0x87
 80016a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016aa:	2300      	movs	r3, #0
 80016ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016be:	463b      	mov	r3, r7
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fb17 	bl	8002cf4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016c6:	2004      	movs	r0, #4
 80016c8:	f001 faf4 	bl	8002cb4 <HAL_MPU_Enable>

}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80016e6:	f000 fee1 	bl	80024ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40002000 	.word	0x40002000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8001710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001714:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	74fb      	strb	r3, [r7, #19]
 800171a:	e022      	b.n	8001762 <calcCRC16ModBus+0x5e>
		temp = temp ^ buffer[i];
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4053      	eors	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800172c:	2301      	movs	r3, #1
 800172e:	74bb      	strb	r3, [r7, #18]
 8001730:	e011      	b.n	8001756 <calcCRC16ModBus+0x52>
			flag = temp & 0x0001;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
			if (flag)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <calcCRC16ModBus+0x4c>
				temp ^= 0xA001;
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800174c:	4053      	eors	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001750:	7cbb      	ldrb	r3, [r7, #18]
 8001752:	3301      	adds	r3, #1
 8001754:	74bb      	strb	r3, [r7, #18]
 8001756:	7cbb      	ldrb	r3, [r7, #18]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d9ea      	bls.n	8001732 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	3301      	adds	r3, #1
 8001760:	74fb      	strb	r3, [r7, #19]
 8001762:	7cfa      	ldrb	r2, [r7, #19]
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3d8      	bcc.n	800171c <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	b29b      	uxth	r3, r3
 800177e:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	b29b      	uxth	r3, r3

}
 8001784:	4618      	mov	r0, r3
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4619      	mov	r1, r3
 80017a2:	68b8      	ldr	r0, [r7, #8]
 80017a4:	f7ff ffae 	bl	8001704 <calcCRC16ModBus>
 80017a8:	4603      	mov	r3, r0
 80017aa:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	3301      	adds	r3, #1
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	8afa      	ldrh	r2, [r7, #22]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80017ba:	8afb      	ldrh	r3, [r7, #22]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	b299      	uxth	r1, r3
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]

    TX_2;
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d0:	480a      	ldr	r0, [pc, #40]	@ (80017fc <sendModBusRequest+0x6c>)
 80017d2:	f002 f9f3 	bl	8003bbc <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3302      	adds	r3, #2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f005 fb50 	bl	8006e88 <HAL_UART_Transmit_DMA>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <sendModBusRequest+0x62>

    //	LED_1_OFF;

	        Error_Handler();
 80017ee:	f7ff ff83 	bl	80016f8 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020400 	.word	0x40020400

08001800 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	4613      	mov	r3, r2
 800180e:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <sendError+0x5c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181c:	b2db      	uxtb	r3, r3
 800181e:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2103      	movs	r1, #3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff6a 	bl	8001704 <calcCRC16ModBus>
 8001830:	4603      	mov	r3, r0
 8001832:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	b29b      	uxth	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2205      	movs	r2, #5
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff9f 	bl	8001790 <sendModBusRequest>

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000

08001860 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800186a:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <handleReadHoldingRegs+0xe4>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	b21b      	sxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <handleReadHoldingRegs+0xe4>)
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001880:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <handleReadHoldingRegs+0xe4>)
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	b21b      	sxth	r3, r3
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <handleReadHoldingRegs+0xe4>)
 800188c:	795b      	ldrb	r3, [r3, #5]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 8001896:	8afa      	ldrh	r2, [r7, #22]
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	4413      	add	r3, r2
 800189c:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	2b7d      	cmp	r3, #125	@ 0x7d
 80018a2:	d905      	bls.n	80018b0 <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80018a4:	2103      	movs	r1, #3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa26 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e045      	b.n	800193c <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80018b4:	d905      	bls.n	80018c2 <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80018b6:	2102      	movs	r1, #2
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa1d 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 80018be:	2300      	movs	r3, #0
 80018c0:	e03c      	b.n	800193c <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <handleReadHoldingRegs+0xe8>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <handleReadHoldingRegs+0xec>)
 80018c8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <handleReadHoldingRegs+0xe4>)
 80018cc:	785a      	ldrb	r2, [r3, #1]
 80018ce:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <handleReadHoldingRegs+0xec>)
 80018d0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <handleReadHoldingRegs+0xec>)
 80018dc:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80018de:	2303      	movs	r3, #3
 80018e0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e01d      	b.n	8001924 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b299      	uxth	r1, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	613a      	str	r2, [r7, #16]
 80018fc:	b2c9      	uxtb	r1, r1
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <handleReadHoldingRegs+0xec>)
 8001900:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001902:	8afb      	ldrh	r3, [r7, #22]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	613a      	str	r2, [r7, #16]
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <handleReadHoldingRegs+0xec>)
 8001916:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001918:	8afb      	ldrh	r3, [r7, #22]
 800191a:	3301      	adds	r3, #1
 800191c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	897b      	ldrh	r3, [r7, #10]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbdd      	blt.n	80018e8 <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4906      	ldr	r1, [pc, #24]	@ (800194c <handleReadHoldingRegs+0xec>)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff2b 	bl	8001790 <sendModBusRequest>
	return 1;
 800193a:	2301      	movs	r3, #1

}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000088 	.word	0x20000088
 8001948:	20000000 	.word	0x20000000
 800194c:	200000c8 	.word	0x200000c8

08001950 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <handleReadInputRegs+0xe8>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	b21b      	sxth	r3, r3
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b34      	ldr	r3, [pc, #208]	@ (8001a38 <handleReadInputRegs+0xe8>)
 8001966:	78db      	ldrb	r3, [r3, #3]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21b      	sxth	r3, r3
 800196e:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <handleReadInputRegs+0xe8>)
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	b21b      	sxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <handleReadInputRegs+0xe8>)
 800197c:	795b      	ldrb	r3, [r3, #5]
 800197e:	b21b      	sxth	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b21b      	sxth	r3, r3
 8001984:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001986:	8afa      	ldrh	r2, [r7, #22]
 8001988:	897b      	ldrh	r3, [r7, #10]
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	2b7d      	cmp	r3, #125	@ 0x7d
 8001996:	d905      	bls.n	80019a4 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001998:	2103      	movs	r1, #3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f9ac 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e045      	b.n	8001a30 <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	2b3c      	cmp	r3, #60	@ 0x3c
 80019a8:	d905      	bls.n	80019b6 <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80019aa:	2102      	movs	r1, #2
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f9a3 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e03c      	b.n	8001a30 <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80019b6:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <handleReadInputRegs+0xec>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <handleReadInputRegs+0xf0>)
 80019bc:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <handleReadInputRegs+0xe8>)
 80019c0:	785a      	ldrb	r2, [r3, #1]
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <handleReadInputRegs+0xf0>)
 80019c4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <handleReadInputRegs+0xf0>)
 80019d0:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80019d2:	2303      	movs	r3, #3
 80019d4:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e01d      	b.n	8001a18 <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80019dc:	8afb      	ldrh	r3, [r7, #22]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	b299      	uxth	r1, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	613a      	str	r2, [r7, #16]
 80019f0:	b2c9      	uxtb	r1, r1
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <handleReadInputRegs+0xf0>)
 80019f4:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80019f6:	8afb      	ldrh	r3, [r7, #22]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	8819      	ldrh	r1, [r3, #0]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	613a      	str	r2, [r7, #16]
 8001a06:	b2c9      	uxtb	r1, r1
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <handleReadInputRegs+0xf0>)
 8001a0a:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	897b      	ldrh	r3, [r7, #10]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbdd      	blt.n	80019dc <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	4906      	ldr	r1, [pc, #24]	@ (8001a40 <handleReadInputRegs+0xf0>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff feb1 	bl	8001790 <sendModBusRequest>
	return 1;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000088 	.word	0x20000088
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	200000c8 	.word	0x200000c8

08001a44 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <handleReadCoils+0xc8>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <handleReadCoils+0xc8>)
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <handleReadCoils+0xc8>)
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <handleReadCoils+0xc8>)
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <handleReadCoils+0x44>
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a86:	d905      	bls.n	8001a94 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001a88:	2103      	movs	r1, #3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f934 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e037      	b.n	8001b04 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001a94:	89fa      	ldrh	r2, [r7, #14]
 8001a96:	89bb      	ldrh	r3, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8001aa4:	d905      	bls.n	8001ab2 <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f925 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e028      	b.n	8001b04 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4815      	ldr	r0, [pc, #84]	@ (8001b10 <handleReadCoils+0xcc>)
 8001aba:	f009 faf7 	bl	800b0ac <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <handleReadCoils+0xd0>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <handleReadCoils+0xcc>)
 8001ac4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <handleReadCoils+0xc8>)
 8001ac8:	785a      	ldrb	r2, [r3, #1]
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <handleReadCoils+0xcc>)
 8001acc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001ace:	89bb      	ldrh	r3, [r7, #12]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	89ba      	ldrh	r2, [r7, #12]
 8001ad8:	f002 0207 	and.w	r2, r2, #7
 8001adc:	b292      	uxth	r2, r2
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2201      	movne	r2, #1
 8001ae4:	2200      	moveq	r2, #0
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <handleReadCoils+0xcc>)
 8001aee:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001af0:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <handleReadCoils+0xcc>)
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	3303      	adds	r3, #3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <handleReadCoils+0xcc>)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fe47 	bl	8001790 <sendModBusRequest>
	return 1;
 8001b02:	2301      	movs	r3, #1

}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000088 	.word	0x20000088
 8001b10:	200000c8 	.word	0x200000c8
 8001b14:	20000000 	.word	0x20000000

08001b18 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <handleReadDiscreteInputs+0xd0>)
 8001b24:	789b      	ldrb	r3, [r3, #2]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <handleReadDiscreteInputs+0xd0>)
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <handleReadDiscreteInputs+0xd0>)
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <handleReadDiscreteInputs+0xd0>)
 8001b44:	795b      	ldrb	r3, [r3, #5]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001b4e:	89bb      	ldrh	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <handleReadDiscreteInputs+0x44>
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b5a:	d905      	bls.n	8001b68 <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8ca 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e03a      	b.n	8001bde <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001b68:	89fa      	ldrh	r2, [r7, #14]
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b78:	d905      	bls.n	8001b86 <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8bb 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e02b      	b.n	8001bde <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 8001b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4817      	ldr	r0, [pc, #92]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001b8e:	f009 fa8d 	bl	800b0ac <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <handleReadDiscreteInputs+0xd8>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001b98:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <handleReadDiscreteInputs+0xd0>)
 8001b9c:	785a      	ldrb	r2, [r3, #1]
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001ba0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	89ba      	ldrh	r2, [r7, #12]
 8001bac:	f002 0207 	and.w	r2, r2, #7
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2201      	movne	r2, #1
 8001bb8:	2200      	moveq	r2, #0
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001bc2:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001bca:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4905      	ldr	r1, [pc, #20]	@ (8001bec <handleReadDiscreteInputs+0xd4>)
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fdda 	bl	8001790 <sendModBusRequest>
	return 1;
 8001bdc:	2301      	movs	r3, #1

}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000088 	.word	0x20000088
 8001bec:	200000c8 	.word	0x200000c8
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c0a:	78db      	ldrb	r3, [r3, #3]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c16:	791b      	ldrb	r3, [r3, #4]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c20:	795b      	ldrb	r3, [r3, #5]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001c2a:	897b      	ldrh	r3, [r7, #10]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <handleWriteMulyipleHandlingRegister+0x42>
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c34:	d905      	bls.n	8001c42 <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001c36:	2103      	movs	r1, #3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f85d 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e050      	b.n	8001ce4 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001c42:	8afa      	ldrh	r2, [r7, #22]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c52:	d905      	bls.n	8001c60 <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001c54:	2102      	movs	r1, #2
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f84e 	bl	8001cf8 <sendModbusException>
		return MODBUS_ERROR;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e041      	b.n	8001ce4 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001c60:	2307      	movs	r3, #7
 8001c62:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e01a      	b.n	8001ca0 <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	613a      	str	r2, [r7, #16]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1c59      	adds	r1, r3, #1
 8001c7e:	6139      	str	r1, [r7, #16]
 8001c80:	491a      	ldr	r1, [pc, #104]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b219      	sxth	r1, r3
 8001c8a:	8afb      	ldrh	r3, [r7, #22]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	82fa      	strh	r2, [r7, #22]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b28a      	uxth	r2, r1
 8001c98:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbe0      	blt.n	8001c6a <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cae:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cb2:	785a      	ldrb	r2, [r3, #1]
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cb6:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cba:	789a      	ldrb	r2, [r3, #2]
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cbe:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cc2:	78da      	ldrb	r2, [r3, #3]
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cc6:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cca:	791a      	ldrb	r2, [r3, #4]
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cce:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cd2:	795a      	ldrb	r2, [r3, #5]
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cd6:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001cd8:	2206      	movs	r2, #6
 8001cda:	4906      	ldr	r1, [pc, #24]	@ (8001cf4 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fd57 	bl	8001790 <sendModBusRequest>
	return 1;   // success
 8001ce2:	2301      	movs	r3, #1

}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000088 	.word	0x20000088
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	200000c8 	.word	0x200000c8

08001cf8 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <sendModbusException+0x3c>)
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <sendModbusException+0x40>)
 8001d0a:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <sendModbusException+0x3c>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <sendModbusException+0x40>)
 8001d18:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001d1a:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <sendModbusException+0x40>)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001d20:	2203      	movs	r2, #3
 8001d22:	4905      	ldr	r1, [pc, #20]	@ (8001d38 <sendModbusException+0x40>)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fd33 	bl	8001790 <sendModBusRequest>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000088 	.word	0x20000088
 8001d38:	200000c8 	.word	0x200000c8

08001d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_MspInit+0x5c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	210f      	movs	r1, #15
 8001d76:	f06f 0001 	mvn.w	r0, #1
 8001d7a:	f000 ff4b 	bl	8002c14 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	2005      	movs	r0, #5
 8001d84:	f000 ff46 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f000 ff5f 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <HAL_ADC_MspInit+0x74>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d123      	bne.n	8001e06 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a0e      	ldr	r2, [pc, #56]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <HAL_ADC_MspInit+0x78>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dee:	231f      	movs	r3, #31
 8001df0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <HAL_ADC_MspInit+0x7c>)
 8001e02:	f001 fc2b 	bl	800365c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012000 	.word	0x40012000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <HAL_SPI_MspInit+0xb4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d143      	bne.n	8001ec6 <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_SPI_MspInit+0xb8>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e86:	2320      	movs	r3, #32
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e96:	2305      	movs	r3, #5
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <HAL_SPI_MspInit+0xbc>)
 8001ea2:	f001 fbdb 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ea6:	2330      	movs	r3, #48	@ 0x30
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4806      	ldr	r0, [pc, #24]	@ (8001edc <HAL_SPI_MspInit+0xc0>)
 8001ec2:	f001 fbcb 	bl	800365c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	@ 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2f      	ldr	r2, [pc, #188]	@ (8001fbc <HAL_TIM_Base_MspInit+0xdc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10c      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f1a:	e04a      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d145      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a25      	ldr	r2, [pc, #148]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480e      	ldr	r0, [pc, #56]	@ (8001fc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001f8c:	f001 fb66 	bl	800365c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xe8>)
 8001fae:	f001 fb55 	bl	800365c <HAL_GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	@ 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	@ (800206c <HAL_TIM_MspPostInit+0xa0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d139      	bne.n	8002062 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800201e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002030:	2301      	movs	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	480e      	ldr	r0, [pc, #56]	@ (8002074 <HAL_TIM_MspPostInit+0xa8>)
 800203c:	f001 fb0e 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002040:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4806      	ldr	r0, [pc, #24]	@ (8002078 <HAL_TIM_MspPostInit+0xac>)
 800205e:	f001 fafd 	bl	800365c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	@ 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0aa      	sub	sp, #168	@ 0xa8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2280      	movs	r2, #128	@ 0x80
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f009 f805 	bl	800b0ac <memset>
  if(huart->Instance==USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a54      	ldr	r2, [pc, #336]	@ (80021f8 <HAL_UART_MspInit+0x17c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f040 80a0 	bne.w	80021ee <HAL_UART_MspInit+0x172>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020ae:	2340      	movs	r3, #64	@ 0x40
 80020b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020b2:	2300      	movs	r3, #0
 80020b4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fafa 	bl	80046b4 <HAL_RCCEx_PeriphCLKConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020c6:	f7ff fb17 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ca:	4b4c      	ldr	r3, [pc, #304]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a45      	ldr	r2, [pc, #276]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_UART_MspInit+0x180>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23c0      	movs	r3, #192	@ 0xc0
 80020fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002112:	2307      	movs	r3, #7
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800211c:	4619      	mov	r1, r3
 800211e:	4838      	ldr	r0, [pc, #224]	@ (8002200 <HAL_UART_MspInit+0x184>)
 8002120:	f001 fa9c 	bl	800365c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002124:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002126:	4a38      	ldr	r2, [pc, #224]	@ (8002208 <HAL_UART_MspInit+0x18c>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002130:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002132:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002138:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	4b31      	ldr	r3, [pc, #196]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002144:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002146:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214c:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002152:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800215a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800215e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002160:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002166:	4827      	ldr	r0, [pc, #156]	@ (8002204 <HAL_UART_MspInit+0x188>)
 8002168:	f000 fe04 	bl	8002d74 <HAL_DMA_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002172:	f7ff fac1 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800217a:	675a      	str	r2, [r3, #116]	@ 0x74
 800217c:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_UART_MspInit+0x188>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_UART_MspInit+0x190>)
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_UART_MspInit+0x194>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_UART_MspInit+0x190>)
 800218a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800218e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002190:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_UART_MspInit+0x190>)
 8002192:	2240      	movs	r2, #64	@ 0x40
 8002194:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_UART_MspInit+0x190>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_UART_MspInit+0x190>)
 800219e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b13      	ldr	r3, [pc, #76]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021c2:	4812      	ldr	r0, [pc, #72]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021c4:	f000 fdd6 	bl	8002d74 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80021ce:	f7ff fa93 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_UART_MspInit+0x190>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	2025      	movs	r0, #37	@ 0x25
 80021e4:	f000 fd16 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021e8:	2025      	movs	r0, #37	@ 0x25
 80021ea:	f000 fd2f 	bl	8002c4c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80021ee:	bf00      	nop
 80021f0:	37a8      	adds	r7, #168	@ 0xa8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40011000 	.word	0x40011000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400
 8002204:	200003ec 	.word	0x200003ec
 8002208:	40026440 	.word	0x40026440
 800220c:	2000044c 	.word	0x2000044c
 8002210:	400264b8 	.word	0x400264b8

08002214 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0e      	ldr	r2, [pc, #56]	@ (800225c <HAL_UART_MspDeInit+0x48>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d116      	bne.n	8002254 <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_UART_MspDeInit+0x4c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <HAL_UART_MspDeInit+0x4c>)
 800222c:	f023 0310 	bic.w	r3, r3, #16
 8002230:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8002232:	21c0      	movs	r1, #192	@ 0xc0
 8002234:	480b      	ldr	r0, [pc, #44]	@ (8002264 <HAL_UART_MspDeInit+0x50>)
 8002236:	f001 fbad 	bl	8003994 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fe46 	bl	8002ed0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fe41 	bl	8002ed0 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800224e:	2025      	movs	r0, #37	@ 0x25
 8002250:	f000 fd0a 	bl	8002c68 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40011000 	.word	0x40011000
 8002260:	40023800 	.word	0x40023800
 8002264:	40020400 	.word	0x40020400

08002268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	@ 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002278:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <HAL_InitTick+0xe0>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	4a32      	ldr	r2, [pc, #200]	@ (8002348 <HAL_InitTick+0xe0>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002282:	6413      	str	r3, [r2, #64]	@ 0x40
 8002284:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <HAL_InitTick+0xe0>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002290:	f107 0210 	add.w	r2, r7, #16
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f002 f9d8 	bl	8004650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022aa:	f002 f9a9 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 80022ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80022b0:	e004      	b.n	80022bc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022b2:	f002 f9a5 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 80022b6:	4603      	mov	r3, r0
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022be:	4a23      	ldr	r2, [pc, #140]	@ (800234c <HAL_InitTick+0xe4>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	3b01      	subs	r3, #1
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_InitTick+0xe8>)
 80022cc:	4a21      	ldr	r2, [pc, #132]	@ (8002354 <HAL_InitTick+0xec>)
 80022ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <HAL_InitTick+0xe8>)
 80022d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022d6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80022d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_InitTick+0xe8>)
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <HAL_InitTick+0xe8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <HAL_InitTick+0xe8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_InitTick+0xe8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80022f0:	4817      	ldr	r0, [pc, #92]	@ (8002350 <HAL_InitTick+0xe8>)
 80022f2:	f002 fdd4 	bl	8004e9e <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11b      	bne.n	800233c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002304:	4812      	ldr	r0, [pc, #72]	@ (8002350 <HAL_InitTick+0xe8>)
 8002306:	f002 fe21 	bl	8004f4c <HAL_TIM_Base_Start_IT>
 800230a:	4603      	mov	r3, r0
 800230c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002314:	2b00      	cmp	r3, #0
 8002316:	d111      	bne.n	800233c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002318:	202d      	movs	r0, #45	@ 0x2d
 800231a:	f000 fc97 	bl	8002c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d808      	bhi.n	8002336 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	202d      	movs	r0, #45	@ 0x2d
 800232a:	f000 fc73 	bl	8002c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <HAL_InitTick+0xf0>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e002      	b.n	800233c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800233c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002340:	4618      	mov	r0, r3
 8002342:	3738      	adds	r7, #56	@ 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	431bde83 	.word	0x431bde83
 8002350:	200004b4 	.word	0x200004b4
 8002354:	40002000 	.word	0x40002000
 8002358:	2000000c 	.word	0x2000000c

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <NMI_Handler+0x4>

08002364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <MemManage_Handler+0x4>

08002374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <UsageFault_Handler+0x4>

08002384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f001 fc23 	bl	8003bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}

080023ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f001 fc1c 	bl	8003bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 80023c0:	2004      	movs	r0, #4
 80023c2:	f001 fc15 	bl	8003bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <USART1_IRQHandler+0x10>)
 80023d2:	f004 fe67 	bl	80070a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000364 	.word	0x20000364

080023e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80023e6:	f003 f9b7 	bl	8005758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200004b4 	.word	0x200004b4

080023f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA2_Stream2_IRQHandler+0x10>)
 80023fa:	f000 feb9 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200003ec 	.word	0x200003ec

08002408 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <DMA2_Stream7_IRQHandler+0x10>)
 800240e:	f000 feaf 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000044c 	.word	0x2000044c

0800241c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	@ (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002444:	f7ff ffea 	bl	800241c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	@ (800247c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	@ (8002480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	@ (800248c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246e:	f008 fe83 	bl	800b178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002472:	f7fe fa37 	bl	80008e4 <main>
  bx  lr    
 8002476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002478:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002484:	0800b34c 	.word	0x0800b34c
  ldr r2, =_sbss
 8002488:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800248c:	20005024 	.word	0x20005024

08002490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC_IRQHandler>

08002492 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f000 fbb1 	bl	8002bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249c:	200f      	movs	r0, #15
 800249e:	f7ff fee3 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a2:	f7ff fc4b 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000010 	.word	0x20000010
 80024d0:	20000500 	.word	0x20000500

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000500 	.word	0x20000500

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000010 	.word	0x20000010

08002534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e031      	b.n	80025ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fc22 	bl	8001d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_ADC_Init+0x84>)
 8002578:	4013      	ands	r3, r2
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f970 	bl	8002868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40
 800259e:	e001      	b.n	80025a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	ffffeefd 	.word	0xffffeefd

080025bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e136      	b.n	8002846 <HAL_ADC_ConfigChannel+0x28a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d93a      	bls.n	800265e <HAL_ADC_ConfigChannel+0xa2>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025f0:	d035      	beq.n	800265e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68d9      	ldr	r1, [r3, #12]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	3b1e      	subs	r3, #30
 8002608:	2207      	movs	r2, #7
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8d      	ldr	r2, [pc, #564]	@ (8002854 <HAL_ADC_ConfigChannel+0x298>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10a      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	061a      	lsls	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002636:	e035      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	4618      	mov	r0, r3
 800264a:	4603      	mov	r3, r0
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4403      	add	r3, r0
 8002650:	3b1e      	subs	r3, #30
 8002652:	409a      	lsls	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265c:	e022      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	2207      	movs	r2, #7
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6919      	ldr	r1, [r3, #16]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	4618      	mov	r0, r3
 8002694:	4603      	mov	r3, r0
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4403      	add	r3, r0
 800269a:	409a      	lsls	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b06      	cmp	r3, #6
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b05      	subs	r3, #5
 80026be:	221f      	movs	r2, #31
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b05      	subs	r3, #5
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80026f4:	e04c      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d824      	bhi.n	8002748 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b23      	subs	r3, #35	@ 0x23
 8002710:	221f      	movs	r2, #31
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	400a      	ands	r2, r1
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b23      	subs	r3, #35	@ 0x23
 800273a:	fa00 f203 	lsl.w	r2, r0, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	631a      	str	r2, [r3, #48]	@ 0x30
 8002746:	e023      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3b41      	subs	r3, #65	@ 0x41
 800275a:	221f      	movs	r2, #31
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43da      	mvns	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	400a      	ands	r2, r1
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b41      	subs	r3, #65	@ 0x41
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a30      	ldr	r2, [pc, #192]	@ (8002858 <HAL_ADC_ConfigChannel+0x29c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1f4>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a28      	ldr	r2, [pc, #160]	@ (8002858 <HAL_ADC_ConfigChannel+0x29c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10f      	bne.n	80027da <HAL_ADC_ConfigChannel+0x21e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b12      	cmp	r3, #18
 80027c0:	d10b      	bne.n	80027da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027c2:	4b26      	ldr	r3, [pc, #152]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a25      	ldr	r2, [pc, #148]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ce:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a22      	ldr	r2, [pc, #136]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <HAL_ADC_ConfigChannel+0x29c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d12b      	bne.n	800283c <HAL_ADC_ConfigChannel+0x280>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <HAL_ADC_ConfigChannel+0x298>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x23a>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b11      	cmp	r3, #17
 80027f4:	d122      	bne.n	800283c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a18      	ldr	r2, [pc, #96]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 80027fc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002800:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_ADC_ConfigChannel+0x2a0>)
 8002808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800280c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a10      	ldr	r2, [pc, #64]	@ (8002854 <HAL_ADC_ConfigChannel+0x298>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_ADC_ConfigChannel+0x2a4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <HAL_ADC_ConfigChannel+0x2a8>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9a      	lsrs	r2, r3, #18
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800282e:	e002      	b.n	8002836 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3b01      	subs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	10000012 	.word	0x10000012
 8002858:	40012000 	.word	0x40012000
 800285c:	40012300 	.word	0x40012300
 8002860:	20000008 	.word	0x20000008
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002870:	4b78      	ldr	r3, [pc, #480]	@ (8002a54 <ADC_Init+0x1ec>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a77      	ldr	r2, [pc, #476]	@ (8002a54 <ADC_Init+0x1ec>)
 8002876:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800287a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800287c:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <ADC_Init+0x1ec>)
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4973      	ldr	r1, [pc, #460]	@ (8002a54 <ADC_Init+0x1ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f6:	4a58      	ldr	r2, [pc, #352]	@ (8002a58 <ADC_Init+0x1f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800290a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800292c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e00f      	b.n	8002962 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0202 	bic.w	r2, r2, #2
 8002970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	005a      	lsls	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	3b01      	subs	r3, #1
 80029bc:	035a      	lsls	r2, r3, #13
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e007      	b.n	80029d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	051a      	lsls	r2, r3, #20
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a1a:	025a      	lsls	r2, r3, #9
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	029a      	lsls	r2, r3, #10
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40012300 	.word	0x40012300
 8002a58:	0f000001 	.word	0x0f000001

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <__NVIC_SetPriorityGrouping+0x40>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <__NVIC_SetPriorityGrouping+0x40>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00
 8002aa0:	05fa0000 	.word	0x05fa0000

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db12      	blt.n	8002b34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	490a      	ldr	r1, [pc, #40]	@ (8002b40 <__NVIC_DisableIRQ+0x44>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	3320      	adds	r3, #32
 8002b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b28:	f3bf 8f4f 	dsb	sy
}
 8002b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b2e:	f3bf 8f6f 	isb	sy
}
 8002b32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	@ (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	@ (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff28 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c26:	f7ff ff3d 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7ff ffb1 	bl	8002b98 <NVIC_EncodePriority>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff80 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff30 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff40 	bl	8002afc <__NVIC_DisableIRQ>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c88:	f3bf 8f5f 	dmb	sy
}
 8002c8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <HAL_MPU_Disable+0x28>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_MPU_Disable+0x28>)
 8002c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c98:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_MPU_Disable+0x2c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	e000ed90 	.word	0xe000ed90

08002cb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <HAL_MPU_Enable+0x38>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_MPU_Enable+0x3c>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <HAL_MPU_Enable+0x3c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cd2:	f3bf 8f4f 	dsb	sy
}
 8002cd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cd8:	f3bf 8f6f 	isb	sy
}
 8002cdc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed90 	.word	0xe000ed90
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	785a      	ldrb	r2, [r3, #1]
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_MPU_ConfigRegion+0x7c>)
 8002d02:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d04:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_MPU_ConfigRegion+0x7c>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_MPU_ConfigRegion+0x7c>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d10:	4a17      	ldr	r2, [pc, #92]	@ (8002d70 <HAL_MPU_ConfigRegion+0x7c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7b1b      	ldrb	r3, [r3, #12]
 8002d1c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7adb      	ldrb	r3, [r3, #11]
 8002d22:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7a9b      	ldrb	r3, [r3, #10]
 8002d2a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7b5b      	ldrb	r3, [r3, #13]
 8002d32:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7b9b      	ldrb	r3, [r3, #14]
 8002d3a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7bdb      	ldrb	r3, [r3, #15]
 8002d42:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7a5b      	ldrb	r3, [r3, #9]
 8002d4a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7a1b      	ldrb	r3, [r3, #8]
 8002d52:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d54:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d5c:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d5e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d60:	6113      	str	r3, [r2, #16]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed90 	.word	0xe000ed90

08002d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff fba8 	bl	80024d4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e099      	b.n	8002ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db0:	e00f      	b.n	8002dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db2:	f7ff fb8f 	bl	80024d4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d908      	bls.n	8002dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e078      	b.n	8002ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e8      	bne.n	8002db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_DMA_Init+0x158>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	4313      	orrs	r3, r2
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d117      	bne.n	8002e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb73 	bl	8003564 <DMA_CheckFifoParam>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2240      	movs	r2, #64	@ 0x40
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e92:	2301      	movs	r3, #1
 8002e94:	e016      	b.n	8002ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb2a 	bl	80034f8 <DMA_CalcBaseAndBitshift>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	223f      	movs	r2, #63	@ 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	e010803f 	.word	0xe010803f

08002ed0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e050      	b.n	8002f84 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d101      	bne.n	8002ef2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e048      	b.n	8002f84 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2221      	movs	r2, #33	@ 0x21
 8002f30:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fae0 	bl	80034f8 <DMA_CalcBaseAndBitshift>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	223f      	movs	r2, #63	@ 0x3f
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e048      	b.n	8003044 <HAL_DMA_Start_IT+0xb8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d137      	bne.n	8003036 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa5e 	bl	800349c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	223f      	movs	r2, #63	@ 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800300a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0208 	orr.w	r2, r2, #8
 8003022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e005      	b.n	8003042 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800305a:	f7ff fa3b 	bl	80024d4 <HAL_GetTick>
 800305e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d008      	beq.n	800307e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e052      	b.n	8003124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0216 	bic.w	r2, r2, #22
 800308c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800309c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_DMA_Abort+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0208 	bic.w	r2, r2, #8
 80030bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ce:	e013      	b.n	80030f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d0:	f7ff fa00 	bl	80024d4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d90c      	bls.n	80030f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e015      	b.n	8003124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e4      	bne.n	80030d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	223f      	movs	r2, #63	@ 0x3f
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2280      	movs	r2, #128	@ 0x80
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00c      	b.n	8003164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800317c:	4b8e      	ldr	r3, [pc, #568]	@ (80033b8 <HAL_DMA_IRQHandler+0x248>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a8e      	ldr	r2, [pc, #568]	@ (80033bc <HAL_DMA_IRQHandler+0x24c>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	2208      	movs	r2, #8
 80031ca:	409a      	lsls	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d012      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	2204      	movs	r2, #4
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	2204      	movs	r2, #4
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	2210      	movs	r2, #16
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d043      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03c      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	2210      	movs	r2, #16
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e01f      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0208 	bic.w	r2, r2, #8
 80032ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	2220      	movs	r2, #32
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 808f 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8087 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2220      	movs	r2, #32
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b05      	cmp	r3, #5
 8003318:	d136      	bne.n	8003388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0216 	bic.w	r2, r2, #22
 8003328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_DMA_IRQHandler+0x1da>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0208 	bic.w	r2, r2, #8
 8003358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	223f      	movs	r2, #63	@ 0x3f
 8003360:	409a      	lsls	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337a:	2b00      	cmp	r3, #0
 800337c:	d07e      	beq.n	800347c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
        }
        return;
 8003386:	e079      	b.n	800347c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d031      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e02c      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
 80033b6:	bf00      	nop
 80033b8:	20000008 	.word	0x20000008
 80033bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e01e      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0210 	bic.w	r2, r2, #16
 80033ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	2b00      	cmp	r3, #0
 8003416:	d032      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2205      	movs	r2, #5
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	d307      	bcc.n	8003458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_DMA_IRQHandler+0x2cc>
 8003456:	e000      	b.n	800345a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
 800347a:	e000      	b.n	800347e <HAL_DMA_IRQHandler+0x30e>
        return;
 800347c:	bf00      	nop
    }
  }
}
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d108      	bne.n	80034dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034da:	e007      	b.n	80034ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3b10      	subs	r3, #16
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <DMA_CalcBaseAndBitshift+0x60>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003512:	4a12      	ldr	r2, [pc, #72]	@ (800355c <DMA_CalcBaseAndBitshift+0x64>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d908      	bls.n	8003538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <DMA_CalcBaseAndBitshift+0x68>)
 800352e:	4013      	ands	r3, r2
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	@ 0x58
 8003536:	e006      	b.n	8003546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <DMA_CalcBaseAndBitshift+0x68>)
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	aaaaaaab 	.word	0xaaaaaaab
 800355c:	0800b334 	.word	0x0800b334
 8003560:	fffffc00 	.word	0xfffffc00

08003564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11f      	bne.n	80035be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d856      	bhi.n	8003632 <DMA_CheckFifoParam+0xce>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <DMA_CheckFifoParam+0x28>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035af 	.word	0x080035af
 8003594:	0800359d 	.word	0x0800359d
 8003598:	08003633 	.word	0x08003633
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d046      	beq.n	8003636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e043      	b.n	8003636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035b6:	d140      	bne.n	800363a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035bc:	e03d      	b.n	800363a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c6:	d121      	bne.n	800360c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d837      	bhi.n	800363e <DMA_CheckFifoParam+0xda>
 80035ce:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <DMA_CheckFifoParam+0x70>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035eb 	.word	0x080035eb
 80035dc:	080035e5 	.word	0x080035e5
 80035e0:	080035fd 	.word	0x080035fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e030      	b.n	800364c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d025      	beq.n	8003642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fa:	e022      	b.n	8003642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800360a:	e01c      	b.n	8003646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d903      	bls.n	800361a <DMA_CheckFifoParam+0xb6>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d003      	beq.n	8003620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003618:	e018      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      break;
 800361e:	e015      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e00b      	b.n	800364a <DMA_CheckFifoParam+0xe6>
      break;
 8003632:	bf00      	nop
 8003634:	e00a      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
 8003638:	e008      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
 800363c:	e006      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800363e:	bf00      	nop
 8003640:	e004      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;   
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
    }
  } 
  
  return status; 
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	@ 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e169      	b.n	8003950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 8158 	bne.w	800394a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_GPIO_Init+0x56>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b03      	cmp	r3, #3
 800371e:	d017      	beq.n	8003750 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d123      	bne.n	80037a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b2 	beq.w	800394a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	4b60      	ldr	r3, [pc, #384]	@ (8003968 <HAL_GPIO_Init+0x30c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003968 <HAL_GPIO_Init+0x30c>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003968 <HAL_GPIO_Init+0x30c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037fe:	4a5b      	ldr	r2, [pc, #364]	@ (800396c <HAL_GPIO_Init+0x310>)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_GPIO_Init+0x314>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02b      	beq.n	8003882 <HAL_GPIO_Init+0x226>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a51      	ldr	r2, [pc, #324]	@ (8003974 <HAL_GPIO_Init+0x318>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d025      	beq.n	800387e <HAL_GPIO_Init+0x222>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <HAL_GPIO_Init+0x31c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01f      	beq.n	800387a <HAL_GPIO_Init+0x21e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <HAL_GPIO_Init+0x320>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d019      	beq.n	8003876 <HAL_GPIO_Init+0x21a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4e      	ldr	r2, [pc, #312]	@ (8003980 <HAL_GPIO_Init+0x324>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_GPIO_Init+0x216>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4d      	ldr	r2, [pc, #308]	@ (8003984 <HAL_GPIO_Init+0x328>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00d      	beq.n	800386e <HAL_GPIO_Init+0x212>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4c      	ldr	r2, [pc, #304]	@ (8003988 <HAL_GPIO_Init+0x32c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <HAL_GPIO_Init+0x20e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4b      	ldr	r2, [pc, #300]	@ (800398c <HAL_GPIO_Init+0x330>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <HAL_GPIO_Init+0x20a>
 8003862:	2307      	movs	r3, #7
 8003864:	e00e      	b.n	8003884 <HAL_GPIO_Init+0x228>
 8003866:	2308      	movs	r3, #8
 8003868:	e00c      	b.n	8003884 <HAL_GPIO_Init+0x228>
 800386a:	2306      	movs	r3, #6
 800386c:	e00a      	b.n	8003884 <HAL_GPIO_Init+0x228>
 800386e:	2305      	movs	r3, #5
 8003870:	e008      	b.n	8003884 <HAL_GPIO_Init+0x228>
 8003872:	2304      	movs	r3, #4
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x228>
 8003876:	2303      	movs	r3, #3
 8003878:	e004      	b.n	8003884 <HAL_GPIO_Init+0x228>
 800387a:	2302      	movs	r3, #2
 800387c:	e002      	b.n	8003884 <HAL_GPIO_Init+0x228>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x228>
 8003882:	2300      	movs	r3, #0
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f002 0203 	and.w	r2, r2, #3
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	4093      	lsls	r3, r2
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003894:	4935      	ldr	r1, [pc, #212]	@ (800396c <HAL_GPIO_Init+0x310>)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c6:	4a32      	ldr	r2, [pc, #200]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038cc:	4b30      	ldr	r3, [pc, #192]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f0:	4a27      	ldr	r2, [pc, #156]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f6:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391a:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <HAL_GPIO_Init+0x334>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003920:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_GPIO_Init+0x334>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003944:	4a12      	ldr	r2, [pc, #72]	@ (8003990 <HAL_GPIO_Init+0x334>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	f67f ae92 	bls.w	800367c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	@ 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40013800 	.word	0x40013800
 8003970:	40020000 	.word	0x40020000
 8003974:	40020400 	.word	0x40020400
 8003978:	40020800 	.word	0x40020800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40021000 	.word	0x40021000
 8003984:	40021400 	.word	0x40021400
 8003988:	40021800 	.word	0x40021800
 800398c:	40021c00 	.word	0x40021c00
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e0cd      	b.n	8003b4c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039b0:	2201      	movs	r2, #1
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	f040 80bd 	bne.w	8003b46 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80039cc:	4a65      	ldr	r2, [pc, #404]	@ (8003b64 <HAL_GPIO_DeInit+0x1d0>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	220f      	movs	r2, #15
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003b68 <HAL_GPIO_DeInit+0x1d4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02b      	beq.n	8003a4e <HAL_GPIO_DeInit+0xba>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b6c <HAL_GPIO_DeInit+0x1d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d025      	beq.n	8003a4a <HAL_GPIO_DeInit+0xb6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a5b      	ldr	r2, [pc, #364]	@ (8003b70 <HAL_GPIO_DeInit+0x1dc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <HAL_GPIO_DeInit+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a5a      	ldr	r2, [pc, #360]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_DeInit+0xae>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a59      	ldr	r2, [pc, #356]	@ (8003b78 <HAL_GPIO_DeInit+0x1e4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	@ (8003b7c <HAL_GPIO_DeInit+0x1e8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_DeInit+0xa6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a57      	ldr	r2, [pc, #348]	@ (8003b80 <HAL_GPIO_DeInit+0x1ec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_DeInit+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a56      	ldr	r2, [pc, #344]	@ (8003b84 <HAL_GPIO_DeInit+0x1f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_DeInit+0x9e>
 8003a2e:	2307      	movs	r3, #7
 8003a30:	e00e      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a32:	2308      	movs	r3, #8
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_DeInit+0xbc>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d132      	bne.n	8003ac6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a60:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4947      	ldr	r1, [pc, #284]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a6e:	4b46      	ldr	r3, [pc, #280]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	4944      	ldr	r1, [pc, #272]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a7c:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	4940      	ldr	r1, [pc, #256]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	493d      	ldr	r1, [pc, #244]	@ (8003b88 <HAL_GPIO_DeInit+0x1f4>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b64 <HAL_GPIO_DeInit+0x1d0>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	482a      	ldr	r0, [pc, #168]	@ (8003b64 <HAL_GPIO_DeInit+0x1d0>)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	400a      	ands	r2, r1
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2103      	movs	r1, #3
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	08d2      	lsrs	r2, r2, #3
 8003afc:	4019      	ands	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2103      	movs	r1, #3
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	2101      	movs	r1, #1
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2103      	movs	r1, #3
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f af2e 	bls.w	80039b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40013800 	.word	0x40013800
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	40020400 	.word	0x40020400
 8003b70:	40020800 	.word	0x40020800
 8003b74:	40020c00 	.word	0x40020c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40021400 	.word	0x40021400
 8003b80:	40021800 	.word	0x40021800
 8003b84:	40021c00 	.word	0x40021c00
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bd8:	e003      	b.n	8003be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	619a      	str	r2, [r3, #24]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bfa:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fb84 	bl	800131c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b23      	ldr	r3, [pc, #140]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c36:	4b20      	ldr	r3, [pc, #128]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4e:	f7fe fc41 	bl	80024d4 <HAL_GetTick>
 8003c52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c54:	e009      	b.n	8003c6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c56:	f7fe fc3d 	bl	80024d4 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c64:	d901      	bls.n	8003c6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e022      	b.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c6a:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c76:	d1ee      	bne.n	8003c56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c78:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c84:	f7fe fc26 	bl	80024d4 <HAL_GetTick>
 8003c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c8a:	e009      	b.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c8c:	f7fe fc22 	bl	80024d4 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c9a:	d901      	bls.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e007      	b.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cac:	d1ee      	bne.n	8003c8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e291      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b96      	ldr	r3, [pc, #600]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf0:	4b93      	ldr	r3, [pc, #588]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d112      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
 8003cfc:	4b90      	ldr	r3, [pc, #576]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x130>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d168      	bne.n	8003df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e26b      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a>
 8003d2c:	4b84      	ldr	r3, [pc, #528]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x9c>
 8003d42:	4b7f      	ldr	r3, [pc, #508]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7e      	ldr	r2, [pc, #504]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7b      	ldr	r2, [pc, #492]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d66:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a72      	ldr	r2, [pc, #456]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fb98 	bl	80024d4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fb94 	bl	80024d4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e21f      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b61      	ldr	r3, [pc, #388]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fb84 	bl	80024d4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fb80 	bl	80024d4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e20b      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x110>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d069      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfe:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
 8003e16:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1df      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b41      	ldr	r3, [pc, #260]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	493d      	ldr	r1, [pc, #244]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fb36 	bl	80024d4 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fe fb32 	bl	80024d4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1bd      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b30      	ldr	r3, [pc, #192]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4929      	ldr	r1, [pc, #164]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fb12 	bl	80024d4 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fb0e 	bl	80024d4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e199      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d038      	beq.n	8003f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe faef 	bl	80024d4 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fe faeb 	bl	80024d4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e176      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x23a>
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fad5 	bl	80024d4 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fad1 	bl	80024d4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e15c      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
 8003f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b91      	ldr	r3, [pc, #580]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a4 	beq.w	80040a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b88      	ldr	r3, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	4a87      	ldr	r2, [pc, #540]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f76:	4b85      	ldr	r3, [pc, #532]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f86:	4b82      	ldr	r3, [pc, #520]	@ (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f92:	4b7f      	ldr	r3, [pc, #508]	@ (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7e      	ldr	r2, [pc, #504]	@ (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fa99 	bl	80024d4 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe fa95 	bl	80024d4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	@ 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e120      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4b75      	ldr	r3, [pc, #468]	@ (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x31a>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	e02d      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x33c>
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	4a69      	ldr	r2, [pc, #420]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fee:	4b67      	ldr	r3, [pc, #412]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a66      	ldr	r2, [pc, #408]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x35e>
 8004004:	4b61      	ldr	r3, [pc, #388]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a60      	ldr	r2, [pc, #384]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	4b5e      	ldr	r3, [pc, #376]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	4a5d      	ldr	r2, [pc, #372]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	@ 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 800401e:	4b5b      	ldr	r3, [pc, #364]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	4a5a      	ldr	r2, [pc, #360]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	@ 0x70
 800402a:	4b58      	ldr	r3, [pc, #352]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a57      	ldr	r2, [pc, #348]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fa49 	bl	80024d4 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fa45 	bl	80024d4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0ce      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b4b      	ldr	r3, [pc, #300]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x386>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fa33 	bl	80024d4 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fa2f 	bl	80024d4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b40      	ldr	r3, [pc, #256]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b3c      	ldr	r3, [pc, #240]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4a3b      	ldr	r2, [pc, #236]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a4 	beq.w	80041f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b36      	ldr	r3, [pc, #216]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d06b      	beq.n	8004194 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d149      	bne.n	8004158 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b31      	ldr	r3, [pc, #196]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a30      	ldr	r2, [pc, #192]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fa00 	bl	80024d4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe f9fc 	bl	80024d4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	4313      	orrs	r3, r2
 800411c:	4a1b      	ldr	r2, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800411e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004122:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b19      	ldr	r3, [pc, #100]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe f9d0 	bl	80024d4 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe f9cc 	bl	80024d4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e057      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x478>
 8004156:	e04f      	b.n	80041f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0b      	ldr	r2, [pc, #44]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 800415e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe f9b6 	bl	80024d4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe f9b2 	bl	80024d4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e03d      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b03      	ldr	r3, [pc, #12]	@ (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x4ac>
 800418a:	e035      	b.n	80041f8 <HAL_RCC_OscConfig+0x538>
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCC_OscConfig+0x544>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0d0      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b6a      	ldr	r3, [pc, #424]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d910      	bls.n	8004250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b67      	ldr	r3, [pc, #412]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	4965      	ldr	r1, [pc, #404]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d040      	beq.n	800432c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b41      	ldr	r3, [pc, #260]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e073      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3d      	ldr	r3, [pc, #244]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e06b      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b39      	ldr	r3, [pc, #228]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4936      	ldr	r1, [pc, #216]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fe f8ea 	bl	80024d4 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe f8e6 	bl	80024d4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e053      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2d      	ldr	r3, [pc, #180]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b27      	ldr	r3, [pc, #156]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d210      	bcs.n	800435c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b24      	ldr	r3, [pc, #144]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 020f 	bic.w	r2, r3, #15
 8004342:	4922      	ldr	r1, [pc, #136]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	@ (80043d4 <HAL_RCC_ClockConfig+0x1cc>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <HAL_RCC_ClockConfig+0x1d0>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x1d4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd ff54 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800b31c 	.word	0x0800b31c
 80043d8:	20000008 	.word	0x20000008
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b094      	sub	sp, #80	@ 0x50
 80043e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ec:	2300      	movs	r3, #0
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f0:	2300      	movs	r3, #0
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	4b79      	ldr	r3, [pc, #484]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d00d      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 8004404:	2b08      	cmp	r3, #8
 8004406:	f200 80e1 	bhi.w	80045cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 8004412:	e0db      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b73      	ldr	r3, [pc, #460]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004416:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004418:	e0db      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441a:	4b72      	ldr	r3, [pc, #456]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800441c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800441e:	e0d8      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004420:	4b6f      	ldr	r3, [pc, #444]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004428:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800442a:	4b6d      	ldr	r3, [pc, #436]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b6a      	ldr	r3, [pc, #424]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	2200      	movs	r2, #0
 800443e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004440:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
 800444e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004452:	4622      	mov	r2, r4
 8004454:	462b      	mov	r3, r5
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	0159      	lsls	r1, r3, #5
 8004460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004464:	0150      	lsls	r0, r2, #5
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4621      	mov	r1, r4
 800446c:	1a51      	subs	r1, r2, r1
 800446e:	6139      	str	r1, [r7, #16]
 8004470:	4629      	mov	r1, r5
 8004472:	eb63 0301 	sbc.w	r3, r3, r1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004484:	4659      	mov	r1, fp
 8004486:	018b      	lsls	r3, r1, #6
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800448e:	4651      	mov	r1, sl
 8004490:	018a      	lsls	r2, r1, #6
 8004492:	4651      	mov	r1, sl
 8004494:	ebb2 0801 	subs.w	r8, r2, r1
 8004498:	4659      	mov	r1, fp
 800449a:	eb63 0901 	sbc.w	r9, r3, r1
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b2:	4690      	mov	r8, r2
 80044b4:	4699      	mov	r9, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	eb18 0303 	adds.w	r3, r8, r3
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	462b      	mov	r3, r5
 80044c0:	eb49 0303 	adc.w	r3, r9, r3
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044d2:	4629      	mov	r1, r5
 80044d4:	028b      	lsls	r3, r1, #10
 80044d6:	4621      	mov	r1, r4
 80044d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044dc:	4621      	mov	r1, r4
 80044de:	028a      	lsls	r2, r1, #10
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e6:	2200      	movs	r2, #0
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f0:	f7fb fe96 	bl	8000220 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4613      	mov	r3, r2
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fc:	e058      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fe:	4b38      	ldr	r3, [pc, #224]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	2200      	movs	r2, #0
 8004506:	4618      	mov	r0, r3
 8004508:	4611      	mov	r1, r2
 800450a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	2300      	movs	r3, #0
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
 8004514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	f04f 0000 	mov.w	r0, #0
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	0159      	lsls	r1, r3, #5
 8004526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452a:	0150      	lsls	r0, r2, #5
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4641      	mov	r1, r8
 8004532:	ebb2 0a01 	subs.w	sl, r2, r1
 8004536:	4649      	mov	r1, r9
 8004538:	eb63 0b01 	sbc.w	fp, r3, r1
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800454c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004550:	ebb2 040a 	subs.w	r4, r2, sl
 8004554:	eb63 050b 	sbc.w	r5, r3, fp
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	00eb      	lsls	r3, r5, #3
 8004562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004566:	00e2      	lsls	r2, r4, #3
 8004568:	4614      	mov	r4, r2
 800456a:	461d      	mov	r5, r3
 800456c:	4643      	mov	r3, r8
 800456e:	18e3      	adds	r3, r4, r3
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	464b      	mov	r3, r9
 8004574:	eb45 0303 	adc.w	r3, r5, r3
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004586:	4629      	mov	r1, r5
 8004588:	028b      	lsls	r3, r1, #10
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004590:	4621      	mov	r1, r4
 8004592:	028a      	lsls	r2, r1, #10
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459a:	2200      	movs	r2, #0
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	61fa      	str	r2, [r7, #28]
 80045a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a4:	f7fb fe3c 	bl	8000220 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	3301      	adds	r3, #1
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3750      	adds	r7, #80	@ 0x50
 80045d8:	46bd      	mov	sp, r7
 80045da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ec:	4b03      	ldr	r3, [pc, #12]	@ (80045fc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000008 	.word	0x20000008

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff0 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0a9b      	lsrs	r3, r3, #10
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	@ (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	0800b32c 	.word	0x0800b32c

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffdc 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0b5b      	lsrs	r3, r3, #13
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	@ (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	0800b32c 	.word	0x0800b32c

08004650 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	220f      	movs	r2, #15
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_RCC_GetClockConfig+0x5c>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800466c:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <HAL_RCC_GetClockConfig+0x5c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004684:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	08db      	lsrs	r3, r3, #3
 800468a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <HAL_RCC_GetClockConfig+0x60>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40023c00 	.word	0x40023c00

080046b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d012      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046d8:	4b65      	ldr	r3, [pc, #404]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a64      	ldr	r2, [pc, #400]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	4b62      	ldr	r3, [pc, #392]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	4960      	ldr	r1, [pc, #384]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470a:	4b59      	ldr	r3, [pc, #356]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004710:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	4955      	ldr	r1, [pc, #340]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d017      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004746:	4b4a      	ldr	r3, [pc, #296]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800474c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	4946      	ldr	r1, [pc, #280]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004766:	2301      	movs	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 808b 	beq.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	4b3a      	ldr	r3, [pc, #232]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	4a39      	ldr	r2, [pc, #228]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004790:	4b37      	ldr	r3, [pc, #220]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800479c:	4b35      	ldr	r3, [pc, #212]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a34      	ldr	r2, [pc, #208]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fd fe94 	bl	80024d4 <HAL_GetTick>
 80047ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fd fe90 	bl	80024d4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e2bc      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ce:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d035      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d02e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ec:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004800:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	4a1a      	ldr	r2, [pc, #104]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800480e:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004814:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d114      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fe58 	bl	80024d4 <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fe54 	bl	80024d4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e27e      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ee      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d111      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004864:	4b04      	ldr	r3, [pc, #16]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004866:	400b      	ands	r3, r1
 8004868:	4901      	ldr	r1, [pc, #4]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	e00b      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	0ffffcff 	.word	0x0ffffcff
 800487c:	4ba4      	ldr	r3, [pc, #656]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4aa3      	ldr	r2, [pc, #652]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004882:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004886:	6093      	str	r3, [r2, #8]
 8004888:	4ba1      	ldr	r3, [pc, #644]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800488a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004894:	499e      	ldr	r1, [pc, #632]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ac:	4a98      	ldr	r2, [pc, #608]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048b6:	4b96      	ldr	r3, [pc, #600]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	4993      	ldr	r1, [pc, #588]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d4:	4b8e      	ldr	r3, [pc, #568]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	498b      	ldr	r1, [pc, #556]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f6:	4b86      	ldr	r3, [pc, #536]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004904:	4982      	ldr	r1, [pc, #520]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004918:	4b7d      	ldr	r3, [pc, #500]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004926:	497a      	ldr	r1, [pc, #488]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800493a:	4b75      	ldr	r3, [pc, #468]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	4971      	ldr	r1, [pc, #452]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800495c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f023 020c 	bic.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	4969      	ldr	r1, [pc, #420]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800497e:	4b64      	ldr	r3, [pc, #400]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	4960      	ldr	r1, [pc, #384]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	4958      	ldr	r1, [pc, #352]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049c2:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d0:	494f      	ldr	r1, [pc, #316]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f2:	4947      	ldr	r1, [pc, #284]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a06:	4b42      	ldr	r3, [pc, #264]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	493e      	ldr	r1, [pc, #248]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a28:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	4936      	ldr	r1, [pc, #216]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a4a:	4b31      	ldr	r3, [pc, #196]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a58:	492d      	ldr	r1, [pc, #180]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a7a:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a88:	4921      	ldr	r1, [pc, #132]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aaa:	4919      	ldr	r1, [pc, #100]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004acc:	4910      	ldr	r1, [pc, #64]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d006      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 809d 	beq.w	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ae8:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fd fcee 	bl	80024d4 <HAL_GetTick>
 8004af8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004afa:	e00b      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004afc:	f7fd fcea 	bl	80024d4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d904      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e116      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b14:	4b8b      	ldr	r3, [pc, #556]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ed      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d017      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d113      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b34:	4b83      	ldr	r3, [pc, #524]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	0e1b      	lsrs	r3, r3, #24
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	019a      	lsls	r2, r3, #6
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	061b      	lsls	r3, r3, #24
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	497b      	ldr	r1, [pc, #492]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d024      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b86:	d11f      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b88:	4b6e      	ldr	r3, [pc, #440]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8e:	0f1b      	lsrs	r3, r3, #28
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	019a      	lsls	r2, r3, #6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	071b      	lsls	r3, r3, #28
 8004ba8:	4966      	ldr	r1, [pc, #408]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bb0:	4b64      	ldr	r3, [pc, #400]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb6:	f023 021f 	bic.w	r2, r3, #31
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4960      	ldr	r1, [pc, #384]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	019a      	lsls	r2, r3, #6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	071b      	lsls	r3, r3, #28
 8004be8:	4956      	ldr	r1, [pc, #344]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bf0:	4b54      	ldr	r3, [pc, #336]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a53      	ldr	r2, [pc, #332]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fd fc6a 	bl	80024d4 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c04:	f7fd fc66 	bl	80024d4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e092      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c16:	4b4b      	ldr	r3, [pc, #300]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 8088 	bne.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c2a:	4b46      	ldr	r3, [pc, #280]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a45      	ldr	r2, [pc, #276]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fd fc4d 	bl	80024d4 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c3e:	f7fd fc49 	bl	80024d4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	@ 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e075      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c50:	4b3c      	ldr	r3, [pc, #240]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c5c:	d0ef      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d024      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d120      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c86:	4b2f      	ldr	r3, [pc, #188]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	019a      	lsls	r2, r3, #6
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	4927      	ldr	r1, [pc, #156]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cae:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	4920      	ldr	r1, [pc, #128]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d018      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cdc:	d113      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cde:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	019a      	lsls	r2, r3, #6
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	041b      	lsls	r3, r3, #16
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	4911      	ldr	r1, [pc, #68]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d06:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d12:	f7fd fbdf 	bl	80024d4 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d1a:	f7fd fbdb 	bl	80024d4 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	@ 0x64
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e007      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d38:	d1ef      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800

08004d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e09d      	b.n	8004e96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6a:	d009      	beq.n	8004d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61da      	str	r2, [r3, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd f83e 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dc0:	d902      	bls.n	8004dc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e002      	b.n	8004dce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dd6:	d007      	beq.n	8004de8 <HAL_SPI_Init+0xa0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	ea42 0103 	orr.w	r1, r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f003 0204 	and.w	r2, r3, #4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e049      	b.n	8004f44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fd f80b 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 ffe5 	bl	8005eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d001      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e054      	b.n	800500e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a26      	ldr	r2, [pc, #152]	@ (800501c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d022      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8e:	d01d      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	@ (8005020 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	@ (8005024 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <HAL_TIM_Base_Start_IT+0xdc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x80>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d115      	bne.n	8004ff8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4b19      	ldr	r3, [pc, #100]	@ (8005038 <HAL_TIM_Base_Start_IT+0xec>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d015      	beq.n	800500a <HAL_TIM_Base_Start_IT+0xbe>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe4:	d011      	beq.n	800500a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	e008      	b.n	800500a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e000      	b.n	800500c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40001800 	.word	0x40001800
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e049      	b.n	80050e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f841 	bl	80050ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 ff16 	bl	8005eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start+0x24>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e03c      	b.n	800519e <HAL_TIM_PWM_Start+0x9e>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d109      	bne.n	800513e <HAL_TIM_PWM_Start+0x3e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e02f      	b.n	800519e <HAL_TIM_PWM_Start+0x9e>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start+0x58>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e022      	b.n	800519e <HAL_TIM_PWM_Start+0x9e>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d109      	bne.n	8005172 <HAL_TIM_PWM_Start+0x72>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e015      	b.n	800519e <HAL_TIM_PWM_Start+0x9e>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b10      	cmp	r3, #16
 8005176:	d109      	bne.n	800518c <HAL_TIM_PWM_Start+0x8c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e008      	b.n	800519e <HAL_TIM_PWM_Start+0x9e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e092      	b.n	80052cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xb6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051b4:	e023      	b.n	80051fe <HAL_TIM_PWM_Start+0xfe>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xc6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c4:	e01b      	b.n	80051fe <HAL_TIM_PWM_Start+0xfe>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xd6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d4:	e013      	b.n	80051fe <HAL_TIM_PWM_Start+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xe6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xf6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f4:	e003      	b.n	80051fe <HAL_TIM_PWM_Start+0xfe>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2201      	movs	r2, #1
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f001 fb1e 	bl	8006848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a30      	ldr	r2, [pc, #192]	@ (80052d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_PWM_Start+0x120>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2f      	ldr	r2, [pc, #188]	@ (80052d8 <HAL_TIM_PWM_Start+0x1d8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_TIM_PWM_Start+0x124>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_TIM_PWM_Start+0x126>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a25      	ldr	r2, [pc, #148]	@ (80052d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524c:	d01d      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a22      	ldr	r2, [pc, #136]	@ (80052dc <HAL_TIM_PWM_Start+0x1dc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a20      	ldr	r2, [pc, #128]	@ (80052e0 <HAL_TIM_PWM_Start+0x1e0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1f      	ldr	r2, [pc, #124]	@ (80052e4 <HAL_TIM_PWM_Start+0x1e4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a19      	ldr	r2, [pc, #100]	@ (80052d8 <HAL_TIM_PWM_Start+0x1d8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_TIM_PWM_Start+0x1e8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_PWM_Start+0x18a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <HAL_TIM_PWM_Start+0x1ec>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d115      	bne.n	80052b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <HAL_TIM_PWM_Start+0x1f0>)
 8005292:	4013      	ands	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d015      	beq.n	80052c8 <HAL_TIM_PWM_Start+0x1c8>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a2:	d011      	beq.n	80052c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	e008      	b.n	80052c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e000      	b.n	80052ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40001800 	.word	0x40001800
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fa9e 	bl	8006848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a36      	ldr	r2, [pc, #216]	@ (80053ec <HAL_TIM_PWM_Stop+0xf8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_PWM_Stop+0x2c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a35      	ldr	r2, [pc, #212]	@ (80053f0 <HAL_TIM_PWM_Stop+0xfc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <HAL_TIM_PWM_Stop+0x30>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_TIM_PWM_Stop+0x32>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_TIM_PWM_Stop+0x66>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	f240 4344 	movw	r3, #1092	@ 0x444
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_TIM_PWM_Stop+0x66>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_TIM_PWM_Stop+0x96>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	f240 4344 	movw	r3, #1092	@ 0x444
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_TIM_PWM_Stop+0x96>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Stop+0xa6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005398:	e023      	b.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Stop+0xb6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053a8:	e01b      	b.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Stop+0xc6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b8:	e013      	b.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Stop+0xd6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053c8:	e00b      	b.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d104      	bne.n	80053da <HAL_TIM_PWM_Stop+0xe6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d8:	e003      	b.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e049      	b.n	800549a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f841 	bl	80054a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 fd3a 	bl	8005eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_IC_Start_IT+0x1e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e023      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_IC_Start_IT+0x2e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e01b      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_IC_Start_IT+0x3e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e013      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_IC_Start_IT+0x4e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e00b      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b10      	cmp	r3, #16
 800550a:	d104      	bne.n	8005516 <HAL_TIM_IC_Start_IT+0x5e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e003      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800551c:	b2db      	uxtb	r3, r3
 800551e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_TIM_IC_Start_IT+0x78>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e013      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IC_Start_IT+0x88>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e00b      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b08      	cmp	r3, #8
 8005544:	d104      	bne.n	8005550 <HAL_TIM_IC_Start_IT+0x98>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e003      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005556:	b2db      	uxtb	r3, r3
 8005558:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d102      	bne.n	8005566 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005560:	7b7b      	ldrb	r3, [r7, #13]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d001      	beq.n	800556a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e0e2      	b.n	8005730 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xc2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	e023      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xd2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005588:	e01b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0xe2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005598:	e013      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0xf2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x102>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x11a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d0:	e013      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Start_IT+0x12a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_IC_Start_IT+0x13a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055f0:	e003      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d841      	bhi.n	8005684 <HAL_TIM_IC_Start_IT+0x1cc>
 8005600:	a201      	add	r2, pc, #4	@ (adr r2, 8005608 <HAL_TIM_IC_Start_IT+0x150>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	0800563d 	.word	0x0800563d
 800560c:	08005685 	.word	0x08005685
 8005610:	08005685 	.word	0x08005685
 8005614:	08005685 	.word	0x08005685
 8005618:	0800564f 	.word	0x0800564f
 800561c:	08005685 	.word	0x08005685
 8005620:	08005685 	.word	0x08005685
 8005624:	08005685 	.word	0x08005685
 8005628:	08005661 	.word	0x08005661
 800562c:	08005685 	.word	0x08005685
 8005630:	08005685 	.word	0x08005685
 8005634:	08005685 	.word	0x08005685
 8005638:	08005673 	.word	0x08005673
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0202 	orr.w	r2, r2, #2
 800564a:	60da      	str	r2, [r3, #12]
      break;
 800564c:	e01d      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0204 	orr.w	r2, r2, #4
 800565c:	60da      	str	r2, [r3, #12]
      break;
 800565e:	e014      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0208 	orr.w	r2, r2, #8
 800566e:	60da      	str	r2, [r3, #12]
      break;
 8005670:	e00b      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0210 	orr.w	r2, r2, #16
 8005680:	60da      	str	r2, [r3, #12]
      break;
 8005682:	e002      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	bf00      	nop
  }

  if (status == HAL_OK)
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d14e      	bne.n	800572e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2201      	movs	r2, #1
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f001 f8d5 	bl	8006848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a25      	ldr	r2, [pc, #148]	@ (8005738 <HAL_TIM_IC_Start_IT+0x280>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d01d      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	@ (800573c <HAL_TIM_IC_Start_IT+0x284>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005740 <HAL_TIM_IC_Start_IT+0x288>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005744 <HAL_TIM_IC_Start_IT+0x28c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005748 <HAL_TIM_IC_Start_IT+0x290>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <HAL_TIM_IC_Start_IT+0x294>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	@ (8005750 <HAL_TIM_IC_Start_IT+0x298>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <HAL_TIM_IC_Start_IT+0x29c>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d015      	beq.n	800572c <HAL_TIM_IC_Start_IT+0x274>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005706:	d011      	beq.n	800572c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e008      	b.n	800572c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e000      	b.n	800572e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40014000 	.word	0x40014000
 8005750:	40001800 	.word	0x40001800
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb64 	bl	8005e70 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb56 	bl	8005e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb67 	bl	8005e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01b      	beq.n	8005808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0204 	mvn.w	r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fb3e 	bl	8005e70 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb30 	bl	8005e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb41 	bl	8005e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d020      	beq.n	8005854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0208 	mvn.w	r2, #8
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2204      	movs	r2, #4
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fb18 	bl	8005e70 <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fb0a 	bl	8005e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb1b 	bl	8005e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0210 	mvn.w	r2, #16
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2208      	movs	r2, #8
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 faf2 	bl	8005e70 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fae4 	bl	8005e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 faf5 	bl	8005e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0201 	mvn.w	r2, #1
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb ff08 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fa07 	bl	8006d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00c      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f9ff 	bl	8006d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 faaf 	bl	8005e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0220 	mvn.w	r2, #32
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f9c7 	bl	8006cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005980:	2302      	movs	r3, #2
 8005982:	e088      	b.n	8005a96 <HAL_TIM_IC_ConfigChannel+0x130>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11b      	bne.n	80059ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059a2:	f000 fd8d 	bl	80064c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 020c 	bic.w	r2, r2, #12
 80059b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6999      	ldr	r1, [r3, #24]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]
 80059c8:	e060      	b.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d11c      	bne.n	8005a0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059e0:	f000 fe11 	bl	8006606 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6999      	ldr	r1, [r3, #24]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	021a      	lsls	r2, r3, #8
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	619a      	str	r2, [r3, #24]
 8005a08:	e040      	b.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a20:	f000 fe5e 	bl	80066e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 020c 	bic.w	r2, r2, #12
 8005a32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69d9      	ldr	r1, [r3, #28]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	61da      	str	r2, [r3, #28]
 8005a46:	e021      	b.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d11c      	bne.n	8005a88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a5e:	f000 fe7b 	bl	8006758 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	021a      	lsls	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	61da      	str	r2, [r3, #28]
 8005a86:	e001      	b.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e0ff      	b.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b14      	cmp	r3, #20
 8005aca:	f200 80f0 	bhi.w	8005cae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005caf 	.word	0x08005caf
 8005adc:	08005caf 	.word	0x08005caf
 8005ae0:	08005caf 	.word	0x08005caf
 8005ae4:	08005b69 	.word	0x08005b69
 8005ae8:	08005caf 	.word	0x08005caf
 8005aec:	08005caf 	.word	0x08005caf
 8005af0:	08005caf 	.word	0x08005caf
 8005af4:	08005bab 	.word	0x08005bab
 8005af8:	08005caf 	.word	0x08005caf
 8005afc:	08005caf 	.word	0x08005caf
 8005b00:	08005caf 	.word	0x08005caf
 8005b04:	08005beb 	.word	0x08005beb
 8005b08:	08005caf 	.word	0x08005caf
 8005b0c:	08005caf 	.word	0x08005caf
 8005b10:	08005caf 	.word	0x08005caf
 8005b14:	08005c2d 	.word	0x08005c2d
 8005b18:	08005caf 	.word	0x08005caf
 8005b1c:	08005caf 	.word	0x08005caf
 8005b20:	08005caf 	.word	0x08005caf
 8005b24:	08005c6d 	.word	0x08005c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fa68 	bl	8006004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0208 	orr.w	r2, r2, #8
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	619a      	str	r2, [r3, #24]
      break;
 8005b66:	e0a5      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 faba 	bl	80060e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6999      	ldr	r1, [r3, #24]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	619a      	str	r2, [r3, #24]
      break;
 8005ba8:	e084      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb11 	bl	80061d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0208 	orr.w	r2, r2, #8
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0204 	bic.w	r2, r2, #4
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
      break;
 8005be8:	e064      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fb67 	bl	80062c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69d9      	ldr	r1, [r3, #28]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	021a      	lsls	r2, r3, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	61da      	str	r2, [r3, #28]
      break;
 8005c2a:	e043      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fb9e 	bl	8006374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0204 	bic.w	r2, r2, #4
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c6a:	e023      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fbd0 	bl	8006418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cac:	e002      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop

08005cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e0b4      	b.n	8005e4e <HAL_TIM_ConfigClockSource+0x186>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4b56      	ldr	r3, [pc, #344]	@ (8005e58 <HAL_TIM_ConfigClockSource+0x190>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1c:	d03e      	beq.n	8005d9c <HAL_TIM_ConfigClockSource+0xd4>
 8005d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d22:	f200 8087 	bhi.w	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2a:	f000 8086 	beq.w	8005e3a <HAL_TIM_ConfigClockSource+0x172>
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d32:	d87f      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b70      	cmp	r3, #112	@ 0x70
 8005d36:	d01a      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0xa6>
 8005d38:	2b70      	cmp	r3, #112	@ 0x70
 8005d3a:	d87b      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b60      	cmp	r3, #96	@ 0x60
 8005d3e:	d050      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d40:	2b60      	cmp	r3, #96	@ 0x60
 8005d42:	d877      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b50      	cmp	r3, #80	@ 0x50
 8005d46:	d03c      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d48:	2b50      	cmp	r3, #80	@ 0x50
 8005d4a:	d873      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d058      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x13a>
 8005d50:	2b40      	cmp	r3, #64	@ 0x40
 8005d52:	d86f      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d54:	2b30      	cmp	r3, #48	@ 0x30
 8005d56:	d064      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x15a>
 8005d58:	2b30      	cmp	r3, #48	@ 0x30
 8005d5a:	d86b      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d060      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x15a>
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d867      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d05c      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x15a>
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d05a      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x15a>
 8005d6c:	e062      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d7e:	f000 fd43 	bl	8006808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	609a      	str	r2, [r3, #8]
      break;
 8005d9a:	e04f      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dac:	f000 fd2c 	bl	8006808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dbe:	609a      	str	r2, [r3, #8]
      break;
 8005dc0:	e03c      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fbea 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2150      	movs	r1, #80	@ 0x50
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fcf9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005de0:	e02c      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fc46 	bl	8006680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2160      	movs	r1, #96	@ 0x60
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fce9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005e00:	e01c      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f000 fbca 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2140      	movs	r1, #64	@ 0x40
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fcd9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005e20:	e00c      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f000 fcd0 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005e32:	e003      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
      break;
 8005e38:	e000      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	fffeff88 	.word	0xfffeff88

08005e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a46      	ldr	r2, [pc, #280]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <TIM_Base_SetConfig+0x130>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a42      	ldr	r2, [pc, #264]	@ (8005fe0 <TIM_Base_SetConfig+0x134>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a41      	ldr	r2, [pc, #260]	@ (8005fe4 <TIM_Base_SetConfig+0x138>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a40      	ldr	r2, [pc, #256]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a35      	ldr	r2, [pc, #212]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0c:	d027      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a32      	ldr	r2, [pc, #200]	@ (8005fdc <TIM_Base_SetConfig+0x130>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d023      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a31      	ldr	r2, [pc, #196]	@ (8005fe0 <TIM_Base_SetConfig+0x134>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a30      	ldr	r2, [pc, #192]	@ (8005fe4 <TIM_Base_SetConfig+0x138>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d017      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2e      	ldr	r2, [pc, #184]	@ (8005fec <TIM_Base_SetConfig+0x140>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <TIM_Base_SetConfig+0x144>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff4 <TIM_Base_SetConfig+0x148>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff8 <TIM_Base_SetConfig+0x14c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2a      	ldr	r2, [pc, #168]	@ (8005ffc <TIM_Base_SetConfig+0x150>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a29      	ldr	r2, [pc, #164]	@ (8006000 <TIM_Base_SetConfig+0x154>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a10      	ldr	r2, [pc, #64]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_Base_SetConfig+0xf8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d103      	bne.n	8005fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40001c00 	.word	0x40001c00
 8006000:	40002000 	.word	0x40002000

08006004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f023 0201 	bic.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4b2b      	ldr	r3, [pc, #172]	@ (80060dc <TIM_OC1_SetConfig+0xd8>)
 8006030:	4013      	ands	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <TIM_OC1_SetConfig+0xdc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC1_SetConfig+0x64>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a20      	ldr	r2, [pc, #128]	@ (80060e4 <TIM_OC1_SetConfig+0xe0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10c      	bne.n	8006082 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0308 	bic.w	r3, r3, #8
 800606e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a16      	ldr	r2, [pc, #88]	@ (80060e0 <TIM_OC1_SetConfig+0xdc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC1_SetConfig+0x8e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	@ (80060e4 <TIM_OC1_SetConfig+0xe0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d111      	bne.n	80060b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	fffeff8f 	.word	0xfffeff8f
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40010400 	.word	0x40010400

080060e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 0210 	bic.w	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4b2e      	ldr	r3, [pc, #184]	@ (80061cc <TIM_OC2_SetConfig+0xe4>)
 8006114:	4013      	ands	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800611e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0320 	bic.w	r3, r3, #32
 8006132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a23      	ldr	r2, [pc, #140]	@ (80061d0 <TIM_OC2_SetConfig+0xe8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_OC2_SetConfig+0x68>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a22      	ldr	r2, [pc, #136]	@ (80061d4 <TIM_OC2_SetConfig+0xec>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10d      	bne.n	800616c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800616a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <TIM_OC2_SetConfig+0xe8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC2_SetConfig+0x94>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a17      	ldr	r2, [pc, #92]	@ (80061d4 <TIM_OC2_SetConfig+0xec>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d113      	bne.n	80061a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	feff8fff 	.word	0xfeff8fff
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <TIM_OC3_SetConfig+0xe0>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a22      	ldr	r2, [pc, #136]	@ (80062bc <TIM_OC3_SetConfig+0xe4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_OC3_SetConfig+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a21      	ldr	r2, [pc, #132]	@ (80062c0 <TIM_OC3_SetConfig+0xe8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10d      	bne.n	800625a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <TIM_OC3_SetConfig+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_OC3_SetConfig+0x92>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <TIM_OC3_SetConfig+0xe8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d113      	bne.n	8006292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	fffeff8f 	.word	0xfffeff8f
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006368 <TIM_OC4_SetConfig+0xa4>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800630e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a13      	ldr	r2, [pc, #76]	@ (800636c <TIM_OC4_SetConfig+0xa8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC4_SetConfig+0x68>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a12      	ldr	r2, [pc, #72]	@ (8006370 <TIM_OC4_SetConfig+0xac>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d109      	bne.n	8006340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	019b      	lsls	r3, r3, #6
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	feff8fff 	.word	0xfeff8fff
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4b1b      	ldr	r3, [pc, #108]	@ (800640c <TIM_OC5_SetConfig+0x98>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a12      	ldr	r2, [pc, #72]	@ (8006410 <TIM_OC5_SetConfig+0x9c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC5_SetConfig+0x5e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a11      	ldr	r2, [pc, #68]	@ (8006414 <TIM_OC5_SetConfig+0xa0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d109      	bne.n	80063e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	fffeff8f 	.word	0xfffeff8f
 8006410:	40010000 	.word	0x40010000
 8006414:	40010400 	.word	0x40010400

08006418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4b1c      	ldr	r3, [pc, #112]	@ (80064b4 <TIM_OC6_SetConfig+0x9c>)
 8006444:	4013      	ands	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800645a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a13      	ldr	r2, [pc, #76]	@ (80064b8 <TIM_OC6_SetConfig+0xa0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC6_SetConfig+0x60>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <TIM_OC6_SetConfig+0xa4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d109      	bne.n	800648c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800647e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	029b      	lsls	r3, r3, #10
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	feff8fff 	.word	0xfeff8fff
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0201 	bic.w	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a28      	ldr	r2, [pc, #160]	@ (800658c <TIM_TI1_SetConfig+0xcc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f4:	d017      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a25      	ldr	r2, [pc, #148]	@ (8006590 <TIM_TI1_SetConfig+0xd0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a24      	ldr	r2, [pc, #144]	@ (8006594 <TIM_TI1_SetConfig+0xd4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a23      	ldr	r2, [pc, #140]	@ (8006598 <TIM_TI1_SetConfig+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a22      	ldr	r2, [pc, #136]	@ (800659c <TIM_TI1_SetConfig+0xdc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a21      	ldr	r2, [pc, #132]	@ (80065a0 <TIM_TI1_SetConfig+0xe0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a20      	ldr	r2, [pc, #128]	@ (80065a4 <TIM_TI1_SetConfig+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <TIM_TI1_SetConfig+0x6a>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <TIM_TI1_SetConfig+0x6c>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e003      	b.n	800654a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f023 030a 	bic.w	r3, r3, #10
 8006564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 030a 	and.w	r3, r3, #10
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010000 	.word	0x40010000
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800
 8006598:	40000c00 	.word	0x40000c00
 800659c:	40010400 	.word	0x40010400
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40001800 	.word	0x40001800

080065a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 030a 	bic.w	r3, r3, #10
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0210 	bic.w	r2, r3, #16
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	b29b      	uxth	r3, r3
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006658:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0210 	bic.w	r2, r3, #16
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	b2db      	uxtb	r3, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006784:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006796:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	031b      	lsls	r3, r3, #12
 800679c:	b29b      	uxth	r3, r3
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80067aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	031b      	lsls	r3, r3, #12
 80067b0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f043 0307 	orr.w	r3, r3, #7
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2201      	movs	r2, #1
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	43db      	mvns	r3, r3
 800686a:	401a      	ands	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	431a      	orrs	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_TIMEx_PWMN_Start+0x24>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e022      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0x6a>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d109      	bne.n	80068d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	bf14      	ite	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2300      	moveq	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	e015      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0x6a>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d109      	bne.n	80068ec <HAL_TIMEx_PWMN_Start+0x58>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e008      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0x6a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e073      	b.n	80069ee <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <HAL_TIMEx_PWMN_Start+0x82>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006914:	e013      	b.n	800693e <HAL_TIMEx_PWMN_Start+0xaa>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d104      	bne.n	8006926 <HAL_TIMEx_PWMN_Start+0x92>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006924:	e00b      	b.n	800693e <HAL_TIMEx_PWMN_Start+0xaa>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d104      	bne.n	8006936 <HAL_TIMEx_PWMN_Start+0xa2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006934:	e003      	b.n	800693e <HAL_TIMEx_PWMN_Start+0xaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2204      	movs	r2, #4
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f9ee 	bl	8006d28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800695a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a25      	ldr	r2, [pc, #148]	@ (80069f8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d022      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d01d      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_TIMEx_PWMN_Start+0x168>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a20      	ldr	r2, [pc, #128]	@ (8006a00 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1e      	ldr	r2, [pc, #120]	@ (8006a04 <HAL_TIMEx_PWMN_Start+0x170>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <HAL_TIMEx_PWMN_Start+0x174>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a0c <HAL_TIMEx_PWMN_Start+0x178>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIMEx_PWMN_Start+0x118>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a10 <HAL_TIMEx_PWMN_Start+0x17c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d115      	bne.n	80069d8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	4b18      	ldr	r3, [pc, #96]	@ (8006a14 <HAL_TIMEx_PWMN_Start+0x180>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d015      	beq.n	80069ea <HAL_TIMEx_PWMN_Start+0x156>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c4:	d011      	beq.n	80069ea <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	e008      	b.n	80069ea <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e000      	b.n	80069ec <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	40010400 	.word	0x40010400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40001800 	.word	0x40001800
 8006a14:	00010007 	.word	0x00010007

08006a18 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 f97c 	bl	8006d28 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10f      	bne.n	8006a60 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10f      	bne.n	8006a90 <HAL_TIMEx_PWMN_Stop+0x78>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIMEx_PWMN_Stop+0x78>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <HAL_TIMEx_PWMN_Stop+0x88>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a9e:	e013      	b.n	8006ac8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d104      	bne.n	8006ab0 <HAL_TIMEx_PWMN_Stop+0x98>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aae:	e00b      	b.n	8006ac8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d104      	bne.n	8006ac0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006abe:	e003      	b.n	8006ac8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e06d      	b.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a30      	ldr	r2, [pc, #192]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d108      	bne.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a20      	ldr	r2, [pc, #128]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5e:	d01d      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1a      	ldr	r2, [pc, #104]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a15      	ldr	r2, [pc, #84]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d10c      	bne.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40001800 	.word	0x40001800

08006bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e065      	b.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a14      	ldr	r2, [pc, #80]	@ (8006ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d115      	bne.n	8006cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	051b      	lsls	r3, r3, #20
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400

08006cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	401a      	ands	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e040      	b.n	8006e06 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fb f971 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	@ 0x24
 8006d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fed1 	bl	8007b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fc6a 	bl	8007698 <UART_SetConfig>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e01b      	b.n	8006e06 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ddc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 ff50 	bl	8007ca4 <UART_CheckIdleState>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e02f      	b.n	8006e80 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2224      	movs	r2, #36	@ 0x24
 8006e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fb f9e0 	bl	8002214 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	@ 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d165      	bne.n	8006f6a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <HAL_UART_Transmit_DMA+0x22>
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e05e      	b.n	8006f6c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	88fa      	ldrh	r2, [r7, #6]
 8006eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2221      	movs	r2, #33	@ 0x21
 8006ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d027      	beq.n	8006f2a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ede:	4a25      	ldr	r2, [pc, #148]	@ (8006f74 <HAL_UART_Transmit_DMA+0xec>)
 8006ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee6:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_UART_Transmit_DMA+0xf0>)
 8006ee8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eee:	4a23      	ldr	r2, [pc, #140]	@ (8006f7c <HAL_UART_Transmit_DMA+0xf4>)
 8006ef0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	4619      	mov	r1, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3328      	adds	r3, #40	@ 0x28
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	f7fc f83d 	bl	8002f8c <HAL_DMA_Start_IT>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e020      	b.n	8006f6c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2240      	movs	r2, #64	@ 0x40
 8006f30:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	623a      	str	r2, [r7, #32]
 8006f54:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	69f9      	ldr	r1, [r7, #28]
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e5      	bne.n	8006f32 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3728      	adds	r7, #40	@ 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	08008081 	.word	0x08008081
 8006f78:	08008117 	.word	0x08008117
 8006f7c:	08008299 	.word	0x08008299

08006f80 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b090      	sub	sp, #64	@ 0x40
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b80      	cmp	r3, #128	@ 0x80
 8006fa2:	d139      	bne.n	8007018 <HAL_UART_DMAStop+0x98>
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa6:	2b21      	cmp	r3, #33	@ 0x21
 8006fa8:	d136      	bne.n	8007018 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d015      	beq.n	8007012 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc f82e 	bl	800304c <HAL_DMA_Abort>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fc fa42 	bl	8003484 <HAL_DMA_GetError>
 8007000:	4603      	mov	r3, r0
 8007002:	2b20      	cmp	r3, #32
 8007004:	d105      	bne.n	8007012 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2210      	movs	r2, #16
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e044      	b.n	800709c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ffaa 	bl	8007f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d139      	bne.n	800709a <HAL_UART_DMAStop+0x11a>
 8007026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007028:	2b22      	cmp	r3, #34	@ 0x22
 800702a:	d136      	bne.n	800709a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	60bb      	str	r3, [r7, #8]
   return(result);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704c:	61ba      	str	r2, [r7, #24]
 800704e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6979      	ldr	r1, [r7, #20]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	613b      	str	r3, [r7, #16]
   return(result);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e5      	bne.n	800702c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007064:	2b00      	cmp	r3, #0
 8007066:	d015      	beq.n	8007094 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800706c:	4618      	mov	r0, r3
 800706e:	f7fb ffed 	bl	800304c <HAL_DMA_Abort>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00d      	beq.n	8007094 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707c:	4618      	mov	r0, r3
 800707e:	f7fc fa01 	bl	8003484 <HAL_DMA_GetError>
 8007082:	4603      	mov	r3, r0
 8007084:	2b20      	cmp	r3, #32
 8007086:	d105      	bne.n	8007094 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2210      	movs	r2, #16
 800708c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e003      	b.n	800709c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 ff8f 	bl	8007fb8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3740      	adds	r7, #64	@ 0x40
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b0ba      	sub	sp, #232	@ 0xe8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80070ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80070d2:	4013      	ands	r3, r2
 80070d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d115      	bne.n	800710c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00f      	beq.n	800710c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8297 	beq.w	8007630 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      }
      return;
 800710a:	e291      	b.n	8007630 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800710c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8117 	beq.w	8007344 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007126:	4b85      	ldr	r3, [pc, #532]	@ (800733c <HAL_UART_IRQHandler+0x298>)
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 810a 	beq.w	8007344 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <HAL_UART_IRQHandler+0xbc>
 800713c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2201      	movs	r2, #1
 800714e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	f043 0201 	orr.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <HAL_UART_IRQHandler+0xec>
 800716c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2202      	movs	r2, #2
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007186:	f043 0204 	orr.w	r2, r3, #4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d011      	beq.n	80071c0 <HAL_UART_IRQHandler+0x11c>
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2204      	movs	r2, #4
 80071ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071b6:	f043 0202 	orr.w	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d017      	beq.n	80071fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2208      	movs	r2, #8
 80071ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	f043 0208 	orr.w	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007204:	2b00      	cmp	r3, #0
 8007206:	d012      	beq.n	800722e <HAL_UART_IRQHandler+0x18a>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800720c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800721c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007224:	f043 0220 	orr.w	r2, r3, #32
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 81fd 	beq.w	8007634 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007276:	2b40      	cmp	r3, #64	@ 0x40
 8007278:	d005      	beq.n	8007286 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800727a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800727e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04f      	beq.n	8007326 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fe96 	bl	8007fb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007296:	2b40      	cmp	r3, #64	@ 0x40
 8007298:	d141      	bne.n	800731e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1d9      	bne.n	800729a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d013      	beq.n	8007316 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f2:	4a13      	ldr	r2, [pc, #76]	@ (8007340 <HAL_UART_IRQHandler+0x29c>)
 80072f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fb ff16 	bl	800312c <HAL_DMA_Abort_IT>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d017      	beq.n	8007336 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800730a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e00f      	b.n	8007336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9b4 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e00b      	b.n	8007336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9b0 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	e007      	b.n	8007336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9ac 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007334:	e17e      	b.n	8007634 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007336:	bf00      	nop
    return;
 8007338:	e17c      	b.n	8007634 <HAL_UART_IRQHandler+0x590>
 800733a:	bf00      	nop
 800733c:	04000120 	.word	0x04000120
 8007340:	08008317 	.word	0x08008317

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007348:	2b01      	cmp	r3, #1
 800734a:	f040 814c 	bne.w	80075e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8145 	beq.w	80075e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 813e 	beq.w	80075e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2210      	movs	r2, #16
 8007370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737c:	2b40      	cmp	r3, #64	@ 0x40
 800737e:	f040 80b6 	bne.w	80074ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800738e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8150 	beq.w	8007638 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800739e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a2:	429a      	cmp	r2, r3
 80073a4:	f080 8148 	bcs.w	8007638 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073bc:	f000 8086 	beq.w	80074cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1da      	bne.n	80073c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800741a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800742e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e1      	bne.n	800740a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800745c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800746a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800746c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e3      	bne.n	8007446 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800749a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e4      	bne.n	800748c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fb fdc0 	bl	800304c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7f9 feca 	bl	8001280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074ec:	e0a4      	b.n	8007638 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8096 	beq.w	800763c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8091 	beq.w	800763c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800753c:	647b      	str	r3, [r7, #68]	@ 0x44
 800753e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800754a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e4      	bne.n	800751a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	623b      	str	r3, [r7, #32]
   return(result);
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007574:	633a      	str	r2, [r7, #48]	@ 0x30
 8007576:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800757a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e3      	bne.n	8007550 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f023 0310 	bic.w	r3, r3, #16
 80075b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69b9      	ldr	r1, [r7, #24]
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	617b      	str	r3, [r7, #20]
   return(result);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e4      	bne.n	800759c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7f9 fe4e 	bl	8001280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e4:	e02a      	b.n	800763c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00e      	beq.n	8007610 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01c      	beq.n	8007640 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
    }
    return;
 800760e:	e017      	b.n	8007640 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <HAL_UART_IRQHandler+0x59e>
 800761c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fe8a 	bl	8008342 <UART_EndTransmit_IT>
    return;
 800762e:	e008      	b.n	8007642 <HAL_UART_IRQHandler+0x59e>
      return;
 8007630:	bf00      	nop
 8007632:	e006      	b.n	8007642 <HAL_UART_IRQHandler+0x59e>
    return;
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <HAL_UART_IRQHandler+0x59e>
      return;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_UART_IRQHandler+0x59e>
      return;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_UART_IRQHandler+0x59e>
    return;
 8007640:	bf00      	nop
  }

}
 8007642:	37e8      	adds	r7, #232	@ 0xe8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4ba6      	ldr	r3, [pc, #664]	@ (800795c <UART_SetConfig+0x2c4>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	6979      	ldr	r1, [r7, #20]
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	430a      	orrs	r2, r1
 8007708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a94      	ldr	r2, [pc, #592]	@ (8007960 <UART_SetConfig+0x2c8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d120      	bne.n	8007756 <UART_SetConfig+0xbe>
 8007714:	4b93      	ldr	r3, [pc, #588]	@ (8007964 <UART_SetConfig+0x2cc>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d816      	bhi.n	8007750 <UART_SetConfig+0xb8>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <UART_SetConfig+0x90>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007739 	.word	0x08007739
 800772c:	08007745 	.word	0x08007745
 8007730:	0800773f 	.word	0x0800773f
 8007734:	0800774b 	.word	0x0800774b
 8007738:	2301      	movs	r3, #1
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e150      	b.n	80079e0 <UART_SetConfig+0x348>
 800773e:	2302      	movs	r3, #2
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e14d      	b.n	80079e0 <UART_SetConfig+0x348>
 8007744:	2304      	movs	r3, #4
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e14a      	b.n	80079e0 <UART_SetConfig+0x348>
 800774a:	2308      	movs	r3, #8
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e147      	b.n	80079e0 <UART_SetConfig+0x348>
 8007750:	2310      	movs	r3, #16
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e144      	b.n	80079e0 <UART_SetConfig+0x348>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a83      	ldr	r2, [pc, #524]	@ (8007968 <UART_SetConfig+0x2d0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d132      	bne.n	80077c6 <UART_SetConfig+0x12e>
 8007760:	4b80      	ldr	r3, [pc, #512]	@ (8007964 <UART_SetConfig+0x2cc>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b0c      	cmp	r3, #12
 800776c:	d828      	bhi.n	80077c0 <UART_SetConfig+0x128>
 800776e:	a201      	add	r2, pc, #4	@ (adr r2, 8007774 <UART_SetConfig+0xdc>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	080077a9 	.word	0x080077a9
 8007778:	080077c1 	.word	0x080077c1
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077c1 	.word	0x080077c1
 8007784:	080077b5 	.word	0x080077b5
 8007788:	080077c1 	.word	0x080077c1
 800778c:	080077c1 	.word	0x080077c1
 8007790:	080077c1 	.word	0x080077c1
 8007794:	080077af 	.word	0x080077af
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077bb 	.word	0x080077bb
 80077a8:	2300      	movs	r3, #0
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e118      	b.n	80079e0 <UART_SetConfig+0x348>
 80077ae:	2302      	movs	r3, #2
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e115      	b.n	80079e0 <UART_SetConfig+0x348>
 80077b4:	2304      	movs	r3, #4
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e112      	b.n	80079e0 <UART_SetConfig+0x348>
 80077ba:	2308      	movs	r3, #8
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	e10f      	b.n	80079e0 <UART_SetConfig+0x348>
 80077c0:	2310      	movs	r3, #16
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e10c      	b.n	80079e0 <UART_SetConfig+0x348>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a68      	ldr	r2, [pc, #416]	@ (800796c <UART_SetConfig+0x2d4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d120      	bne.n	8007812 <UART_SetConfig+0x17a>
 80077d0:	4b64      	ldr	r3, [pc, #400]	@ (8007964 <UART_SetConfig+0x2cc>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077da:	2b30      	cmp	r3, #48	@ 0x30
 80077dc:	d013      	beq.n	8007806 <UART_SetConfig+0x16e>
 80077de:	2b30      	cmp	r3, #48	@ 0x30
 80077e0:	d814      	bhi.n	800780c <UART_SetConfig+0x174>
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d009      	beq.n	80077fa <UART_SetConfig+0x162>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d810      	bhi.n	800780c <UART_SetConfig+0x174>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <UART_SetConfig+0x15c>
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d006      	beq.n	8007800 <UART_SetConfig+0x168>
 80077f2:	e00b      	b.n	800780c <UART_SetConfig+0x174>
 80077f4:	2300      	movs	r3, #0
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e0f2      	b.n	80079e0 <UART_SetConfig+0x348>
 80077fa:	2302      	movs	r3, #2
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e0ef      	b.n	80079e0 <UART_SetConfig+0x348>
 8007800:	2304      	movs	r3, #4
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e0ec      	b.n	80079e0 <UART_SetConfig+0x348>
 8007806:	2308      	movs	r3, #8
 8007808:	77fb      	strb	r3, [r7, #31]
 800780a:	e0e9      	b.n	80079e0 <UART_SetConfig+0x348>
 800780c:	2310      	movs	r3, #16
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e0e6      	b.n	80079e0 <UART_SetConfig+0x348>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a56      	ldr	r2, [pc, #344]	@ (8007970 <UART_SetConfig+0x2d8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d120      	bne.n	800785e <UART_SetConfig+0x1c6>
 800781c:	4b51      	ldr	r3, [pc, #324]	@ (8007964 <UART_SetConfig+0x2cc>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007826:	2bc0      	cmp	r3, #192	@ 0xc0
 8007828:	d013      	beq.n	8007852 <UART_SetConfig+0x1ba>
 800782a:	2bc0      	cmp	r3, #192	@ 0xc0
 800782c:	d814      	bhi.n	8007858 <UART_SetConfig+0x1c0>
 800782e:	2b80      	cmp	r3, #128	@ 0x80
 8007830:	d009      	beq.n	8007846 <UART_SetConfig+0x1ae>
 8007832:	2b80      	cmp	r3, #128	@ 0x80
 8007834:	d810      	bhi.n	8007858 <UART_SetConfig+0x1c0>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <UART_SetConfig+0x1a8>
 800783a:	2b40      	cmp	r3, #64	@ 0x40
 800783c:	d006      	beq.n	800784c <UART_SetConfig+0x1b4>
 800783e:	e00b      	b.n	8007858 <UART_SetConfig+0x1c0>
 8007840:	2300      	movs	r3, #0
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e0cc      	b.n	80079e0 <UART_SetConfig+0x348>
 8007846:	2302      	movs	r3, #2
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e0c9      	b.n	80079e0 <UART_SetConfig+0x348>
 800784c:	2304      	movs	r3, #4
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e0c6      	b.n	80079e0 <UART_SetConfig+0x348>
 8007852:	2308      	movs	r3, #8
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e0c3      	b.n	80079e0 <UART_SetConfig+0x348>
 8007858:	2310      	movs	r3, #16
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e0c0      	b.n	80079e0 <UART_SetConfig+0x348>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a44      	ldr	r2, [pc, #272]	@ (8007974 <UART_SetConfig+0x2dc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d125      	bne.n	80078b4 <UART_SetConfig+0x21c>
 8007868:	4b3e      	ldr	r3, [pc, #248]	@ (8007964 <UART_SetConfig+0x2cc>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007876:	d017      	beq.n	80078a8 <UART_SetConfig+0x210>
 8007878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800787c:	d817      	bhi.n	80078ae <UART_SetConfig+0x216>
 800787e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007882:	d00b      	beq.n	800789c <UART_SetConfig+0x204>
 8007884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007888:	d811      	bhi.n	80078ae <UART_SetConfig+0x216>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <UART_SetConfig+0x1fe>
 800788e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007892:	d006      	beq.n	80078a2 <UART_SetConfig+0x20a>
 8007894:	e00b      	b.n	80078ae <UART_SetConfig+0x216>
 8007896:	2300      	movs	r3, #0
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e0a1      	b.n	80079e0 <UART_SetConfig+0x348>
 800789c:	2302      	movs	r3, #2
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e09e      	b.n	80079e0 <UART_SetConfig+0x348>
 80078a2:	2304      	movs	r3, #4
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e09b      	b.n	80079e0 <UART_SetConfig+0x348>
 80078a8:	2308      	movs	r3, #8
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e098      	b.n	80079e0 <UART_SetConfig+0x348>
 80078ae:	2310      	movs	r3, #16
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e095      	b.n	80079e0 <UART_SetConfig+0x348>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a2f      	ldr	r2, [pc, #188]	@ (8007978 <UART_SetConfig+0x2e0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d125      	bne.n	800790a <UART_SetConfig+0x272>
 80078be:	4b29      	ldr	r3, [pc, #164]	@ (8007964 <UART_SetConfig+0x2cc>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078cc:	d017      	beq.n	80078fe <UART_SetConfig+0x266>
 80078ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078d2:	d817      	bhi.n	8007904 <UART_SetConfig+0x26c>
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d8:	d00b      	beq.n	80078f2 <UART_SetConfig+0x25a>
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078de:	d811      	bhi.n	8007904 <UART_SetConfig+0x26c>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <UART_SetConfig+0x254>
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e8:	d006      	beq.n	80078f8 <UART_SetConfig+0x260>
 80078ea:	e00b      	b.n	8007904 <UART_SetConfig+0x26c>
 80078ec:	2301      	movs	r3, #1
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e076      	b.n	80079e0 <UART_SetConfig+0x348>
 80078f2:	2302      	movs	r3, #2
 80078f4:	77fb      	strb	r3, [r7, #31]
 80078f6:	e073      	b.n	80079e0 <UART_SetConfig+0x348>
 80078f8:	2304      	movs	r3, #4
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e070      	b.n	80079e0 <UART_SetConfig+0x348>
 80078fe:	2308      	movs	r3, #8
 8007900:	77fb      	strb	r3, [r7, #31]
 8007902:	e06d      	b.n	80079e0 <UART_SetConfig+0x348>
 8007904:	2310      	movs	r3, #16
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e06a      	b.n	80079e0 <UART_SetConfig+0x348>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1b      	ldr	r2, [pc, #108]	@ (800797c <UART_SetConfig+0x2e4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d138      	bne.n	8007986 <UART_SetConfig+0x2ee>
 8007914:	4b13      	ldr	r3, [pc, #76]	@ (8007964 <UART_SetConfig+0x2cc>)
 8007916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800791e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007922:	d017      	beq.n	8007954 <UART_SetConfig+0x2bc>
 8007924:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007928:	d82a      	bhi.n	8007980 <UART_SetConfig+0x2e8>
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800792e:	d00b      	beq.n	8007948 <UART_SetConfig+0x2b0>
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007934:	d824      	bhi.n	8007980 <UART_SetConfig+0x2e8>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <UART_SetConfig+0x2aa>
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793e:	d006      	beq.n	800794e <UART_SetConfig+0x2b6>
 8007940:	e01e      	b.n	8007980 <UART_SetConfig+0x2e8>
 8007942:	2300      	movs	r3, #0
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e04b      	b.n	80079e0 <UART_SetConfig+0x348>
 8007948:	2302      	movs	r3, #2
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e048      	b.n	80079e0 <UART_SetConfig+0x348>
 800794e:	2304      	movs	r3, #4
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e045      	b.n	80079e0 <UART_SetConfig+0x348>
 8007954:	2308      	movs	r3, #8
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e042      	b.n	80079e0 <UART_SetConfig+0x348>
 800795a:	bf00      	nop
 800795c:	efff69f3 	.word	0xefff69f3
 8007960:	40011000 	.word	0x40011000
 8007964:	40023800 	.word	0x40023800
 8007968:	40004400 	.word	0x40004400
 800796c:	40004800 	.word	0x40004800
 8007970:	40004c00 	.word	0x40004c00
 8007974:	40005000 	.word	0x40005000
 8007978:	40011400 	.word	0x40011400
 800797c:	40007800 	.word	0x40007800
 8007980:	2310      	movs	r3, #16
 8007982:	77fb      	strb	r3, [r7, #31]
 8007984:	e02c      	b.n	80079e0 <UART_SetConfig+0x348>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a72      	ldr	r2, [pc, #456]	@ (8007b54 <UART_SetConfig+0x4bc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d125      	bne.n	80079dc <UART_SetConfig+0x344>
 8007990:	4b71      	ldr	r3, [pc, #452]	@ (8007b58 <UART_SetConfig+0x4c0>)
 8007992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007996:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800799a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800799e:	d017      	beq.n	80079d0 <UART_SetConfig+0x338>
 80079a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80079a4:	d817      	bhi.n	80079d6 <UART_SetConfig+0x33e>
 80079a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079aa:	d00b      	beq.n	80079c4 <UART_SetConfig+0x32c>
 80079ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b0:	d811      	bhi.n	80079d6 <UART_SetConfig+0x33e>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <UART_SetConfig+0x326>
 80079b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ba:	d006      	beq.n	80079ca <UART_SetConfig+0x332>
 80079bc:	e00b      	b.n	80079d6 <UART_SetConfig+0x33e>
 80079be:	2300      	movs	r3, #0
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e00d      	b.n	80079e0 <UART_SetConfig+0x348>
 80079c4:	2302      	movs	r3, #2
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e00a      	b.n	80079e0 <UART_SetConfig+0x348>
 80079ca:	2304      	movs	r3, #4
 80079cc:	77fb      	strb	r3, [r7, #31]
 80079ce:	e007      	b.n	80079e0 <UART_SetConfig+0x348>
 80079d0:	2308      	movs	r3, #8
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e004      	b.n	80079e0 <UART_SetConfig+0x348>
 80079d6:	2310      	movs	r3, #16
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e001      	b.n	80079e0 <UART_SetConfig+0x348>
 80079dc:	2310      	movs	r3, #16
 80079de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e8:	d15b      	bne.n	8007aa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d828      	bhi.n	8007a42 <UART_SetConfig+0x3aa>
 80079f0:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <UART_SetConfig+0x360>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a43 	.word	0x08007a43
 8007a08:	08007a33 	.word	0x08007a33
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a43 	.word	0x08007a43
 8007a18:	08007a3b 	.word	0x08007a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fc fdf0 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8007a20:	61b8      	str	r0, [r7, #24]
        break;
 8007a22:	e013      	b.n	8007a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fc fe00 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8007a28:	61b8      	str	r0, [r7, #24]
        break;
 8007a2a:	e00f      	b.n	8007a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8007b5c <UART_SetConfig+0x4c4>)
 8007a2e:	61bb      	str	r3, [r7, #24]
        break;
 8007a30:	e00c      	b.n	8007a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a32:	f7fc fcd5 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8007a36:	61b8      	str	r0, [r7, #24]
        break;
 8007a38:	e008      	b.n	8007a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a3e:	61bb      	str	r3, [r7, #24]
        break;
 8007a40:	e004      	b.n	8007a4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	77bb      	strb	r3, [r7, #30]
        break;
 8007a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d074      	beq.n	8007b3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	005a      	lsls	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	085b      	lsrs	r3, r3, #1
 8007a5c:	441a      	add	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	d916      	bls.n	8007a9c <UART_SetConfig+0x404>
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a74:	d212      	bcs.n	8007a9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f023 030f 	bic.w	r3, r3, #15
 8007a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	89fb      	ldrh	r3, [r7, #14]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	89fa      	ldrh	r2, [r7, #14]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e04f      	b.n	8007b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	77bb      	strb	r3, [r7, #30]
 8007aa0:	e04c      	b.n	8007b3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa2:	7ffb      	ldrb	r3, [r7, #31]
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d828      	bhi.n	8007afa <UART_SetConfig+0x462>
 8007aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <UART_SetConfig+0x418>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	08007ae5 	.word	0x08007ae5
 8007abc:	08007afb 	.word	0x08007afb
 8007ac0:	08007aeb 	.word	0x08007aeb
 8007ac4:	08007afb 	.word	0x08007afb
 8007ac8:	08007afb 	.word	0x08007afb
 8007acc:	08007afb 	.word	0x08007afb
 8007ad0:	08007af3 	.word	0x08007af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ad4:	f7fc fd94 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8007ad8:	61b8      	str	r0, [r7, #24]
        break;
 8007ada:	e013      	b.n	8007b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fc fda4 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	61b8      	str	r0, [r7, #24]
        break;
 8007ae2:	e00f      	b.n	8007b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b5c <UART_SetConfig+0x4c4>)
 8007ae6:	61bb      	str	r3, [r7, #24]
        break;
 8007ae8:	e00c      	b.n	8007b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aea:	f7fc fc79 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8007aee:	61b8      	str	r0, [r7, #24]
        break;
 8007af0:	e008      	b.n	8007b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af6:	61bb      	str	r3, [r7, #24]
        break;
 8007af8:	e004      	b.n	8007b04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	77bb      	strb	r3, [r7, #30]
        break;
 8007b02:	bf00      	nop
    }

    if (pclk != 0U)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d018      	beq.n	8007b3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	085a      	lsrs	r2, r3, #1
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	441a      	add	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b0f      	cmp	r3, #15
 8007b22:	d909      	bls.n	8007b38 <UART_SetConfig+0x4a0>
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b2a:	d205      	bcs.n	8007b38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	e001      	b.n	8007b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40007c00 	.word	0x40007c00
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	00f42400 	.word	0x00f42400

08007b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c5e:	d10a      	bne.n	8007c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	@ 0x30
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cb4:	f7fa fc0e 	bl	80024d4 <HAL_GetTick>
 8007cb8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d12e      	bne.n	8007d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f83b 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d021      	beq.n	8007d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cf6:	623b      	str	r3, [r7, #32]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e6      	bne.n	8007ce2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e011      	b.n	8007d4a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3728      	adds	r7, #40	@ 0x28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d62:	e04f      	b.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d04b      	beq.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fa fbb2 	bl	80024d4 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e04e      	b.n	8007e24 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d037      	beq.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b80      	cmp	r3, #128	@ 0x80
 8007d98:	d034      	beq.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b40      	cmp	r3, #64	@ 0x40
 8007d9e:	d031      	beq.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d110      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2208      	movs	r2, #8
 8007db4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f8fe 	bl	8007fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e029      	b.n	8007e24 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dde:	d111      	bne.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007de8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f8e4 	bl	8007fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e00f      	b.n	8007e24 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d0a0      	beq.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b096      	sub	sp, #88	@ 0x58
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2222      	movs	r2, #34	@ 0x22
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d028      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e64:	4a3e      	ldr	r2, [pc, #248]	@ (8007f60 <UART_Start_Receive_DMA+0x134>)
 8007e66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e6c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f64 <UART_Start_Receive_DMA+0x138>)
 8007e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e74:	4a3c      	ldr	r2, [pc, #240]	@ (8007f68 <UART_Start_Receive_DMA+0x13c>)
 8007e76:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3324      	adds	r3, #36	@ 0x24
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	461a      	mov	r2, r3
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	f7fb f87a 	bl	8002f8c <HAL_DMA_Start_IT>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e051      	b.n	8007f56 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eda:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3758      	adds	r7, #88	@ 0x58
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08008133 	.word	0x08008133
 8007f64:	0800825b 	.word	0x0800825b
 8007f68:	08008299 	.word	0x08008299

08007f6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b089      	sub	sp, #36	@ 0x24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6979      	ldr	r1, [r7, #20]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007fac:	bf00      	nop
 8007fae:	3724      	adds	r7, #36	@ 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b095      	sub	sp, #84	@ 0x54
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e6      	bne.n	8007fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	61fb      	str	r3, [r7, #28]
   return(result);
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3308      	adds	r3, #8
 8008010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008014:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e5      	bne.n	8007ff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800802a:	2b01      	cmp	r3, #1
 800802c:	d118      	bne.n	8008060 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	60bb      	str	r3, [r7, #8]
   return(result);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	647b      	str	r3, [r7, #68]	@ 0x44
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6979      	ldr	r1, [r7, #20]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	613b      	str	r3, [r7, #16]
   return(result);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008074:	bf00      	nop
 8008076:	3754      	adds	r7, #84	@ 0x54
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b090      	sub	sp, #64	@ 0x40
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008096:	d037      	beq.n	8008108 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809a:	2200      	movs	r2, #0
 800809c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	623b      	str	r3, [r7, #32]
   return(result);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3308      	adds	r3, #8
 80080be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80080c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e5      	bne.n	80080a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	69b9      	ldr	r1, [r7, #24]
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e6      	bne.n	80080d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008106:	e002      	b.n	800810e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008108:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800810a:	f7f9 f87f 	bl	800120c <HAL_UART_TxCpltCallback>
}
 800810e:	bf00      	nop
 8008110:	3740      	adds	r7, #64	@ 0x40
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008122:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff fa8f 	bl	8007648 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b09c      	sub	sp, #112	@ 0x70
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008148:	d071      	beq.n	800822e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800814a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800814c:	2200      	movs	r2, #0
 800814e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008172:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008176:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800817e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3308      	adds	r3, #8
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	667b      	str	r3, [r7, #100]	@ 0x64
 800819c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3308      	adds	r3, #8
 80081a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80081a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80081a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e5      	bne.n	8008184 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	623b      	str	r3, [r7, #32]
   return(result);
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80081d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e5      	bne.n	80081b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ee:	2220      	movs	r2, #32
 80081f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d118      	bne.n	800822e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	60fb      	str	r3, [r7, #12]
   return(result);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f023 0310 	bic.w	r3, r3, #16
 8008210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800821a:	61fb      	str	r3, [r7, #28]
 800821c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	69b9      	ldr	r1, [r7, #24]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	617b      	str	r3, [r7, #20]
   return(result);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800822e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008230:	2200      	movs	r2, #0
 8008232:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008238:	2b01      	cmp	r3, #1
 800823a:	d107      	bne.n	800824c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800823c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800823e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008242:	4619      	mov	r1, r3
 8008244:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008246:	f7f9 f81b 	bl	8001280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800824a:	e002      	b.n	8008252 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800824c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800824e:	f7ff fa05 	bl	800765c <HAL_UART_RxCpltCallback>
}
 8008252:	bf00      	nop
 8008254:	3770      	adds	r7, #112	@ 0x70
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008266:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008272:	2b01      	cmp	r3, #1
 8008274:	d109      	bne.n	800828a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	b29b      	uxth	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7f8 fffc 	bl	8001280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008288:	e002      	b.n	8008290 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff f9f0 	bl	8007670 <HAL_UART_RxHalfCpltCallback>
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082be:	2b80      	cmp	r3, #128	@ 0x80
 80082c0:	d109      	bne.n	80082d6 <UART_DMAError+0x3e>
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b21      	cmp	r3, #33	@ 0x21
 80082c6:	d106      	bne.n	80082d6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80082d0:	6978      	ldr	r0, [r7, #20]
 80082d2:	f7ff fe4b 	bl	8007f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e0:	2b40      	cmp	r3, #64	@ 0x40
 80082e2:	d109      	bne.n	80082f8 <UART_DMAError+0x60>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b22      	cmp	r3, #34	@ 0x22
 80082e8:	d106      	bne.n	80082f8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80082f2:	6978      	ldr	r0, [r7, #20]
 80082f4:	f7ff fe60 	bl	8007fb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082fe:	f043 0210 	orr.w	r2, r3, #16
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008308:	6978      	ldr	r0, [r7, #20]
 800830a:	f7ff f9bb 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830e:	bf00      	nop
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff f9a5 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b088      	sub	sp, #32
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	60bb      	str	r3, [r7, #8]
   return(result);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6979      	ldr	r1, [r7, #20]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	613b      	str	r3, [r7, #16]
   return(result);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2220      	movs	r2, #32
 8008380:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7f8 ff3f 	bl	800120c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800838e:	bf00      	nop
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b08c      	sub	sp, #48	@ 0x30
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	4613      	mov	r3, r2
 80083a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d142      	bne.n	8008434 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e03b      	b.n	8008436 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	461a      	mov	r2, r3
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7ff fd2b 	bl	8007e2c <UART_Start_Receive_DMA>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80083dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d124      	bne.n	800842e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d11d      	bne.n	8008428 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2210      	movs	r2, #16
 80083f2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	617b      	str	r3, [r7, #20]
   return(result);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f043 0310 	orr.w	r3, r3, #16
 8008408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
 8008414:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6a39      	ldr	r1, [r7, #32]
 8008418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e6      	bne.n	80083f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008426:	e002      	b.n	800842e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800842e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008432:	e000      	b.n	8008436 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3730      	adds	r7, #48	@ 0x30
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800843e:	b480      	push	{r7}
 8008440:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008442:	bf00      	nop
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008452:	f3ef 8305 	mrs	r3, IPSR
 8008456:	60bb      	str	r3, [r7, #8]
  return(result);
 8008458:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10f      	bne.n	800847e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800845e:	f3ef 8310 	mrs	r3, PRIMASK
 8008462:	607b      	str	r3, [r7, #4]
  return(result);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d105      	bne.n	8008476 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800846a:	f3ef 8311 	mrs	r3, BASEPRI
 800846e:	603b      	str	r3, [r7, #0]
  return(result);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <osKernelInitialize+0x3a>
 8008476:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <osKernelInitialize+0x64>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d103      	bne.n	8008486 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800847e:	f06f 0305 	mvn.w	r3, #5
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e00c      	b.n	80084a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008486:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <osKernelInitialize+0x64>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800848e:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <osKernelInitialize+0x64>)
 8008490:	2201      	movs	r2, #1
 8008492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e002      	b.n	80084a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084a0:	68fb      	ldr	r3, [r7, #12]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000504 	.word	0x20000504

080084b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ba:	f3ef 8305 	mrs	r3, IPSR
 80084be:	60bb      	str	r3, [r7, #8]
  return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10f      	bne.n	80084e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	607b      	str	r3, [r7, #4]
  return(result);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084d2:	f3ef 8311 	mrs	r3, BASEPRI
 80084d6:	603b      	str	r3, [r7, #0]
  return(result);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <osKernelStart+0x3a>
 80084de:	4b0f      	ldr	r3, [pc, #60]	@ (800851c <osKernelStart+0x68>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d103      	bne.n	80084ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80084e6:	f06f 0305 	mvn.w	r3, #5
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e010      	b.n	8008510 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084ee:	4b0b      	ldr	r3, [pc, #44]	@ (800851c <osKernelStart+0x68>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d109      	bne.n	800850a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084f6:	f7ff ffa2 	bl	800843e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084fa:	4b08      	ldr	r3, [pc, #32]	@ (800851c <osKernelStart+0x68>)
 80084fc:	2202      	movs	r2, #2
 80084fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008500:	f001 f8e2 	bl	80096c8 <vTaskStartScheduler>
      stat = osOK;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	e002      	b.n	8008510 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800850a:	f04f 33ff 	mov.w	r3, #4294967295
 800850e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008510:	68fb      	ldr	r3, [r7, #12]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000504 	.word	0x20000504

08008520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008520:	b580      	push	{r7, lr}
 8008522:	b090      	sub	sp, #64	@ 0x40
 8008524:	af04      	add	r7, sp, #16
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008530:	f3ef 8305 	mrs	r3, IPSR
 8008534:	61fb      	str	r3, [r7, #28]
  return(result);
 8008536:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 808f 	bne.w	800865c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853e:	f3ef 8310 	mrs	r3, PRIMASK
 8008542:	61bb      	str	r3, [r7, #24]
  return(result);
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800854a:	f3ef 8311 	mrs	r3, BASEPRI
 800854e:	617b      	str	r3, [r7, #20]
  return(result);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <osThreadNew+0x3e>
 8008556:	4b44      	ldr	r3, [pc, #272]	@ (8008668 <osThreadNew+0x148>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d07e      	beq.n	800865c <osThreadNew+0x13c>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d07b      	beq.n	800865c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008564:	2380      	movs	r3, #128	@ 0x80
 8008566:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008568:	2318      	movs	r3, #24
 800856a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800856c:	2300      	movs	r3, #0
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d045      	beq.n	8008608 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <osThreadNew+0x6a>
        name = attr->name;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <osThreadNew+0x90>
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	2b38      	cmp	r3, #56	@ 0x38
 80085a2:	d805      	bhi.n	80085b0 <osThreadNew+0x90>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <osThreadNew+0x94>
        return (NULL);
 80085b0:	2300      	movs	r3, #0
 80085b2:	e054      	b.n	800865e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	089b      	lsrs	r3, r3, #2
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00e      	beq.n	80085ea <osThreadNew+0xca>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2ba7      	cmp	r3, #167	@ 0xa7
 80085d2:	d90a      	bls.n	80085ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d006      	beq.n	80085ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <osThreadNew+0xca>
        mem = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	623b      	str	r3, [r7, #32]
 80085e8:	e010      	b.n	800860c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10c      	bne.n	800860c <osThreadNew+0xec>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d108      	bne.n	800860c <osThreadNew+0xec>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <osThreadNew+0xec>
          mem = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	e001      	b.n	800860c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d110      	bne.n	8008634 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800861a:	9202      	str	r2, [sp, #8]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fe4f 	bl	80092cc <xTaskCreateStatic>
 800862e:	4603      	mov	r3, r0
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	e013      	b.n	800865c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d110      	bne.n	800865c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863c:	b29a      	uxth	r2, r3
 800863e:	f107 0310 	add.w	r3, r7, #16
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fea3 	bl	8009398 <xTaskCreate>
 8008652:	4603      	mov	r3, r0
 8008654:	2b01      	cmp	r3, #1
 8008656:	d001      	beq.n	800865c <osThreadNew+0x13c>
          hTask = NULL;
 8008658:	2300      	movs	r3, #0
 800865a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800865c:	693b      	ldr	r3, [r7, #16]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3730      	adds	r7, #48	@ 0x30
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000504 	.word	0x20000504

0800866c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008674:	f3ef 8305 	mrs	r3, IPSR
 8008678:	613b      	str	r3, [r7, #16]
  return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10f      	bne.n	80086a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008680:	f3ef 8310 	mrs	r3, PRIMASK
 8008684:	60fb      	str	r3, [r7, #12]
  return(result);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800868c:	f3ef 8311 	mrs	r3, BASEPRI
 8008690:	60bb      	str	r3, [r7, #8]
  return(result);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <osDelay+0x3c>
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <osDelay+0x58>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d103      	bne.n	80086a8 <osDelay+0x3c>
    stat = osErrorISR;
 80086a0:	f06f 0305 	mvn.w	r3, #5
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e007      	b.n	80086b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 ffd0 	bl	8009658 <vTaskDelay>
    }
  }

  return (stat);
 80086b8:	697b      	ldr	r3, [r7, #20]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000504 	.word	0x20000504

080086c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a07      	ldr	r2, [pc, #28]	@ (80086f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80086d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4a06      	ldr	r2, [pc, #24]	@ (80086f8 <vApplicationGetIdleTaskMemory+0x30>)
 80086de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2280      	movs	r2, #128	@ 0x80
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000508 	.word	0x20000508
 80086f8:	200005b0 	.word	0x200005b0

080086fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4a07      	ldr	r2, [pc, #28]	@ (8008728 <vApplicationGetTimerTaskMemory+0x2c>)
 800870c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	4a06      	ldr	r2, [pc, #24]	@ (800872c <vApplicationGetTimerTaskMemory+0x30>)
 8008712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800871a:	601a      	str	r2, [r3, #0]
}
 800871c:	bf00      	nop
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	200007b0 	.word	0x200007b0
 800872c:	20000858 	.word	0x20000858

08008730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f103 0208 	add.w	r2, r3, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f04f 32ff 	mov.w	r2, #4294967295
 8008748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f103 0208 	add.w	r2, r3, #8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f103 0208 	add.w	r2, r3, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d103      	bne.n	80087f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e00c      	b.n	800880c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3308      	adds	r3, #8
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e002      	b.n	8008800 <vListInsert+0x2e>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	429a      	cmp	r2, r3
 800880a:	d2f6      	bcs.n	80087fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]
}
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6892      	ldr	r2, [r2, #8]
 800885a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6852      	ldr	r2, [r2, #4]
 8008864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d103      	bne.n	8008878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	1e5a      	subs	r2, r3, #1
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10d      	bne.n	80088c8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	b672      	cpsid	i
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	b662      	cpsie	i
 80088c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80088c8:	f002 f8d8 	bl	800aa7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	3b01      	subs	r3, #1
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088fe:	fb01 f303 	mul.w	r3, r1, r3
 8008902:	441a      	add	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	22ff      	movs	r2, #255	@ 0xff
 800890c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	22ff      	movs	r2, #255	@ 0xff
 8008914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d114      	bne.n	8008948 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01a      	beq.n	800895c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3310      	adds	r3, #16
 800892a:	4618      	mov	r0, r3
 800892c:	f001 f978 	bl	8009c20 <xTaskRemoveFromEventList>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d012      	beq.n	800895c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008936:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <xQueueGenericReset+0xd4>)
 8008938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	e009      	b.n	800895c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3310      	adds	r3, #16
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff feef 	bl	8008730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3324      	adds	r3, #36	@ 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff feea 	bl	8008730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800895c:	f002 f8c4 	bl	800aae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008960:	2301      	movs	r3, #1
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	@ 0x38
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10d      	bne.n	80089a0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	b672      	cpsid	i
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	b662      	cpsie	i
 8008998:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10d      	bne.n	80089c2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	b672      	cpsid	i
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	b662      	cpsie	i
 80089ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <xQueueGenericCreateStatic+0x5e>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <xQueueGenericCreateStatic+0x62>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <xQueueGenericCreateStatic+0x64>
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10d      	bne.n	80089f4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	b672      	cpsid	i
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	b662      	cpsie	i
 80089ec:	623b      	str	r3, [r7, #32]
}
 80089ee:	bf00      	nop
 80089f0:	bf00      	nop
 80089f2:	e7fd      	b.n	80089f0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <xQueueGenericCreateStatic+0x90>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <xQueueGenericCreateStatic+0x94>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <xQueueGenericCreateStatic+0x96>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	61fb      	str	r3, [r7, #28]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a26:	2350      	movs	r3, #80	@ 0x50
 8008a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b50      	cmp	r3, #80	@ 0x50
 8008a2e:	d00d      	beq.n	8008a4c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	61bb      	str	r3, [r7, #24]
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00d      	beq.n	8008a74 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f805 	bl	8008a7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	@ 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e002      	b.n	8008aa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aac:	2101      	movs	r1, #1
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f7ff fef2 	bl	8008898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08e      	sub	sp, #56	@ 0x38
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10d      	bne.n	8008afc <xQueueGenericSend+0x38>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	b672      	cpsid	i
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	b662      	cpsie	i
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x46>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGenericSend+0x4a>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGenericSend+0x4c>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10d      	bne.n	8008b30 <xQueueGenericSend+0x6c>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d103      	bne.n	8008b3e <xQueueGenericSend+0x7a>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <xQueueGenericSend+0x7e>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueGenericSend+0x80>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <xQueueGenericSend+0xa0>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	623b      	str	r3, [r7, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b64:	f001 fa2a 	bl	8009fbc <xTaskGetSchedulerState>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <xQueueGenericSend+0xb0>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <xQueueGenericSend+0xb4>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <xQueueGenericSend+0xb6>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10d      	bne.n	8008b9a <xQueueGenericSend+0xd6>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	b672      	cpsid	i
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	b662      	cpsie	i
 8008b92:	61fb      	str	r3, [r7, #28]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b9a:	f001 ff6f 	bl	800aa7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d302      	bcc.n	8008bb0 <xQueueGenericSend+0xec>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d129      	bne.n	8008c04 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb6:	f000 fa1b 	bl	8008ff0 <prvCopyDataToQueue>
 8008bba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc6:	3324      	adds	r3, #36	@ 0x24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f001 f829 	bl	8009c20 <xTaskRemoveFromEventList>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d013      	beq.n	8008bfc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8008cd4 <xQueueGenericSend+0x210>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	e00a      	b.n	8008bfc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bec:	4b39      	ldr	r3, [pc, #228]	@ (8008cd4 <xQueueGenericSend+0x210>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bfc:	f001 ff74 	bl	800aae8 <vPortExitCritical>
				return pdPASS;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e063      	b.n	8008ccc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c0a:	f001 ff6d 	bl	800aae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e05c      	b.n	8008ccc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c18:	f107 0314 	add.w	r3, r7, #20
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f865 	bl	8009cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c26:	f001 ff5f 	bl	800aae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c2a:	f000 fdc1 	bl	80097b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c2e:	f001 ff25 	bl	800aa7c <vPortEnterCritical>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d103      	bne.n	8008c48 <xQueueGenericSend+0x184>
 8008c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c4e:	b25b      	sxtb	r3, r3
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d103      	bne.n	8008c5e <xQueueGenericSend+0x19a>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c5e:	f001 ff43 	bl	800aae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c62:	1d3a      	adds	r2, r7, #4
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 f854 	bl	8009d18 <xTaskCheckForTimeOut>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d124      	bne.n	8008cc0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c78:	f000 fab2 	bl	80091e0 <prvIsQueueFull>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d018      	beq.n	8008cb4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	3310      	adds	r3, #16
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 ff72 	bl	8009b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c92:	f000 fa3d 	bl	8009110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c96:	f000 fd99 	bl	80097cc <xTaskResumeAll>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f af7c 	bne.w	8008b9a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <xQueueGenericSend+0x210>)
 8008ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	e772      	b.n	8008b9a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cb6:	f000 fa2b 	bl	8009110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cba:	f000 fd87 	bl	80097cc <xTaskResumeAll>
 8008cbe:	e76c      	b.n	8008b9a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cc2:	f000 fa25 	bl	8009110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cc6:	f000 fd81 	bl	80097cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3738      	adds	r7, #56	@ 0x38
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	e000ed04 	.word	0xe000ed04

08008cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08e      	sub	sp, #56	@ 0x38
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10d      	bne.n	8008d0c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	b672      	cpsid	i
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	b662      	cpsie	i
 8008d04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <xQueueGenericSendFromISR+0x42>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <xQueueGenericSendFromISR+0x46>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <xQueueGenericSendFromISR+0x48>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10d      	bne.n	8008d40 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	623b      	str	r3, [r7, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d103      	bne.n	8008d4e <xQueueGenericSendFromISR+0x76>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <xQueueGenericSendFromISR+0x7a>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueGenericSendFromISR+0x7c>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	61fb      	str	r3, [r7, #28]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d74:	f001 ff6a 	bl	800ac4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d78:	f3ef 8211 	mrs	r2, BASEPRI
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	61ba      	str	r2, [r7, #24]
 8008d92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d302      	bcc.n	8008daa <xQueueGenericSendFromISR+0xd2>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d12c      	bne.n	8008e04 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dba:	f000 f919 	bl	8008ff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc6:	d112      	bne.n	8008dee <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d016      	beq.n	8008dfe <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	3324      	adds	r3, #36	@ 0x24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 ff23 	bl	8009c20 <xTaskRemoveFromEventList>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00e      	beq.n	8008dfe <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e007      	b.n	8008dfe <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008df2:	3301      	adds	r3, #1
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	b25a      	sxtb	r2, r3
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008e02:	e001      	b.n	8008e08 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3738      	adds	r7, #56	@ 0x38
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08c      	sub	sp, #48	@ 0x30
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10d      	bne.n	8008e56 <xQueueReceive+0x36>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3e:	b672      	cpsid	i
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	b662      	cpsie	i
 8008e4e:	623b      	str	r3, [r7, #32]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <xQueueReceive+0x44>
 8008e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <xQueueReceive+0x48>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <xQueueReceive+0x4a>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <xQueueReceive+0x6a>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	b672      	cpsid	i
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	b662      	cpsie	i
 8008e82:	61fb      	str	r3, [r7, #28]
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e8a:	f001 f897 	bl	8009fbc <xTaskGetSchedulerState>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <xQueueReceive+0x7a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <xQueueReceive+0x7e>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <xQueueReceive+0x80>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10d      	bne.n	8008ec0 <xQueueReceive+0xa0>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	b672      	cpsid	i
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	b662      	cpsie	i
 8008eb8:	61bb      	str	r3, [r7, #24]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ec0:	f001 fddc 	bl	800aa7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01f      	beq.n	8008f10 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed4:	f000 f8f6 	bl	80090c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00f      	beq.n	8008f08 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	3310      	adds	r3, #16
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fe97 	bl	8009c20 <xTaskRemoveFromEventList>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8008fec <xQueueReceive+0x1cc>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f08:	f001 fdee 	bl	800aae8 <vPortExitCritical>
				return pdPASS;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e069      	b.n	8008fe4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d103      	bne.n	8008f1e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f16:	f001 fde7 	bl	800aae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e062      	b.n	8008fe4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f24:	f107 0310 	add.w	r3, r7, #16
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fedf 	bl	8009cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f32:	f001 fdd9 	bl	800aae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f36:	f000 fc3b 	bl	80097b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f3a:	f001 fd9f 	bl	800aa7c <vPortEnterCritical>
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f44:	b25b      	sxtb	r3, r3
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d103      	bne.n	8008f54 <xQueueReceive+0x134>
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f5a:	b25b      	sxtb	r3, r3
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d103      	bne.n	8008f6a <xQueueReceive+0x14a>
 8008f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f6a:	f001 fdbd 	bl	800aae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f6e:	1d3a      	adds	r2, r7, #4
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fece 	bl	8009d18 <xTaskCheckForTimeOut>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d123      	bne.n	8008fca <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f84:	f000 f916 	bl	80091b4 <prvIsQueueEmpty>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d017      	beq.n	8008fbe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	3324      	adds	r3, #36	@ 0x24
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fdec 	bl	8009b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f9e:	f000 f8b7 	bl	8009110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fa2:	f000 fc13 	bl	80097cc <xTaskResumeAll>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d189      	bne.n	8008ec0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008fac:	4b0f      	ldr	r3, [pc, #60]	@ (8008fec <xQueueReceive+0x1cc>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	e780      	b.n	8008ec0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc0:	f000 f8a6 	bl	8009110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fc4:	f000 fc02 	bl	80097cc <xTaskResumeAll>
 8008fc8:	e77a      	b.n	8008ec0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fcc:	f000 f8a0 	bl	8009110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fd0:	f000 fbfc 	bl	80097cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd6:	f000 f8ed 	bl	80091b4 <prvIsQueueEmpty>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f43f af6f 	beq.w	8008ec0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3730      	adds	r7, #48	@ 0x30
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10d      	bne.n	800902a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d14d      	bne.n	80090b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 ffec 	bl	8009ff8 <xTaskPriorityDisinherit>
 8009020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	609a      	str	r2, [r3, #8]
 8009028:	e043      	b.n	80090b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d119      	bne.n	8009064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6858      	ldr	r0, [r3, #4]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009038:	461a      	mov	r2, r3
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	f002 f8c2 	bl	800b1c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	429a      	cmp	r2, r3
 8009058:	d32b      	bcc.n	80090b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e026      	b.n	80090b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68d8      	ldr	r0, [r3, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906c:	461a      	mov	r2, r3
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	f002 f8a8 	bl	800b1c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907c:	425b      	negs	r3, r3
 800907e:	441a      	add	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d207      	bcs.n	80090a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009098:	425b      	negs	r3, r3
 800909a:	441a      	add	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d105      	bne.n	80090b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090ba:	697b      	ldr	r3, [r7, #20]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d018      	beq.n	8009108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090de:	441a      	add	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d303      	bcc.n	80090f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68d9      	ldr	r1, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009100:	461a      	mov	r2, r3
 8009102:	6838      	ldr	r0, [r7, #0]
 8009104:	f002 f85e 	bl	800b1c4 <memcpy>
	}
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009118:	f001 fcb0 	bl	800aa7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009124:	e011      	b.n	800914a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912a:	2b00      	cmp	r3, #0
 800912c:	d012      	beq.n	8009154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3324      	adds	r3, #36	@ 0x24
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fd74 	bl	8009c20 <xTaskRemoveFromEventList>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800913e:	f000 fe53 	bl	8009de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	3b01      	subs	r3, #1
 8009146:	b2db      	uxtb	r3, r3
 8009148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800914a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dce9      	bgt.n	8009126 <prvUnlockQueue+0x16>
 8009152:	e000      	b.n	8009156 <prvUnlockQueue+0x46>
					break;
 8009154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	22ff      	movs	r2, #255	@ 0xff
 800915a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800915e:	f001 fcc3 	bl	800aae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009162:	f001 fc8b 	bl	800aa7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800916c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800916e:	e011      	b.n	8009194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d012      	beq.n	800919e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fd4f 	bl	8009c20 <xTaskRemoveFromEventList>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009188:	f000 fe2e 	bl	8009de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	3b01      	subs	r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dce9      	bgt.n	8009170 <prvUnlockQueue+0x60>
 800919c:	e000      	b.n	80091a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800919e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80091a8:	f001 fc9e 	bl	800aae8 <vPortExitCritical>
}
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091bc:	f001 fc5e 	bl	800aa7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091c8:	2301      	movs	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e001      	b.n	80091d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091d2:	f001 fc89 	bl	800aae8 <vPortExitCritical>

	return xReturn;
 80091d6:	68fb      	ldr	r3, [r7, #12]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091e8:	f001 fc48 	bl	800aa7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d102      	bne.n	80091fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091f8:	2301      	movs	r3, #1
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e001      	b.n	8009202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009202:	f001 fc71 	bl	800aae8 <vPortExitCritical>

	return xReturn;
 8009206:	68fb      	ldr	r3, [r7, #12]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e014      	b.n	800924a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009220:	4a0f      	ldr	r2, [pc, #60]	@ (8009260 <vQueueAddToRegistry+0x50>)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10b      	bne.n	8009244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800922c:	490c      	ldr	r1, [pc, #48]	@ (8009260 <vQueueAddToRegistry+0x50>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009236:	4a0a      	ldr	r2, [pc, #40]	@ (8009260 <vQueueAddToRegistry+0x50>)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	4413      	add	r3, r2
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009242:	e006      	b.n	8009252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3301      	adds	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b07      	cmp	r3, #7
 800924e:	d9e7      	bls.n	8009220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000c58 	.word	0x20000c58

08009264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009274:	f001 fc02 	bl	800aa7c <vPortEnterCritical>
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800927e:	b25b      	sxtb	r3, r3
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d103      	bne.n	800928e <vQueueWaitForMessageRestricted+0x2a>
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009294:	b25b      	sxtb	r3, r3
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d103      	bne.n	80092a4 <vQueueWaitForMessageRestricted+0x40>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092a4:	f001 fc20 	bl	800aae8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	3324      	adds	r3, #36	@ 0x24
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fc83 	bl	8009bc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092be:	6978      	ldr	r0, [r7, #20]
 80092c0:	f7ff ff26 	bl	8009110 <prvUnlockQueue>
	}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08e      	sub	sp, #56	@ 0x38
 80092d0:	af04      	add	r7, sp, #16
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10d      	bne.n	80092fc <xTaskCreateStatic+0x30>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	b672      	cpsid	i
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	b662      	cpsie	i
 80092f4:	623b      	str	r3, [r7, #32]
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	e7fd      	b.n	80092f8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80092fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <xTaskCreateStatic+0x52>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	61fb      	str	r3, [r7, #28]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800931e:	23a8      	movs	r3, #168	@ 0xa8
 8009320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2ba8      	cmp	r3, #168	@ 0xa8
 8009326:	d00d      	beq.n	8009344 <xTaskCreateStatic+0x78>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932c:	b672      	cpsid	i
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	b662      	cpsie	i
 800933c:	61bb      	str	r3, [r7, #24]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009344:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <xTaskCreateStatic+0xbe>
 800934c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01b      	beq.n	800938a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800935a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	2202      	movs	r2, #2
 8009360:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009364:	2300      	movs	r3, #0
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	f107 0314 	add.w	r3, r7, #20
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f851 	bl	8009424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009382:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009384:	f000 f8f8 	bl	8009578 <prvAddNewTaskToReadyList>
 8009388:	e001      	b.n	800938e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800938e:	697b      	ldr	r3, [r7, #20]
	}
 8009390:	4618      	mov	r0, r3
 8009392:	3728      	adds	r7, #40	@ 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08c      	sub	sp, #48	@ 0x30
 800939c:	af04      	add	r7, sp, #16
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093a8:	88fb      	ldrh	r3, [r7, #6]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f001 fc93 	bl	800acd8 <pvPortMalloc>
 80093b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00e      	beq.n	80093d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093ba:	20a8      	movs	r0, #168	@ 0xa8
 80093bc:	f001 fc8c 	bl	800acd8 <pvPortMalloc>
 80093c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80093ce:	e005      	b.n	80093dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093d0:	6978      	ldr	r0, [r7, #20]
 80093d2:	f001 fd4f 	bl	800ae74 <vPortFree>
 80093d6:	e001      	b.n	80093dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d017      	beq.n	8009412 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093ea:	88fa      	ldrh	r2, [r7, #6]
 80093ec:	2300      	movs	r3, #0
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	9302      	str	r3, [sp, #8]
 80093f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f80f 	bl	8009424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009406:	69f8      	ldr	r0, [r7, #28]
 8009408:	f000 f8b6 	bl	8009578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800940c:	2301      	movs	r3, #1
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e002      	b.n	8009418 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009412:	f04f 33ff 	mov.w	r3, #4294967295
 8009416:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009418:	69bb      	ldr	r3, [r7, #24]
	}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009434:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	461a      	mov	r2, r3
 800943c:	21a5      	movs	r1, #165	@ 0xa5
 800943e:	f001 fe35 	bl	800b0ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800944c:	440b      	add	r3, r1
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	f023 0307 	bic.w	r3, r3, #7
 800945a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	b672      	cpsid	i
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	b662      	cpsie	i
 800947a:	617b      	str	r3, [r7, #20]
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	e7fd      	b.n	800947e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01f      	beq.n	80094c8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009488:	2300      	movs	r3, #0
 800948a:	61fb      	str	r3, [r7, #28]
 800948c:	e012      	b.n	80094b4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	7819      	ldrb	r1, [r3, #0]
 8009496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	3334      	adds	r3, #52	@ 0x34
 800949e:	460a      	mov	r2, r1
 80094a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d006      	beq.n	80094bc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	3301      	adds	r3, #1
 80094b2:	61fb      	str	r3, [r7, #28]
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b0f      	cmp	r3, #15
 80094b8:	d9e9      	bls.n	800948e <prvInitialiseNewTask+0x6a>
 80094ba:	e000      	b.n	80094be <prvInitialiseNewTask+0x9a>
			{
				break;
 80094bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094c6:	e003      	b.n	80094d0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	2b37      	cmp	r3, #55	@ 0x37
 80094d4:	d901      	bls.n	80094da <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094d6:	2337      	movs	r3, #55	@ 0x37
 80094d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	2200      	movs	r2, #0
 80094ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	3304      	adds	r3, #4
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff f93d 	bl	8008770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f8:	3318      	adds	r3, #24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff f938 	bl	8008770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009504:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009508:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009514:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	2200      	movs	r2, #0
 800951a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	2200      	movs	r2, #0
 8009522:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	3354      	adds	r3, #84	@ 0x54
 800952a:	224c      	movs	r2, #76	@ 0x4c
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fdbc 	bl	800b0ac <memset>
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	4a0d      	ldr	r2, [pc, #52]	@ (800956c <prvInitialiseNewTask+0x148>)
 8009538:	659a      	str	r2, [r3, #88]	@ 0x58
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	4a0c      	ldr	r2, [pc, #48]	@ (8009570 <prvInitialiseNewTask+0x14c>)
 800953e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	4a0c      	ldr	r2, [pc, #48]	@ (8009574 <prvInitialiseNewTask+0x150>)
 8009544:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	68f9      	ldr	r1, [r7, #12]
 800954a:	69b8      	ldr	r0, [r7, #24]
 800954c:	f001 f984 	bl	800a858 <pxPortInitialiseStack>
 8009550:	4602      	mov	r2, r0
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800955c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009562:	bf00      	nop
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20004ee4 	.word	0x20004ee4
 8009570:	20004f4c 	.word	0x20004f4c
 8009574:	20004fb4 	.word	0x20004fb4

08009578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009580:	f001 fa7c 	bl	800aa7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009584:	4b2d      	ldr	r3, [pc, #180]	@ (800963c <prvAddNewTaskToReadyList+0xc4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	4a2c      	ldr	r2, [pc, #176]	@ (800963c <prvAddNewTaskToReadyList+0xc4>)
 800958c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800958e:	4b2c      	ldr	r3, [pc, #176]	@ (8009640 <prvAddNewTaskToReadyList+0xc8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d109      	bne.n	80095aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009596:	4a2a      	ldr	r2, [pc, #168]	@ (8009640 <prvAddNewTaskToReadyList+0xc8>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800959c:	4b27      	ldr	r3, [pc, #156]	@ (800963c <prvAddNewTaskToReadyList+0xc4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d110      	bne.n	80095c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095a4:	f000 fc44 	bl	8009e30 <prvInitialiseTaskLists>
 80095a8:	e00d      	b.n	80095c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095aa:	4b26      	ldr	r3, [pc, #152]	@ (8009644 <prvAddNewTaskToReadyList+0xcc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095b2:	4b23      	ldr	r3, [pc, #140]	@ (8009640 <prvAddNewTaskToReadyList+0xc8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	429a      	cmp	r2, r3
 80095be:	d802      	bhi.n	80095c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009640 <prvAddNewTaskToReadyList+0xc8>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095c6:	4b20      	ldr	r3, [pc, #128]	@ (8009648 <prvAddNewTaskToReadyList+0xd0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009648 <prvAddNewTaskToReadyList+0xd0>)
 80095ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009648 <prvAddNewTaskToReadyList+0xd0>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095dc:	4b1b      	ldr	r3, [pc, #108]	@ (800964c <prvAddNewTaskToReadyList+0xd4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <prvAddNewTaskToReadyList+0x74>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	4a18      	ldr	r2, [pc, #96]	@ (800964c <prvAddNewTaskToReadyList+0xd4>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <prvAddNewTaskToReadyList+0xd8>)
 80095fa:	441a      	add	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7ff f8c1 	bl	800878a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009608:	f001 fa6e 	bl	800aae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800960c:	4b0d      	ldr	r3, [pc, #52]	@ (8009644 <prvAddNewTaskToReadyList+0xcc>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00e      	beq.n	8009632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009614:	4b0a      	ldr	r3, [pc, #40]	@ (8009640 <prvAddNewTaskToReadyList+0xc8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	429a      	cmp	r2, r3
 8009620:	d207      	bcs.n	8009632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009622:	4b0c      	ldr	r3, [pc, #48]	@ (8009654 <prvAddNewTaskToReadyList+0xdc>)
 8009624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	2000116c 	.word	0x2000116c
 8009640:	20000c98 	.word	0x20000c98
 8009644:	20001178 	.word	0x20001178
 8009648:	20001188 	.word	0x20001188
 800964c:	20001174 	.word	0x20001174
 8009650:	20000c9c 	.word	0x20000c9c
 8009654:	e000ed04 	.word	0xe000ed04

08009658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01a      	beq.n	80096a0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800966a:	4b15      	ldr	r3, [pc, #84]	@ (80096c0 <vTaskDelay+0x68>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <vTaskDelay+0x36>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009676:	b672      	cpsid	i
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	b662      	cpsie	i
 8009686:	60bb      	str	r3, [r7, #8]
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	e7fd      	b.n	800968a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800968e:	f000 f88f 	bl	80097b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009692:	2100      	movs	r1, #0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fd23 	bl	800a0e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800969a:	f000 f897 	bl	80097cc <xTaskResumeAll>
 800969e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80096a6:	4b07      	ldr	r3, [pc, #28]	@ (80096c4 <vTaskDelay+0x6c>)
 80096a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20001194 	.word	0x20001194
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08a      	sub	sp, #40	@ 0x28
 80096cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096d6:	463a      	mov	r2, r7
 80096d8:	1d39      	adds	r1, r7, #4
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fff2 	bl	80086c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	9202      	str	r2, [sp, #8]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	460a      	mov	r2, r1
 80096f6:	4926      	ldr	r1, [pc, #152]	@ (8009790 <vTaskStartScheduler+0xc8>)
 80096f8:	4826      	ldr	r0, [pc, #152]	@ (8009794 <vTaskStartScheduler+0xcc>)
 80096fa:	f7ff fde7 	bl	80092cc <xTaskCreateStatic>
 80096fe:	4603      	mov	r3, r0
 8009700:	4a25      	ldr	r2, [pc, #148]	@ (8009798 <vTaskStartScheduler+0xd0>)
 8009702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009704:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <vTaskStartScheduler+0xd0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	e001      	b.n	8009716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d102      	bne.n	8009722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800971c:	f000 fd34 	bl	800a188 <xTimerCreateTimerTask>
 8009720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d11d      	bne.n	8009764 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	b672      	cpsid	i
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	b662      	cpsie	i
 800973c:	613b      	str	r3, [r7, #16]
}
 800973e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009740:	4b16      	ldr	r3, [pc, #88]	@ (800979c <vTaskStartScheduler+0xd4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3354      	adds	r3, #84	@ 0x54
 8009746:	4a16      	ldr	r2, [pc, #88]	@ (80097a0 <vTaskStartScheduler+0xd8>)
 8009748:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800974a:	4b16      	ldr	r3, [pc, #88]	@ (80097a4 <vTaskStartScheduler+0xdc>)
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009752:	4b15      	ldr	r3, [pc, #84]	@ (80097a8 <vTaskStartScheduler+0xe0>)
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009758:	4b14      	ldr	r3, [pc, #80]	@ (80097ac <vTaskStartScheduler+0xe4>)
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800975e:	f001 f90f 	bl	800a980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009762:	e011      	b.n	8009788 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976a:	d10d      	bne.n	8009788 <vTaskStartScheduler+0xc0>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009770:	b672      	cpsid	i
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	b662      	cpsie	i
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	e7fd      	b.n	8009784 <vTaskStartScheduler+0xbc>
}
 8009788:	bf00      	nop
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	0800b2bc 	.word	0x0800b2bc
 8009794:	08009e01 	.word	0x08009e01
 8009798:	20001190 	.word	0x20001190
 800979c:	20000c98 	.word	0x20000c98
 80097a0:	20000018 	.word	0x20000018
 80097a4:	2000118c 	.word	0x2000118c
 80097a8:	20001178 	.word	0x20001178
 80097ac:	20001170 	.word	0x20001170

080097b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097b4:	4b04      	ldr	r3, [pc, #16]	@ (80097c8 <vTaskSuspendAll+0x18>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a03      	ldr	r2, [pc, #12]	@ (80097c8 <vTaskSuspendAll+0x18>)
 80097bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097be:	bf00      	nop
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	20001194 	.word	0x20001194

080097cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097da:	4b43      	ldr	r3, [pc, #268]	@ (80098e8 <xTaskResumeAll+0x11c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10d      	bne.n	80097fe <xTaskResumeAll+0x32>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e6:	b672      	cpsid	i
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	b662      	cpsie	i
 80097f6:	603b      	str	r3, [r7, #0]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097fe:	f001 f93d 	bl	800aa7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009802:	4b39      	ldr	r3, [pc, #228]	@ (80098e8 <xTaskResumeAll+0x11c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3b01      	subs	r3, #1
 8009808:	4a37      	ldr	r2, [pc, #220]	@ (80098e8 <xTaskResumeAll+0x11c>)
 800980a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980c:	4b36      	ldr	r3, [pc, #216]	@ (80098e8 <xTaskResumeAll+0x11c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d162      	bne.n	80098da <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009814:	4b35      	ldr	r3, [pc, #212]	@ (80098ec <xTaskResumeAll+0x120>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d05e      	beq.n	80098da <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800981c:	e02f      	b.n	800987e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981e:	4b34      	ldr	r3, [pc, #208]	@ (80098f0 <xTaskResumeAll+0x124>)
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3318      	adds	r3, #24
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff f80a 	bl	8008844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff f805 	bl	8008844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983e:	4b2d      	ldr	r3, [pc, #180]	@ (80098f4 <xTaskResumeAll+0x128>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d903      	bls.n	800984e <xTaskResumeAll+0x82>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	4a2a      	ldr	r2, [pc, #168]	@ (80098f4 <xTaskResumeAll+0x128>)
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4a27      	ldr	r2, [pc, #156]	@ (80098f8 <xTaskResumeAll+0x12c>)
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fe ff90 	bl	800878a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986e:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <xTaskResumeAll+0x130>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	429a      	cmp	r2, r3
 8009876:	d302      	bcc.n	800987e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009878:	4b21      	ldr	r3, [pc, #132]	@ (8009900 <xTaskResumeAll+0x134>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800987e:	4b1c      	ldr	r3, [pc, #112]	@ (80098f0 <xTaskResumeAll+0x124>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1cb      	bne.n	800981e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800988c:	f000 fb76 	bl	8009f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009890:	4b1c      	ldr	r3, [pc, #112]	@ (8009904 <xTaskResumeAll+0x138>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d010      	beq.n	80098be <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800989c:	f000 f846 	bl	800992c <xTaskIncrementTick>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80098a6:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <xTaskResumeAll+0x134>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f1      	bne.n	800989c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80098b8:	4b12      	ldr	r3, [pc, #72]	@ (8009904 <xTaskResumeAll+0x138>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098be:	4b10      	ldr	r3, [pc, #64]	@ (8009900 <xTaskResumeAll+0x134>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <xTaskResumeAll+0x13c>)
 80098cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098da:	f001 f905 	bl	800aae8 <vPortExitCritical>

	return xAlreadyYielded;
 80098de:	68bb      	ldr	r3, [r7, #8]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20001194 	.word	0x20001194
 80098ec:	2000116c 	.word	0x2000116c
 80098f0:	2000112c 	.word	0x2000112c
 80098f4:	20001174 	.word	0x20001174
 80098f8:	20000c9c 	.word	0x20000c9c
 80098fc:	20000c98 	.word	0x20000c98
 8009900:	20001180 	.word	0x20001180
 8009904:	2000117c 	.word	0x2000117c
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009912:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <xTaskGetTickCount+0x1c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009918:	687b      	ldr	r3, [r7, #4]
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	20001170 	.word	0x20001170

0800992c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009936:	4b50      	ldr	r3, [pc, #320]	@ (8009a78 <xTaskIncrementTick+0x14c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f040 808c 	bne.w	8009a58 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009940:	4b4e      	ldr	r3, [pc, #312]	@ (8009a7c <xTaskIncrementTick+0x150>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009948:	4a4c      	ldr	r2, [pc, #304]	@ (8009a7c <xTaskIncrementTick+0x150>)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d123      	bne.n	800999c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009954:	4b4a      	ldr	r3, [pc, #296]	@ (8009a80 <xTaskIncrementTick+0x154>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00d      	beq.n	800997a <xTaskIncrementTick+0x4e>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	b672      	cpsid	i
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	b662      	cpsie	i
 8009972:	603b      	str	r3, [r7, #0]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <xTaskIncrementTick+0x4a>
 800997a:	4b41      	ldr	r3, [pc, #260]	@ (8009a80 <xTaskIncrementTick+0x154>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	4b40      	ldr	r3, [pc, #256]	@ (8009a84 <xTaskIncrementTick+0x158>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a3e      	ldr	r2, [pc, #248]	@ (8009a80 <xTaskIncrementTick+0x154>)
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	4a3e      	ldr	r2, [pc, #248]	@ (8009a84 <xTaskIncrementTick+0x158>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a88 <xTaskIncrementTick+0x15c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	4a3c      	ldr	r2, [pc, #240]	@ (8009a88 <xTaskIncrementTick+0x15c>)
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	f000 faf0 	bl	8009f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800999c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a8c <xTaskIncrementTick+0x160>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d349      	bcc.n	8009a3a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a6:	4b36      	ldr	r3, [pc, #216]	@ (8009a80 <xTaskIncrementTick+0x154>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d104      	bne.n	80099ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b0:	4b36      	ldr	r3, [pc, #216]	@ (8009a8c <xTaskIncrementTick+0x160>)
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	601a      	str	r2, [r3, #0]
					break;
 80099b8:	e03f      	b.n	8009a3a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ba:	4b31      	ldr	r3, [pc, #196]	@ (8009a80 <xTaskIncrementTick+0x154>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d203      	bcs.n	80099da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099d2:	4a2e      	ldr	r2, [pc, #184]	@ (8009a8c <xTaskIncrementTick+0x160>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099d8:	e02f      	b.n	8009a3a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe ff30 	bl	8008844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	3318      	adds	r3, #24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe ff27 	bl	8008844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fa:	4b25      	ldr	r3, [pc, #148]	@ (8009a90 <xTaskIncrementTick+0x164>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d903      	bls.n	8009a0a <xTaskIncrementTick+0xde>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	4a22      	ldr	r2, [pc, #136]	@ (8009a90 <xTaskIncrementTick+0x164>)
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4a1f      	ldr	r2, [pc, #124]	@ (8009a94 <xTaskIncrementTick+0x168>)
 8009a18:	441a      	add	r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f7fe feb2 	bl	800878a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <xTaskIncrementTick+0x16c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3b8      	bcc.n	80099a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a38:	e7b5      	b.n	80099a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a3a:	4b17      	ldr	r3, [pc, #92]	@ (8009a98 <xTaskIncrementTick+0x16c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a40:	4914      	ldr	r1, [pc, #80]	@ (8009a94 <xTaskIncrementTick+0x168>)
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d907      	bls.n	8009a62 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009a52:	2301      	movs	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	e004      	b.n	8009a62 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a58:	4b10      	ldr	r3, [pc, #64]	@ (8009a9c <xTaskIncrementTick+0x170>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8009a9c <xTaskIncrementTick+0x170>)
 8009a60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a62:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa0 <xTaskIncrementTick+0x174>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a6e:	697b      	ldr	r3, [r7, #20]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20001194 	.word	0x20001194
 8009a7c:	20001170 	.word	0x20001170
 8009a80:	20001124 	.word	0x20001124
 8009a84:	20001128 	.word	0x20001128
 8009a88:	20001184 	.word	0x20001184
 8009a8c:	2000118c 	.word	0x2000118c
 8009a90:	20001174 	.word	0x20001174
 8009a94:	20000c9c 	.word	0x20000c9c
 8009a98:	20000c98 	.word	0x20000c98
 8009a9c:	2000117c 	.word	0x2000117c
 8009aa0:	20001180 	.word	0x20001180

08009aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8009b5c <vTaskSwitchContext+0xb8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8009b60 <vTaskSwitchContext+0xbc>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ab8:	e049      	b.n	8009b4e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8009aba:	4b29      	ldr	r3, [pc, #164]	@ (8009b60 <vTaskSwitchContext+0xbc>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac0:	4b28      	ldr	r3, [pc, #160]	@ (8009b64 <vTaskSwitchContext+0xc0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	e013      	b.n	8009af0 <vTaskSwitchContext+0x4c>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10d      	bne.n	8009aea <vTaskSwitchContext+0x46>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	b672      	cpsid	i
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	b662      	cpsie	i
 8009ae2:	607b      	str	r3, [r7, #4]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <vTaskSwitchContext+0x42>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	491d      	ldr	r1, [pc, #116]	@ (8009b68 <vTaskSwitchContext+0xc4>)
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	440b      	add	r3, r1
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0e1      	beq.n	8009ac8 <vTaskSwitchContext+0x24>
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4a16      	ldr	r2, [pc, #88]	@ (8009b68 <vTaskSwitchContext+0xc4>)
 8009b10:	4413      	add	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	3308      	adds	r3, #8
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d104      	bne.n	8009b34 <vTaskSwitchContext+0x90>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	605a      	str	r2, [r3, #4]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b6c <vTaskSwitchContext+0xc8>)
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	4a09      	ldr	r2, [pc, #36]	@ (8009b64 <vTaskSwitchContext+0xc0>)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b44:	4b09      	ldr	r3, [pc, #36]	@ (8009b6c <vTaskSwitchContext+0xc8>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3354      	adds	r3, #84	@ 0x54
 8009b4a:	4a09      	ldr	r2, [pc, #36]	@ (8009b70 <vTaskSwitchContext+0xcc>)
 8009b4c:	6013      	str	r3, [r2, #0]
}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20001194 	.word	0x20001194
 8009b60:	20001180 	.word	0x20001180
 8009b64:	20001174 	.word	0x20001174
 8009b68:	20000c9c 	.word	0x20000c9c
 8009b6c:	20000c98 	.word	0x20000c98
 8009b70:	20000018 	.word	0x20000018

08009b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10d      	bne.n	8009ba0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	b672      	cpsid	i
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	b662      	cpsie	i
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	e7fd      	b.n	8009b9c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <vTaskPlaceOnEventList+0x4c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3318      	adds	r3, #24
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7fe fe12 	bl	80087d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bae:	2101      	movs	r1, #1
 8009bb0:	6838      	ldr	r0, [r7, #0]
 8009bb2:	f000 fa95 	bl	800a0e0 <prvAddCurrentTaskToDelayedList>
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000c98 	.word	0x20000c98

08009bc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10d      	bne.n	8009bf2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	b672      	cpsid	i
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	b662      	cpsie	i
 8009bea:	617b      	str	r3, [r7, #20]
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <vTaskPlaceOnEventListRestricted+0x58>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3318      	adds	r3, #24
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f7fe fdc5 	bl	800878a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009c06:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	68b8      	ldr	r0, [r7, #8]
 8009c10:	f000 fa66 	bl	800a0e0 <prvAddCurrentTaskToDelayedList>
	}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000c98 	.word	0x20000c98

08009c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10d      	bne.n	8009c52 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	b672      	cpsid	i
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	b662      	cpsie	i
 8009c4a:	60fb      	str	r3, [r7, #12]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3318      	adds	r3, #24
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fdf4 	bl	8008844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd4 <xTaskRemoveFromEventList+0xb4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11d      	bne.n	8009ca0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe fdeb 	bl	8008844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c72:	4b19      	ldr	r3, [pc, #100]	@ (8009cd8 <xTaskRemoveFromEventList+0xb8>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d903      	bls.n	8009c82 <xTaskRemoveFromEventList+0x62>
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	4a16      	ldr	r2, [pc, #88]	@ (8009cd8 <xTaskRemoveFromEventList+0xb8>)
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4a13      	ldr	r2, [pc, #76]	@ (8009cdc <xTaskRemoveFromEventList+0xbc>)
 8009c90:	441a      	add	r2, r3
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4619      	mov	r1, r3
 8009c98:	4610      	mov	r0, r2
 8009c9a:	f7fe fd76 	bl	800878a <vListInsertEnd>
 8009c9e:	e005      	b.n	8009cac <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3318      	adds	r3, #24
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	480e      	ldr	r0, [pc, #56]	@ (8009ce0 <xTaskRemoveFromEventList+0xc0>)
 8009ca8:	f7fe fd6f 	bl	800878a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce4 <xTaskRemoveFromEventList+0xc4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d905      	bls.n	8009cc6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <xTaskRemoveFromEventList+0xc8>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e001      	b.n	8009cca <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cca:	697b      	ldr	r3, [r7, #20]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20001194 	.word	0x20001194
 8009cd8:	20001174 	.word	0x20001174
 8009cdc:	20000c9c 	.word	0x20000c9c
 8009ce0:	2000112c 	.word	0x2000112c
 8009ce4:	20000c98 	.word	0x20000c98
 8009ce8:	20001180 	.word	0x20001180

08009cec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cf4:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <vTaskInternalSetTimeOutState+0x24>)
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cfc:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <vTaskInternalSetTimeOutState+0x28>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	605a      	str	r2, [r3, #4]
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20001184 	.word	0x20001184
 8009d14:	20001170 	.word	0x20001170

08009d18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10d      	bne.n	8009d44 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	b672      	cpsid	i
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	b662      	cpsie	i
 8009d3c:	613b      	str	r3, [r7, #16]
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10d      	bne.n	8009d66 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	b672      	cpsid	i
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	b662      	cpsie	i
 8009d5e:	60fb      	str	r3, [r7, #12]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009d66:	f000 fe89 	bl	800aa7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009de0 <xTaskCheckForTimeOut+0xc8>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d102      	bne.n	8009d8a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	e023      	b.n	8009dd2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	4b15      	ldr	r3, [pc, #84]	@ (8009de4 <xTaskCheckForTimeOut+0xcc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d007      	beq.n	8009da6 <xTaskCheckForTimeOut+0x8e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d302      	bcc.n	8009da6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009da0:	2301      	movs	r3, #1
 8009da2:	61fb      	str	r3, [r7, #28]
 8009da4:	e015      	b.n	8009dd2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d20b      	bcs.n	8009dc8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff ff95 	bl	8009cec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
 8009dc6:	e004      	b.n	8009dd2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dd2:	f000 fe89 	bl	800aae8 <vPortExitCritical>

	return xReturn;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	20001170 	.word	0x20001170
 8009de4:	20001184 	.word	0x20001184

08009de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dec:	4b03      	ldr	r3, [pc, #12]	@ (8009dfc <vTaskMissedYield+0x14>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
}
 8009df2:	bf00      	nop
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20001180 	.word	0x20001180

08009e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e08:	f000 f852 	bl	8009eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e0c:	4b06      	ldr	r3, [pc, #24]	@ (8009e28 <prvIdleTask+0x28>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d9f9      	bls.n	8009e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e14:	4b05      	ldr	r3, [pc, #20]	@ (8009e2c <prvIdleTask+0x2c>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e24:	e7f0      	b.n	8009e08 <prvIdleTask+0x8>
 8009e26:	bf00      	nop
 8009e28:	20000c9c 	.word	0x20000c9c
 8009e2c:	e000ed04 	.word	0xe000ed04

08009e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e36:	2300      	movs	r3, #0
 8009e38:	607b      	str	r3, [r7, #4]
 8009e3a:	e00c      	b.n	8009e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4a12      	ldr	r2, [pc, #72]	@ (8009e90 <prvInitialiseTaskLists+0x60>)
 8009e48:	4413      	add	r3, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe fc70 	bl	8008730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3301      	adds	r3, #1
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b37      	cmp	r3, #55	@ 0x37
 8009e5a:	d9ef      	bls.n	8009e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e5c:	480d      	ldr	r0, [pc, #52]	@ (8009e94 <prvInitialiseTaskLists+0x64>)
 8009e5e:	f7fe fc67 	bl	8008730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e62:	480d      	ldr	r0, [pc, #52]	@ (8009e98 <prvInitialiseTaskLists+0x68>)
 8009e64:	f7fe fc64 	bl	8008730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e68:	480c      	ldr	r0, [pc, #48]	@ (8009e9c <prvInitialiseTaskLists+0x6c>)
 8009e6a:	f7fe fc61 	bl	8008730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e6e:	480c      	ldr	r0, [pc, #48]	@ (8009ea0 <prvInitialiseTaskLists+0x70>)
 8009e70:	f7fe fc5e 	bl	8008730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e74:	480b      	ldr	r0, [pc, #44]	@ (8009ea4 <prvInitialiseTaskLists+0x74>)
 8009e76:	f7fe fc5b 	bl	8008730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea8 <prvInitialiseTaskLists+0x78>)
 8009e7c:	4a05      	ldr	r2, [pc, #20]	@ (8009e94 <prvInitialiseTaskLists+0x64>)
 8009e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e80:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <prvInitialiseTaskLists+0x7c>)
 8009e82:	4a05      	ldr	r2, [pc, #20]	@ (8009e98 <prvInitialiseTaskLists+0x68>)
 8009e84:	601a      	str	r2, [r3, #0]
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000c9c 	.word	0x20000c9c
 8009e94:	200010fc 	.word	0x200010fc
 8009e98:	20001110 	.word	0x20001110
 8009e9c:	2000112c 	.word	0x2000112c
 8009ea0:	20001140 	.word	0x20001140
 8009ea4:	20001158 	.word	0x20001158
 8009ea8:	20001124 	.word	0x20001124
 8009eac:	20001128 	.word	0x20001128

08009eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eb6:	e019      	b.n	8009eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009eb8:	f000 fde0 	bl	800aa7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ebc:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <prvCheckTasksWaitingTermination+0x50>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fe fcbb 	bl	8008844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <prvCheckTasksWaitingTermination+0x54>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8009f04 <prvCheckTasksWaitingTermination+0x54>)
 8009ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <prvCheckTasksWaitingTermination+0x58>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4a0a      	ldr	r2, [pc, #40]	@ (8009f08 <prvCheckTasksWaitingTermination+0x58>)
 8009ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ee2:	f000 fe01 	bl	800aae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f810 	bl	8009f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eec:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <prvCheckTasksWaitingTermination+0x58>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e1      	bne.n	8009eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20001140 	.word	0x20001140
 8009f04:	2000116c 	.word	0x2000116c
 8009f08:	20001154 	.word	0x20001154

08009f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3354      	adds	r3, #84	@ 0x54
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 f8cf 	bl	800b0bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 ffa1 	bl	800ae74 <vPortFree>
				vPortFree( pxTCB );
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 ff9e 	bl	800ae74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f38:	e01b      	b.n	8009f72 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d103      	bne.n	8009f4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 ff95 	bl	800ae74 <vPortFree>
	}
 8009f4a:	e012      	b.n	8009f72 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d00d      	beq.n	8009f72 <prvDeleteTCB+0x66>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	60fb      	str	r3, [r7, #12]
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	e7fd      	b.n	8009f6e <prvDeleteTCB+0x62>
	}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f82:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <prvResetNextTaskUnblockTime+0x38>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f94:	e008      	b.n	8009fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f96:	4b07      	ldr	r3, [pc, #28]	@ (8009fb4 <prvResetNextTaskUnblockTime+0x38>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4a04      	ldr	r2, [pc, #16]	@ (8009fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009fa6:	6013      	str	r3, [r2, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	20001124 	.word	0x20001124
 8009fb8:	2000118c 	.word	0x2000118c

08009fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff0 <xTaskGetSchedulerState+0x34>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	607b      	str	r3, [r7, #4]
 8009fce:	e008      	b.n	8009fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd0:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <xTaskGetSchedulerState+0x38>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fd8:	2302      	movs	r3, #2
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	e001      	b.n	8009fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fe2:	687b      	ldr	r3, [r7, #4]
	}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20001178 	.word	0x20001178
 8009ff4:	20001194 	.word	0x20001194

08009ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d05c      	beq.n	800a0c8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a00e:	4b31      	ldr	r3, [pc, #196]	@ (800a0d4 <xTaskPriorityDisinherit+0xdc>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	429a      	cmp	r2, r3
 800a016:	d00d      	beq.n	800a034 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01c:	b672      	cpsid	i
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	b662      	cpsie	i
 800a02c:	60fb      	str	r3, [r7, #12]
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	e7fd      	b.n	800a030 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10d      	bne.n	800a058 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	b672      	cpsid	i
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	b662      	cpsie	i
 800a050:	60bb      	str	r3, [r7, #8]
}
 800a052:	bf00      	nop
 800a054:	bf00      	nop
 800a056:	e7fd      	b.n	800a054 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a05c:	1e5a      	subs	r2, r3, #1
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d02c      	beq.n	800a0c8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a072:	2b00      	cmp	r3, #0
 800a074:	d128      	bne.n	800a0c8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3304      	adds	r3, #4
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fbe2 	bl	8008844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d8 <xTaskPriorityDisinherit+0xe0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d903      	bls.n	800a0a8 <xTaskPriorityDisinherit+0xb0>
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a0d8 <xTaskPriorityDisinherit+0xe0>)
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4a09      	ldr	r2, [pc, #36]	@ (800a0dc <xTaskPriorityDisinherit+0xe4>)
 800a0b6:	441a      	add	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	f7fe fb63 	bl	800878a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0c8:	697b      	ldr	r3, [r7, #20]
	}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000c98 	.word	0x20000c98
 800a0d8:	20001174 	.word	0x20001174
 800a0dc:	20000c9c 	.word	0x20000c9c

0800a0e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ea:	4b21      	ldr	r3, [pc, #132]	@ (800a170 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0f0:	4b20      	ldr	r3, [pc, #128]	@ (800a174 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fba4 	bl	8008844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d10a      	bne.n	800a11a <prvAddCurrentTaskToDelayedList+0x3a>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a10a:	4b1a      	ldr	r3, [pc, #104]	@ (800a174 <prvAddCurrentTaskToDelayedList+0x94>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4819      	ldr	r0, [pc, #100]	@ (800a178 <prvAddCurrentTaskToDelayedList+0x98>)
 800a114:	f7fe fb39 	bl	800878a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a118:	e026      	b.n	800a168 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4413      	add	r3, r2
 800a120:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a122:	4b14      	ldr	r3, [pc, #80]	@ (800a174 <prvAddCurrentTaskToDelayedList+0x94>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d209      	bcs.n	800a146 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a132:	4b12      	ldr	r3, [pc, #72]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b0f      	ldr	r3, [pc, #60]	@ (800a174 <prvAddCurrentTaskToDelayedList+0x94>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f7fe fb47 	bl	80087d2 <vListInsert>
}
 800a144:	e010      	b.n	800a168 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a146:	4b0e      	ldr	r3, [pc, #56]	@ (800a180 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <prvAddCurrentTaskToDelayedList+0x94>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3304      	adds	r3, #4
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7fe fb3d 	bl	80087d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a158:	4b0a      	ldr	r3, [pc, #40]	@ (800a184 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d202      	bcs.n	800a168 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a162:	4a08      	ldr	r2, [pc, #32]	@ (800a184 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6013      	str	r3, [r2, #0]
}
 800a168:	bf00      	nop
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20001170 	.word	0x20001170
 800a174:	20000c98 	.word	0x20000c98
 800a178:	20001158 	.word	0x20001158
 800a17c:	20001128 	.word	0x20001128
 800a180:	20001124 	.word	0x20001124
 800a184:	2000118c 	.word	0x2000118c

0800a188 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	@ 0x28
 800a18c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a192:	f000 fb21 	bl	800a7d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a196:	4b1e      	ldr	r3, [pc, #120]	@ (800a210 <xTimerCreateTimerTask+0x88>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d021      	beq.n	800a1e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1a6:	1d3a      	adds	r2, r7, #4
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	f107 030c 	add.w	r3, r7, #12
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe faa3 	bl	80086fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	9202      	str	r2, [sp, #8]
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	460a      	mov	r2, r1
 800a1c8:	4912      	ldr	r1, [pc, #72]	@ (800a214 <xTimerCreateTimerTask+0x8c>)
 800a1ca:	4813      	ldr	r0, [pc, #76]	@ (800a218 <xTimerCreateTimerTask+0x90>)
 800a1cc:	f7ff f87e 	bl	80092cc <xTaskCreateStatic>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4a12      	ldr	r2, [pc, #72]	@ (800a21c <xTimerCreateTimerTask+0x94>)
 800a1d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1d6:	4b11      	ldr	r3, [pc, #68]	@ (800a21c <xTimerCreateTimerTask+0x94>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10d      	bne.n	800a204 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ec:	b672      	cpsid	i
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	b662      	cpsie	i
 800a1fc:	613b      	str	r3, [r7, #16]
}
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	e7fd      	b.n	800a200 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a204:	697b      	ldr	r3, [r7, #20]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200011c8 	.word	0x200011c8
 800a214:	0800b2c4 	.word	0x0800b2c4
 800a218:	0800a361 	.word	0x0800a361
 800a21c:	200011cc 	.word	0x200011cc

0800a220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	@ 0x28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10d      	bne.n	800a254 <xTimerGenericCommand+0x34>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	b672      	cpsid	i
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	b662      	cpsie	i
 800a24c:	623b      	str	r3, [r7, #32]
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a254:	4b19      	ldr	r3, [pc, #100]	@ (800a2bc <xTimerGenericCommand+0x9c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d02a      	beq.n	800a2b2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	dc18      	bgt.n	800a2a0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a26e:	f7ff fea5 	bl	8009fbc <xTaskGetSchedulerState>
 800a272:	4603      	mov	r3, r0
 800a274:	2b02      	cmp	r3, #2
 800a276:	d109      	bne.n	800a28c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a278:	4b10      	ldr	r3, [pc, #64]	@ (800a2bc <xTimerGenericCommand+0x9c>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	2300      	movs	r3, #0
 800a282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a284:	f7fe fc1e 	bl	8008ac4 <xQueueGenericSend>
 800a288:	6278      	str	r0, [r7, #36]	@ 0x24
 800a28a:	e012      	b.n	800a2b2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a28c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <xTimerGenericCommand+0x9c>)
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	f107 0110 	add.w	r1, r7, #16
 800a294:	2300      	movs	r3, #0
 800a296:	2200      	movs	r2, #0
 800a298:	f7fe fc14 	bl	8008ac4 <xQueueGenericSend>
 800a29c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a29e:	e008      	b.n	800a2b2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2a0:	4b06      	ldr	r3, [pc, #24]	@ (800a2bc <xTimerGenericCommand+0x9c>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	f107 0110 	add.w	r1, r7, #16
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	f7fe fd14 	bl	8008cd8 <xQueueGenericSendFromISR>
 800a2b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3728      	adds	r7, #40	@ 0x28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	200011c8 	.word	0x200011c8

0800a2c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ca:	4b24      	ldr	r3, [pc, #144]	@ (800a35c <prvProcessExpiredTimer+0x9c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe fab3 	bl	8008844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d025      	beq.n	800a338 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	18d1      	adds	r1, r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6978      	ldr	r0, [r7, #20]
 800a2fa:	f000 f8d7 	bl	800a4ac <prvInsertTimerInActiveList>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d022      	beq.n	800a34a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2300      	movs	r3, #0
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	2100      	movs	r1, #0
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f7ff ff86 	bl	800a220 <xTimerGenericCommand>
 800a314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d116      	bne.n	800a34a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a320:	b672      	cpsid	i
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	b662      	cpsie	i
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a33e:	f023 0301 	bic.w	r3, r3, #1
 800a342:	b2da      	uxtb	r2, r3
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	6978      	ldr	r0, [r7, #20]
 800a350:	4798      	blx	r3
}
 800a352:	bf00      	nop
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	200011c0 	.word	0x200011c0

0800a360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a368:	f107 0308 	add.w	r3, r7, #8
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f859 	bl	800a424 <prvGetNextExpireTime>
 800a372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f805 	bl	800a388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a37e:	f000 f8d7 	bl	800a530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a382:	bf00      	nop
 800a384:	e7f0      	b.n	800a368 <prvTimerTask+0x8>
	...

0800a388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a392:	f7ff fa0d 	bl	80097b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a396:	f107 0308 	add.w	r3, r7, #8
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f866 	bl	800a46c <prvSampleTimeNow>
 800a3a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d130      	bne.n	800a40a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <prvProcessTimerOrBlockTask+0x3c>
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d806      	bhi.n	800a3c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3b6:	f7ff fa09 	bl	80097cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ff7f 	bl	800a2c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3c2:	e024      	b.n	800a40e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3ca:	4b13      	ldr	r3, [pc, #76]	@ (800a418 <prvProcessTimerOrBlockTask+0x90>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <prvProcessTimerOrBlockTask+0x50>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <prvProcessTimerOrBlockTask+0x52>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a41c <prvProcessTimerOrBlockTask+0x94>)
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f7fe ff3b 	bl	8009264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3ee:	f7ff f9ed 	bl	80097cc <xTaskResumeAll>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3f8:	4b09      	ldr	r3, [pc, #36]	@ (800a420 <prvProcessTimerOrBlockTask+0x98>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
}
 800a408:	e001      	b.n	800a40e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a40a:	f7ff f9df 	bl	80097cc <xTaskResumeAll>
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	200011c4 	.word	0x200011c4
 800a41c:	200011c8 	.word	0x200011c8
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a42c:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <prvGetNextExpireTime+0x44>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <prvGetNextExpireTime+0x16>
 800a436:	2201      	movs	r2, #1
 800a438:	e000      	b.n	800a43c <prvGetNextExpireTime+0x18>
 800a43a:	2200      	movs	r2, #0
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a448:	4b07      	ldr	r3, [pc, #28]	@ (800a468 <prvGetNextExpireTime+0x44>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	e001      	b.n	800a458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a458:	68fb      	ldr	r3, [r7, #12]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	200011c0 	.word	0x200011c0

0800a46c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a474:	f7ff fa4a 	bl	800990c <xTaskGetTickCount>
 800a478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a47a:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a8 <prvSampleTimeNow+0x3c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	429a      	cmp	r2, r3
 800a482:	d205      	bcs.n	800a490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a484:	f000 f940 	bl	800a708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e002      	b.n	800a496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a496:	4a04      	ldr	r2, [pc, #16]	@ (800a4a8 <prvSampleTimeNow+0x3c>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a49c:	68fb      	ldr	r3, [r7, #12]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200011d0 	.word	0x200011d0

0800a4ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d812      	bhi.n	800a4f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	e01b      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4e6:	4b10      	ldr	r3, [pc, #64]	@ (800a528 <prvInsertTimerInActiveList+0x7c>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f7fe f96e 	bl	80087d2 <vListInsert>
 800a4f6:	e012      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d206      	bcs.n	800a50e <prvInsertTimerInActiveList+0x62>
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d302      	bcc.n	800a50e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e007      	b.n	800a51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a50e:	4b07      	ldr	r3, [pc, #28]	@ (800a52c <prvInsertTimerInActiveList+0x80>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fe f95a 	bl	80087d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a51e:	697b      	ldr	r3, [r7, #20]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	200011c4 	.word	0x200011c4
 800a52c:	200011c0 	.word	0x200011c0

0800a530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	@ 0x38
 800a534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a536:	e0d4      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da1b      	bge.n	800a576 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a53e:	1d3b      	adds	r3, r7, #4
 800a540:	3304      	adds	r3, #4
 800a542:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54e:	b672      	cpsid	i
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	b662      	cpsie	i
 800a55e:	61fb      	str	r3, [r7, #28]
}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	e7fd      	b.n	800a562 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a56c:	6850      	ldr	r0, [r2, #4]
 800a56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a570:	6892      	ldr	r2, [r2, #8]
 800a572:	4611      	mov	r1, r2
 800a574:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f2c0 80b2 	blt.w	800a6e2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	3304      	adds	r3, #4
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe f958 	bl	8008844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a594:	463b      	mov	r3, r7
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff ff68 	bl	800a46c <prvSampleTimeNow>
 800a59c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	f200 809b 	bhi.w	800a6dc <prvProcessReceivedCommands+0x1ac>
 800a5a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ac <prvProcessReceivedCommands+0x7c>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a5d5 	.word	0x0800a5d5
 800a5b8:	0800a64f 	.word	0x0800a64f
 800a5bc:	0800a663 	.word	0x0800a663
 800a5c0:	0800a6b3 	.word	0x0800a6b3
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a5d5 	.word	0x0800a5d5
 800a5cc:	0800a64f 	.word	0x0800a64f
 800a5d0:	0800a663 	.word	0x0800a663
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5da:	f043 0301 	orr.w	r3, r3, #1
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	18d1      	adds	r1, r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f4:	f7ff ff5a 	bl	800a4ac <prvInsertTimerInActiveList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d070      	beq.n	800a6e0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a604:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d065      	beq.n	800a6e0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	441a      	add	r2, r3
 800a61c:	2300      	movs	r3, #0
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2300      	movs	r3, #0
 800a622:	2100      	movs	r1, #0
 800a624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a626:	f7ff fdfb 	bl	800a220 <xTimerGenericCommand>
 800a62a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d156      	bne.n	800a6e0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	b672      	cpsid	i
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	b662      	cpsie	i
 800a646:	61bb      	str	r3, [r7, #24]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a660:	e03f      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a668:	f043 0301 	orr.w	r3, r3, #1
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a670:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10d      	bne.n	800a69e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	b672      	cpsid	i
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	b662      	cpsie	i
 800a696:	617b      	str	r3, [r7, #20]
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	e7fd      	b.n	800a69a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	699a      	ldr	r2, [r3, #24]
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	18d1      	adds	r1, r2, r3
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6ac:	f7ff fefe 	bl	800a4ac <prvInsertTimerInActiveList>
					break;
 800a6b0:	e017      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a6c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c2:	f000 fbd7 	bl	800ae74 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6c6:	e00c      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6da:	e002      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a6dc:	bf00      	nop
 800a6de:	e000      	b.n	800a6e2 <prvProcessReceivedCommands+0x1b2>
					break;
 800a6e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6e2:	4b08      	ldr	r3, [pc, #32]	@ (800a704 <prvProcessReceivedCommands+0x1d4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	1d39      	adds	r1, r7, #4
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fb98 	bl	8008e20 <xQueueReceive>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f47f af20 	bne.w	800a538 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	3730      	adds	r7, #48	@ 0x30
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200011c8 	.word	0x200011c8

0800a708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a70e:	e04b      	b.n	800a7a8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a710:	4b2f      	ldr	r3, [pc, #188]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71a:	4b2d      	ldr	r3, [pc, #180]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe f88b 	bl	8008844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d031      	beq.n	800a7a8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	4413      	add	r3, r2
 800a74c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	429a      	cmp	r2, r3
 800a754:	d90e      	bls.n	800a774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a762:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3304      	adds	r3, #4
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7fe f830 	bl	80087d2 <vListInsert>
 800a772:	e019      	b.n	800a7a8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a774:	2300      	movs	r3, #0
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	2300      	movs	r3, #0
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7ff fd4e 	bl	800a220 <xTimerGenericCommand>
 800a784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10d      	bne.n	800a7a8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a790:	b672      	cpsid	i
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	b662      	cpsie	i
 800a7a0:	603b      	str	r3, [r7, #0]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a8:	4b09      	ldr	r3, [pc, #36]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1ae      	bne.n	800a710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7b2:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7b8:	4b06      	ldr	r3, [pc, #24]	@ (800a7d4 <prvSwitchTimerLists+0xcc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <prvSwitchTimerLists+0xc8>)
 800a7be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7c0:	4a04      	ldr	r2, [pc, #16]	@ (800a7d4 <prvSwitchTimerLists+0xcc>)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	6013      	str	r3, [r2, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200011c0 	.word	0x200011c0
 800a7d4:	200011c4 	.word	0x200011c4

0800a7d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7de:	f000 f94d 	bl	800aa7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7e2:	4b15      	ldr	r3, [pc, #84]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d120      	bne.n	800a82c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7ea:	4814      	ldr	r0, [pc, #80]	@ (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7ec:	f7fd ffa0 	bl	8008730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7f0:	4813      	ldr	r0, [pc, #76]	@ (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a7f2:	f7fd ff9d 	bl	8008730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <prvCheckForValidListAndQueue+0x6c>)
 800a7f8:	4a10      	ldr	r2, [pc, #64]	@ (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7fc:	4b12      	ldr	r3, [pc, #72]	@ (800a848 <prvCheckForValidListAndQueue+0x70>)
 800a7fe:	4a10      	ldr	r2, [pc, #64]	@ (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a800:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a802:	2300      	movs	r3, #0
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4b11      	ldr	r3, [pc, #68]	@ (800a84c <prvCheckForValidListAndQueue+0x74>)
 800a808:	4a11      	ldr	r2, [pc, #68]	@ (800a850 <prvCheckForValidListAndQueue+0x78>)
 800a80a:	2110      	movs	r1, #16
 800a80c:	200a      	movs	r0, #10
 800a80e:	f7fe f8af 	bl	8008970 <xQueueGenericCreateStatic>
 800a812:	4603      	mov	r3, r0
 800a814:	4a08      	ldr	r2, [pc, #32]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a816:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a818:	4b07      	ldr	r3, [pc, #28]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a820:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	490b      	ldr	r1, [pc, #44]	@ (800a854 <prvCheckForValidListAndQueue+0x7c>)
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fcf2 	bl	8009210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a82c:	f000 f95c 	bl	800aae8 <vPortExitCritical>
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200011c8 	.word	0x200011c8
 800a83c:	20001198 	.word	0x20001198
 800a840:	200011ac 	.word	0x200011ac
 800a844:	200011c0 	.word	0x200011c0
 800a848:	200011c4 	.word	0x200011c4
 800a84c:	20001274 	.word	0x20001274
 800a850:	200011d4 	.word	0x200011d4
 800a854:	0800b2cc 	.word	0x0800b2cc

0800a858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3b04      	subs	r3, #4
 800a868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f023 0201 	bic.w	r2, r3, #1
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b04      	subs	r3, #4
 800a886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a888:	4a0c      	ldr	r2, [pc, #48]	@ (800a8bc <pxPortInitialiseStack+0x64>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b14      	subs	r3, #20
 800a892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f06f 0202 	mvn.w	r2, #2
 800a8a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3b20      	subs	r3, #32
 800a8ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	0800a8c1 	.word	0x0800a8c1

0800a8c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8ca:	4b15      	ldr	r3, [pc, #84]	@ (800a920 <prvTaskExitError+0x60>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d00d      	beq.n	800a8f0 <prvTaskExitError+0x30>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d8:	b672      	cpsid	i
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	b662      	cpsie	i
 800a8e8:	60fb      	str	r3, [r7, #12]
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	e7fd      	b.n	800a8ec <prvTaskExitError+0x2c>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f4:	b672      	cpsid	i
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	b662      	cpsie	i
 800a904:	60bb      	str	r3, [r7, #8]
}
 800a906:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a908:	bf00      	nop
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0fc      	beq.n	800a90a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000014 	.word	0x20000014
	...

0800a930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a930:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <pxCurrentTCBConst2>)
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93a:	f380 8809 	msr	PSP, r0
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8811 	msr	BASEPRI, r0
 800a94a:	4770      	bx	lr
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst2>:
 800a950:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a958:	4808      	ldr	r0, [pc, #32]	@ (800a97c <prvPortStartFirstTask+0x24>)
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	f380 8808 	msr	MSP, r0
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f380 8814 	msr	CONTROL, r0
 800a96a:	b662      	cpsie	i
 800a96c:	b661      	cpsie	f
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	df00      	svc	0
 800a978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a97a:	bf00      	nop
 800a97c:	e000ed08 	.word	0xe000ed08

0800a980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a986:	4b37      	ldr	r3, [pc, #220]	@ (800aa64 <xPortStartScheduler+0xe4>)
 800a988:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	22ff      	movs	r2, #255	@ 0xff
 800a996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	4b2f      	ldr	r3, [pc, #188]	@ (800aa68 <xPortStartScheduler+0xe8>)
 800a9ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9ae:	4b2f      	ldr	r3, [pc, #188]	@ (800aa6c <xPortStartScheduler+0xec>)
 800a9b0:	2207      	movs	r2, #7
 800a9b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9b4:	e009      	b.n	800a9ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a9b6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa6c <xPortStartScheduler+0xec>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	4a2b      	ldr	r2, [pc, #172]	@ (800aa6c <xPortStartScheduler+0xec>)
 800a9be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9c0:	78fb      	ldrb	r3, [r7, #3]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d2:	2b80      	cmp	r3, #128	@ 0x80
 800a9d4:	d0ef      	beq.n	800a9b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9d6:	4b25      	ldr	r3, [pc, #148]	@ (800aa6c <xPortStartScheduler+0xec>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f1c3 0307 	rsb	r3, r3, #7
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d00d      	beq.n	800a9fe <xPortStartScheduler+0x7e>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	b672      	cpsid	i
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	b662      	cpsie	i
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9fe:	4b1b      	ldr	r3, [pc, #108]	@ (800aa6c <xPortStartScheduler+0xec>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	4a19      	ldr	r2, [pc, #100]	@ (800aa6c <xPortStartScheduler+0xec>)
 800aa06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa08:	4b18      	ldr	r3, [pc, #96]	@ (800aa6c <xPortStartScheduler+0xec>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa10:	4a16      	ldr	r2, [pc, #88]	@ (800aa6c <xPortStartScheduler+0xec>)
 800aa12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa1c:	4b14      	ldr	r3, [pc, #80]	@ (800aa70 <xPortStartScheduler+0xf0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a13      	ldr	r2, [pc, #76]	@ (800aa70 <xPortStartScheduler+0xf0>)
 800aa22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa28:	4b11      	ldr	r3, [pc, #68]	@ (800aa70 <xPortStartScheduler+0xf0>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a10      	ldr	r2, [pc, #64]	@ (800aa70 <xPortStartScheduler+0xf0>)
 800aa2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa34:	f000 f8dc 	bl	800abf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa38:	4b0e      	ldr	r3, [pc, #56]	@ (800aa74 <xPortStartScheduler+0xf4>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa3e:	f000 f8fb 	bl	800ac38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <xPortStartScheduler+0xf8>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a0c      	ldr	r2, [pc, #48]	@ (800aa78 <xPortStartScheduler+0xf8>)
 800aa48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa4e:	f7ff ff83 	bl	800a958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa52:	f7ff f827 	bl	8009aa4 <vTaskSwitchContext>
	prvTaskExitError();
 800aa56:	f7ff ff33 	bl	800a8c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	e000e400 	.word	0xe000e400
 800aa68:	200012c4 	.word	0x200012c4
 800aa6c:	200012c8 	.word	0x200012c8
 800aa70:	e000ed20 	.word	0xe000ed20
 800aa74:	20000014 	.word	0x20000014
 800aa78:	e000ef34 	.word	0xe000ef34

0800aa7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	b672      	cpsid	i
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	b662      	cpsie	i
 800aa96:	607b      	str	r3, [r7, #4]
}
 800aa98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa9a:	4b11      	ldr	r3, [pc, #68]	@ (800aae0 <vPortEnterCritical+0x64>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	4a0f      	ldr	r2, [pc, #60]	@ (800aae0 <vPortEnterCritical+0x64>)
 800aaa2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <vPortEnterCritical+0x64>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d112      	bne.n	800aad2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aaac:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <vPortEnterCritical+0x68>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <vPortEnterCritical+0x56>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaba:	b672      	cpsid	i
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	b662      	cpsie	i
 800aaca:	603b      	str	r3, [r7, #0]
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	e7fd      	b.n	800aace <vPortEnterCritical+0x52>
	}
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	20000014 	.word	0x20000014
 800aae4:	e000ed04 	.word	0xe000ed04

0800aae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaee:	4b13      	ldr	r3, [pc, #76]	@ (800ab3c <vPortExitCritical+0x54>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <vPortExitCritical+0x2a>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	b672      	cpsid	i
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	b662      	cpsie	i
 800ab0a:	607b      	str	r3, [r7, #4]
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	e7fd      	b.n	800ab0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ab12:	4b0a      	ldr	r3, [pc, #40]	@ (800ab3c <vPortExitCritical+0x54>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	4a08      	ldr	r2, [pc, #32]	@ (800ab3c <vPortExitCritical+0x54>)
 800ab1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab1c:	4b07      	ldr	r3, [pc, #28]	@ (800ab3c <vPortExitCritical+0x54>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d105      	bne.n	800ab30 <vPortExitCritical+0x48>
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f383 8811 	msr	BASEPRI, r3
}
 800ab2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	20000014 	.word	0x20000014

0800ab40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab40:	f3ef 8009 	mrs	r0, PSP
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	4b15      	ldr	r3, [pc, #84]	@ (800aba0 <pxCurrentTCBConst>)
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	f01e 0f10 	tst.w	lr, #16
 800ab50:	bf08      	it	eq
 800ab52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	6010      	str	r0, [r2, #0]
 800ab5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab64:	b672      	cpsid	i
 800ab66:	f380 8811 	msr	BASEPRI, r0
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	b662      	cpsie	i
 800ab74:	f7fe ff96 	bl	8009aa4 <vTaskSwitchContext>
 800ab78:	f04f 0000 	mov.w	r0, #0
 800ab7c:	f380 8811 	msr	BASEPRI, r0
 800ab80:	bc09      	pop	{r0, r3}
 800ab82:	6819      	ldr	r1, [r3, #0]
 800ab84:	6808      	ldr	r0, [r1, #0]
 800ab86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	f01e 0f10 	tst.w	lr, #16
 800ab8e:	bf08      	it	eq
 800ab90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab94:	f380 8809 	msr	PSP, r0
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop

0800aba0 <pxCurrentTCBConst>:
 800aba0:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop

0800aba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	b672      	cpsid	i
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	b662      	cpsie	i
 800abc2:	607b      	str	r3, [r7, #4]
}
 800abc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abc6:	f7fe feb1 	bl	800992c <xTaskIncrementTick>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <SysTick_Handler+0x44>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	2300      	movs	r3, #0
 800abda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	f383 8811 	msr	BASEPRI, r3
}
 800abe2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <vPortSetupTimerInterrupt+0x34>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ac28 <vPortSetupTimerInterrupt+0x38>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac00:	4b0a      	ldr	r3, [pc, #40]	@ (800ac2c <vPortSetupTimerInterrupt+0x3c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a0a      	ldr	r2, [pc, #40]	@ (800ac30 <vPortSetupTimerInterrupt+0x40>)
 800ac06:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0a:	099b      	lsrs	r3, r3, #6
 800ac0c:	4a09      	ldr	r2, [pc, #36]	@ (800ac34 <vPortSetupTimerInterrupt+0x44>)
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac12:	4b04      	ldr	r3, [pc, #16]	@ (800ac24 <vPortSetupTimerInterrupt+0x34>)
 800ac14:	2207      	movs	r2, #7
 800ac16:	601a      	str	r2, [r3, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	e000e010 	.word	0xe000e010
 800ac28:	e000e018 	.word	0xe000e018
 800ac2c:	20000008 	.word	0x20000008
 800ac30:	10624dd3 	.word	0x10624dd3
 800ac34:	e000e014 	.word	0xe000e014

0800ac38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac48 <vPortEnableVFP+0x10>
 800ac3c:	6801      	ldr	r1, [r0, #0]
 800ac3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac42:	6001      	str	r1, [r0, #0]
 800ac44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac46:	bf00      	nop
 800ac48:	e000ed88 	.word	0xe000ed88

0800ac4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac52:	f3ef 8305 	mrs	r3, IPSR
 800ac56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b0f      	cmp	r3, #15
 800ac5c:	d917      	bls.n	800ac8e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac5e:	4a1a      	ldr	r2, [pc, #104]	@ (800acc8 <vPortValidateInterruptPriority+0x7c>)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac68:	4b18      	ldr	r3, [pc, #96]	@ (800accc <vPortValidateInterruptPriority+0x80>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	7afa      	ldrb	r2, [r7, #11]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d20d      	bcs.n	800ac8e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac76:	b672      	cpsid	i
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	b662      	cpsie	i
 800ac86:	607b      	str	r3, [r7, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	e7fd      	b.n	800ac8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac8e:	4b10      	ldr	r3, [pc, #64]	@ (800acd0 <vPortValidateInterruptPriority+0x84>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac96:	4b0f      	ldr	r3, [pc, #60]	@ (800acd4 <vPortValidateInterruptPriority+0x88>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d90d      	bls.n	800acba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	b672      	cpsid	i
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	b662      	cpsie	i
 800acb2:	603b      	str	r3, [r7, #0]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <vPortValidateInterruptPriority+0x6a>
	}
 800acba:	bf00      	nop
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	e000e3f0 	.word	0xe000e3f0
 800accc:	200012c4 	.word	0x200012c4
 800acd0:	e000ed0c 	.word	0xe000ed0c
 800acd4:	200012c8 	.word	0x200012c8

0800acd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	@ 0x28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ace4:	f7fe fd64 	bl	80097b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ace8:	4b5d      	ldr	r3, [pc, #372]	@ (800ae60 <pvPortMalloc+0x188>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acf0:	f000 f920 	bl	800af34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acf4:	4b5b      	ldr	r3, [pc, #364]	@ (800ae64 <pvPortMalloc+0x18c>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4013      	ands	r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 8094 	bne.w	800ae2a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d020      	beq.n	800ad4a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ad08:	2208      	movs	r2, #8
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d017      	beq.n	800ad4a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <pvPortMalloc+0x72>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	b672      	cpsid	i
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	b662      	cpsie	i
 800ad42:	617b      	str	r3, [r7, #20]
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	e7fd      	b.n	800ad46 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d06c      	beq.n	800ae2a <pvPortMalloc+0x152>
 800ad50:	4b45      	ldr	r3, [pc, #276]	@ (800ae68 <pvPortMalloc+0x190>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d867      	bhi.n	800ae2a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad5a:	4b44      	ldr	r3, [pc, #272]	@ (800ae6c <pvPortMalloc+0x194>)
 800ad5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad5e:	4b43      	ldr	r3, [pc, #268]	@ (800ae6c <pvPortMalloc+0x194>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad64:	e004      	b.n	800ad70 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ad66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d903      	bls.n	800ad82 <pvPortMalloc+0xaa>
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f1      	bne.n	800ad66 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad82:	4b37      	ldr	r3, [pc, #220]	@ (800ae60 <pvPortMalloc+0x188>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d04e      	beq.n	800ae2a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2208      	movs	r2, #8
 800ad92:	4413      	add	r3, r2
 800ad94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	1ad2      	subs	r2, r2, r3
 800ada6:	2308      	movs	r3, #8
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	429a      	cmp	r2, r3
 800adac:	d922      	bls.n	800adf4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4413      	add	r3, r2
 800adb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <pvPortMalloc+0x104>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	b672      	cpsid	i
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	b662      	cpsie	i
 800add4:	613b      	str	r3, [r7, #16]
}
 800add6:	bf00      	nop
 800add8:	bf00      	nop
 800adda:	e7fd      	b.n	800add8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	1ad2      	subs	r2, r2, r3
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ade8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adee:	69b8      	ldr	r0, [r7, #24]
 800adf0:	f000 f902 	bl	800aff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adf4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae68 <pvPortMalloc+0x190>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ae68 <pvPortMalloc+0x190>)
 800ae00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae02:	4b19      	ldr	r3, [pc, #100]	@ (800ae68 <pvPortMalloc+0x190>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <pvPortMalloc+0x198>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d203      	bcs.n	800ae16 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae0e:	4b16      	ldr	r3, [pc, #88]	@ (800ae68 <pvPortMalloc+0x190>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a17      	ldr	r2, [pc, #92]	@ (800ae70 <pvPortMalloc+0x198>)
 800ae14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	4b12      	ldr	r3, [pc, #72]	@ (800ae64 <pvPortMalloc+0x18c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae2a:	f7fe fccf 	bl	80097cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00d      	beq.n	800ae54 <pvPortMalloc+0x17c>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3c:	b672      	cpsid	i
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	b662      	cpsie	i
 800ae4c:	60fb      	str	r3, [r7, #12]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <pvPortMalloc+0x178>
	return pvReturn;
 800ae54:	69fb      	ldr	r3, [r7, #28]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3728      	adds	r7, #40	@ 0x28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20004ed4 	.word	0x20004ed4
 800ae64:	20004ee0 	.word	0x20004ee0
 800ae68:	20004ed8 	.word	0x20004ed8
 800ae6c:	20004ecc 	.word	0x20004ecc
 800ae70:	20004edc 	.word	0x20004edc

0800ae74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d04e      	beq.n	800af24 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae86:	2308      	movs	r3, #8
 800ae88:	425b      	negs	r3, r3
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	4b24      	ldr	r3, [pc, #144]	@ (800af2c <vPortFree+0xb8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10d      	bne.n	800aebe <vPortFree+0x4a>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea6:	b672      	cpsid	i
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	b662      	cpsie	i
 800aeb6:	60fb      	str	r3, [r7, #12]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00d      	beq.n	800aee2 <vPortFree+0x6e>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	b672      	cpsid	i
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	b662      	cpsie	i
 800aeda:	60bb      	str	r3, [r7, #8]
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	e7fd      	b.n	800aede <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	4b11      	ldr	r3, [pc, #68]	@ (800af2c <vPortFree+0xb8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d019      	beq.n	800af24 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d115      	bne.n	800af24 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	4b0b      	ldr	r3, [pc, #44]	@ (800af2c <vPortFree+0xb8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	43db      	mvns	r3, r3
 800af02:	401a      	ands	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af08:	f7fe fc52 	bl	80097b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4b07      	ldr	r3, [pc, #28]	@ (800af30 <vPortFree+0xbc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4413      	add	r3, r2
 800af16:	4a06      	ldr	r2, [pc, #24]	@ (800af30 <vPortFree+0xbc>)
 800af18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af1a:	6938      	ldr	r0, [r7, #16]
 800af1c:	f000 f86c 	bl	800aff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af20:	f7fe fc54 	bl	80097cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af24:	bf00      	nop
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20004ee0 	.word	0x20004ee0
 800af30:	20004ed8 	.word	0x20004ed8

0800af34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af40:	4b27      	ldr	r3, [pc, #156]	@ (800afe0 <prvHeapInit+0xac>)
 800af42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00c      	beq.n	800af68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3307      	adds	r3, #7
 800af52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	4a1f      	ldr	r2, [pc, #124]	@ (800afe0 <prvHeapInit+0xac>)
 800af64:	4413      	add	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af6c:	4a1d      	ldr	r2, [pc, #116]	@ (800afe4 <prvHeapInit+0xb0>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af72:	4b1c      	ldr	r3, [pc, #112]	@ (800afe4 <prvHeapInit+0xb0>)
 800af74:	2200      	movs	r2, #0
 800af76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af80:	2208      	movs	r2, #8
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4a15      	ldr	r2, [pc, #84]	@ (800afe8 <prvHeapInit+0xb4>)
 800af94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af96:	4b14      	ldr	r3, [pc, #80]	@ (800afe8 <prvHeapInit+0xb4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af9e:	4b12      	ldr	r3, [pc, #72]	@ (800afe8 <prvHeapInit+0xb4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afb4:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <prvHeapInit+0xb4>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4a0a      	ldr	r2, [pc, #40]	@ (800afec <prvHeapInit+0xb8>)
 800afc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4a09      	ldr	r2, [pc, #36]	@ (800aff0 <prvHeapInit+0xbc>)
 800afca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afcc:	4b09      	ldr	r3, [pc, #36]	@ (800aff4 <prvHeapInit+0xc0>)
 800afce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800afd2:	601a      	str	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	200012cc 	.word	0x200012cc
 800afe4:	20004ecc 	.word	0x20004ecc
 800afe8:	20004ed4 	.word	0x20004ed4
 800afec:	20004edc 	.word	0x20004edc
 800aff0:	20004ed8 	.word	0x20004ed8
 800aff4:	20004ee0 	.word	0x20004ee0

0800aff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b000:	4b28      	ldr	r3, [pc, #160]	@ (800b0a4 <prvInsertBlockIntoFreeList+0xac>)
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e002      	b.n	800b00c <prvInsertBlockIntoFreeList+0x14>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d8f7      	bhi.n	800b006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d108      	bne.n	800b03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	441a      	add	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d118      	bne.n	800b080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b15      	ldr	r3, [pc, #84]	@ (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d00d      	beq.n	800b076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	441a      	add	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	e008      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b076:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e003      	b.n	800b088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d002      	beq.n	800b096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b096:	bf00      	nop
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20004ecc 	.word	0x20004ecc
 800b0a8:	20004ed4 	.word	0x20004ed4

0800b0ac <memset>:
 800b0ac:	4402      	add	r2, r0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <memset+0xa>
 800b0b4:	4770      	bx	lr
 800b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ba:	e7f9      	b.n	800b0b0 <memset+0x4>

0800b0bc <_reclaim_reent>:
 800b0bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b174 <_reclaim_reent+0xb8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4283      	cmp	r3, r0
 800b0c2:	b570      	push	{r4, r5, r6, lr}
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	d053      	beq.n	800b170 <_reclaim_reent+0xb4>
 800b0c8:	69c3      	ldr	r3, [r0, #28]
 800b0ca:	b31b      	cbz	r3, 800b114 <_reclaim_reent+0x58>
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	b163      	cbz	r3, 800b0ea <_reclaim_reent+0x2e>
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	69e3      	ldr	r3, [r4, #28]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	5959      	ldr	r1, [r3, r5]
 800b0d8:	b9b1      	cbnz	r1, 800b108 <_reclaim_reent+0x4c>
 800b0da:	3504      	adds	r5, #4
 800b0dc:	2d80      	cmp	r5, #128	@ 0x80
 800b0de:	d1f8      	bne.n	800b0d2 <_reclaim_reent+0x16>
 800b0e0:	69e3      	ldr	r3, [r4, #28]
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	68d9      	ldr	r1, [r3, #12]
 800b0e6:	f000 f87b 	bl	800b1e0 <_free_r>
 800b0ea:	69e3      	ldr	r3, [r4, #28]
 800b0ec:	6819      	ldr	r1, [r3, #0]
 800b0ee:	b111      	cbz	r1, 800b0f6 <_reclaim_reent+0x3a>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 f875 	bl	800b1e0 <_free_r>
 800b0f6:	69e3      	ldr	r3, [r4, #28]
 800b0f8:	689d      	ldr	r5, [r3, #8]
 800b0fa:	b15d      	cbz	r5, 800b114 <_reclaim_reent+0x58>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	682d      	ldr	r5, [r5, #0]
 800b102:	f000 f86d 	bl	800b1e0 <_free_r>
 800b106:	e7f8      	b.n	800b0fa <_reclaim_reent+0x3e>
 800b108:	680e      	ldr	r6, [r1, #0]
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 f868 	bl	800b1e0 <_free_r>
 800b110:	4631      	mov	r1, r6
 800b112:	e7e1      	b.n	800b0d8 <_reclaim_reent+0x1c>
 800b114:	6961      	ldr	r1, [r4, #20]
 800b116:	b111      	cbz	r1, 800b11e <_reclaim_reent+0x62>
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 f861 	bl	800b1e0 <_free_r>
 800b11e:	69e1      	ldr	r1, [r4, #28]
 800b120:	b111      	cbz	r1, 800b128 <_reclaim_reent+0x6c>
 800b122:	4620      	mov	r0, r4
 800b124:	f000 f85c 	bl	800b1e0 <_free_r>
 800b128:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b12a:	b111      	cbz	r1, 800b132 <_reclaim_reent+0x76>
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f857 	bl	800b1e0 <_free_r>
 800b132:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b134:	b111      	cbz	r1, 800b13c <_reclaim_reent+0x80>
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f852 	bl	800b1e0 <_free_r>
 800b13c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b13e:	b111      	cbz	r1, 800b146 <_reclaim_reent+0x8a>
 800b140:	4620      	mov	r0, r4
 800b142:	f000 f84d 	bl	800b1e0 <_free_r>
 800b146:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b148:	b111      	cbz	r1, 800b150 <_reclaim_reent+0x94>
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 f848 	bl	800b1e0 <_free_r>
 800b150:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b152:	b111      	cbz	r1, 800b15a <_reclaim_reent+0x9e>
 800b154:	4620      	mov	r0, r4
 800b156:	f000 f843 	bl	800b1e0 <_free_r>
 800b15a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b15c:	b111      	cbz	r1, 800b164 <_reclaim_reent+0xa8>
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f83e 	bl	800b1e0 <_free_r>
 800b164:	6a23      	ldr	r3, [r4, #32]
 800b166:	b11b      	cbz	r3, 800b170 <_reclaim_reent+0xb4>
 800b168:	4620      	mov	r0, r4
 800b16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b16e:	4718      	bx	r3
 800b170:	bd70      	pop	{r4, r5, r6, pc}
 800b172:	bf00      	nop
 800b174:	20000018 	.word	0x20000018

0800b178 <__libc_init_array>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	4d0d      	ldr	r5, [pc, #52]	@ (800b1b0 <__libc_init_array+0x38>)
 800b17c:	4c0d      	ldr	r4, [pc, #52]	@ (800b1b4 <__libc_init_array+0x3c>)
 800b17e:	1b64      	subs	r4, r4, r5
 800b180:	10a4      	asrs	r4, r4, #2
 800b182:	2600      	movs	r6, #0
 800b184:	42a6      	cmp	r6, r4
 800b186:	d109      	bne.n	800b19c <__libc_init_array+0x24>
 800b188:	4d0b      	ldr	r5, [pc, #44]	@ (800b1b8 <__libc_init_array+0x40>)
 800b18a:	4c0c      	ldr	r4, [pc, #48]	@ (800b1bc <__libc_init_array+0x44>)
 800b18c:	f000 f87e 	bl	800b28c <_init>
 800b190:	1b64      	subs	r4, r4, r5
 800b192:	10a4      	asrs	r4, r4, #2
 800b194:	2600      	movs	r6, #0
 800b196:	42a6      	cmp	r6, r4
 800b198:	d105      	bne.n	800b1a6 <__libc_init_array+0x2e>
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a0:	4798      	blx	r3
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7ee      	b.n	800b184 <__libc_init_array+0xc>
 800b1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1aa:	4798      	blx	r3
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	e7f2      	b.n	800b196 <__libc_init_array+0x1e>
 800b1b0:	0800b344 	.word	0x0800b344
 800b1b4:	0800b344 	.word	0x0800b344
 800b1b8:	0800b344 	.word	0x0800b344
 800b1bc:	0800b348 	.word	0x0800b348

0800b1c0 <__retarget_lock_acquire_recursive>:
 800b1c0:	4770      	bx	lr

0800b1c2 <__retarget_lock_release_recursive>:
 800b1c2:	4770      	bx	lr

0800b1c4 <memcpy>:
 800b1c4:	440a      	add	r2, r1
 800b1c6:	4291      	cmp	r1, r2
 800b1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1cc:	d100      	bne.n	800b1d0 <memcpy+0xc>
 800b1ce:	4770      	bx	lr
 800b1d0:	b510      	push	{r4, lr}
 800b1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	d1f9      	bne.n	800b1d2 <memcpy+0xe>
 800b1de:	bd10      	pop	{r4, pc}

0800b1e0 <_free_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	d041      	beq.n	800b26c <_free_r+0x8c>
 800b1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1ec:	1f0c      	subs	r4, r1, #4
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	bfb8      	it	lt
 800b1f2:	18e4      	addlt	r4, r4, r3
 800b1f4:	f000 f83e 	bl	800b274 <__malloc_lock>
 800b1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b270 <_free_r+0x90>)
 800b1fa:	6813      	ldr	r3, [r2, #0]
 800b1fc:	b933      	cbnz	r3, 800b20c <_free_r+0x2c>
 800b1fe:	6063      	str	r3, [r4, #4]
 800b200:	6014      	str	r4, [r2, #0]
 800b202:	4628      	mov	r0, r5
 800b204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b208:	f000 b83a 	b.w	800b280 <__malloc_unlock>
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	d908      	bls.n	800b222 <_free_r+0x42>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	1821      	adds	r1, r4, r0
 800b214:	428b      	cmp	r3, r1
 800b216:	bf01      	itttt	eq
 800b218:	6819      	ldreq	r1, [r3, #0]
 800b21a:	685b      	ldreq	r3, [r3, #4]
 800b21c:	1809      	addeq	r1, r1, r0
 800b21e:	6021      	streq	r1, [r4, #0]
 800b220:	e7ed      	b.n	800b1fe <_free_r+0x1e>
 800b222:	461a      	mov	r2, r3
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	b10b      	cbz	r3, 800b22c <_free_r+0x4c>
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d9fa      	bls.n	800b222 <_free_r+0x42>
 800b22c:	6811      	ldr	r1, [r2, #0]
 800b22e:	1850      	adds	r0, r2, r1
 800b230:	42a0      	cmp	r0, r4
 800b232:	d10b      	bne.n	800b24c <_free_r+0x6c>
 800b234:	6820      	ldr	r0, [r4, #0]
 800b236:	4401      	add	r1, r0
 800b238:	1850      	adds	r0, r2, r1
 800b23a:	4283      	cmp	r3, r0
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	d1e0      	bne.n	800b202 <_free_r+0x22>
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	6053      	str	r3, [r2, #4]
 800b246:	4408      	add	r0, r1
 800b248:	6010      	str	r0, [r2, #0]
 800b24a:	e7da      	b.n	800b202 <_free_r+0x22>
 800b24c:	d902      	bls.n	800b254 <_free_r+0x74>
 800b24e:	230c      	movs	r3, #12
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	e7d6      	b.n	800b202 <_free_r+0x22>
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	1821      	adds	r1, r4, r0
 800b258:	428b      	cmp	r3, r1
 800b25a:	bf04      	itt	eq
 800b25c:	6819      	ldreq	r1, [r3, #0]
 800b25e:	685b      	ldreq	r3, [r3, #4]
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	bf04      	itt	eq
 800b264:	1809      	addeq	r1, r1, r0
 800b266:	6021      	streq	r1, [r4, #0]
 800b268:	6054      	str	r4, [r2, #4]
 800b26a:	e7ca      	b.n	800b202 <_free_r+0x22>
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	bf00      	nop
 800b270:	20005020 	.word	0x20005020

0800b274 <__malloc_lock>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__malloc_lock+0x8>)
 800b276:	f7ff bfa3 	b.w	800b1c0 <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	2000501c 	.word	0x2000501c

0800b280 <__malloc_unlock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_unlock+0x8>)
 800b282:	f7ff bf9e 	b.w	800b1c2 <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	2000501c 	.word	0x2000501c

0800b28c <_init>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	bf00      	nop
 800b290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b292:	bc08      	pop	{r3}
 800b294:	469e      	mov	lr, r3
 800b296:	4770      	bx	lr

0800b298 <_fini>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr
