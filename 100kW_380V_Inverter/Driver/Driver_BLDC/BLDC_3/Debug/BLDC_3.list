
BLDC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800ad64  0800ad64  0000bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adfc  0800adfc  0000c068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800adfc  0800adfc  0000bdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae04  0800ae04  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae04  0800ae04  0000be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae08  0800ae08  0000be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ae0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fb8  20000068  0800ae74  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005020  0800ae74  0000d020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021149  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ef  00000000  00000000  0002d1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ca  00000000  00000000  00033028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e91  00000000  00000000  000343f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdad  00000000  00000000  00039283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee028  00000000  00000000  00059030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d30  00000000  00000000  0014709c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0014ddcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad4c 	.word	0x0800ad4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800ad4c 	.word	0x0800ad4c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
 8000558:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b55      	ldr	r3, [pc, #340]	@ (80006b4 <Registers_handler+0x168>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d021      	beq.n	80005aa <Registers_handler+0x5e>
 8000566:	2300      	movs	r3, #0
 8000568:	82fb      	strh	r3, [r7, #22]
 800056a:	e007      	b.n	800057c <Registers_handler+0x30>
 800056c:	8afb      	ldrh	r3, [r7, #22]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	8afb      	ldrh	r3, [r7, #22]
 8000578:	3301      	adds	r3, #1
 800057a:	82fb      	strh	r3, [r7, #22]
 800057c:	8afb      	ldrh	r3, [r7, #22]
 800057e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000580:	d9f4      	bls.n	800056c <Registers_handler+0x20>
	     RX_2;
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000588:	484b      	ldr	r0, [pc, #300]	@ (80006b8 <Registers_handler+0x16c>)
 800058a:	f003 f949 	bl	8003820 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800058e:	2240      	movs	r2, #64	@ 0x40
 8000590:	68f9      	ldr	r1, [r7, #12]
 8000592:	484a      	ldr	r0, [pc, #296]	@ (80006bc <Registers_handler+0x170>)
 8000594:	f007 fc5f 	bl	8007e56 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000598:	4b49      	ldr	r3, [pc, #292]	@ (80006c0 <Registers_handler+0x174>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b48      	ldr	r3, [pc, #288]	@ (80006c0 <Registers_handler+0x174>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f022 0208 	bic.w	r2, r2, #8
 80005a6:	601a      	str	r2, [r3, #0]
		return;}
 80005a8:	e081      	b.n	80006ae <Registers_handler+0x162>


	if (Size < 4) {
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d805      	bhi.n	80005bc <Registers_handler+0x70>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80005b0:	2202      	movs	r2, #2
 80005b2:	2103      	movs	r1, #3
 80005b4:	4841      	ldr	r0, [pc, #260]	@ (80006bc <Registers_handler+0x170>)
 80005b6:	f000 ff6d 	bl	8001494 <sendError>

	        return;
 80005ba:	e078      	b.n	80006ae <Registers_handler+0x162>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	3b01      	subs	r3, #1
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	3b02      	subs	r3, #2
 80005cc:	68f9      	ldr	r1, [r7, #12]
 80005ce:	440b      	add	r3, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b21b      	sxth	r3, r3
 80005dc:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	3b02      	subs	r3, #2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f000 fed5 	bl	8001398 <calcCRC16ModBus>
 80005ee:	4603      	mov	r3, r0
 80005f0:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 80005f2:	8aba      	ldrh	r2, [r7, #20]
 80005f4:	8a7b      	ldrh	r3, [r7, #18]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d005      	beq.n	8000606 <Registers_handler+0xba>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 80005fa:	2203      	movs	r2, #3
 80005fc:	2103      	movs	r1, #3
 80005fe:	482f      	ldr	r0, [pc, #188]	@ (80006bc <Registers_handler+0x170>)
 8000600:	f000 ff48 	bl	8001494 <sendError>

	        return;
 8000604:	e053      	b.n	80006ae <Registers_handler+0x162>
	    }


                       uint8_t opCode = rxFrame[1];
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 800060c:	7c7b      	ldrb	r3, [r7, #17]
 800060e:	3b01      	subs	r3, #1
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d845      	bhi.n	80006a0 <Registers_handler+0x154>
 8000614:	a201      	add	r2, pc, #4	@ (adr r2, 800061c <Registers_handler+0xd0>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800065d 	.word	0x0800065d
 8000620:	0800066b 	.word	0x0800066b
 8000624:	08000679 	.word	0x08000679
 8000628:	08000683 	.word	0x08000683
 800062c:	080006a1 	.word	0x080006a1
 8000630:	0800068d 	.word	0x0800068d
 8000634:	080006a1 	.word	0x080006a1
 8000638:	080006a1 	.word	0x080006a1
 800063c:	080006a1 	.word	0x080006a1
 8000640:	080006a1 	.word	0x080006a1
 8000644:	080006a1 	.word	0x080006a1
 8000648:	080006a1 	.word	0x080006a1
 800064c:	080006a1 	.word	0x080006a1
 8000650:	080006a1 	.word	0x080006a1
 8000654:	080006a1 	.word	0x080006a1
 8000658:	08000697 	.word	0x08000697
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <Registers_handler+0x178>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4816      	ldr	r0, [pc, #88]	@ (80006bc <Registers_handler+0x170>)
 8000664:	f001 f838 	bl	80016d8 <handleReadCoils>
				  			   break;
 8000668:	e021      	b.n	80006ae <Registers_handler+0x162>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <Registers_handler+0x17c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <Registers_handler+0x170>)
 8000672:	f001 f89b 	bl	80017ac <handleReadDiscreteInputs>
							   break;
 8000676:	e01a      	b.n	80006ae <Registers_handler+0x162>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	4810      	ldr	r0, [pc, #64]	@ (80006bc <Registers_handler+0x170>)
 800067c:	f000 ff3a 	bl	80014f4 <handleReadHoldingRegs>
				  			   break;
 8000680:	e015      	b.n	80006ae <Registers_handler+0x162>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <Registers_handler+0x170>)
 8000686:	f000 ffad 	bl	80015e4 <handleReadInputRegs>

				  			   break;
 800068a:	e010      	b.n	80006ae <Registers_handler+0x162>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	480b      	ldr	r0, [pc, #44]	@ (80006bc <Registers_handler+0x170>)
 8000690:	f001 f8fa 	bl	8001888 <handleWriteMulyipleHandlingRegister>

                               break;
 8000694:	e00b      	b.n	80006ae <Registers_handler+0x162>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <Registers_handler+0x170>)
 800069a:	f001 f8f5 	bl	8001888 <handleWriteMulyipleHandlingRegister>

                               break;
 800069e:	e006      	b.n	80006ae <Registers_handler+0x162>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80006a0:	7c7b      	ldrb	r3, [r7, #17]
 80006a2:	2201      	movs	r2, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <Registers_handler+0x170>)
 80006a8:	f000 fef4 	bl	8001494 <sendError>
				  			   break;
 80006ac:	bf00      	nop
				  			     }



                          }
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	40020400 	.word	0x40020400
 80006bc:	20000360 	.word	0x20000360
 80006c0:	200003e8 	.word	0x200003e8
 80006c4:	20000209 	.word	0x20000209
 80006c8:	20000208 	.word	0x20000208

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006d0:	f000 fe1e 	bl	8001310 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f001 fd27 	bl	8002126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f8ee 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 fb9c 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 fb74 	bl	8000dcc <MX_DMA_Init>
  MX_TIM1_Init();
 80006e4:	f000 f9e4 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006e8:	f000 faa8 	bl	8000c3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006ec:	f000 fb3e 	bl	8000d6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006f0:	f000 f94e 	bl	8000990 <MX_ADC1_Init>
  MX_SPI1_Init();
 80006f4:	f000 f99e 	bl	8000a34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TX_2;
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fe:	4861      	ldr	r0, [pc, #388]	@ (8000884 <main+0x1b8>)
 8000700:	f003 f88e 	bl	8003820 <HAL_GPIO_WritePin>
  LED_1_ON ;
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	485f      	ldr	r0, [pc, #380]	@ (8000888 <main+0x1bc>)
 800070a:	f003 f889 	bl	8003820 <HAL_GPIO_WritePin>
  LED_2_ON ;
 800070e:	2201      	movs	r2, #1
 8000710:	2110      	movs	r1, #16
 8000712:	485d      	ldr	r0, [pc, #372]	@ (8000888 <main+0x1bc>)
 8000714:	f003 f884 	bl	8003820 <HAL_GPIO_WritePin>
  LED_3_ON ;
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	@ 0x40
 800071c:	485a      	ldr	r0, [pc, #360]	@ (8000888 <main+0x1bc>)
 800071e:	f003 f87f 	bl	8003820 <HAL_GPIO_WritePin>
  LED_4_ON ;
 8000722:	2201      	movs	r2, #1
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4858      	ldr	r0, [pc, #352]	@ (8000888 <main+0x1bc>)
 8000728:	f003 f87a 	bl	8003820 <HAL_GPIO_WritePin>
  LED_5_ON ;
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000732:	4855      	ldr	r0, [pc, #340]	@ (8000888 <main+0x1bc>)
 8000734:	f003 f874 	bl	8003820 <HAL_GPIO_WritePin>
  LED_6_ON ;
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4852      	ldr	r0, [pc, #328]	@ (8000888 <main+0x1bc>)
 8000740:	f003 f86e 	bl	8003820 <HAL_GPIO_WritePin>
  LED_7_ON ;
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800074a:	484f      	ldr	r0, [pc, #316]	@ (8000888 <main+0x1bc>)
 800074c:	f003 f868 	bl	8003820 <HAL_GPIO_WritePin>
  LED_8_ON ;
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000756:	484c      	ldr	r0, [pc, #304]	@ (8000888 <main+0x1bc>)
 8000758:	f003 f862 	bl	8003820 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800075c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000760:	f001 fd0e 	bl	8002180 <HAL_Delay>
  DRIVE_1_ON;
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	4847      	ldr	r0, [pc, #284]	@ (8000888 <main+0x1bc>)
 800076a:	f003 f859 	bl	8003820 <HAL_GPIO_WritePin>
  DRIVE_2_ON;
 800076e:	2201      	movs	r2, #1
 8000770:	2102      	movs	r1, #2
 8000772:	4845      	ldr	r0, [pc, #276]	@ (8000888 <main+0x1bc>)
 8000774:	f003 f854 	bl	8003820 <HAL_GPIO_WritePin>
  DRIVE_3_ON;
 8000778:	2201      	movs	r2, #1
 800077a:	2104      	movs	r1, #4
 800077c:	4842      	ldr	r0, [pc, #264]	@ (8000888 <main+0x1bc>)
 800077e:	f003 f84f 	bl	8003820 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000782:	2240      	movs	r2, #64	@ 0x40
 8000784:	4941      	ldr	r1, [pc, #260]	@ (800088c <main+0x1c0>)
 8000786:	4842      	ldr	r0, [pc, #264]	@ (8000890 <main+0x1c4>)
 8000788:	f007 fb65 	bl	8007e56 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800078c:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <main+0x1c8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b40      	ldr	r3, [pc, #256]	@ (8000894 <main+0x1c8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f022 0208 	bic.w	r2, r2, #8
 800079a:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim2);
 800079c:	483e      	ldr	r0, [pc, #248]	@ (8000898 <main+0x1cc>)
 800079e:	f004 fa13 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80007a2:	2100      	movs	r1, #0
 80007a4:	483c      	ldr	r0, [pc, #240]	@ (8000898 <main+0x1cc>)
 80007a6:	f004 fc45 	bl	8005034 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80007aa:	2104      	movs	r1, #4
 80007ac:	483a      	ldr	r0, [pc, #232]	@ (8000898 <main+0x1cc>)
 80007ae:	f004 fc41 	bl	8005034 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80007b2:	2108      	movs	r1, #8
 80007b4:	4838      	ldr	r0, [pc, #224]	@ (8000898 <main+0x1cc>)
 80007b6:	f004 fc3d 	bl	8005034 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80007ba:	210c      	movs	r1, #12
 80007bc:	4836      	ldr	r0, [pc, #216]	@ (8000898 <main+0x1cc>)
 80007be:	f004 fc39 	bl	8005034 <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4835      	ldr	r0, [pc, #212]	@ (800089c <main+0x1d0>)
 80007c6:	f004 fad9 	bl	8004d7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4833      	ldr	r0, [pc, #204]	@ (800089c <main+0x1d0>)
 80007ce:	f005 fe1f 	bl	8006410 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007d2:	2104      	movs	r1, #4
 80007d4:	4831      	ldr	r0, [pc, #196]	@ (800089c <main+0x1d0>)
 80007d6:	f004 fad1 	bl	8004d7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80007da:	2104      	movs	r1, #4
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <main+0x1d0>)
 80007de:	f005 fe17 	bl	8006410 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007e2:	2108      	movs	r1, #8
 80007e4:	482d      	ldr	r0, [pc, #180]	@ (800089c <main+0x1d0>)
 80007e6:	f004 fac9 	bl	8004d7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80007ea:	2108      	movs	r1, #8
 80007ec:	482b      	ldr	r0, [pc, #172]	@ (800089c <main+0x1d0>)
 80007ee:	f005 fe0f 	bl	8006410 <HAL_TIMEx_PWMN_Start>

    LED_1_OFF ;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4824      	ldr	r0, [pc, #144]	@ (8000888 <main+0x1bc>)
 80007f8:	f003 f812 	bl	8003820 <HAL_GPIO_WritePin>
    LED_2_OFF ;
 80007fc:	2200      	movs	r2, #0
 80007fe:	2110      	movs	r1, #16
 8000800:	4821      	ldr	r0, [pc, #132]	@ (8000888 <main+0x1bc>)
 8000802:	f003 f80d 	bl	8003820 <HAL_GPIO_WritePin>
    LED_3_OFF ;
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	@ 0x40
 800080a:	481f      	ldr	r0, [pc, #124]	@ (8000888 <main+0x1bc>)
 800080c:	f003 f808 	bl	8003820 <HAL_GPIO_WritePin>
    LED_4_OFF ;
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	@ 0x80
 8000814:	481c      	ldr	r0, [pc, #112]	@ (8000888 <main+0x1bc>)
 8000816:	f003 f803 	bl	8003820 <HAL_GPIO_WritePin>
    LED_5_OFF ;
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000820:	4819      	ldr	r0, [pc, #100]	@ (8000888 <main+0x1bc>)
 8000822:	f002 fffd 	bl	8003820 <HAL_GPIO_WritePin>
    LED_6_OFF ;
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082c:	4816      	ldr	r0, [pc, #88]	@ (8000888 <main+0x1bc>)
 800082e:	f002 fff7 	bl	8003820 <HAL_GPIO_WritePin>
    LED_7_OFF ;
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000838:	4813      	ldr	r0, [pc, #76]	@ (8000888 <main+0x1bc>)
 800083a:	f002 fff1 	bl	8003820 <HAL_GPIO_WritePin>
    LED_8_OFF ;
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <main+0x1bc>)
 8000846:	f002 ffeb 	bl	8003820 <HAL_GPIO_WritePin>
    RX_2;
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <main+0x1b8>)
 8000852:	f002 ffe5 	bl	8003820 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000856:	f007 fb59 	bl	8007f0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <main+0x1d4>)
 800085c:	2100      	movs	r1, #0
 800085e:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <main+0x1d8>)
 8000860:	f007 fbbe 	bl	8007fe0 <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <main+0x1dc>)
 8000868:	6013      	str	r3, [r2, #0]

  /* creation of ModBusData */
  ModBusDataHandle = osThreadNew(StartTask02, NULL, &ModBusData_attributes);
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <main+0x1e0>)
 800086c:	2100      	movs	r1, #0
 800086e:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <main+0x1e4>)
 8000870:	f007 fbb6 	bl	8007fe0 <osThreadNew>
 8000874:	4603      	mov	r3, r0
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <main+0x1e8>)
 8000878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f007 fb7b 	bl	8007f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <main+0x1b2>
 8000882:	bf00      	nop
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	20000088 	.word	0x20000088
 8000890:	20000360 	.word	0x20000360
 8000894:	200003e8 	.word	0x200003e8
 8000898:	20000314 	.word	0x20000314
 800089c:	200002c8 	.word	0x200002c8
 80008a0:	0800ad94 	.word	0x0800ad94
 80008a4:	0800111d 	.word	0x0800111d
 80008a8:	200004a8 	.word	0x200004a8
 80008ac:	0800adb8 	.word	0x0800adb8
 80008b0:	08001135 	.word	0x08001135
 80008b4:	200004ac 	.word	0x200004ac

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a f950 	bl	800ab6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <SystemClock_Config+0xd0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a29      	ldr	r2, [pc, #164]	@ (8000988 <SystemClock_Config+0xd0>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <SystemClock_Config+0xd0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	4b25      	ldr	r3, [pc, #148]	@ (800098c <SystemClock_Config+0xd4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a24      	ldr	r2, [pc, #144]	@ (800098c <SystemClock_Config+0xd4>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xd4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000924:	23d8      	movs	r3, #216	@ 0xd8
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4618      	mov	r0, r3
 8000936:	f003 f801 	bl	800393c <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000940:	f000 fd24 	bl	800138c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000944:	f002 ffaa 	bl	800389c <HAL_PWREx_EnableOverDrive>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800094e:	f000 fd1d 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fa87 	bl	8003e84 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800097c:	f000 fd06 	bl	800138c <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_ADC1_Init+0xa0>)
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009f2:	f001 fbe9 	bl	80021c8 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 fcc6 	bl	800138c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_ADC1_Init+0x98>)
 8000a12:	f001 fc1d 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 fcb6 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000021c 	.word	0x2000021c
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a4e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a94:	f003 ff96 	bl	80049c4 <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 fc75 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000264 	.word	0x20000264
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09a      	sub	sp, #104	@ 0x68
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	222c      	movs	r2, #44	@ 0x2c
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00a f83e 	bl	800ab6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af0:	4b50      	ldr	r3, [pc, #320]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000af2:	4a51      	ldr	r2, [pc, #324]	@ (8000c38 <MX_TIM1_Init+0x188>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b4d      	ldr	r3, [pc, #308]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000b02:	4b4c      	ldr	r3, [pc, #304]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b10:	4b48      	ldr	r3, [pc, #288]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b47      	ldr	r3, [pc, #284]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1c:	4845      	ldr	r0, [pc, #276]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b1e:	f003 fffc 	bl	8004b1a <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 fc30 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b36:	4619      	mov	r1, r3
 8000b38:	483e      	ldr	r0, [pc, #248]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b3a:	f004 fe83 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b44:	f000 fc22 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b48:	483a      	ldr	r0, [pc, #232]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b4a:	f004 f8b5 	bl	8004cb8 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b54:	f000 fc1a 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4832      	ldr	r0, [pc, #200]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000b6c:	f005 fd12 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b76:	f000 fc09 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	@ 0x60
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4824      	ldr	r0, [pc, #144]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000ba2:	f004 fd3b 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000bac:	f000 fbee 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481e      	ldr	r0, [pc, #120]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000bba:	f004 fd2f 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000bc4:	f000 fbe2 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bcc:	2208      	movs	r2, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000bd2:	f004 fd23 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000bdc:	f000 fbd6 	bl	800138c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000bec:	23ff      	movs	r3, #255	@ 0xff
 8000bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000c16:	f005 fd4b 	bl	80066b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000c20:	f000 fbb4 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000c26:	f001 f81b 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3768      	adds	r7, #104	@ 0x68
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002c8 	.word	0x200002c8
 8000c38:	40010000 	.word	0x40010000

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c70:	4b3d      	ldr	r3, [pc, #244]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c90:	4835      	ldr	r0, [pc, #212]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000c92:	f003 ff42 	bl	8004b1a <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c9c:	f000 fb76 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	4619      	mov	r1, r3
 8000cac:	482e      	ldr	r0, [pc, #184]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000cae:	f004 fdc9 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cb8:	f000 fb68 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cbc:	482a      	ldr	r0, [pc, #168]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000cbe:	f004 f957 	bl	8004f70 <HAL_TIM_IC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cc8:	f000 fb60 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000cdc:	f005 fc5a 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000ce6:	f000 fb51 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000d02:	f004 fbee 	bl	80054e2 <HAL_TIM_IC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d0c:	f000 fb3e 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2204      	movs	r2, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4813      	ldr	r0, [pc, #76]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000d1c:	f004 fbe1 	bl	80054e2 <HAL_TIM_IC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d26:	f000 fb31 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2208      	movs	r2, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000d36:	f004 fbd4 	bl	80054e2 <HAL_TIM_IC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000d40:	f000 fb24 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_TIM2_Init+0x12c>)
 8000d50:	f004 fbc7 	bl	80054e2 <HAL_TIM_IC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000d5a:	f000 fb17 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	@ 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000314 	.word	0x20000314

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f005 fd3f 	bl	8006832 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 fae7 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000360 	.word	0x20000360
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <MX_DMA_Init+0x48>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <MX_DMA_Init+0x48>)
 8000dd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <MX_DMA_Init+0x48>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	203a      	movs	r0, #58	@ 0x3a
 8000df0:	f001 fd5a 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000df4:	203a      	movs	r0, #58	@ 0x3a
 8000df6:	f001 fd73 	bl	80028e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2046      	movs	r0, #70	@ 0x46
 8000e00:	f001 fd52 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e04:	2046      	movs	r0, #70	@ 0x46
 8000e06:	f001 fd6b 	bl	80028e0 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a40      	ldr	r2, [pc, #256]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b3b      	ldr	r3, [pc, #236]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a34      	ldr	r2, [pc, #208]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <MX_GPIO_Init+0x11c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f640 71df 	movw	r1, #4063	@ 0xfdf
 8000e94:	4828      	ldr	r0, [pc, #160]	@ (8000f38 <MX_GPIO_Init+0x120>)
 8000e96:	f002 fcc3 	bl	8003820 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 8000ea0:	4826      	ldr	r0, [pc, #152]	@ (8000f3c <MX_GPIO_Init+0x124>)
 8000ea2:	f002 fcbd 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Port_1_Pin Port_2_Pin Port_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin LED_7_Pin LED_8_Pin */
  GPIO_InitStruct.Pin = Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 8000ea6:	f640 73df 	movw	r3, #4063	@ 0xfdf
 8000eaa:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481e      	ldr	r0, [pc, #120]	@ (8000f38 <MX_GPIO_Init+0x120>)
 8000ec0:	f002 fa16 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ec8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4818      	ldr	r0, [pc, #96]	@ (8000f3c <MX_GPIO_Init+0x124>)
 8000eda:	f002 fa09 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_3_Pin DIRECT_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin;
 8000ede:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <MX_GPIO_Init+0x124>)
 8000ef8:	f002 f9fa 	bl	80032f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2105      	movs	r1, #5
 8000f00:	2006      	movs	r0, #6
 8000f02:	f001 fcd1 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f06:	2006      	movs	r0, #6
 8000f08:	f001 fcea 	bl	80028e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2105      	movs	r1, #5
 8000f10:	2007      	movs	r0, #7
 8000f12:	f001 fcc9 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f16:	2007      	movs	r0, #7
 8000f18:	f001 fce2 	bl	80028e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2008      	movs	r0, #8
 8000f22:	f001 fcc1 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f26:	2008      	movs	r0, #8
 8000f28:	f001 fcda 	bl	80028e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */


uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	b29b      	uxth	r3, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <Reset_USART1>:



void Reset_USART1(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
  //  LED_1_ON;

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8000f6c:	4825      	ldr	r0, [pc, #148]	@ (8001004 <Reset_USART1+0x9c>)
 8000f6e:	f005 fd67 	bl	8006a40 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <Reset_USART1+0xa0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <Reset_USART1+0x18>
        HAL_DMA_Abort(&hdma_usart1_rx);
 8000f7a:	4823      	ldr	r0, [pc, #140]	@ (8001008 <Reset_USART1+0xa0>)
 8000f7c:	f001 feb0 	bl	8002ce0 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <Reset_USART1+0xa4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <Reset_USART1+0x26>
        HAL_DMA_Abort(&hdma_usart1_tx);
 8000f88:	4820      	ldr	r0, [pc, #128]	@ (800100c <Reset_USART1+0xa4>)
 8000f8a:	f001 fea9 	bl	8002ce0 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <Reset_USART1+0x9c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <Reset_USART1+0x9c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f9c:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <Reset_USART1+0x9c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <Reset_USART1+0x9c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2202      	movs	r2, #2
 8000fac:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <Reset_USART1+0xa8>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <Reset_USART1+0xa8>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_Delay(1); // Задержка для завершения сброса
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 f8e0 	bl	8002180 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <Reset_USART1+0xa8>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <Reset_USART1+0xa8>)
 8000fc6:	f023 0310 	bic.w	r3, r3, #16
 8000fca:	6253      	str	r3, [r2, #36]	@ 0x24

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <Reset_USART1+0x9c>)
 8000fce:	f005 fc7e 	bl	80068ce <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 8000fd2:	f7ff fecb 	bl	8000d6c <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 8000fd6:	f7ff fef9 	bl	8000dcc <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 8000fda:	2240      	movs	r2, #64	@ 0x40
 8000fdc:	490d      	ldr	r1, [pc, #52]	@ (8001014 <Reset_USART1+0xac>)
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <Reset_USART1+0x9c>)
 8000fe0:	f006 ff39 	bl	8007e56 <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <Reset_USART1+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <Reset_USART1+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0208 	bic.w	r2, r2, #8
 8000ff2:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 8000ff4:	f001 f8b8 	bl	8002168 <HAL_GetTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <Reset_USART1+0xb0>)
 8000ffc:	6013      	str	r3, [r2, #0]


}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000360 	.word	0x20000360
 8001008:	200003e8 	.word	0x200003e8
 800100c:	20000448 	.word	0x20000448
 8001010:	40023800 	.word	0x40023800
 8001014:	20000088 	.word	0x20000088
 8001018:	20000084 	.word	0x20000084

0800101c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]


	    RX_2;
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102a:	4810      	ldr	r0, [pc, #64]	@ (800106c <HAL_UART_TxCpltCallback+0x50>)
 800102c:	f002 fbf8 	bl	8003820 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001030:	f001 f89a 	bl	8002168 <HAL_GetTick>
 8001034:	4603      	mov	r3, r0
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_UART_TxCpltCallback+0x54>)
 8001038:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800103a:	2240      	movs	r2, #64	@ 0x40
 800103c:	490d      	ldr	r1, [pc, #52]	@ (8001074 <HAL_UART_TxCpltCallback+0x58>)
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <HAL_UART_TxCpltCallback+0x5c>)
 8001040:	f006 ff09 	bl	8007e56 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_UART_TxCpltCallback+0x5c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_UART_TxCpltCallback+0x5c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0210 	orr.w	r2, r2, #16
 8001052:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_UART_TxCpltCallback+0x60>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0208 	bic.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020400 	.word	0x40020400
 8001070:	20000084 	.word	0x20000084
 8001074:	20000088 	.word	0x20000088
 8001078:	20000360 	.word	0x20000360
 800107c:	200003e8 	.word	0x200003e8

08001080 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_UARTEx_RxEventCallback+0x4c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d115      	bne.n	80010c2 <HAL_UARTEx_RxEventCallback+0x42>
	{

		lastActivityTime = HAL_GetTick();
 8001096:	f001 f867 	bl	8002168 <HAL_GetTick>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_UARTEx_RxEventCallback+0x50>)
 800109e:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0210 	bic.w	r2, r2, #16
 80010ae:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <HAL_UARTEx_RxEventCallback+0x58>)
 80010b2:	f001 fe15 	bl	8002ce0 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80010ba:	4909      	ldr	r1, [pc, #36]	@ (80010e0 <HAL_UARTEx_RxEventCallback+0x60>)
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <HAL_UARTEx_RxEventCallback+0x64>)
 80010be:	f7ff fa45 	bl	800054c <Registers_handler>

	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000
 80010d0:	20000084 	.word	0x20000084
 80010d4:	20000360 	.word	0x20000360
 80010d8:	200003e8 	.word	0x200003e8
 80010dc:	200001e8 	.word	0x200001e8
 80010e0:	200001c8 	.word	0x200001c8
 80010e4:	20000088 	.word	0x20000088

080010e8 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80010ec:	f001 f83c 	bl	8002168 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <Check_USART1_Timeout+0x2c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80010fc:	d307      	bcc.n	800110e <Check_USART1_Timeout+0x26>
     {
         Reset_USART1();
 80010fe:	f7ff ff33 	bl	8000f68 <Reset_USART1>
         RX_2;
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <Check_USART1_Timeout+0x30>)
 800110a:	f002 fb89 	bl	8003820 <HAL_GPIO_WritePin>
     }
 }
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000084 	.word	0x20000084
 8001118:	40020400 	.word	0x40020400

0800111c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001124:	f7ff ffe0 	bl	80010e8 <Check_USART1_Timeout>
	      osDelay(2000); // Проверяем каждые 100 мс (можно настроить)
 8001128:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800112c:	f006 fffe 	bl	800812c <osDelay>
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001130:	bf00      	nop
 8001132:	e7f7      	b.n	8001124 <StartDefaultTask+0x8>

08001134 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if(auto_mode==0){
 800113c:	4b67      	ldr	r3, [pc, #412]	@ (80012dc <StartTask02+0x1a8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d021      	beq.n	800118e <StartTask02+0x5a>

	         pwm=rcv_data_reg[0];
 800114a:	4b65      	ldr	r3, [pc, #404]	@ (80012e0 <StartTask02+0x1ac>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <StartTask02+0x1b0>)
 8001152:	601a      	str	r2, [r3, #0]
	         if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 8001154:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <StartTask02+0x1b4>)
 8001156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001158:	4b62      	ldr	r3, [pc, #392]	@ (80012e4 <StartTask02+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d803      	bhi.n	8001168 <StartTask02+0x34>
 8001160:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <StartTask02+0x1b4>)
 8001162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001164:	4a5f      	ldr	r2, [pc, #380]	@ (80012e4 <StartTask02+0x1b0>)
 8001166:	6013      	str	r3, [r2, #0]
	         if(pwm<=0){pwm=0;}
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <StartTask02+0x1b0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <StartTask02+0x42>
 8001170:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <StartTask02+0x1b0>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

	         TIM1->CCR1=pwm;
 8001176:	4a5c      	ldr	r2, [pc, #368]	@ (80012e8 <StartTask02+0x1b4>)
 8001178:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <StartTask02+0x1b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6353      	str	r3, [r2, #52]	@ 0x34
	         TIM1->CCR2=pwm;
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <StartTask02+0x1b4>)
 8001180:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <StartTask02+0x1b0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6393      	str	r3, [r2, #56]	@ 0x38
	         TIM1->CCR3=pwm;
 8001186:	4a58      	ldr	r2, [pc, #352]	@ (80012e8 <StartTask02+0x1b4>)
 8001188:	4b56      	ldr	r3, [pc, #344]	@ (80012e4 <StartTask02+0x1b0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	63d3      	str	r3, [r2, #60]	@ 0x3c

		  }

		  if(auto_mode==1){
 800118e:	4b53      	ldr	r3, [pc, #332]	@ (80012dc <StartTask02+0x1a8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d030      	beq.n	80011f8 <StartTask02+0xc4>

			  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 8001196:	f000 ffe7 	bl	8002168 <HAL_GetTick>
 800119a:	4603      	mov	r3, r0
 800119c:	4a53      	ldr	r2, [pc, #332]	@ (80012ec <StartTask02+0x1b8>)
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011a6:	d327      	bcc.n	80011f8 <StartTask02+0xc4>
	           pwm=pwm+5;
 80011a8:	4b4e      	ldr	r3, [pc, #312]	@ (80012e4 <StartTask02+0x1b0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3305      	adds	r3, #5
 80011ae:	4a4d      	ldr	r2, [pc, #308]	@ (80012e4 <StartTask02+0x1b0>)
 80011b0:	6013      	str	r3, [r2, #0]
	           if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <StartTask02+0x1b4>)
 80011b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011b6:	4b4b      	ldr	r3, [pc, #300]	@ (80012e4 <StartTask02+0x1b0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d803      	bhi.n	80011c6 <StartTask02+0x92>
 80011be:	4b4a      	ldr	r3, [pc, #296]	@ (80012e8 <StartTask02+0x1b4>)
 80011c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c2:	4a48      	ldr	r2, [pc, #288]	@ (80012e4 <StartTask02+0x1b0>)
 80011c4:	6013      	str	r3, [r2, #0]
	           if(pwm<=0){pwm=0;}
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <StartTask02+0x1b0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <StartTask02+0xa0>
 80011ce:	4b45      	ldr	r3, [pc, #276]	@ (80012e4 <StartTask02+0x1b0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

	           TIM1->CCR1=pwm;
 80011d4:	4a44      	ldr	r2, [pc, #272]	@ (80012e8 <StartTask02+0x1b4>)
 80011d6:	4b43      	ldr	r3, [pc, #268]	@ (80012e4 <StartTask02+0x1b0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6353      	str	r3, [r2, #52]	@ 0x34
	           TIM1->CCR2=pwm;
 80011dc:	4a42      	ldr	r2, [pc, #264]	@ (80012e8 <StartTask02+0x1b4>)
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <StartTask02+0x1b0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6393      	str	r3, [r2, #56]	@ 0x38
	           TIM1->CCR3=pwm;
 80011e4:	4a40      	ldr	r2, [pc, #256]	@ (80012e8 <StartTask02+0x1b4>)
 80011e6:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <StartTask02+0x1b0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	63d3      	str	r3, [r2, #60]	@ 0x3c


			  auto_mode_timer=HAL_GetTick();}
 80011ec:	f000 ffbc 	bl	8002168 <HAL_GetTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <StartTask02+0x1b8>)
 80011f6:	801a      	strh	r2, [r3, #0]
		  }


	TIM1->CCR1=rcv_data_reg[0];
 80011f8:	4b39      	ldr	r3, [pc, #228]	@ (80012e0 <StartTask02+0x1ac>)
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <StartTask02+0x1b4>)
 80011fe:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2=rcv_data_reg[1];
 8001200:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <StartTask02+0x1ac>)
 8001202:	885a      	ldrh	r2, [r3, #2]
 8001204:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <StartTask02+0x1b4>)
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3=rcv_data_reg[2];
 8001208:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <StartTask02+0x1ac>)
 800120a:	889a      	ldrh	r2, [r3, #4]
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <StartTask02+0x1b4>)
 800120e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->ARR= rcv_data_reg[4];
 8001210:	4b33      	ldr	r3, [pc, #204]	@ (80012e0 <StartTask02+0x1ac>)
 8001212:	891a      	ldrh	r2, [r3, #8]
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <StartTask02+0x1b4>)
 8001216:	62da      	str	r2, [r3, #44]	@ 0x2c
	data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 8001218:	4b35      	ldr	r3, [pc, #212]	@ (80012f0 <StartTask02+0x1bc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4832      	ldr	r0, [pc, #200]	@ (80012e8 <StartTask02+0x1b4>)
 8001220:	f7ff fe8e 	bl	8000f40 <calculateTimerFrequency>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <StartTask02+0x1c0>)
 800122a:	801a      	strh	r2, [r3, #0]
	data_reg[2]=rpm;
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <StartTask02+0x1c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <StartTask02+0x1c0>)
 8001234:	809a      	strh	r2, [r3, #4]
    osDelay(100);
 8001236:	2064      	movs	r0, #100	@ 0x64
 8001238:	f006 ff78 	bl	800812c <osDelay>


    coil_1= (rcv_data_reg[7]>>1)&0x01;
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <StartTask02+0x1ac>)
 800123e:	89db      	ldrh	r3, [r3, #14]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	b29b      	uxth	r3, r3
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <StartTask02+0x1c8>)
 8001254:	701a      	strb	r2, [r3, #0]
    coil_2= (rcv_data_reg[7]>>2)&0x01;
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <StartTask02+0x1ac>)
 8001258:	89db      	ldrh	r3, [r3, #14]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	b29b      	uxth	r3, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <StartTask02+0x1cc>)
 800126e:	701a      	strb	r2, [r3, #0]
    coil_3= (rcv_data_reg[7]>>3)&0x01;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <StartTask02+0x1ac>)
 8001272:	89db      	ldrh	r3, [r3, #14]
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	b29b      	uxth	r3, r3
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <StartTask02+0x1d0>)
 8001288:	701a      	strb	r2, [r3, #0]
    coil_4= (rcv_data_reg[7]>>4)&0x01;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <StartTask02+0x1ac>)
 800128c:	89db      	ldrh	r3, [r3, #14]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	b29b      	uxth	r3, r3
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <StartTask02+0x1d4>)
 80012a2:	701a      	strb	r2, [r3, #0]
 auto_mode= (rcv_data_reg[7]>>5)&0x01;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <StartTask02+0x1ac>)
 80012a6:	89db      	ldrh	r3, [r3, #14]
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <StartTask02+0x1a8>)
 80012bc:	701a      	strb	r2, [r3, #0]
    pwr_on= (rcv_data_reg[7]>>6)&0x01;
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <StartTask02+0x1ac>)
 80012c0:	89db      	ldrh	r3, [r3, #14]
 80012c2:	099b      	lsrs	r3, r3, #6
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <StartTask02+0x1d8>)
 80012d6:	701a      	strb	r2, [r3, #0]
	  if(auto_mode==0){
 80012d8:	e730      	b.n	800113c <StartTask02+0x8>
 80012da:	bf00      	nop
 80012dc:	20000218 	.word	0x20000218
 80012e0:	200001e8 	.word	0x200001e8
 80012e4:	2000020c 	.word	0x2000020c
 80012e8:	40010000 	.word	0x40010000
 80012ec:	2000020a 	.word	0x2000020a
 80012f0:	20000004 	.word	0x20000004
 80012f4:	200001c8 	.word	0x200001c8
 80012f8:	20000210 	.word	0x20000210
 80012fc:	20000214 	.word	0x20000214
 8001300:	20000215 	.word	0x20000215
 8001304:	20000216 	.word	0x20000216
 8001308:	20000217 	.word	0x20000217
 800130c:	20000219 	.word	0x20000219

08001310 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001322:	f001 faf9 	bl	8002918 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001326:	2301      	movs	r3, #1
 8001328:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800132a:	2300      	movs	r3, #0
 800132c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001332:	231f      	movs	r3, #31
 8001334:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001336:	2387      	movs	r3, #135	@ 0x87
 8001338:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800133a:	2300      	movs	r3, #0
 800133c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800133e:	2300      	movs	r3, #0
 8001340:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001342:	2301      	movs	r3, #1
 8001344:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001346:	2301      	movs	r3, #1
 8001348:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001352:	463b      	mov	r3, r7
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fb17 	bl	8002988 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800135a:	2004      	movs	r0, #4
 800135c:	f001 faf4 	bl	8002948 <HAL_MPU_Enable>

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800137a:	f000 fee1 	bl	8002140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40002000 	.word	0x40002000

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80013a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a8:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	74fb      	strb	r3, [r7, #19]
 80013ae:	e022      	b.n	80013f6 <calcCRC16ModBus+0x5e>
		temp = temp ^ buffer[i];
 80013b0:	7cfb      	ldrb	r3, [r7, #19]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	4053      	eors	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80013c0:	2301      	movs	r3, #1
 80013c2:	74bb      	strb	r3, [r7, #18]
 80013c4:	e011      	b.n	80013ea <calcCRC16ModBus+0x52>
			flag = temp & 0x0001;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
			if (flag)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <calcCRC16ModBus+0x4c>
				temp ^= 0xA001;
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	f24a 0301 	movw	r3, #40961	@ 0xa001
 80013e0:	4053      	eors	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80013e4:	7cbb      	ldrb	r3, [r7, #18]
 80013e6:	3301      	adds	r3, #1
 80013e8:	74bb      	strb	r3, [r7, #18]
 80013ea:	7cbb      	ldrb	r3, [r7, #18]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d9ea      	bls.n	80013c6 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	3301      	adds	r3, #1
 80013f4:	74fb      	strb	r3, [r7, #19]
 80013f6:	7cfa      	ldrb	r2, [r7, #19]
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d8      	bcc.n	80013b0 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	b29b      	uxth	r3, r3
 8001412:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	b29b      	uxth	r3, r3

}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f7ff ffae 	bl	8001398 <calcCRC16ModBus>
 800143c:	4603      	mov	r3, r0
 800143e:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	3301      	adds	r3, #1
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	8afa      	ldrh	r2, [r7, #22]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b299      	uxth	r1, r3
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]

    TX_2;
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001464:	480a      	ldr	r0, [pc, #40]	@ (8001490 <sendModBusRequest+0x6c>)
 8001466:	f002 f9db 	bl	8003820 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	b29b      	uxth	r3, r3
 800146e:	3302      	adds	r3, #2
 8001470:	b29b      	uxth	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f005 fa66 	bl	8006948 <HAL_UART_Transmit_DMA>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <sendModBusRequest+0x62>

    //	LED_1_OFF;

	        Error_Handler();
 8001482:	f7ff ff83 	bl	800138c <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020400 	.word	0x40020400

08001494 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	4613      	mov	r3, r2
 80014a2:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <sendError+0x5c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	2103      	movs	r1, #3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff6a 	bl	8001398 <calcCRC16ModBus>
 80014c4:	4603      	mov	r3, r0
 80014c6:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2205      	movs	r2, #5
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff9f 	bl	8001424 <sendModBusRequest>

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000

080014f4 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80014fe:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <handleReadHoldingRegs+0xe4>)
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	b21b      	sxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <handleReadHoldingRegs+0xe4>)
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <handleReadHoldingRegs+0xe4>)
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	b21b      	sxth	r3, r3
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <handleReadHoldingRegs+0xe4>)
 8001520:	795b      	ldrb	r3, [r3, #5]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 800152a:	8afa      	ldrh	r2, [r7, #22]
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	4413      	add	r3, r2
 8001530:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	2b7d      	cmp	r3, #125	@ 0x7d
 8001536:	d905      	bls.n	8001544 <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001538:	2103      	movs	r1, #3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fa26 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001540:	2300      	movs	r3, #0
 8001542:	e045      	b.n	80015d0 <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	2b3c      	cmp	r3, #60	@ 0x3c
 8001548:	d905      	bls.n	8001556 <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800154a:	2102      	movs	r1, #2
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa1d 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001552:	2300      	movs	r3, #0
 8001554:	e03c      	b.n	80015d0 <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <handleReadHoldingRegs+0xe8>)
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 800155c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <handleReadHoldingRegs+0xe4>)
 8001560:	785a      	ldrb	r2, [r3, #1]
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 8001564:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001566:	897b      	ldrh	r3, [r7, #10]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 8001570:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001572:	2303      	movs	r3, #3
 8001574:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e01d      	b.n	80015b8 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	b299      	uxth	r1, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	613a      	str	r2, [r7, #16]
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 8001594:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001596:	8afb      	ldrh	r3, [r7, #22]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	8819      	ldrh	r1, [r3, #0]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	613a      	str	r2, [r7, #16]
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 80015aa:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80015ac:	8afb      	ldrh	r3, [r7, #22]
 80015ae:	3301      	adds	r3, #1
 80015b0:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbdd      	blt.n	800157c <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4906      	ldr	r1, [pc, #24]	@ (80015e0 <handleReadHoldingRegs+0xec>)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff2b 	bl	8001424 <sendModBusRequest>
	return 1;
 80015ce:	2301      	movs	r3, #1

}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000088 	.word	0x20000088
 80015dc:	20000000 	.word	0x20000000
 80015e0:	200000c8 	.word	0x200000c8

080015e4 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80015ee:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <handleReadInputRegs+0xe8>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b34      	ldr	r3, [pc, #208]	@ (80016cc <handleReadInputRegs+0xe8>)
 80015fa:	78db      	ldrb	r3, [r3, #3]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <handleReadInputRegs+0xe8>)
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	b21b      	sxth	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <handleReadInputRegs+0xe8>)
 8001610:	795b      	ldrb	r3, [r3, #5]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21b      	sxth	r3, r3
 8001618:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 800161a:	8afa      	ldrh	r2, [r7, #22]
 800161c:	897b      	ldrh	r3, [r7, #10]
 800161e:	4413      	add	r3, r2
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 8001626:	897b      	ldrh	r3, [r7, #10]
 8001628:	2b7d      	cmp	r3, #125	@ 0x7d
 800162a:	d905      	bls.n	8001638 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 800162c:	2103      	movs	r1, #3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f9ac 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001634:	2300      	movs	r3, #0
 8001636:	e045      	b.n	80016c4 <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001638:	893b      	ldrh	r3, [r7, #8]
 800163a:	2b3c      	cmp	r3, #60	@ 0x3c
 800163c:	d905      	bls.n	800164a <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800163e:	2102      	movs	r1, #2
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f9a3 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001646:	2300      	movs	r3, #0
 8001648:	e03c      	b.n	80016c4 <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <handleReadInputRegs+0xec>)
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <handleReadInputRegs+0xf0>)
 8001650:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <handleReadInputRegs+0xe8>)
 8001654:	785a      	ldrb	r2, [r3, #1]
 8001656:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <handleReadInputRegs+0xf0>)
 8001658:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <handleReadInputRegs+0xf0>)
 8001664:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001666:	2303      	movs	r3, #3
 8001668:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e01d      	b.n	80016ac <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b299      	uxth	r1, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	613a      	str	r2, [r7, #16]
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <handleReadInputRegs+0xf0>)
 8001688:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800168a:	8afb      	ldrh	r3, [r7, #22]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	8819      	ldrh	r1, [r3, #0]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	613a      	str	r2, [r7, #16]
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <handleReadInputRegs+0xf0>)
 800169e:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	3301      	adds	r3, #1
 80016a4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbdd      	blt.n	8001670 <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	4906      	ldr	r1, [pc, #24]	@ (80016d4 <handleReadInputRegs+0xf0>)
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff feb1 	bl	8001424 <sendModBusRequest>
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000088 	.word	0x20000088
 80016d0:	20000000 	.word	0x20000000
 80016d4:	200000c8 	.word	0x200000c8

080016d8 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <handleReadCoils+0xc8>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <handleReadCoils+0xc8>)
 80016ee:	78db      	ldrb	r3, [r3, #3]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <handleReadCoils+0xc8>)
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <handleReadCoils+0xc8>)
 8001704:	795b      	ldrb	r3, [r3, #5]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <handleReadCoils+0x44>
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800171a:	d905      	bls.n	8001728 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 800171c:	2103      	movs	r1, #3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f934 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001724:	2300      	movs	r3, #0
 8001726:	e037      	b.n	8001798 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001728:	89fa      	ldrh	r2, [r7, #14]
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001734:	897b      	ldrh	r3, [r7, #10]
 8001736:	2bc7      	cmp	r3, #199	@ 0xc7
 8001738:	d905      	bls.n	8001746 <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800173a:	2102      	movs	r1, #2
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f925 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001742:	2300      	movs	r3, #0
 8001744:	e028      	b.n	8001798 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174a:	2100      	movs	r1, #0
 800174c:	4815      	ldr	r0, [pc, #84]	@ (80017a4 <handleReadCoils+0xcc>)
 800174e:	f009 fa0d 	bl	800ab6c <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <handleReadCoils+0xd0>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <handleReadCoils+0xcc>)
 8001758:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <handleReadCoils+0xc8>)
 800175c:	785a      	ldrb	r2, [r3, #1]
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <handleReadCoils+0xcc>)
 8001760:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001762:	89bb      	ldrh	r3, [r7, #12]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	b29b      	uxth	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	89ba      	ldrh	r2, [r7, #12]
 800176c:	f002 0207 	and.w	r2, r2, #7
 8001770:	b292      	uxth	r2, r2
 8001772:	2a00      	cmp	r2, #0
 8001774:	bf14      	ite	ne
 8001776:	2201      	movne	r2, #1
 8001778:	2200      	moveq	r2, #0
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	4413      	add	r3, r2
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <handleReadCoils+0xcc>)
 8001782:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <handleReadCoils+0xcc>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	3303      	adds	r3, #3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4905      	ldr	r1, [pc, #20]	@ (80017a4 <handleReadCoils+0xcc>)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fe47 	bl	8001424 <sendModBusRequest>
	return 1;
 8001796:	2301      	movs	r3, #1

}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000088 	.word	0x20000088
 80017a4:	200000c8 	.word	0x200000c8
 80017a8:	20000000 	.word	0x20000000

080017ac <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <handleReadDiscreteInputs+0xd0>)
 80017b8:	789b      	ldrb	r3, [r3, #2]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <handleReadDiscreteInputs+0xd0>)
 80017c2:	78db      	ldrb	r3, [r3, #3]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <handleReadDiscreteInputs+0xd0>)
 80017ce:	791b      	ldrb	r3, [r3, #4]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b29      	ldr	r3, [pc, #164]	@ (800187c <handleReadDiscreteInputs+0xd0>)
 80017d8:	795b      	ldrb	r3, [r3, #5]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b21b      	sxth	r3, r3
 80017e0:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 80017e2:	89bb      	ldrh	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <handleReadDiscreteInputs+0x44>
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017ee:	d905      	bls.n	80017fc <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 80017f0:	2103      	movs	r1, #3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8ca 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e03a      	b.n	8001872 <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 80017fc:	89fa      	ldrh	r2, [r7, #14]
 80017fe:	89bb      	ldrh	r3, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	2bc7      	cmp	r3, #199	@ 0xc7
 800180c:	d905      	bls.n	800181a <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800180e:	2102      	movs	r1, #2
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8bb 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 8001816:	2300      	movs	r3, #0
 8001818:	e02b      	b.n	8001872 <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 800181a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181e:	2100      	movs	r1, #0
 8001820:	4817      	ldr	r0, [pc, #92]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 8001822:	f009 f9a3 	bl	800ab6c <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <handleReadDiscreteInputs+0xd8>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 800182c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <handleReadDiscreteInputs+0xd0>)
 8001830:	785a      	ldrb	r2, [r3, #1]
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 8001834:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001836:	89bb      	ldrh	r3, [r7, #12]
 8001838:	08db      	lsrs	r3, r3, #3
 800183a:	b29b      	uxth	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	89ba      	ldrh	r2, [r7, #12]
 8001840:	f002 0207 	and.w	r2, r2, #7
 8001844:	b292      	uxth	r2, r2
 8001846:	2a00      	cmp	r2, #0
 8001848:	bf14      	ite	ne
 800184a:	2201      	movne	r2, #1
 800184c:	2200      	moveq	r2, #0
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4413      	add	r3, r2
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 8001856:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 800185a:	2201      	movs	r2, #1
 800185c:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	3303      	adds	r3, #3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	4905      	ldr	r1, [pc, #20]	@ (8001880 <handleReadDiscreteInputs+0xd4>)
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fdda 	bl	8001424 <sendModBusRequest>
	return 1;
 8001870:	2301      	movs	r3, #1

}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000088 	.word	0x20000088
 8001880:	200000c8 	.word	0x200000c8
 8001884:	20000000 	.word	0x20000000

08001888 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001892:	4b3b      	ldr	r3, [pc, #236]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	b21b      	sxth	r3, r3
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	4b38      	ldr	r3, [pc, #224]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 80018a8:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80018be:	897b      	ldrh	r3, [r7, #10]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <handleWriteMulyipleHandlingRegister+0x42>
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	2b7b      	cmp	r3, #123	@ 0x7b
 80018c8:	d905      	bls.n	80018d6 <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80018ca:	2103      	movs	r1, #3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f85d 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e050      	b.n	8001978 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80018d6:	8afa      	ldrh	r2, [r7, #22]
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	4413      	add	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80018e2:	893b      	ldrh	r3, [r7, #8]
 80018e4:	2b3c      	cmp	r3, #60	@ 0x3c
 80018e6:	d905      	bls.n	80018f4 <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80018e8:	2102      	movs	r1, #2
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f84e 	bl	800198c <sendModbusException>
		return MODBUS_ERROR;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e041      	b.n	8001978 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80018f4:	2307      	movs	r3, #7
 80018f6:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e01a      	b.n	8001934 <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	613a      	str	r2, [r7, #16]
 8001904:	4a1e      	ldr	r2, [pc, #120]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	b21b      	sxth	r3, r3
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1c59      	adds	r1, r3, #1
 8001912:	6139      	str	r1, [r7, #16]
 8001914:	491a      	ldr	r1, [pc, #104]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b219      	sxth	r1, r3
 800191e:	8afb      	ldrh	r3, [r7, #22]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	82fa      	strh	r2, [r7, #22]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	b28a      	uxth	r2, r1
 800192c:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3301      	adds	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbe0      	blt.n	80018fe <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <handleWriteMulyipleHandlingRegister+0xfc>)
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 8001942:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001946:	785a      	ldrb	r2, [r3, #1]
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 800194a:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 800194e:	789a      	ldrb	r2, [r3, #2]
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 8001952:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001954:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001956:	78da      	ldrb	r2, [r3, #3]
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 800195a:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 800195e:	791a      	ldrb	r2, [r3, #4]
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 8001962:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001966:	795a      	ldrb	r2, [r3, #5]
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 800196a:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 800196c:	2206      	movs	r2, #6
 800196e:	4906      	ldr	r1, [pc, #24]	@ (8001988 <handleWriteMulyipleHandlingRegister+0x100>)
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fd57 	bl	8001424 <sendModBusRequest>
	return 1;   // success
 8001976:	2301      	movs	r3, #1

}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000088 	.word	0x20000088
 8001984:	20000000 	.word	0x20000000
 8001988:	200000c8 	.word	0x200000c8

0800198c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <sendModbusException+0x3c>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <sendModbusException+0x40>)
 800199e:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <sendModbusException+0x3c>)
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <sendModbusException+0x40>)
 80019ac:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 80019ae:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <sendModbusException+0x40>)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 80019b4:	2203      	movs	r2, #3
 80019b6:	4905      	ldr	r1, [pc, #20]	@ (80019cc <sendModbusException+0x40>)
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fd33 	bl	8001424 <sendModBusRequest>
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000088 	.word	0x20000088
 80019cc:	200000c8 	.word	0x200000c8

080019d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	210f      	movs	r1, #15
 8001a0a:	f06f 0001 	mvn.w	r0, #1
 8001a0e:	f000 ff4b 	bl	80028a8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	2005      	movs	r0, #5
 8001a18:	f000 ff46 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f000 ff5f 	bl	80028e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a15      	ldr	r2, [pc, #84]	@ (8001aa4 <HAL_ADC_MspInit+0x74>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d123      	bne.n	8001a9a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_ADC_MspInit+0x78>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a82:	231f      	movs	r3, #31
 8001a84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_ADC_MspInit+0x7c>)
 8001a96:	f001 fc2b 	bl	80032f0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a25      	ldr	r2, [pc, #148]	@ (8001b64 <HAL_SPI_MspInit+0xb4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d143      	bne.n	8001b5a <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a24      	ldr	r2, [pc, #144]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <HAL_SPI_MspInit+0xb8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <HAL_SPI_MspInit+0xbc>)
 8001b36:	f001 fbdb 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b3a:	2330      	movs	r3, #48	@ 0x30
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <HAL_SPI_MspInit+0xc0>)
 8001b56:	f001 fbcb 	bl	80032f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	@ 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40013000 	.word	0x40013000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400

08001b74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2f      	ldr	r2, [pc, #188]	@ (8001c50 <HAL_TIM_Base_MspInit+0xdc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10c      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bae:	e04a      	b.n	8001c46 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb8:	d145      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bba:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a25      	ldr	r2, [pc, #148]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480e      	ldr	r0, [pc, #56]	@ (8001c58 <HAL_TIM_Base_MspInit+0xe4>)
 8001c20:	f001 fb66 	bl	80032f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <HAL_TIM_Base_MspInit+0xe8>)
 8001c42:	f001 fb55 	bl	80032f0 <HAL_GPIO_Init>
}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <HAL_TIM_MspPostInit+0xa0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d139      	bne.n	8001cf6 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_TIM_MspPostInit+0xa4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cb2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <HAL_TIM_MspPostInit+0xa8>)
 8001cd0:	f001 fb0e 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cd4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <HAL_TIM_MspPostInit+0xac>)
 8001cf2:	f001 fafd 	bl	80032f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0aa      	sub	sp, #168	@ 0xa8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 ff1b 	bl	800ab6c <memset>
  if(huart->Instance==USART1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a54      	ldr	r2, [pc, #336]	@ (8001e8c <HAL_UART_MspInit+0x17c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	f040 80a0 	bne.w	8001e82 <HAL_UART_MspInit+0x172>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d42:	2340      	movs	r3, #64	@ 0x40
 8001d44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d46:	2300      	movs	r3, #0
 8001d48:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 faee 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d5a:	f7ff fb17 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a4b      	ldr	r2, [pc, #300]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b49      	ldr	r3, [pc, #292]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b46      	ldr	r3, [pc, #280]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a45      	ldr	r2, [pc, #276]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_UART_MspInit+0x180>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da6:	2307      	movs	r3, #7
 8001da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001db0:	4619      	mov	r1, r3
 8001db2:	4838      	ldr	r0, [pc, #224]	@ (8001e94 <HAL_UART_MspInit+0x184>)
 8001db4:	f001 fa9c 	bl	80032f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001db8:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dba:	4a38      	ldr	r2, [pc, #224]	@ (8001e9c <HAL_UART_MspInit+0x18c>)
 8001dbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc6:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001de6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df4:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dfa:	4827      	ldr	r0, [pc, #156]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001dfc:	f000 fe04 	bl	8002a08 <HAL_DMA_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001e06:	f7ff fac1 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001e0e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e10:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <HAL_UART_MspInit+0x188>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e18:	4a22      	ldr	r2, [pc, #136]	@ (8001ea4 <HAL_UART_MspInit+0x194>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e56:	4812      	ldr	r0, [pc, #72]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e58:	f000 fdd6 	bl	8002a08 <HAL_DMA_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001e62:	f7ff fa93 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e6a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <HAL_UART_MspInit+0x190>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2105      	movs	r1, #5
 8001e76:	2025      	movs	r0, #37	@ 0x25
 8001e78:	f000 fd16 	bl	80028a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e7c:	2025      	movs	r0, #37	@ 0x25
 8001e7e:	f000 fd2f 	bl	80028e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	37a8      	adds	r7, #168	@ 0xa8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40011000 	.word	0x40011000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400
 8001e98:	200003e8 	.word	0x200003e8
 8001e9c:	40026440 	.word	0x40026440
 8001ea0:	20000448 	.word	0x20000448
 8001ea4:	400264b8 	.word	0x400264b8

08001ea8 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <HAL_UART_MspDeInit+0x48>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d116      	bne.n	8001ee8 <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_UART_MspDeInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_UART_MspDeInit+0x4c>)
 8001ec0:	f023 0310 	bic.w	r3, r3, #16
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001ec6:	21c0      	movs	r1, #192	@ 0xc0
 8001ec8:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <HAL_UART_MspDeInit+0x50>)
 8001eca:	f001 fbad 	bl	8003628 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fe46 	bl	8002b64 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fe41 	bl	8002b64 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ee2:	2025      	movs	r0, #37	@ 0x25
 8001ee4:	f000 fd0a 	bl	80028fc <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020400 	.word	0x40020400

08001efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	@ 0x38
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001f0c:	4b33      	ldr	r3, [pc, #204]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f24:	f107 0210 	add.w	r2, r7, #16
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 f9cc 	bl	80042cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f3e:	f002 f99d 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8001f42:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f44:	e004      	b.n	8001f50 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f46:	f002 f999 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_InitTick+0xe4>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9b      	lsrs	r3, r3, #18
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_InitTick+0xec>)
 8001f62:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f70:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001f84:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f86:	f002 fdc8 	bl	8004b1a <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11b      	bne.n	8001fd0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001f98:	4812      	ldr	r0, [pc, #72]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001f9a:	f002 fe15 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001fac:	202d      	movs	r0, #45	@ 0x2d
 8001fae:	f000 fc97 	bl	80028e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d808      	bhi.n	8001fca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	202d      	movs	r0, #45	@ 0x2d
 8001fbe:	f000 fc73 	bl	80028a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <HAL_InitTick+0xf0>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e002      	b.n	8001fd0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3738      	adds	r7, #56	@ 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	200004b0 	.word	0x200004b0
 8001fe8:	40002000 	.word	0x40002000
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <MemManage_Handler+0x4>

08002008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <UsageFault_Handler+0x4>

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 8002038:	2001      	movs	r0, #1
 800203a:	f001 fc0b 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}

08002042 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 8002046:	2002      	movs	r0, #2
 8002048:	f001 fc04 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 8002054:	2004      	movs	r0, #4
 8002056:	f001 fbfd 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <USART1_IRQHandler+0x10>)
 8002066:	f004 fd7d 	bl	8006b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000360 	.word	0x20000360

08002074 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800207a:	f003 f92b 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200004b0 	.word	0x200004b0

08002088 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <DMA2_Stream2_IRQHandler+0x10>)
 800208e:	f000 feb9 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200003e8 	.word	0x200003e8

0800209c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA2_Stream7_IRQHandler+0x10>)
 80020a2:	f000 feaf 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000448 	.word	0x20000448

080020b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <SystemInit+0x20>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <SystemInit+0x20>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80020d8:	f7ff ffea 	bl	80020b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002102:	f008 fd99 	bl	800ac38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7fe fae1 	bl	80006cc <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800210c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002118:	0800ae0c 	.word	0x0800ae0c
  ldr r2, =_sbss
 800211c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002120:	20005020 	.word	0x20005020

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>

08002126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212a:	2003      	movs	r0, #3
 800212c:	f000 fbb1 	bl	8002892 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002130:	200f      	movs	r0, #15
 8002132:	f7ff fee3 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002136:	f7ff fc4b 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000010 	.word	0x20000010
 8002164:	200004fc 	.word	0x200004fc

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200004fc 	.word	0x200004fc

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010

080021c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e031      	b.n	8002242 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fc22 	bl	8001a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_ADC_Init+0x84>)
 800220c:	4013      	ands	r3, r2
 800220e:	f043 0202 	orr.w	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f970 	bl	80024fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
 8002232:	e001      	b.n	8002238 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	ffffeefd 	.word	0xffffeefd

08002250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e136      	b.n	80024da <HAL_ADC_ConfigChannel+0x28a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d93a      	bls.n	80022f2 <HAL_ADC_ConfigChannel+0xa2>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002284:	d035      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68d9      	ldr	r1, [r3, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	3b1e      	subs	r3, #30
 800229c:	2207      	movs	r2, #7
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	400a      	ands	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a8d      	ldr	r2, [pc, #564]	@ (80024e8 <HAL_ADC_ConfigChannel+0x298>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	061a      	lsls	r2, r3, #24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	e035      	b.n	8002338 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4403      	add	r3, r0
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	409a      	lsls	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f0:	e022      	b.n	8002338 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	2207      	movs	r2, #7
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	4603      	mov	r3, r0
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4403      	add	r3, r0
 800232e:	409a      	lsls	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b05      	subs	r3, #5
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
 8002388:	e04c      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d824      	bhi.n	80023dc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b23      	subs	r3, #35	@ 0x23
 80023a4:	221f      	movs	r2, #31
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	400a      	ands	r2, r1
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b23      	subs	r3, #35	@ 0x23
 80023ce:	fa00 f203 	lsl.w	r2, r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80023da:	e023      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b41      	subs	r3, #65	@ 0x41
 80023ee:	221f      	movs	r2, #31
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	@ 0x41
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a30      	ldr	r2, [pc, #192]	@ (80024ec <HAL_ADC_ConfigChannel+0x29c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1f4>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002436:	d105      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002438:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800243e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002442:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <HAL_ADC_ConfigChannel+0x29c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10f      	bne.n	800246e <HAL_ADC_ConfigChannel+0x21e>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b12      	cmp	r3, #18
 8002454:	d10b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002456:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a25      	ldr	r2, [pc, #148]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800245c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002460:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002462:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800246c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1e      	ldr	r2, [pc, #120]	@ (80024ec <HAL_ADC_ConfigChannel+0x29c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d12b      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x280>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_ADC_ConfigChannel+0x298>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d003      	beq.n	800248a <HAL_ADC_ConfigChannel+0x23a>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d122      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002494:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800249c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a10      	ldr	r2, [pc, #64]	@ (80024e8 <HAL_ADC_ConfigChannel+0x298>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d111      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_ADC_ConfigChannel+0x2a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_ADC_ConfigChannel+0x2a8>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9a      	lsrs	r2, r3, #18
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024c2:	e002      	b.n	80024ca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	10000012 	.word	0x10000012
 80024ec:	40012000 	.word	0x40012000
 80024f0:	40012300 	.word	0x40012300
 80024f4:	20000008 	.word	0x20000008
 80024f8:	431bde83 	.word	0x431bde83

080024fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002504:	4b78      	ldr	r3, [pc, #480]	@ (80026e8 <ADC_Init+0x1ec>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a77      	ldr	r2, [pc, #476]	@ (80026e8 <ADC_Init+0x1ec>)
 800250a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800250e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002510:	4b75      	ldr	r3, [pc, #468]	@ (80026e8 <ADC_Init+0x1ec>)
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4973      	ldr	r1, [pc, #460]	@ (80026e8 <ADC_Init+0x1ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800252c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	4a58      	ldr	r2, [pc, #352]	@ (80026ec <ADC_Init+0x1f0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800259e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e00f      	b.n	80025f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0202 	bic.w	r2, r2, #2
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	005a      	lsls	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002632:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	3b01      	subs	r3, #1
 8002650:	035a      	lsls	r2, r3, #13
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e007      	b.n	800266c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	3b01      	subs	r3, #1
 8002688:	051a      	lsls	r2, r3, #20
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ae:	025a      	lsls	r2, r3, #9
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	029a      	lsls	r2, r3, #10
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40012300 	.word	0x40012300
 80026ec:	0f000001 	.word	0x0f000001

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <__NVIC_SetPriorityGrouping+0x40>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	4313      	orrs	r3, r2
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x40>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00
 8002734:	05fa0000 	.word	0x05fa0000

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db12      	blt.n	80027c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <__NVIC_DisableIRQ+0x44>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	3320      	adds	r3, #32
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027bc:	f3bf 8f4f 	dsb	sy
}
 80027c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c2:	f3bf 8f6f 	isb	sy
}
 80027c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	@ (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff28 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ba:	f7ff ff3d 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7ff ffb1 	bl	800282c <NVIC_EncodePriority>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff80 	bl	80027d8 <__NVIC_SetPriority>
}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff30 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff40 	bl	8002790 <__NVIC_DisableIRQ>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800291c:	f3bf 8f5f 	dmb	sy
}
 8002920:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <HAL_MPU_Disable+0x28>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_MPU_Disable+0x28>)
 8002928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_MPU_Disable+0x2c>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	e000ed90 	.word	0xe000ed90

08002948 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002950:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_MPU_Enable+0x38>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_MPU_Enable+0x3c>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <HAL_MPU_Enable+0x3c>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002966:	f3bf 8f4f 	dsb	sy
}
 800296a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800296c:	f3bf 8f6f 	isb	sy
}
 8002970:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed90 	.word	0xe000ed90
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	785a      	ldrb	r2, [r3, #1]
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_MPU_ConfigRegion+0x7c>)
 8002996:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_MPU_ConfigRegion+0x7c>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	4a19      	ldr	r2, [pc, #100]	@ (8002a04 <HAL_MPU_ConfigRegion+0x7c>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029a4:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <HAL_MPU_ConfigRegion+0x7c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7b1b      	ldrb	r3, [r3, #12]
 80029b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7adb      	ldrb	r3, [r3, #11]
 80029b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a9b      	ldrb	r3, [r3, #10]
 80029be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7b5b      	ldrb	r3, [r3, #13]
 80029c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7b9b      	ldrb	r3, [r3, #14]
 80029ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7bdb      	ldrb	r3, [r3, #15]
 80029d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7a5b      	ldrb	r3, [r3, #9]
 80029de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7a1b      	ldrb	r3, [r3, #8]
 80029e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029f0:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029f4:	6113      	str	r3, [r2, #16]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed90 	.word	0xe000ed90

08002a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff fba8 	bl	8002168 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e099      	b.n	8002b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	e00f      	b.n	8002a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a46:	f7ff fb8f 	bl	8002168 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d908      	bls.n	8002a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e078      	b.n	8002b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e8      	bne.n	8002a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_DMA_Init+0x158>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d117      	bne.n	8002b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fb73 	bl	80031f8 <DMA_CheckFifoParam>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b26:	2301      	movs	r3, #1
 8002b28:	e016      	b.n	8002b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb2a 	bl	800318c <DMA_CalcBaseAndBitshift>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	223f      	movs	r2, #63	@ 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	e010803f 	.word	0xe010803f

08002b64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e050      	b.n	8002c18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e048      	b.n	8002c18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fae0 	bl	800318c <DMA_CalcBaseAndBitshift>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	223f      	movs	r2, #63	@ 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_DMA_Start_IT+0x26>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e048      	b.n	8002cd8 <HAL_DMA_Start_IT+0xb8>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d137      	bne.n	8002cca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa5e 	bl	8003130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	223f      	movs	r2, #63	@ 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0216 	orr.w	r2, r2, #22
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0208 	orr.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e005      	b.n	8002cd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cee:	f7ff fa3b 	bl	8002168 <HAL_GetTick>
 8002cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e052      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0216 	bic.w	r2, r2, #22
 8002d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_DMA_Abort+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d62:	e013      	b.n	8002d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d64:	f7ff fa00 	bl	8002168 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d90c      	bls.n	8002d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e015      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e4      	bne.n	8002d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	223f      	movs	r2, #63	@ 0x3f
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00c      	b.n	8002df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2205      	movs	r2, #5
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e10:	4b8e      	ldr	r3, [pc, #568]	@ (800304c <HAL_DMA_IRQHandler+0x248>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a8e      	ldr	r2, [pc, #568]	@ (8003050 <HAL_DMA_IRQHandler+0x24c>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	2204      	movs	r2, #4
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	2204      	movs	r2, #4
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d043      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03c      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	2210      	movs	r2, #16
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d024      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e01f      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0208 	bic.w	r2, r2, #8
 8002f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	2220      	movs	r2, #32
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808f 	beq.w	80030a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8087 	beq.w	80030a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d136      	bne.n	800301c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0216 	bic.w	r2, r2, #22
 8002fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_DMA_IRQHandler+0x1da>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	223f      	movs	r2, #63	@ 0x3f
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800300e:	2b00      	cmp	r3, #0
 8003010:	d07e      	beq.n	8003110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
        }
        return;
 800301a:	e079      	b.n	8003110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	d031      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e02c      	b.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
 800304a:	bf00      	nop
 800304c:	20000008 	.word	0x20000008
 8003050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e01e      	b.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10f      	bne.n	8003094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0210 	bic.w	r2, r2, #16
 8003082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d032      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d307      	bcc.n	80030ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f2      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x2cc>
 80030ea:	e000      	b.n	80030ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e000      	b.n	8003112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003110:	bf00      	nop
    }
  }
}
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800314c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d108      	bne.n	8003170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800316e:	e007      	b.n	8003180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3b10      	subs	r3, #16
 800319c:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <DMA_CalcBaseAndBitshift+0x60>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031a6:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <DMA_CalcBaseAndBitshift+0x64>)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d908      	bls.n	80031cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <DMA_CalcBaseAndBitshift+0x68>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80031ca:	e006      	b.n	80031da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <DMA_CalcBaseAndBitshift+0x68>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	aaaaaaab 	.word	0xaaaaaaab
 80031f0:	0800adf4 	.word	0x0800adf4
 80031f4:	fffffc00 	.word	0xfffffc00

080031f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11f      	bne.n	8003252 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d856      	bhi.n	80032c6 <DMA_CheckFifoParam+0xce>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <DMA_CheckFifoParam+0x28>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003231 	.word	0x08003231
 8003224:	08003243 	.word	0x08003243
 8003228:	08003231 	.word	0x08003231
 800322c:	080032c7 	.word	0x080032c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d046      	beq.n	80032ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003240:	e043      	b.n	80032ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800324a:	d140      	bne.n	80032ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003250:	e03d      	b.n	80032ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325a:	d121      	bne.n	80032a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d837      	bhi.n	80032d2 <DMA_CheckFifoParam+0xda>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <DMA_CheckFifoParam+0x70>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	08003279 	.word	0x08003279
 800326c:	0800327f 	.word	0x0800327f
 8003270:	08003279 	.word	0x08003279
 8003274:	08003291 	.word	0x08003291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e030      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d025      	beq.n	80032d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328e:	e022      	b.n	80032d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003298:	d11f      	bne.n	80032da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800329e:	e01c      	b.n	80032da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d903      	bls.n	80032ae <DMA_CheckFifoParam+0xb6>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d003      	beq.n	80032b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032ac:	e018      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      break;
 80032b2:	e015      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e00b      	b.n	80032de <DMA_CheckFifoParam+0xe6>
      break;
 80032c6:	bf00      	nop
 80032c8:	e00a      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e008      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e006      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e004      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
    }
  } 
  
  return status; 
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e169      	b.n	80035e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	f040 8158 	bne.w	80035de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <HAL_GPIO_Init+0x56>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d130      	bne.n	80033a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 0201 	and.w	r2, r3, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d017      	beq.n	80033e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d123      	bne.n	8003438 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80b2 	beq.w	80035de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347a:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a5f      	ldr	r2, [pc, #380]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 8003480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b5d      	ldr	r3, [pc, #372]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003492:	4a5b      	ldr	r2, [pc, #364]	@ (8003600 <HAL_GPIO_Init+0x310>)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a52      	ldr	r2, [pc, #328]	@ (8003604 <HAL_GPIO_Init+0x314>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02b      	beq.n	8003516 <HAL_GPIO_Init+0x226>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a51      	ldr	r2, [pc, #324]	@ (8003608 <HAL_GPIO_Init+0x318>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x222>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a50      	ldr	r2, [pc, #320]	@ (800360c <HAL_GPIO_Init+0x31c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x21e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003610 <HAL_GPIO_Init+0x320>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x21a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003614 <HAL_GPIO_Init+0x324>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x216>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003618 <HAL_GPIO_Init+0x328>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x212>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	@ (800361c <HAL_GPIO_Init+0x32c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003620 <HAL_GPIO_Init+0x330>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x20a>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00e      	b.n	8003518 <HAL_GPIO_Init+0x228>
 80034fa:	2308      	movs	r3, #8
 80034fc:	e00c      	b.n	8003518 <HAL_GPIO_Init+0x228>
 80034fe:	2306      	movs	r3, #6
 8003500:	e00a      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003502:	2305      	movs	r3, #5
 8003504:	e008      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003506:	2304      	movs	r3, #4
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x228>
 800350a:	2303      	movs	r3, #3
 800350c:	e004      	b.n	8003518 <HAL_GPIO_Init+0x228>
 800350e:	2302      	movs	r3, #2
 8003510:	e002      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003516:	2300      	movs	r3, #0
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f002 0203 	and.w	r2, r2, #3
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	4093      	lsls	r3, r2
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003528:	4935      	ldr	r1, [pc, #212]	@ (8003600 <HAL_GPIO_Init+0x310>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003536:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800355a:	4a32      	ldr	r2, [pc, #200]	@ (8003624 <HAL_GPIO_Init+0x334>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003560:	4b30      	ldr	r3, [pc, #192]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003584:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_GPIO_Init+0x334>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d8:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	f67f ae92 	bls.w	8003310 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3724      	adds	r7, #36	@ 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40013800 	.word	0x40013800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	40021000 	.word	0x40021000
 8003618:	40021400 	.word	0x40021400
 800361c:	40021800 	.word	0x40021800
 8003620:	40021c00 	.word	0x40021c00
 8003624:	40013c00 	.word	0x40013c00

08003628 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e0cd      	b.n	80037e0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003644:	2201      	movs	r2, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	429a      	cmp	r2, r3
 800365c:	f040 80bd 	bne.w	80037da <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003660:	4a65      	ldr	r2, [pc, #404]	@ (80037f8 <HAL_GPIO_DeInit+0x1d0>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a5d      	ldr	r2, [pc, #372]	@ (80037fc <HAL_GPIO_DeInit+0x1d4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02b      	beq.n	80036e2 <HAL_GPIO_DeInit+0xba>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a5c      	ldr	r2, [pc, #368]	@ (8003800 <HAL_GPIO_DeInit+0x1d8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d025      	beq.n	80036de <HAL_GPIO_DeInit+0xb6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a5b      	ldr	r2, [pc, #364]	@ (8003804 <HAL_GPIO_DeInit+0x1dc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01f      	beq.n	80036da <HAL_GPIO_DeInit+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a5a      	ldr	r2, [pc, #360]	@ (8003808 <HAL_GPIO_DeInit+0x1e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d019      	beq.n	80036d6 <HAL_GPIO_DeInit+0xae>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a59      	ldr	r2, [pc, #356]	@ (800380c <HAL_GPIO_DeInit+0x1e4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_GPIO_DeInit+0xaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_GPIO_DeInit+0x1e8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00d      	beq.n	80036ce <HAL_GPIO_DeInit+0xa6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a57      	ldr	r2, [pc, #348]	@ (8003814 <HAL_GPIO_DeInit+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <HAL_GPIO_DeInit+0xa2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a56      	ldr	r2, [pc, #344]	@ (8003818 <HAL_GPIO_DeInit+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_GPIO_DeInit+0x9e>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e00e      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e00c      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036ca:	2306      	movs	r3, #6
 80036cc:	e00a      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036ce:	2305      	movs	r3, #5
 80036d0:	e008      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036d2:	2304      	movs	r3, #4
 80036d4:	e006      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036d6:	2303      	movs	r3, #3
 80036d8:	e004      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036da:	2302      	movs	r3, #2
 80036dc:	e002      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_GPIO_DeInit+0xbc>
 80036e2:	2300      	movs	r3, #0
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	f002 0203 	and.w	r2, r2, #3
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	4093      	lsls	r3, r2
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d132      	bne.n	800375a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036f4:	4b49      	ldr	r3, [pc, #292]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	4947      	ldr	r1, [pc, #284]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 80036fe:	4013      	ands	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003702:	4b46      	ldr	r3, [pc, #280]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	4944      	ldr	r1, [pc, #272]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 800370c:	4013      	ands	r3, r2
 800370e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003710:	4b42      	ldr	r3, [pc, #264]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	43db      	mvns	r3, r3
 8003718:	4940      	ldr	r1, [pc, #256]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 800371a:	4013      	ands	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800371e:	4b3f      	ldr	r3, [pc, #252]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43db      	mvns	r3, r3
 8003726:	493d      	ldr	r1, [pc, #244]	@ (800381c <HAL_GPIO_DeInit+0x1f4>)
 8003728:	4013      	ands	r3, r2
 800372a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800373c:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <HAL_GPIO_DeInit+0x1d0>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	43da      	mvns	r2, r3
 800374c:	482a      	ldr	r0, [pc, #168]	@ (80037f8 <HAL_GPIO_DeInit+0x1d0>)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	400a      	ands	r2, r1
 8003754:	3302      	adds	r3, #2
 8003756:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2103      	movs	r1, #3
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	08d2      	lsrs	r2, r2, #3
 8003790:	4019      	ands	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3208      	adds	r2, #8
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2103      	movs	r1, #3
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	2101      	movs	r1, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2103      	movs	r1, #3
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	401a      	ands	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	f67f af2e 	bls.w	8003644 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40020800 	.word	0x40020800
 8003808:	40020c00 	.word	0x40020c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40021400 	.word	0x40021400
 8003814:	40021800 	.word	0x40021800
 8003818:	40021c00 	.word	0x40021c00
 800381c:	40013c00 	.word	0x40013c00

08003820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
 800382c:	4613      	mov	r3, r2
 800382e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800383c:	e003      	b.n	8003846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	619a      	str	r2, [r3, #24]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800385e:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800386a:	4a05      	ldr	r2, [pc, #20]	@ (8003880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f806 	bl	8003884 <HAL_GPIO_EXTI_Callback>
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40013c00 	.word	0x40013c00

08003884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	4a22      	ldr	r2, [pc, #136]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ca:	f7fe fc4d 	bl	8002168 <HAL_GetTick>
 80038ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d0:	e009      	b.n	80038e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d2:	f7fe fc49 	bl	8002168 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038e0:	d901      	bls.n	80038e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e022      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e6:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f2:	d1ee      	bne.n	80038d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038f4:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe fc32 	bl	8002168 <HAL_GetTick>
 8003904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003906:	e009      	b.n	800391c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003908:	f7fe fc2e 	bl	8002168 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003916:	d901      	bls.n	800391c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e007      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003928:	d1ee      	bne.n	8003908 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e291      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8087 	beq.w	8003a6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	4b96      	ldr	r3, [pc, #600]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00c      	beq.n	8003986 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396c:	4b93      	ldr	r3, [pc, #588]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d112      	bne.n	800399e <HAL_RCC_OscConfig+0x62>
 8003978:	4b90      	ldr	r3, [pc, #576]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003984:	d10b      	bne.n	800399e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003986:	4b8d      	ldr	r3, [pc, #564]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d06c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x130>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d168      	bne.n	8003a6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e26b      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x7a>
 80039a8:	4b84      	ldr	r3, [pc, #528]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a83      	ldr	r2, [pc, #524]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e02e      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x9c>
 80039be:	4b7f      	ldr	r3, [pc, #508]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b7c      	ldr	r3, [pc, #496]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7b      	ldr	r2, [pc, #492]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0xc0>
 80039e2:	4b76      	ldr	r3, [pc, #472]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a75      	ldr	r2, [pc, #468]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a72      	ldr	r2, [pc, #456]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b6c      	ldr	r3, [pc, #432]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fba4 	bl	8002168 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fba0 	bl	8002168 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e21f      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fb90 	bl	8002168 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fb8c 	bl	8002168 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e20b      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b57      	ldr	r3, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x110>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d069      	beq.n	8003b4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7a:	4b50      	ldr	r3, [pc, #320]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b4d      	ldr	r3, [pc, #308]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x190>
 8003a92:	4b4a      	ldr	r3, [pc, #296]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x17a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1df      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	493d      	ldr	r1, [pc, #244]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e040      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a38      	ldr	r2, [pc, #224]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fb42 	bl	8002168 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fb3e 	bl	8002168 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1bd      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b30      	ldr	r3, [pc, #192]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4929      	ldr	r1, [pc, #164]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e018      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1c:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fb1e 	bl	8002168 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe fb1a 	bl	8002168 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e199      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d038      	beq.n	8003bcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d019      	beq.n	8003b96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	4a15      	ldr	r2, [pc, #84]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fafb 	bl	8002168 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fe faf7 	bl	8002168 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e176      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x23a>
 8003b94:	e01a      	b.n	8003bcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9a:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fae1 	bl	8002168 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fe fadd 	bl	8002168 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d903      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e15c      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
 8003bbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b91      	ldr	r3, [pc, #580]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a4 	beq.w	8003d22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b8b      	ldr	r3, [pc, #556]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b88      	ldr	r3, [pc, #544]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	4a87      	ldr	r2, [pc, #540]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf2:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c02:	4b82      	ldr	r3, [pc, #520]	@ (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7e      	ldr	r2, [pc, #504]	@ (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe faa5 	bl	8002168 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe faa1 	bl	8002168 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	@ 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e120      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	4b75      	ldr	r3, [pc, #468]	@ (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x31a>
 8003c48:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	e02d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x33c>
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a69      	ldr	r2, [pc, #420]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	4b67      	ldr	r3, [pc, #412]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a66      	ldr	r2, [pc, #408]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	e01c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x35e>
 8003c80:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a60      	ldr	r2, [pc, #384]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a5d      	ldr	r2, [pc, #372]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a5a      	ldr	r2, [pc, #360]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca6:	4b58      	ldr	r3, [pc, #352]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a57      	ldr	r2, [pc, #348]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fa55 	bl	8002168 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe fa51 	bl	8002168 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0ce      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ee      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x386>
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fa3f 	bl	8002168 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fa3b 	bl	8002168 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0b8      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d04:	4b40      	ldr	r3, [pc, #256]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ee      	bne.n	8003cee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b3c      	ldr	r3, [pc, #240]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a4 	beq.w	8003e74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d06b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d149      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a30      	ldr	r2, [pc, #192]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fa0c 	bl	8002168 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fa08 	bl	8002168 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e087      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	4313      	orrs	r3, r2
 8003d98:	4a1b      	ldr	r2, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da0:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe f9dc 	bl	8002168 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe f9d8 	bl	8002168 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e057      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x478>
 8003dd2:	e04f      	b.n	8003e74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe f9c2 	bl	8002168 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe f9be 	bl	8002168 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e03d      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4ac>
 8003e06:	e035      	b.n	8003e74 <HAL_RCC_OscConfig+0x538>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x544>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0d0      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d910      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b67      	ldr	r3, [pc, #412]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 020f 	bic.w	r2, r3, #15
 8003eb2:	4965      	ldr	r1, [pc, #404]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d040      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d115      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e073      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06b      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4936      	ldr	r1, [pc, #216]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f78:	f7fe f8f6 	bl	8002168 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fe f8f2 	bl	8002168 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e053      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b2d      	ldr	r3, [pc, #180]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d210      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 020f 	bic.w	r2, r3, #15
 8003fbe:	4922      	ldr	r1, [pc, #136]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004002:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x1cc>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_ClockConfig+0x1d0>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1d4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd ff60 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	0800addc 	.word	0x0800addc
 8004054:	20000008 	.word	0x20000008
 8004058:	2000000c 	.word	0x2000000c

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b094      	sub	sp, #80	@ 0x50
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	@ 0x44
 8004068:	2300      	movs	r3, #0
 800406a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800406c:	2300      	movs	r3, #0
 800406e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b79      	ldr	r3, [pc, #484]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80e1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e0db      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b73      	ldr	r3, [pc, #460]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004094:	e0db      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b72      	ldr	r3, [pc, #456]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409a:	e0d8      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b6f      	ldr	r3, [pc, #444]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040a6:	4b6d      	ldr	r3, [pc, #436]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	6139      	str	r1, [r7, #16]
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4651      	mov	r1, sl
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ebb2 0801 	subs.w	r8, r2, r1
 8004114:	4659      	mov	r1, fp
 8004116:	eb63 0901 	sbc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	462b      	mov	r3, r5
 800413c:	eb49 0303 	adc.w	r3, r9, r3
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414e:	4629      	mov	r1, r5
 8004150:	028b      	lsls	r3, r1, #10
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004158:	4621      	mov	r1, r4
 800415a:	028a      	lsls	r2, r1, #10
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800416c:	f7fc f858 	bl	8000220 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004178:	e058      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b38      	ldr	r3, [pc, #224]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	4611      	mov	r1, r2
 8004186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4641      	mov	r1, r8
 80041ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041cc:	ebb2 040a 	subs.w	r4, r2, sl
 80041d0:	eb63 050b 	sbc.w	r5, r3, fp
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004220:	f7fb fffe 	bl	8000220 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800423c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004250:	4618      	mov	r0, r3
 8004252:	3750      	adds	r7, #80	@ 0x50
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400

08004264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000008 	.word	0x20000008

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	0800adec 	.word	0x0800adec

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffdc 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800adec 	.word	0x0800adec

080042cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	220f      	movs	r2, #15
 80042da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042dc:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0203 	and.w	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004300:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	08db      	lsrs	r3, r3, #3
 8004306:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <HAL_RCC_GetClockConfig+0x60>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	40023c00 	.word	0x40023c00

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d012      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004354:	4b65      	ldr	r3, [pc, #404]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a64      	ldr	r2, [pc, #400]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800435a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800435e:	6093      	str	r3, [r2, #8]
 8004360:	4b62      	ldr	r3, [pc, #392]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4960      	ldr	r1, [pc, #384]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004386:	4b59      	ldr	r3, [pc, #356]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800438c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	4955      	ldr	r1, [pc, #340]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c2:	4b4a      	ldr	r3, [pc, #296]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	4946      	ldr	r1, [pc, #280]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 808b 	beq.w	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	4a39      	ldr	r2, [pc, #228]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	@ 0x40
 800440c:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004418:	4b35      	ldr	r3, [pc, #212]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a34      	ldr	r2, [pc, #208]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fd fea0 	bl	8002168 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fd fe9c 	bl	8002168 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e2bc      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443e:	4b2c      	ldr	r3, [pc, #176]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444a:	4b28      	ldr	r3, [pc, #160]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004452:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d035      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d02e      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004470:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a1d      	ldr	r2, [pc, #116]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800447e:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004488:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800448a:	4a18      	ldr	r2, [pc, #96]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004490:	4b16      	ldr	r3, [pc, #88]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d114      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd fe64 	bl	8002168 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fd fe60 	bl	8002168 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e27e      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ee      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044d2:	d111      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80044e0:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80044e2:	400b      	ands	r3, r1
 80044e4:	4901      	ldr	r1, [pc, #4]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
 80044ea:	e00b      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40007000 	.word	0x40007000
 80044f4:	0ffffcff 	.word	0x0ffffcff
 80044f8:	4ba4      	ldr	r3, [pc, #656]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4aa3      	ldr	r2, [pc, #652]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	4ba1      	ldr	r3, [pc, #644]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	499e      	ldr	r1, [pc, #632]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004522:	4b9a      	ldr	r3, [pc, #616]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004528:	4a98      	ldr	r2, [pc, #608]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004532:	4b96      	ldr	r3, [pc, #600]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004534:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	4993      	ldr	r1, [pc, #588]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004550:	4b8e      	ldr	r3, [pc, #568]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455e:	498b      	ldr	r1, [pc, #556]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004572:	4b86      	ldr	r3, [pc, #536]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	4982      	ldr	r1, [pc, #520]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004594:	4b7d      	ldr	r3, [pc, #500]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a2:	497a      	ldr	r1, [pc, #488]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b6:	4b75      	ldr	r3, [pc, #468]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	f023 0203 	bic.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	4971      	ldr	r1, [pc, #452]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	f023 020c 	bic.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	4969      	ldr	r1, [pc, #420]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fa:	4b64      	ldr	r3, [pc, #400]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	4960      	ldr	r1, [pc, #384]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461c:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004622:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	4958      	ldr	r1, [pc, #352]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800463e:	4b53      	ldr	r3, [pc, #332]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464c:	494f      	ldr	r1, [pc, #316]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004660:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	4947      	ldr	r1, [pc, #284]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004682:	4b42      	ldr	r3, [pc, #264]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004688:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	493e      	ldr	r1, [pc, #248]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046a4:	4b39      	ldr	r3, [pc, #228]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	4936      	ldr	r1, [pc, #216]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d011      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046c6:	4b31      	ldr	r3, [pc, #196]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	492d      	ldr	r1, [pc, #180]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f6:	4b25      	ldr	r3, [pc, #148]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004704:	4921      	ldr	r1, [pc, #132]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004718:	4b1c      	ldr	r3, [pc, #112]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004726:	4919      	ldr	r1, [pc, #100]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800473a:	4b14      	ldr	r3, [pc, #80]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004748:	4910      	ldr	r1, [pc, #64]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d006      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 809d 	beq.w	800489e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a08      	ldr	r2, [pc, #32]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800476a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800476e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fd fcfa 	bl	8002168 <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004776:	e00b      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004778:	f7fd fcf6 	bl	8002168 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d904      	bls.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e116      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004790:	4b8b      	ldr	r3, [pc, #556]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ed      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d113      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047b0:	4b83      	ldr	r3, [pc, #524]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b6:	0e1b      	lsrs	r3, r3, #24
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	019a      	lsls	r2, r3, #6
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	071b      	lsls	r3, r3, #28
 80047d0:	497b      	ldr	r1, [pc, #492]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d024      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004802:	d11f      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004804:	4b6e      	ldr	r3, [pc, #440]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800480a:	0f1b      	lsrs	r3, r3, #28
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	019a      	lsls	r2, r3, #6
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4966      	ldr	r1, [pc, #408]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800482c:	4b64      	ldr	r3, [pc, #400]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800482e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004832:	f023 021f 	bic.w	r2, r3, #31
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	3b01      	subs	r3, #1
 800483c:	4960      	ldr	r1, [pc, #384]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	071b      	lsls	r3, r3, #28
 8004864:	4956      	ldr	r1, [pc, #344]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800486c:	4b54      	ldr	r3, [pc, #336]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a53      	ldr	r2, [pc, #332]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004872:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fd fc76 	bl	8002168 <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004880:	f7fd fc72 	bl	8002168 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	@ 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e092      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004892:	4b4b      	ldr	r3, [pc, #300]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 8088 	bne.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048a6:	4b46      	ldr	r3, [pc, #280]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a45      	ldr	r2, [pc, #276]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fd fc59 	bl	8002168 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048ba:	f7fd fc55 	bl	8002168 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	@ 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e075      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048cc:	4b3c      	ldr	r3, [pc, #240]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d8:	d0ef      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d024      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d120      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004902:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	019a      	lsls	r2, r3, #6
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	4927      	ldr	r1, [pc, #156]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800492a:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800492c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004930:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	3b01      	subs	r3, #1
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	4920      	ldr	r1, [pc, #128]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d018      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004958:	d113      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800495a:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	019a      	lsls	r2, r3, #6
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	4911      	ldr	r1, [pc, #68]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004982:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498e:	f7fd fbeb 	bl	8002168 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004996:	f7fd fbe7 	bl	8002168 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b64      	cmp	r3, #100	@ 0x64
 80049a2:	d901      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e007      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049b4:	d1ef      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e09d      	b.n	8004b12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049e6:	d009      	beq.n	80049fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
 80049ee:	e005      	b.n	80049fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd f84a 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a3c:	d902      	bls.n	8004a44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e002      	b.n	8004a4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a52:	d007      	beq.n	8004a64 <HAL_SPI_Init+0xa0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	ea42 0103 	orr.w	r1, r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	f003 0204 	and.w	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ae0:	ea42 0103 	orr.w	r1, r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e049      	b.n	8004bc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fd f817 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 ff65 	bl	8005a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e054      	b.n	8004c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	@ (8004c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d022      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0a:	d01d      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a22      	ldr	r2, [pc, #136]	@ (8004c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d018      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	@ (8004cac <HAL_TIM_Base_Start_IT+0xe4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d115      	bne.n	8004c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	4b19      	ldr	r3, [pc, #100]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d015      	beq.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c60:	d011      	beq.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	e008      	b.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e000      	b.n	8004c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40010400 	.word	0x40010400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40001800 	.word	0x40001800
 8004cb4:	00010007 	.word	0x00010007

08004cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e049      	b.n	8004d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f841 	bl	8004d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fe96 	bl	8005a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_TIM_PWM_Start+0x24>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e03c      	b.n	8004e1a <HAL_TIM_PWM_Start+0x9e>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d109      	bne.n	8004dba <HAL_TIM_PWM_Start+0x3e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e02f      	b.n	8004e1a <HAL_TIM_PWM_Start+0x9e>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d109      	bne.n	8004dd4 <HAL_TIM_PWM_Start+0x58>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e022      	b.n	8004e1a <HAL_TIM_PWM_Start+0x9e>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d109      	bne.n	8004dee <HAL_TIM_PWM_Start+0x72>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	e015      	b.n	8004e1a <HAL_TIM_PWM_Start+0x9e>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d109      	bne.n	8004e08 <HAL_TIM_PWM_Start+0x8c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	e008      	b.n	8004e1a <HAL_TIM_PWM_Start+0x9e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e092      	b.n	8004f48 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xb6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e30:	e023      	b.n	8004e7a <HAL_TIM_PWM_Start+0xfe>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Start+0xc6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e40:	e01b      	b.n	8004e7a <HAL_TIM_PWM_Start+0xfe>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0xd6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e50:	e013      	b.n	8004e7a <HAL_TIM_PWM_Start+0xfe>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b0c      	cmp	r3, #12
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xe6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e60:	e00b      	b.n	8004e7a <HAL_TIM_PWM_Start+0xfe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xf6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e70:	e003      	b.n	8004e7a <HAL_TIM_PWM_Start+0xfe>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fa9e 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <HAL_TIM_PWM_Start+0x1d4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_TIM_PWM_Start+0x120>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <HAL_TIM_PWM_Start+0x1d8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x124>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x126>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <HAL_TIM_PWM_Start+0x1d4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a22      	ldr	r2, [pc, #136]	@ (8004f58 <HAL_TIM_PWM_Start+0x1dc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <HAL_TIM_PWM_Start+0x1e0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <HAL_TIM_PWM_Start+0x1e4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	@ (8004f54 <HAL_TIM_PWM_Start+0x1d8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <HAL_TIM_PWM_Start+0x1e8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x18a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <HAL_TIM_PWM_Start+0x1ec>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d115      	bne.n	8004f32 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	4b17      	ldr	r3, [pc, #92]	@ (8004f6c <HAL_TIM_PWM_Start+0x1f0>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b06      	cmp	r3, #6
 8004f16:	d015      	beq.n	8004f44 <HAL_TIM_PWM_Start+0x1c8>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1e:	d011      	beq.n	8004f44 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	e008      	b.n	8004f44 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	00010007 	.word	0x00010007

08004f70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e049      	b.n	8005016 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f841 	bl	800501e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 fd3a 	bl	8005a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_IC_Start_IT+0x1e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e023      	b.n	800509a <HAL_TIM_IC_Start_IT+0x66>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_IC_Start_IT+0x2e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800505e:	b2db      	uxtb	r3, r3
 8005060:	e01b      	b.n	800509a <HAL_TIM_IC_Start_IT+0x66>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_IC_Start_IT+0x3e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e013      	b.n	800509a <HAL_TIM_IC_Start_IT+0x66>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d104      	bne.n	8005082 <HAL_TIM_IC_Start_IT+0x4e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e00b      	b.n	800509a <HAL_TIM_IC_Start_IT+0x66>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d104      	bne.n	8005092 <HAL_TIM_IC_Start_IT+0x5e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e003      	b.n	800509a <HAL_TIM_IC_Start_IT+0x66>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005098:	b2db      	uxtb	r3, r3
 800509a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_TIM_IC_Start_IT+0x78>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e013      	b.n	80050d4 <HAL_TIM_IC_Start_IT+0xa0>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d104      	bne.n	80050bc <HAL_TIM_IC_Start_IT+0x88>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e00b      	b.n	80050d4 <HAL_TIM_IC_Start_IT+0xa0>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_IC_Start_IT+0x98>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e003      	b.n	80050d4 <HAL_TIM_IC_Start_IT+0xa0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d102      	bne.n	80050e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050dc:	7b7b      	ldrb	r3, [r7, #13]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0e2      	b.n	80052ac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_IC_Start_IT+0xc2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f4:	e023      	b.n	800513e <HAL_TIM_IC_Start_IT+0x10a>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_IC_Start_IT+0xd2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005104:	e01b      	b.n	800513e <HAL_TIM_IC_Start_IT+0x10a>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d104      	bne.n	8005116 <HAL_TIM_IC_Start_IT+0xe2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005114:	e013      	b.n	800513e <HAL_TIM_IC_Start_IT+0x10a>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0xf2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005124:	e00b      	b.n	800513e <HAL_TIM_IC_Start_IT+0x10a>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d104      	bne.n	8005136 <HAL_TIM_IC_Start_IT+0x102>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005134:	e003      	b.n	800513e <HAL_TIM_IC_Start_IT+0x10a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_TIM_IC_Start_IT+0x11a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800514c:	e013      	b.n	8005176 <HAL_TIM_IC_Start_IT+0x142>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start_IT+0x12a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800515c:	e00b      	b.n	8005176 <HAL_TIM_IC_Start_IT+0x142>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Start_IT+0x13a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800516c:	e003      	b.n	8005176 <HAL_TIM_IC_Start_IT+0x142>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d841      	bhi.n	8005200 <HAL_TIM_IC_Start_IT+0x1cc>
 800517c:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <HAL_TIM_IC_Start_IT+0x150>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051b9 	.word	0x080051b9
 8005188:	08005201 	.word	0x08005201
 800518c:	08005201 	.word	0x08005201
 8005190:	08005201 	.word	0x08005201
 8005194:	080051cb 	.word	0x080051cb
 8005198:	08005201 	.word	0x08005201
 800519c:	08005201 	.word	0x08005201
 80051a0:	08005201 	.word	0x08005201
 80051a4:	080051dd 	.word	0x080051dd
 80051a8:	08005201 	.word	0x08005201
 80051ac:	08005201 	.word	0x08005201
 80051b0:	08005201 	.word	0x08005201
 80051b4:	080051ef 	.word	0x080051ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0202 	orr.w	r2, r2, #2
 80051c6:	60da      	str	r2, [r3, #12]
      break;
 80051c8:	e01d      	b.n	8005206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0204 	orr.w	r2, r2, #4
 80051d8:	60da      	str	r2, [r3, #12]
      break;
 80051da:	e014      	b.n	8005206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	60da      	str	r2, [r3, #12]
      break;
 80051ec:	e00b      	b.n	8005206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0210 	orr.w	r2, r2, #16
 80051fc:	60da      	str	r2, [r3, #12]
      break;
 80051fe:	e002      	b.n	8005206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
      break;
 8005204:	bf00      	nop
  }

  if (status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d14e      	bne.n	80052aa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f001 f8d5 	bl	80063c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <HAL_TIM_IC_Start_IT+0x280>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d01d      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_TIM_IC_Start_IT+0x284>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_TIM_IC_Start_IT+0x288>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1c      	ldr	r2, [pc, #112]	@ (80052c4 <HAL_TIM_IC_Start_IT+0x290>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <HAL_TIM_IC_Start_IT+0x294>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x236>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <HAL_TIM_IC_Start_IT+0x298>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d115      	bne.n	8005296 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	4b17      	ldr	r3, [pc, #92]	@ (80052d0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005272:	4013      	ands	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d015      	beq.n	80052a8 <HAL_TIM_IC_Start_IT+0x274>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005282:	d011      	beq.n	80052a8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	e008      	b.n	80052a8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e000      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40010400 	.word	0x40010400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40001800 	.word	0x40001800
 80052d0:	00010007 	.word	0x00010007

080052d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0202 	mvn.w	r2, #2
 8005308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb64 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fb56 	bl	80059d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fb67 	bl	8005a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0204 	mvn.w	r2, #4
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb3e 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb30 	bl	80059d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb41 	bl	8005a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0208 	mvn.w	r2, #8
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fb18 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fb0a 	bl	80059d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fb1b 	bl	8005a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d020      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 faf2 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fae4 	bl	80059d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 faf5 	bl	8005a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0201 	mvn.w	r2, #1
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb ff94 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 f9a9 	bl	80067c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f9a1 	bl	80067d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 faaf 	bl	8005a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0220 	mvn.w	r2, #32
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 f969 	bl	80067ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e088      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x130>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11b      	bne.n	8005546 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800551e:	f000 fd8d 	bl	800603c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 020c 	bic.w	r2, r2, #12
 8005530:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6999      	ldr	r1, [r3, #24]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]
 8005544:	e060      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d11c      	bne.n	8005586 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800555c:	f000 fe11 	bl	8006182 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800556e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	e040      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800559c:	f000 fe5e 	bl	800625c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 020c 	bic.w	r2, r2, #12
 80055ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69d9      	ldr	r1, [r3, #28]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
 80055c2:	e021      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d11c      	bne.n	8005604 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80055da:	f000 fe7b 	bl	80062d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	61da      	str	r2, [r3, #28]
 8005602:	e001      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005636:	2302      	movs	r3, #2
 8005638:	e0ff      	b.n	800583a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b14      	cmp	r3, #20
 8005646:	f200 80f0 	bhi.w	800582a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	080056a5 	.word	0x080056a5
 8005654:	0800582b 	.word	0x0800582b
 8005658:	0800582b 	.word	0x0800582b
 800565c:	0800582b 	.word	0x0800582b
 8005660:	080056e5 	.word	0x080056e5
 8005664:	0800582b 	.word	0x0800582b
 8005668:	0800582b 	.word	0x0800582b
 800566c:	0800582b 	.word	0x0800582b
 8005670:	08005727 	.word	0x08005727
 8005674:	0800582b 	.word	0x0800582b
 8005678:	0800582b 	.word	0x0800582b
 800567c:	0800582b 	.word	0x0800582b
 8005680:	08005767 	.word	0x08005767
 8005684:	0800582b 	.word	0x0800582b
 8005688:	0800582b 	.word	0x0800582b
 800568c:	0800582b 	.word	0x0800582b
 8005690:	080057a9 	.word	0x080057a9
 8005694:	0800582b 	.word	0x0800582b
 8005698:	0800582b 	.word	0x0800582b
 800569c:	0800582b 	.word	0x0800582b
 80056a0:	080057e9 	.word	0x080057e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa68 	bl	8005b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0204 	bic.w	r2, r2, #4
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
      break;
 80056e2:	e0a5      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 faba 	bl	8005c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
      break;
 8005724:	e084      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fb11 	bl	8005d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0208 	orr.w	r2, r2, #8
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0204 	bic.w	r2, r2, #4
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	61da      	str	r2, [r3, #28]
      break;
 8005764:	e064      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fb67 	bl	8005e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	61da      	str	r2, [r3, #28]
      break;
 80057a6:	e043      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fb9e 	bl	8005ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0208 	orr.w	r2, r2, #8
 80057c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0204 	bic.w	r2, r2, #4
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057e6:	e023      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fbd0 	bl	8005f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005828:	e002      	b.n	8005830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
      break;
 800582e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop

08005844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0x1c>
 800585c:	2302      	movs	r3, #2
 800585e:	e0b4      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x186>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4b56      	ldr	r3, [pc, #344]	@ (80059d4 <HAL_TIM_ConfigClockSource+0x190>)
 800587c:	4013      	ands	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005898:	d03e      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xd4>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589e:	f200 8087 	bhi.w	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a6:	f000 8086 	beq.w	80059b6 <HAL_TIM_ConfigClockSource+0x172>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	d87f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b70      	cmp	r3, #112	@ 0x70
 80058b2:	d01a      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0xa6>
 80058b4:	2b70      	cmp	r3, #112	@ 0x70
 80058b6:	d87b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b60      	cmp	r3, #96	@ 0x60
 80058ba:	d050      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x11a>
 80058bc:	2b60      	cmp	r3, #96	@ 0x60
 80058be:	d877      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b50      	cmp	r3, #80	@ 0x50
 80058c2:	d03c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0xfa>
 80058c4:	2b50      	cmp	r3, #80	@ 0x50
 80058c6:	d873      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d058      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x13a>
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	d86f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b30      	cmp	r3, #48	@ 0x30
 80058d2:	d064      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058d4:	2b30      	cmp	r3, #48	@ 0x30
 80058d6:	d86b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d060      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d867      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d05a      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	e062      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fa:	f000 fd43 	bl	8006384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800590c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
      break;
 8005916:	e04f      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005928:	f000 fd2c 	bl	8006384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800593a:	609a      	str	r2, [r3, #8]
      break;
 800593c:	e03c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fbea 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2150      	movs	r1, #80	@ 0x50
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fcf9 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 800595c:	e02c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fc46 	bl	80061fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2160      	movs	r1, #96	@ 0x60
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fce9 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 800597c:	e01c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fbca 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2140      	movs	r1, #64	@ 0x40
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fcd9 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 800599c:	e00c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 fcd0 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	fffeff88 	.word	0xfffeff88

080059d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a46      	ldr	r2, [pc, #280]	@ (8005b54 <TIM_Base_SetConfig+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a46:	d00f      	beq.n	8005a68 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a43      	ldr	r2, [pc, #268]	@ (8005b58 <TIM_Base_SetConfig+0x130>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a42      	ldr	r2, [pc, #264]	@ (8005b5c <TIM_Base_SetConfig+0x134>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a41      	ldr	r2, [pc, #260]	@ (8005b60 <TIM_Base_SetConfig+0x138>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a40      	ldr	r2, [pc, #256]	@ (8005b64 <TIM_Base_SetConfig+0x13c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d108      	bne.n	8005a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a35      	ldr	r2, [pc, #212]	@ (8005b54 <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d02b      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a88:	d027      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a32      	ldr	r2, [pc, #200]	@ (8005b58 <TIM_Base_SetConfig+0x130>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d023      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a31      	ldr	r2, [pc, #196]	@ (8005b5c <TIM_Base_SetConfig+0x134>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a30      	ldr	r2, [pc, #192]	@ (8005b60 <TIM_Base_SetConfig+0x138>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01b      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b64 <TIM_Base_SetConfig+0x13c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d017      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <TIM_Base_SetConfig+0x140>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <TIM_Base_SetConfig+0x144>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <TIM_Base_SetConfig+0x148>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b74 <TIM_Base_SetConfig+0x14c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b78 <TIM_Base_SetConfig+0x150>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a29      	ldr	r2, [pc, #164]	@ (8005b7c <TIM_Base_SetConfig+0x154>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a10      	ldr	r2, [pc, #64]	@ (8005b54 <TIM_Base_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0xf8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <TIM_Base_SetConfig+0x13c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d103      	bne.n	8005b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d105      	bne.n	8005b46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	611a      	str	r2, [r3, #16]
  }
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800
 8005b74:	40001800 	.word	0x40001800
 8005b78:	40001c00 	.word	0x40001c00
 8005b7c:	40002000 	.word	0x40002000

08005b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 0201 	bic.w	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b2b      	ldr	r3, [pc, #172]	@ (8005c58 <TIM_OC1_SetConfig+0xd8>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0302 	bic.w	r3, r3, #2
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a21      	ldr	r2, [pc, #132]	@ (8005c5c <TIM_OC1_SetConfig+0xdc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC1_SetConfig+0x64>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a20      	ldr	r2, [pc, #128]	@ (8005c60 <TIM_OC1_SetConfig+0xe0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10c      	bne.n	8005bfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0308 	bic.w	r3, r3, #8
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0304 	bic.w	r3, r3, #4
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a16      	ldr	r2, [pc, #88]	@ (8005c5c <TIM_OC1_SetConfig+0xdc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC1_SetConfig+0x8e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <TIM_OC1_SetConfig+0xe0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d111      	bne.n	8005c32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	fffeff8f 	.word	0xfffeff8f
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d48 <TIM_OC2_SetConfig+0xe4>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0320 	bic.w	r3, r3, #32
 8005cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a23      	ldr	r2, [pc, #140]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC2_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a22      	ldr	r2, [pc, #136]	@ (8005d50 <TIM_OC2_SetConfig+0xec>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC2_SetConfig+0x94>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <TIM_OC2_SetConfig+0xec>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d113      	bne.n	8005d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	feff8fff 	.word	0xfeff8fff
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e34 <TIM_OC3_SetConfig+0xe0>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <TIM_OC3_SetConfig+0xe4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_OC3_SetConfig+0x66>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a21      	ldr	r2, [pc, #132]	@ (8005e3c <TIM_OC3_SetConfig+0xe8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10d      	bne.n	8005dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <TIM_OC3_SetConfig+0xe4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0x92>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a16      	ldr	r2, [pc, #88]	@ (8005e3c <TIM_OC3_SetConfig+0xe8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	fffeff8f 	.word	0xfffeff8f
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400

08005e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee4 <TIM_OC4_SetConfig+0xa4>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a13      	ldr	r2, [pc, #76]	@ (8005ee8 <TIM_OC4_SetConfig+0xa8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC4_SetConfig+0x68>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	@ (8005eec <TIM_OC4_SetConfig+0xac>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d109      	bne.n	8005ebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	019b      	lsls	r3, r3, #6
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	feff8fff 	.word	0xfeff8fff
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f88 <TIM_OC5_SetConfig+0x98>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a12      	ldr	r2, [pc, #72]	@ (8005f8c <TIM_OC5_SetConfig+0x9c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_OC5_SetConfig+0x5e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a11      	ldr	r2, [pc, #68]	@ (8005f90 <TIM_OC5_SetConfig+0xa0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d109      	bne.n	8005f62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	621a      	str	r2, [r3, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	fffeff8f 	.word	0xfffeff8f
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400

08005f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006030 <TIM_OC6_SetConfig+0x9c>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a13      	ldr	r2, [pc, #76]	@ (8006034 <TIM_OC6_SetConfig+0xa0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC6_SetConfig+0x60>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a12      	ldr	r2, [pc, #72]	@ (8006038 <TIM_OC6_SetConfig+0xa4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d109      	bne.n	8006008 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	feff8fff 	.word	0xfeff8fff
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f023 0201 	bic.w	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a28      	ldr	r2, [pc, #160]	@ (8006108 <TIM_TI1_SetConfig+0xcc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006070:	d017      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <TIM_TI1_SetConfig+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a24      	ldr	r2, [pc, #144]	@ (8006110 <TIM_TI1_SetConfig+0xd4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a23      	ldr	r2, [pc, #140]	@ (8006114 <TIM_TI1_SetConfig+0xd8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a22      	ldr	r2, [pc, #136]	@ (8006118 <TIM_TI1_SetConfig+0xdc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a21      	ldr	r2, [pc, #132]	@ (800611c <TIM_TI1_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_TI1_SetConfig+0x66>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <TIM_TI1_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <TIM_TI1_SetConfig+0x6a>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <TIM_TI1_SetConfig+0x6c>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e003      	b.n	80060c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f023 030a 	bic.w	r3, r3, #10
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f003 030a 	and.w	r3, r3, #10
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40001800 	.word	0x40001800

08006124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 030a 	bic.w	r3, r3, #10
 8006160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0210 	bic.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	031b      	lsls	r3, r3, #12
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f023 0210 	bic.w	r2, r3, #16
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	031b      	lsls	r3, r3, #12
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006238:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	621a      	str	r2, [r3, #32]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006298:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006300:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	031b      	lsls	r3, r3, #12
 8006318:	b29b      	uxth	r3, r3
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006326:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	031b      	lsls	r3, r3, #12
 800632c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	f043 0307 	orr.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_TIMEx_PWMN_Start+0x24>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e022      	b.n	800647a <HAL_TIMEx_PWMN_Start+0x6a>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d109      	bne.n	800644e <HAL_TIMEx_PWMN_Start+0x3e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	e015      	b.n	800647a <HAL_TIMEx_PWMN_Start+0x6a>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d109      	bne.n	8006468 <HAL_TIMEx_PWMN_Start+0x58>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e008      	b.n	800647a <HAL_TIMEx_PWMN_Start+0x6a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e073      	b.n	800656a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_TIMEx_PWMN_Start+0x82>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006490:	e013      	b.n	80064ba <HAL_TIMEx_PWMN_Start+0xaa>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d104      	bne.n	80064a2 <HAL_TIMEx_PWMN_Start+0x92>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a0:	e00b      	b.n	80064ba <HAL_TIMEx_PWMN_Start+0xaa>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d104      	bne.n	80064b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064b0:	e003      	b.n	80064ba <HAL_TIMEx_PWMN_Start+0xaa>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2204      	movs	r2, #4
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f990 	bl	80067e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a25      	ldr	r2, [pc, #148]	@ (8006574 <HAL_TIMEx_PWMN_Start+0x164>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d022      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	d01d      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a21      	ldr	r2, [pc, #132]	@ (8006578 <HAL_TIMEx_PWMN_Start+0x168>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d018      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a20      	ldr	r2, [pc, #128]	@ (800657c <HAL_TIMEx_PWMN_Start+0x16c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1e      	ldr	r2, [pc, #120]	@ (8006580 <HAL_TIMEx_PWMN_Start+0x170>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00e      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <HAL_TIMEx_PWMN_Start+0x174>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <HAL_TIMEx_PWMN_Start+0x178>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIMEx_PWMN_Start+0x118>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <HAL_TIMEx_PWMN_Start+0x17c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d115      	bne.n	8006554 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	4b18      	ldr	r3, [pc, #96]	@ (8006590 <HAL_TIMEx_PWMN_Start+0x180>)
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b06      	cmp	r3, #6
 8006538:	d015      	beq.n	8006566 <HAL_TIMEx_PWMN_Start+0x156>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006540:	d011      	beq.n	8006566 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006552:	e008      	b.n	8006566 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e000      	b.n	8006568 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40001800 	.word	0x40001800
 8006590:	00010007 	.word	0x00010007

08006594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e06d      	b.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a30      	ldr	r2, [pc, #192]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2f      	ldr	r2, [pc, #188]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a20      	ldr	r2, [pc, #128]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d022      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d01d      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1d      	ldr	r2, [pc, #116]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d018      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1c      	ldr	r2, [pc, #112]	@ (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d013      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1a      	ldr	r2, [pc, #104]	@ (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00e      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a15      	ldr	r2, [pc, #84]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d009      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a16      	ldr	r2, [pc, #88]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a15      	ldr	r2, [pc, #84]	@ (80066ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d10c      	bne.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	4313      	orrs	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40001800 	.word	0x40001800

080066b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e065      	b.n	8006798 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a14      	ldr	r2, [pc, #80]	@ (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d115      	bne.n	8006786 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	051b      	lsls	r3, r3, #20
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40010400 	.word	0x40010400

080067ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	2204      	movs	r2, #4
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e040      	b.n	80068c6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7fb fa5b 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2224      	movs	r2, #36	@ 0x24
 800685e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fed1 	bl	8007620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fc6a 	bl	8007158 <UART_SetConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e01b      	b.n	80068c6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800689c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 ff50 	bl	8007764 <UART_CheckIdleState>
 80068c4:	4603      	mov	r3, r0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e02f      	b.n	8006940 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2224      	movs	r2, #36	@ 0x24
 80068e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fb faca 	bl	8001ea8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	@ 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800695a:	2b20      	cmp	r3, #32
 800695c:	d165      	bne.n	8006a2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_UART_Transmit_DMA+0x22>
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e05e      	b.n	8006a2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2221      	movs	r2, #33	@ 0x21
 8006990:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	2b00      	cmp	r3, #0
 8006998:	d027      	beq.n	80069ea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a25      	ldr	r2, [pc, #148]	@ (8006a34 <HAL_UART_Transmit_DMA+0xec>)
 80069a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a6:	4a24      	ldr	r2, [pc, #144]	@ (8006a38 <HAL_UART_Transmit_DMA+0xf0>)
 80069a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <HAL_UART_Transmit_DMA+0xf4>)
 80069b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	2200      	movs	r2, #0
 80069b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c2:	4619      	mov	r1, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3328      	adds	r3, #40	@ 0x28
 80069ca:	461a      	mov	r2, r3
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f7fc f927 	bl	8002c20 <HAL_DMA_Start_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2210      	movs	r2, #16
 80069dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e020      	b.n	8006a2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2240      	movs	r2, #64	@ 0x40
 80069f0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a12:	623a      	str	r2, [r7, #32]
 8006a14:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69f9      	ldr	r1, [r7, #28]
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3728      	adds	r7, #40	@ 0x28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	08007b41 	.word	0x08007b41
 8006a38:	08007bd7 	.word	0x08007bd7
 8006a3c:	08007d59 	.word	0x08007d59

08006a40 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b090      	sub	sp, #64	@ 0x40
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a54:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a60:	2b80      	cmp	r3, #128	@ 0x80
 8006a62:	d139      	bne.n	8006ad8 <HAL_UART_DMAStop+0x98>
 8006a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a66:	2b21      	cmp	r3, #33	@ 0x21
 8006a68:	d136      	bne.n	8006ad8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e5      	bne.n	8006a6a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d015      	beq.n	8006ad2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fc f918 	bl	8002ce0 <HAL_DMA_Abort>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fc fb2c 	bl	8003118 <HAL_DMA_GetError>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d105      	bne.n	8006ad2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e044      	b.n	8006b5c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 ffaa 	bl	8007a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d139      	bne.n	8006b5a <HAL_UART_DMAStop+0x11a>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	2b22      	cmp	r3, #34	@ 0x22
 8006aea:	d136      	bne.n	8006b5a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0c:	61ba      	str	r2, [r7, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6979      	ldr	r1, [r7, #20]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc f8d7 	bl	8002ce0 <HAL_DMA_Abort>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fc faeb 	bl	8003118 <HAL_DMA_GetError>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d105      	bne.n	8006b54 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e003      	b.n	8006b5c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 ff8f 	bl	8007a78 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3740      	adds	r7, #64	@ 0x40
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b0ba      	sub	sp, #232	@ 0xe8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b92:	4013      	ands	r3, r2
 8006b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d115      	bne.n	8006bcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00f      	beq.n	8006bcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8297 	beq.w	80070f0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
      }
      return;
 8006bca:	e291      	b.n	80070f0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8117 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006be2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006be6:	4b85      	ldr	r3, [pc, #532]	@ (8006dfc <HAL_UART_IRQHandler+0x298>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 810a 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <HAL_UART_IRQHandler+0xbc>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c16:	f043 0201 	orr.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d011      	beq.n	8006c50 <HAL_UART_IRQHandler+0xec>
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d011      	beq.n	8006c80 <HAL_UART_IRQHandler+0x11c>
 8006c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb2:	f043 0208 	orr.w	r2, r3, #8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_UART_IRQHandler+0x18a>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 81fd 	beq.w	80070f4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d36:	2b40      	cmp	r3, #64	@ 0x40
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d04f      	beq.n	8006de6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fe96 	bl	8007a78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d141      	bne.n	8006dde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d9      	bne.n	8006d5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d013      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db2:	4a13      	ldr	r2, [pc, #76]	@ (8006e00 <HAL_UART_IRQHandler+0x29c>)
 8006db4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fc f800 	bl	8002dc0 <HAL_DMA_Abort_IT>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e00f      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9b4 	bl	8007144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e00b      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9b0 	bl	8007144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e007      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9ac 	bl	8007144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006df4:	e17e      	b.n	80070f4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df6:	bf00      	nop
    return;
 8006df8:	e17c      	b.n	80070f4 <HAL_UART_IRQHandler+0x590>
 8006dfa:	bf00      	nop
 8006dfc:	04000120 	.word	0x04000120
 8006e00:	08007dd7 	.word	0x08007dd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f040 814c 	bne.w	80070a6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8145 	beq.w	80070a6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 813e 	beq.w	80070a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	f040 80b6 	bne.w	8006fae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8150 	beq.w	80070f8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f080 8148 	bcs.w	80070f8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7c:	f000 8086 	beq.w	8006f8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1da      	bne.n	8006e80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e1      	bne.n	8006eca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e3      	bne.n	8006f06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e4      	bne.n	8006f4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fb feaa 	bl	8002ce0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fa f86a 	bl	8001080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fac:	e0a4      	b.n	80070f8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8096 	beq.w	80070fc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8091 	beq.w	80070fc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e4      	bne.n	8006fda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	623b      	str	r3, [r7, #32]
   return(result);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007034:	633a      	str	r2, [r7, #48]	@ 0x30
 8007036:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800703a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e3      	bne.n	8007010 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60fb      	str	r3, [r7, #12]
   return(result);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69b9      	ldr	r1, [r7, #24]
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	617b      	str	r3, [r7, #20]
   return(result);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e4      	bne.n	800705c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7f9 ffee 	bl	8001080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070a4:	e02a      	b.n	80070fc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01c      	beq.n	8007100 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
    }
    return;
 80070ce:	e017      	b.n	8007100 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fe8a 	bl	8007e02 <UART_EndTransmit_IT>
    return;
 80070ee:	e008      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
    return;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
    return;
 8007100:	bf00      	nop
  }

}
 8007102:	37e8      	adds	r7, #232	@ 0xe8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4ba6      	ldr	r3, [pc, #664]	@ (800741c <UART_SetConfig+0x2c4>)
 8007184:	4013      	ands	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	6979      	ldr	r1, [r7, #20]
 800718c:	430b      	orrs	r3, r1
 800718e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a94      	ldr	r2, [pc, #592]	@ (8007420 <UART_SetConfig+0x2c8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d120      	bne.n	8007216 <UART_SetConfig+0xbe>
 80071d4:	4b93      	ldr	r3, [pc, #588]	@ (8007424 <UART_SetConfig+0x2cc>)
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d816      	bhi.n	8007210 <UART_SetConfig+0xb8>
 80071e2:	a201      	add	r2, pc, #4	@ (adr r2, 80071e8 <UART_SetConfig+0x90>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	08007205 	.word	0x08007205
 80071f0:	080071ff 	.word	0x080071ff
 80071f4:	0800720b 	.word	0x0800720b
 80071f8:	2301      	movs	r3, #1
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e150      	b.n	80074a0 <UART_SetConfig+0x348>
 80071fe:	2302      	movs	r3, #2
 8007200:	77fb      	strb	r3, [r7, #31]
 8007202:	e14d      	b.n	80074a0 <UART_SetConfig+0x348>
 8007204:	2304      	movs	r3, #4
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e14a      	b.n	80074a0 <UART_SetConfig+0x348>
 800720a:	2308      	movs	r3, #8
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e147      	b.n	80074a0 <UART_SetConfig+0x348>
 8007210:	2310      	movs	r3, #16
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e144      	b.n	80074a0 <UART_SetConfig+0x348>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a83      	ldr	r2, [pc, #524]	@ (8007428 <UART_SetConfig+0x2d0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d132      	bne.n	8007286 <UART_SetConfig+0x12e>
 8007220:	4b80      	ldr	r3, [pc, #512]	@ (8007424 <UART_SetConfig+0x2cc>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	f003 030c 	and.w	r3, r3, #12
 800722a:	2b0c      	cmp	r3, #12
 800722c:	d828      	bhi.n	8007280 <UART_SetConfig+0x128>
 800722e:	a201      	add	r2, pc, #4	@ (adr r2, 8007234 <UART_SetConfig+0xdc>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007269 	.word	0x08007269
 8007238:	08007281 	.word	0x08007281
 800723c:	08007281 	.word	0x08007281
 8007240:	08007281 	.word	0x08007281
 8007244:	08007275 	.word	0x08007275
 8007248:	08007281 	.word	0x08007281
 800724c:	08007281 	.word	0x08007281
 8007250:	08007281 	.word	0x08007281
 8007254:	0800726f 	.word	0x0800726f
 8007258:	08007281 	.word	0x08007281
 800725c:	08007281 	.word	0x08007281
 8007260:	08007281 	.word	0x08007281
 8007264:	0800727b 	.word	0x0800727b
 8007268:	2300      	movs	r3, #0
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e118      	b.n	80074a0 <UART_SetConfig+0x348>
 800726e:	2302      	movs	r3, #2
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e115      	b.n	80074a0 <UART_SetConfig+0x348>
 8007274:	2304      	movs	r3, #4
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e112      	b.n	80074a0 <UART_SetConfig+0x348>
 800727a:	2308      	movs	r3, #8
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e10f      	b.n	80074a0 <UART_SetConfig+0x348>
 8007280:	2310      	movs	r3, #16
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e10c      	b.n	80074a0 <UART_SetConfig+0x348>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a68      	ldr	r2, [pc, #416]	@ (800742c <UART_SetConfig+0x2d4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d120      	bne.n	80072d2 <UART_SetConfig+0x17a>
 8007290:	4b64      	ldr	r3, [pc, #400]	@ (8007424 <UART_SetConfig+0x2cc>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800729a:	2b30      	cmp	r3, #48	@ 0x30
 800729c:	d013      	beq.n	80072c6 <UART_SetConfig+0x16e>
 800729e:	2b30      	cmp	r3, #48	@ 0x30
 80072a0:	d814      	bhi.n	80072cc <UART_SetConfig+0x174>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d009      	beq.n	80072ba <UART_SetConfig+0x162>
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d810      	bhi.n	80072cc <UART_SetConfig+0x174>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <UART_SetConfig+0x15c>
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d006      	beq.n	80072c0 <UART_SetConfig+0x168>
 80072b2:	e00b      	b.n	80072cc <UART_SetConfig+0x174>
 80072b4:	2300      	movs	r3, #0
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e0f2      	b.n	80074a0 <UART_SetConfig+0x348>
 80072ba:	2302      	movs	r3, #2
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e0ef      	b.n	80074a0 <UART_SetConfig+0x348>
 80072c0:	2304      	movs	r3, #4
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e0ec      	b.n	80074a0 <UART_SetConfig+0x348>
 80072c6:	2308      	movs	r3, #8
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e0e9      	b.n	80074a0 <UART_SetConfig+0x348>
 80072cc:	2310      	movs	r3, #16
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e0e6      	b.n	80074a0 <UART_SetConfig+0x348>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a56      	ldr	r2, [pc, #344]	@ (8007430 <UART_SetConfig+0x2d8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d120      	bne.n	800731e <UART_SetConfig+0x1c6>
 80072dc:	4b51      	ldr	r3, [pc, #324]	@ (8007424 <UART_SetConfig+0x2cc>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80072e8:	d013      	beq.n	8007312 <UART_SetConfig+0x1ba>
 80072ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ec:	d814      	bhi.n	8007318 <UART_SetConfig+0x1c0>
 80072ee:	2b80      	cmp	r3, #128	@ 0x80
 80072f0:	d009      	beq.n	8007306 <UART_SetConfig+0x1ae>
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d810      	bhi.n	8007318 <UART_SetConfig+0x1c0>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <UART_SetConfig+0x1a8>
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d006      	beq.n	800730c <UART_SetConfig+0x1b4>
 80072fe:	e00b      	b.n	8007318 <UART_SetConfig+0x1c0>
 8007300:	2300      	movs	r3, #0
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e0cc      	b.n	80074a0 <UART_SetConfig+0x348>
 8007306:	2302      	movs	r3, #2
 8007308:	77fb      	strb	r3, [r7, #31]
 800730a:	e0c9      	b.n	80074a0 <UART_SetConfig+0x348>
 800730c:	2304      	movs	r3, #4
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e0c6      	b.n	80074a0 <UART_SetConfig+0x348>
 8007312:	2308      	movs	r3, #8
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e0c3      	b.n	80074a0 <UART_SetConfig+0x348>
 8007318:	2310      	movs	r3, #16
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e0c0      	b.n	80074a0 <UART_SetConfig+0x348>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a44      	ldr	r2, [pc, #272]	@ (8007434 <UART_SetConfig+0x2dc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d125      	bne.n	8007374 <UART_SetConfig+0x21c>
 8007328:	4b3e      	ldr	r3, [pc, #248]	@ (8007424 <UART_SetConfig+0x2cc>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007336:	d017      	beq.n	8007368 <UART_SetConfig+0x210>
 8007338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800733c:	d817      	bhi.n	800736e <UART_SetConfig+0x216>
 800733e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007342:	d00b      	beq.n	800735c <UART_SetConfig+0x204>
 8007344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007348:	d811      	bhi.n	800736e <UART_SetConfig+0x216>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <UART_SetConfig+0x1fe>
 800734e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007352:	d006      	beq.n	8007362 <UART_SetConfig+0x20a>
 8007354:	e00b      	b.n	800736e <UART_SetConfig+0x216>
 8007356:	2300      	movs	r3, #0
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	e0a1      	b.n	80074a0 <UART_SetConfig+0x348>
 800735c:	2302      	movs	r3, #2
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e09e      	b.n	80074a0 <UART_SetConfig+0x348>
 8007362:	2304      	movs	r3, #4
 8007364:	77fb      	strb	r3, [r7, #31]
 8007366:	e09b      	b.n	80074a0 <UART_SetConfig+0x348>
 8007368:	2308      	movs	r3, #8
 800736a:	77fb      	strb	r3, [r7, #31]
 800736c:	e098      	b.n	80074a0 <UART_SetConfig+0x348>
 800736e:	2310      	movs	r3, #16
 8007370:	77fb      	strb	r3, [r7, #31]
 8007372:	e095      	b.n	80074a0 <UART_SetConfig+0x348>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2f      	ldr	r2, [pc, #188]	@ (8007438 <UART_SetConfig+0x2e0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d125      	bne.n	80073ca <UART_SetConfig+0x272>
 800737e:	4b29      	ldr	r3, [pc, #164]	@ (8007424 <UART_SetConfig+0x2cc>)
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800738c:	d017      	beq.n	80073be <UART_SetConfig+0x266>
 800738e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007392:	d817      	bhi.n	80073c4 <UART_SetConfig+0x26c>
 8007394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007398:	d00b      	beq.n	80073b2 <UART_SetConfig+0x25a>
 800739a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800739e:	d811      	bhi.n	80073c4 <UART_SetConfig+0x26c>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <UART_SetConfig+0x254>
 80073a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a8:	d006      	beq.n	80073b8 <UART_SetConfig+0x260>
 80073aa:	e00b      	b.n	80073c4 <UART_SetConfig+0x26c>
 80073ac:	2301      	movs	r3, #1
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e076      	b.n	80074a0 <UART_SetConfig+0x348>
 80073b2:	2302      	movs	r3, #2
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e073      	b.n	80074a0 <UART_SetConfig+0x348>
 80073b8:	2304      	movs	r3, #4
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e070      	b.n	80074a0 <UART_SetConfig+0x348>
 80073be:	2308      	movs	r3, #8
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e06d      	b.n	80074a0 <UART_SetConfig+0x348>
 80073c4:	2310      	movs	r3, #16
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e06a      	b.n	80074a0 <UART_SetConfig+0x348>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1b      	ldr	r2, [pc, #108]	@ (800743c <UART_SetConfig+0x2e4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d138      	bne.n	8007446 <UART_SetConfig+0x2ee>
 80073d4:	4b13      	ldr	r3, [pc, #76]	@ (8007424 <UART_SetConfig+0x2cc>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80073de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e2:	d017      	beq.n	8007414 <UART_SetConfig+0x2bc>
 80073e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e8:	d82a      	bhi.n	8007440 <UART_SetConfig+0x2e8>
 80073ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ee:	d00b      	beq.n	8007408 <UART_SetConfig+0x2b0>
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f4:	d824      	bhi.n	8007440 <UART_SetConfig+0x2e8>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <UART_SetConfig+0x2aa>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fe:	d006      	beq.n	800740e <UART_SetConfig+0x2b6>
 8007400:	e01e      	b.n	8007440 <UART_SetConfig+0x2e8>
 8007402:	2300      	movs	r3, #0
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e04b      	b.n	80074a0 <UART_SetConfig+0x348>
 8007408:	2302      	movs	r3, #2
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e048      	b.n	80074a0 <UART_SetConfig+0x348>
 800740e:	2304      	movs	r3, #4
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e045      	b.n	80074a0 <UART_SetConfig+0x348>
 8007414:	2308      	movs	r3, #8
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e042      	b.n	80074a0 <UART_SetConfig+0x348>
 800741a:	bf00      	nop
 800741c:	efff69f3 	.word	0xefff69f3
 8007420:	40011000 	.word	0x40011000
 8007424:	40023800 	.word	0x40023800
 8007428:	40004400 	.word	0x40004400
 800742c:	40004800 	.word	0x40004800
 8007430:	40004c00 	.word	0x40004c00
 8007434:	40005000 	.word	0x40005000
 8007438:	40011400 	.word	0x40011400
 800743c:	40007800 	.word	0x40007800
 8007440:	2310      	movs	r3, #16
 8007442:	77fb      	strb	r3, [r7, #31]
 8007444:	e02c      	b.n	80074a0 <UART_SetConfig+0x348>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a72      	ldr	r2, [pc, #456]	@ (8007614 <UART_SetConfig+0x4bc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d125      	bne.n	800749c <UART_SetConfig+0x344>
 8007450:	4b71      	ldr	r3, [pc, #452]	@ (8007618 <UART_SetConfig+0x4c0>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800745a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800745e:	d017      	beq.n	8007490 <UART_SetConfig+0x338>
 8007460:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007464:	d817      	bhi.n	8007496 <UART_SetConfig+0x33e>
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746a:	d00b      	beq.n	8007484 <UART_SetConfig+0x32c>
 800746c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007470:	d811      	bhi.n	8007496 <UART_SetConfig+0x33e>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <UART_SetConfig+0x326>
 8007476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800747a:	d006      	beq.n	800748a <UART_SetConfig+0x332>
 800747c:	e00b      	b.n	8007496 <UART_SetConfig+0x33e>
 800747e:	2300      	movs	r3, #0
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e00d      	b.n	80074a0 <UART_SetConfig+0x348>
 8007484:	2302      	movs	r3, #2
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e00a      	b.n	80074a0 <UART_SetConfig+0x348>
 800748a:	2304      	movs	r3, #4
 800748c:	77fb      	strb	r3, [r7, #31]
 800748e:	e007      	b.n	80074a0 <UART_SetConfig+0x348>
 8007490:	2308      	movs	r3, #8
 8007492:	77fb      	strb	r3, [r7, #31]
 8007494:	e004      	b.n	80074a0 <UART_SetConfig+0x348>
 8007496:	2310      	movs	r3, #16
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e001      	b.n	80074a0 <UART_SetConfig+0x348>
 800749c:	2310      	movs	r3, #16
 800749e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a8:	d15b      	bne.n	8007562 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80074aa:	7ffb      	ldrb	r3, [r7, #31]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d828      	bhi.n	8007502 <UART_SetConfig+0x3aa>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x360>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	08007503 	.word	0x08007503
 80074c8:	080074f3 	.word	0x080074f3
 80074cc:	08007503 	.word	0x08007503
 80074d0:	08007503 	.word	0x08007503
 80074d4:	08007503 	.word	0x08007503
 80074d8:	080074fb 	.word	0x080074fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fc fece 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 80074e0:	61b8      	str	r0, [r7, #24]
        break;
 80074e2:	e013      	b.n	800750c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e4:	f7fc fede 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 80074e8:	61b8      	str	r0, [r7, #24]
        break;
 80074ea:	e00f      	b.n	800750c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074ec:	4b4b      	ldr	r3, [pc, #300]	@ (800761c <UART_SetConfig+0x4c4>)
 80074ee:	61bb      	str	r3, [r7, #24]
        break;
 80074f0:	e00c      	b.n	800750c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f2:	f7fc fdb3 	bl	800405c <HAL_RCC_GetSysClockFreq>
 80074f6:	61b8      	str	r0, [r7, #24]
        break;
 80074f8:	e008      	b.n	800750c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074fe:	61bb      	str	r3, [r7, #24]
        break;
 8007500:	e004      	b.n	800750c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	77bb      	strb	r3, [r7, #30]
        break;
 800750a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d074      	beq.n	80075fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	005a      	lsls	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	441a      	add	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b0f      	cmp	r3, #15
 800752c:	d916      	bls.n	800755c <UART_SetConfig+0x404>
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d212      	bcs.n	800755c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f023 030f 	bic.w	r3, r3, #15
 800753e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	b29a      	uxth	r2, r3
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	4313      	orrs	r3, r2
 8007550:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	89fa      	ldrh	r2, [r7, #14]
 8007558:	60da      	str	r2, [r3, #12]
 800755a:	e04f      	b.n	80075fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	77bb      	strb	r3, [r7, #30]
 8007560:	e04c      	b.n	80075fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007562:	7ffb      	ldrb	r3, [r7, #31]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d828      	bhi.n	80075ba <UART_SetConfig+0x462>
 8007568:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x418>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007595 	.word	0x08007595
 8007574:	0800759d 	.word	0x0800759d
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075bb 	.word	0x080075bb
 8007580:	080075ab 	.word	0x080075ab
 8007584:	080075bb 	.word	0x080075bb
 8007588:	080075bb 	.word	0x080075bb
 800758c:	080075bb 	.word	0x080075bb
 8007590:	080075b3 	.word	0x080075b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fc fe72 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8007598:	61b8      	str	r0, [r7, #24]
        break;
 800759a:	e013      	b.n	80075c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fc fe82 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 80075a0:	61b8      	str	r0, [r7, #24]
        break;
 80075a2:	e00f      	b.n	80075c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a4:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <UART_SetConfig+0x4c4>)
 80075a6:	61bb      	str	r3, [r7, #24]
        break;
 80075a8:	e00c      	b.n	80075c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075aa:	f7fc fd57 	bl	800405c <HAL_RCC_GetSysClockFreq>
 80075ae:	61b8      	str	r0, [r7, #24]
        break;
 80075b0:	e008      	b.n	80075c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b6:	61bb      	str	r3, [r7, #24]
        break;
 80075b8:	e004      	b.n	80075c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	77bb      	strb	r3, [r7, #30]
        break;
 80075c2:	bf00      	nop
    }

    if (pclk != 0U)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	085a      	lsrs	r2, r3, #1
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	441a      	add	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b0f      	cmp	r3, #15
 80075e2:	d909      	bls.n	80075f8 <UART_SetConfig+0x4a0>
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ea:	d205      	bcs.n	80075f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	e001      	b.n	80075fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007608:	7fbb      	ldrb	r3, [r7, #30]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40007c00 	.word	0x40007c00
 8007618:	40023800 	.word	0x40023800
 800761c:	00f42400 	.word	0x00f42400

08007620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01a      	beq.n	8007736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800771e:	d10a      	bne.n	8007736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	605a      	str	r2, [r3, #4]
  }
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	@ 0x30
 8007768:	af02      	add	r7, sp, #8
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007774:	f7fa fcf8 	bl	8002168 <HAL_GetTick>
 8007778:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b08      	cmp	r3, #8
 8007786:	d12e      	bne.n	80077e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	2200      	movs	r2, #0
 8007792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f83b 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d021      	beq.n	80077e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077b6:	623b      	str	r3, [r7, #32]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	617b      	str	r3, [r7, #20]
   return(result);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e6      	bne.n	80077a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e011      	b.n	800780a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	@ 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	4613      	mov	r3, r2
 8007820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007822:	e04f      	b.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d04b      	beq.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782c:	f7fa fc9c 	bl	8002168 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <UART_WaitOnFlagUntilTimeout+0x30>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e04e      	b.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d037      	beq.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b80      	cmp	r3, #128	@ 0x80
 8007858:	d034      	beq.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b40      	cmp	r3, #64	@ 0x40
 800785e:	d031      	beq.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b08      	cmp	r3, #8
 800786c:	d110      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2208      	movs	r2, #8
 8007874:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f8fe 	bl	8007a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2208      	movs	r2, #8
 8007880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e029      	b.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800789a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800789e:	d111      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f8e4 	bl	8007a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e00f      	b.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d0a0      	beq.n	8007824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b096      	sub	sp, #88	@ 0x58
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2222      	movs	r2, #34	@ 0x22
 8007914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800791c:	2b00      	cmp	r3, #0
 800791e:	d028      	beq.n	8007972 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007924:	4a3e      	ldr	r2, [pc, #248]	@ (8007a20 <UART_Start_Receive_DMA+0x134>)
 8007926:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792c:	4a3d      	ldr	r2, [pc, #244]	@ (8007a24 <UART_Start_Receive_DMA+0x138>)
 800792e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007934:	4a3c      	ldr	r2, [pc, #240]	@ (8007a28 <UART_Start_Receive_DMA+0x13c>)
 8007936:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793c:	2200      	movs	r2, #0
 800793e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3324      	adds	r3, #36	@ 0x24
 800794a:	4619      	mov	r1, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007950:	461a      	mov	r2, r3
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	f7fb f964 	bl	8002c20 <HAL_DMA_Start_IT>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2210      	movs	r2, #16
 8007962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e051      	b.n	8007a16 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d018      	beq.n	80079ac <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800798e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800799a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800799e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80079a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80079ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	613b      	str	r3, [r7, #16]
   return(result);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a00:	623a      	str	r2, [r7, #32]
 8007a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3758      	adds	r7, #88	@ 0x58
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	08007bf3 	.word	0x08007bf3
 8007a24:	08007d1b 	.word	0x08007d1b
 8007a28:	08007d59 	.word	0x08007d59

08007a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b089      	sub	sp, #36	@ 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6979      	ldr	r1, [r7, #20]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007a6c:	bf00      	nop
 8007a6e:	3724      	adds	r7, #36	@ 0x24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b095      	sub	sp, #84	@ 0x54
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e6      	bne.n	8007a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d118      	bne.n	8007b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6979      	ldr	r1, [r7, #20]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b34:	bf00      	nop
 8007b36:	3754      	adds	r7, #84	@ 0x54
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b090      	sub	sp, #64	@ 0x40
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b56:	d037      	beq.n	8007bc8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b80:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	69b9      	ldr	r1, [r7, #24]
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e6      	bne.n	8007b94 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bc6:	e002      	b.n	8007bce <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007bc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007bca:	f7f9 fa27 	bl	800101c <HAL_UART_TxCpltCallback>
}
 8007bce:	bf00      	nop
 8007bd0:	3740      	adds	r7, #64	@ 0x40
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fa8f 	bl	8007108 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b09c      	sub	sp, #112	@ 0x70
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c08:	d071      	beq.n	8007cee <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c64:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e5      	bne.n	8007c44 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	623b      	str	r3, [r7, #32]
   return(result);
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d118      	bne.n	8007cee <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d02:	4619      	mov	r1, r3
 8007d04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d06:	f7f9 f9bb 	bl	8001080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d0a:	e002      	b.n	8007d12 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007d0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d0e:	f7ff fa05 	bl	800711c <HAL_UART_RxCpltCallback>
}
 8007d12:	bf00      	nop
 8007d14:	3770      	adds	r7, #112	@ 0x70
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d109      	bne.n	8007d4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7f9 f99c 	bl	8001080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d48:	e002      	b.n	8007d50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff f9f0 	bl	8007130 <HAL_UART_RxHalfCpltCallback>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7e:	2b80      	cmp	r3, #128	@ 0x80
 8007d80:	d109      	bne.n	8007d96 <UART_DMAError+0x3e>
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2b21      	cmp	r3, #33	@ 0x21
 8007d86:	d106      	bne.n	8007d96 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007d90:	6978      	ldr	r0, [r7, #20]
 8007d92:	f7ff fe4b 	bl	8007a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	d109      	bne.n	8007db8 <UART_DMAError+0x60>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b22      	cmp	r3, #34	@ 0x22
 8007da8:	d106      	bne.n	8007db8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007db2:	6978      	ldr	r0, [r7, #20]
 8007db4:	f7ff fe60 	bl	8007a78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dbe:	f043 0210 	orr.w	r2, r3, #16
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dc8:	6978      	ldr	r0, [r7, #20]
 8007dca:	f7ff f9bb 	bl	8007144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff f9a5 	bl	8007144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6979      	ldr	r1, [r7, #20]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	613b      	str	r3, [r7, #16]
   return(result);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e6      	bne.n	8007e0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7f9 f8e7 	bl	800101c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4e:	bf00      	nop
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b08c      	sub	sp, #48	@ 0x30
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d142      	bne.n	8007ef4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e03b      	b.n	8007ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fd2b 	bl	80078ec <UART_Start_Receive_DMA>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d124      	bne.n	8007eee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d11d      	bne.n	8007ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f043 0310 	orr.w	r3, r3, #16
 8007ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6a39      	ldr	r1, [r7, #32]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e6      	bne.n	8007eb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007ee6:	e002      	b.n	8007eee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ef2:	e000      	b.n	8007ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
  }
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3730      	adds	r7, #48	@ 0x30
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007f02:	bf00      	nop
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f12:	f3ef 8305 	mrs	r3, IPSR
 8007f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f22:	607b      	str	r3, [r7, #4]
  return(result);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d007      	beq.n	8007f46 <osKernelInitialize+0x3a>
 8007f36:	4b0e      	ldr	r3, [pc, #56]	@ (8007f70 <osKernelInitialize+0x64>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007f3e:	f06f 0305 	mvn.w	r3, #5
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e00c      	b.n	8007f60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f46:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <osKernelInitialize+0x64>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f4e:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <osKernelInitialize+0x64>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e002      	b.n	8007f60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007f60:	68fb      	ldr	r3, [r7, #12]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000500 	.word	0x20000500

08007f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f7a:	f3ef 8305 	mrs	r3, IPSR
 8007f7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10f      	bne.n	8007fa6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f86:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8a:	607b      	str	r3, [r7, #4]
  return(result);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d105      	bne.n	8007f9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f92:	f3ef 8311 	mrs	r3, BASEPRI
 8007f96:	603b      	str	r3, [r7, #0]
  return(result);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <osKernelStart+0x3a>
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fdc <osKernelStart+0x68>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d103      	bne.n	8007fae <osKernelStart+0x3a>
    stat = osErrorISR;
 8007fa6:	f06f 0305 	mvn.w	r3, #5
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e010      	b.n	8007fd0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <osKernelStart+0x68>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d109      	bne.n	8007fca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fb6:	f7ff ffa2 	bl	8007efe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fba:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <osKernelStart+0x68>)
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fc0:	f001 f8e2 	bl	8009188 <vTaskStartScheduler>
      stat = osOK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	e002      	b.n	8007fd0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000500 	.word	0x20000500

08007fe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b090      	sub	sp, #64	@ 0x40
 8007fe4:	af04      	add	r7, sp, #16
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff0:	f3ef 8305 	mrs	r3, IPSR
 8007ff4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ff6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 808f 	bne.w	800811c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8008002:	61bb      	str	r3, [r7, #24]
  return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800800a:	f3ef 8311 	mrs	r3, BASEPRI
 800800e:	617b      	str	r3, [r7, #20]
  return(result);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <osThreadNew+0x3e>
 8008016:	4b44      	ldr	r3, [pc, #272]	@ (8008128 <osThreadNew+0x148>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d07e      	beq.n	800811c <osThreadNew+0x13c>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d07b      	beq.n	800811c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008024:	2380      	movs	r3, #128	@ 0x80
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008028:	2318      	movs	r3, #24
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d045      	beq.n	80080c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <osThreadNew+0x6a>
        name = attr->name;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <osThreadNew+0x90>
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	2b38      	cmp	r3, #56	@ 0x38
 8008062:	d805      	bhi.n	8008070 <osThreadNew+0x90>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <osThreadNew+0x94>
        return (NULL);
 8008070:	2300      	movs	r3, #0
 8008072:	e054      	b.n	800811e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00e      	beq.n	80080aa <osThreadNew+0xca>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2ba7      	cmp	r3, #167	@ 0xa7
 8008092:	d90a      	bls.n	80080aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <osThreadNew+0xca>
        mem = 1;
 80080a4:	2301      	movs	r3, #1
 80080a6:	623b      	str	r3, [r7, #32]
 80080a8:	e010      	b.n	80080cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10c      	bne.n	80080cc <osThreadNew+0xec>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d108      	bne.n	80080cc <osThreadNew+0xec>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <osThreadNew+0xec>
          mem = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	e001      	b.n	80080cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d110      	bne.n	80080f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080da:	9202      	str	r2, [sp, #8]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fe4f 	bl	8008d8c <xTaskCreateStatic>
 80080ee:	4603      	mov	r3, r0
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	e013      	b.n	800811c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	f107 0310 	add.w	r3, r7, #16
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fea3 	bl	8008e58 <xTaskCreate>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d001      	beq.n	800811c <osThreadNew+0x13c>
          hTask = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800811c:	693b      	ldr	r3, [r7, #16]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3730      	adds	r7, #48	@ 0x30
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000500 	.word	0x20000500

0800812c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008134:	f3ef 8305 	mrs	r3, IPSR
 8008138:	613b      	str	r3, [r7, #16]
  return(result);
 800813a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10f      	bne.n	8008160 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008140:	f3ef 8310 	mrs	r3, PRIMASK
 8008144:	60fb      	str	r3, [r7, #12]
  return(result);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800814c:	f3ef 8311 	mrs	r3, BASEPRI
 8008150:	60bb      	str	r3, [r7, #8]
  return(result);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <osDelay+0x3c>
 8008158:	4b0a      	ldr	r3, [pc, #40]	@ (8008184 <osDelay+0x58>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d103      	bne.n	8008168 <osDelay+0x3c>
    stat = osErrorISR;
 8008160:	f06f 0305 	mvn.w	r3, #5
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e007      	b.n	8008178 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 ffd0 	bl	8009118 <vTaskDelay>
    }
  }

  return (stat);
 8008178:	697b      	ldr	r3, [r7, #20]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000500 	.word	0x20000500

08008188 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a07      	ldr	r2, [pc, #28]	@ (80081b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a06      	ldr	r2, [pc, #24]	@ (80081b8 <vApplicationGetIdleTaskMemory+0x30>)
 800819e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2280      	movs	r2, #128	@ 0x80
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20000504 	.word	0x20000504
 80081b8:	200005ac 	.word	0x200005ac

080081bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a07      	ldr	r2, [pc, #28]	@ (80081e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80081cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a06      	ldr	r2, [pc, #24]	@ (80081ec <vApplicationGetTimerTaskMemory+0x30>)
 80081d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081da:	601a      	str	r2, [r3, #0]
}
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	200007ac 	.word	0x200007ac
 80081ec:	20000854 	.word	0x20000854

080081f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f103 0208 	add.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f04f 32ff 	mov.w	r2, #4294967295
 8008208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f103 0208 	add.w	r2, r3, #8
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f103 0208 	add.w	r2, r3, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	601a      	str	r2, [r3, #0]
}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a8:	d103      	bne.n	80082b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e00c      	b.n	80082cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3308      	adds	r3, #8
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e002      	b.n	80082c0 <vListInsert+0x2e>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d2f6      	bcs.n	80082ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6892      	ldr	r2, [r2, #8]
 800831a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6852      	ldr	r2, [r2, #4]
 8008324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d103      	bne.n	8008338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	1e5a      	subs	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	b672      	cpsid	i
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	b662      	cpsie	i
 8008380:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008388:	f002 f8d8 	bl	800a53c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008394:	68f9      	ldr	r1, [r7, #12]
 8008396:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	441a      	add	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	3b01      	subs	r3, #1
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083be:	fb01 f303 	mul.w	r3, r1, r3
 80083c2:	441a      	add	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	22ff      	movs	r2, #255	@ 0xff
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	22ff      	movs	r2, #255	@ 0xff
 80083d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d114      	bne.n	8008408 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01a      	beq.n	800841c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3310      	adds	r3, #16
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 f978 	bl	80096e0 <xTaskRemoveFromEventList>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083f6:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <xQueueGenericReset+0xd4>)
 80083f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e009      	b.n	800841c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3310      	adds	r3, #16
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff feef 	bl	80081f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3324      	adds	r3, #36	@ 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff feea 	bl	80081f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800841c:	f002 f8c4 	bl	800a5a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008420:	2301      	movs	r3, #1
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	@ 0x38
 8008434:	af02      	add	r7, sp, #8
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10d      	bne.n	8008460 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	b672      	cpsid	i
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	b662      	cpsie	i
 8008458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	b672      	cpsid	i
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	b662      	cpsie	i
 800847a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <xQueueGenericCreateStatic+0x5e>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <xQueueGenericCreateStatic+0x62>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueGenericCreateStatic+0x64>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10d      	bne.n	80084b4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849c:	b672      	cpsid	i
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	b662      	cpsie	i
 80084ac:	623b      	str	r3, [r7, #32]
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	e7fd      	b.n	80084b0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <xQueueGenericCreateStatic+0x90>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <xQueueGenericCreateStatic+0x94>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <xQueueGenericCreateStatic+0x96>
 80084c4:	2300      	movs	r3, #0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10d      	bne.n	80084e6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	b672      	cpsid	i
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	b662      	cpsie	i
 80084de:	61fb      	str	r3, [r7, #28]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084e6:	2350      	movs	r3, #80	@ 0x50
 80084e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b50      	cmp	r3, #80	@ 0x50
 80084ee:	d00d      	beq.n	800850c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	b672      	cpsid	i
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	b662      	cpsie	i
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800850c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00d      	beq.n	8008534 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008520:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f805 	bl	800853e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008536:	4618      	mov	r0, r3
 8008538:	3730      	adds	r7, #48	@ 0x30
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e002      	b.n	8008560 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800856c:	2101      	movs	r1, #1
 800856e:	69b8      	ldr	r0, [r7, #24]
 8008570:	f7ff fef2 	bl	8008358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08e      	sub	sp, #56	@ 0x38
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008592:	2300      	movs	r3, #0
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <xQueueGenericSend+0x38>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	b672      	cpsid	i
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	b662      	cpsie	i
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <xQueueGenericSend+0x46>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <xQueueGenericSend+0x4a>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <xQueueGenericSend+0x4c>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10d      	bne.n	80085f0 <xQueueGenericSend+0x6c>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d103      	bne.n	80085fe <xQueueGenericSend+0x7a>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <xQueueGenericSend+0x7e>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueGenericSend+0x80>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <xQueueGenericSend+0xa0>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	b672      	cpsid	i
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	b662      	cpsie	i
 800861c:	623b      	str	r3, [r7, #32]
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008624:	f001 fa2a 	bl	8009a7c <xTaskGetSchedulerState>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <xQueueGenericSend+0xb0>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <xQueueGenericSend+0xb4>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <xQueueGenericSend+0xb6>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <xQueueGenericSend+0xd6>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	b672      	cpsid	i
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	b662      	cpsie	i
 8008652:	61fb      	str	r3, [r7, #28]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800865a:	f001 ff6f 	bl	800a53c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008666:	429a      	cmp	r2, r3
 8008668:	d302      	bcc.n	8008670 <xQueueGenericSend+0xec>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d129      	bne.n	80086c4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008676:	f000 fa1b 	bl	8008ab0 <prvCopyDataToQueue>
 800867a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d010      	beq.n	80086a6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	3324      	adds	r3, #36	@ 0x24
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f829 	bl	80096e0 <xTaskRemoveFromEventList>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d013      	beq.n	80086bc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008694:	4b3f      	ldr	r3, [pc, #252]	@ (8008794 <xQueueGenericSend+0x210>)
 8008696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	e00a      	b.n	80086bc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086ac:	4b39      	ldr	r3, [pc, #228]	@ (8008794 <xQueueGenericSend+0x210>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086bc:	f001 ff74 	bl	800a5a8 <vPortExitCritical>
				return pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e063      	b.n	800878c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086ca:	f001 ff6d 	bl	800a5a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e05c      	b.n	800878c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 f865 	bl	80097ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e6:	f001 ff5f 	bl	800a5a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ea:	f000 fdc1 	bl	8009270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ee:	f001 ff25 	bl	800a53c <vPortEnterCritical>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086f8:	b25b      	sxtb	r3, r3
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	d103      	bne.n	8008708 <xQueueGenericSend+0x184>
 8008700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800870e:	b25b      	sxtb	r3, r3
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d103      	bne.n	800871e <xQueueGenericSend+0x19a>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800871e:	f001 ff43 	bl	800a5a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008722:	1d3a      	adds	r2, r7, #4
 8008724:	f107 0314 	add.w	r3, r7, #20
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f854 	bl	80097d8 <xTaskCheckForTimeOut>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d124      	bne.n	8008780 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008736:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008738:	f000 fab2 	bl	8008ca0 <prvIsQueueFull>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d018      	beq.n	8008774 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	3310      	adds	r3, #16
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f000 ff72 	bl	8009634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008752:	f000 fa3d 	bl	8008bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008756:	f000 fd99 	bl	800928c <xTaskResumeAll>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f af7c 	bne.w	800865a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008762:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <xQueueGenericSend+0x210>)
 8008764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	e772      	b.n	800865a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008776:	f000 fa2b 	bl	8008bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800877a:	f000 fd87 	bl	800928c <xTaskResumeAll>
 800877e:	e76c      	b.n	800865a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008782:	f000 fa25 	bl	8008bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008786:	f000 fd81 	bl	800928c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800878a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800878c:	4618      	mov	r0, r3
 800878e:	3738      	adds	r7, #56	@ 0x38
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed04 	.word	0xe000ed04

08008798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	@ 0x38
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10d      	bne.n	80087cc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	b672      	cpsid	i
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	b662      	cpsie	i
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <xQueueGenericSendFromISR+0x42>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <xQueueGenericSendFromISR+0x46>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <xQueueGenericSendFromISR+0x48>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10d      	bne.n	8008800 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	b672      	cpsid	i
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	b662      	cpsie	i
 80087f8:	623b      	str	r3, [r7, #32]
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d103      	bne.n	800880e <xQueueGenericSendFromISR+0x76>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <xQueueGenericSendFromISR+0x7a>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <xQueueGenericSendFromISR+0x7c>
 8008812:	2300      	movs	r3, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	b672      	cpsid	i
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	b662      	cpsie	i
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008834:	f001 ff6a 	bl	800a70c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008838:	f3ef 8211 	mrs	r2, BASEPRI
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	b672      	cpsid	i
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	b662      	cpsie	i
 8008850:	61ba      	str	r2, [r7, #24]
 8008852:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008854:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008856:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008860:	429a      	cmp	r2, r3
 8008862:	d302      	bcc.n	800886a <xQueueGenericSendFromISR+0xd2>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d12c      	bne.n	80088c4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800887a:	f000 f919 	bl	8008ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800887e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008886:	d112      	bne.n	80088ae <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d016      	beq.n	80088be <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	3324      	adds	r3, #36	@ 0x24
 8008894:	4618      	mov	r0, r3
 8008896:	f000 ff23 	bl	80096e0 <xTaskRemoveFromEventList>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00e      	beq.n	80088be <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	e007      	b.n	80088be <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088b2:	3301      	adds	r3, #1
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	b25a      	sxtb	r2, r3
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088be:	2301      	movs	r3, #1
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80088c2:	e001      	b.n	80088c8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3738      	adds	r7, #56	@ 0x38
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08c      	sub	sp, #48	@ 0x30
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10d      	bne.n	8008916 <xQueueReceive+0x36>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	623b      	str	r3, [r7, #32]
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	e7fd      	b.n	8008912 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <xQueueReceive+0x44>
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <xQueueReceive+0x48>
 8008924:	2301      	movs	r3, #1
 8008926:	e000      	b.n	800892a <xQueueReceive+0x4a>
 8008928:	2300      	movs	r3, #0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10d      	bne.n	800894a <xQueueReceive+0x6a>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	b672      	cpsid	i
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	b662      	cpsie	i
 8008942:	61fb      	str	r3, [r7, #28]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800894a:	f001 f897 	bl	8009a7c <xTaskGetSchedulerState>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <xQueueReceive+0x7a>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <xQueueReceive+0x7e>
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <xQueueReceive+0x80>
 800895e:	2300      	movs	r3, #0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <xQueueReceive+0xa0>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	b672      	cpsid	i
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	b662      	cpsie	i
 8008978:	61bb      	str	r3, [r7, #24]
}
 800897a:	bf00      	nop
 800897c:	bf00      	nop
 800897e:	e7fd      	b.n	800897c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008980:	f001 fddc 	bl	800a53c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800898a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01f      	beq.n	80089d0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008994:	f000 f8f6 	bl	8008b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	1e5a      	subs	r2, r3, #1
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089aa:	3310      	adds	r3, #16
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fe97 	bl	80096e0 <xTaskRemoveFromEventList>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089b8:	4b3c      	ldr	r3, [pc, #240]	@ (8008aac <xQueueReceive+0x1cc>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089c8:	f001 fdee 	bl	800a5a8 <vPortExitCritical>
				return pdPASS;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e069      	b.n	8008aa4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089d6:	f001 fde7 	bl	800a5a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089da:	2300      	movs	r3, #0
 80089dc:	e062      	b.n	8008aa4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089e4:	f107 0310 	add.w	r3, r7, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fedf 	bl	80097ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089f2:	f001 fdd9 	bl	800a5a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089f6:	f000 fc3b 	bl	8009270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089fa:	f001 fd9f 	bl	800a53c <vPortEnterCritical>
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a04:	b25b      	sxtb	r3, r3
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d103      	bne.n	8008a14 <xQueueReceive+0x134>
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d103      	bne.n	8008a2a <xQueueReceive+0x14a>
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a2a:	f001 fdbd 	bl	800a5a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a2e:	1d3a      	adds	r2, r7, #4
 8008a30:	f107 0310 	add.w	r3, r7, #16
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fece 	bl	80097d8 <xTaskCheckForTimeOut>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d123      	bne.n	8008a8a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a44:	f000 f916 	bl	8008c74 <prvIsQueueEmpty>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d017      	beq.n	8008a7e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	3324      	adds	r3, #36	@ 0x24
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fdec 	bl	8009634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a5e:	f000 f8b7 	bl	8008bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a62:	f000 fc13 	bl	800928c <xTaskResumeAll>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d189      	bne.n	8008980 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008aac <xQueueReceive+0x1cc>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	e780      	b.n	8008980 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a80:	f000 f8a6 	bl	8008bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a84:	f000 fc02 	bl	800928c <xTaskResumeAll>
 8008a88:	e77a      	b.n	8008980 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a8c:	f000 f8a0 	bl	8008bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a90:	f000 fbfc 	bl	800928c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a96:	f000 f8ed 	bl	8008c74 <prvIsQueueEmpty>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f43f af6f 	beq.w	8008980 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008aa2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3730      	adds	r7, #48	@ 0x30
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d14d      	bne.n	8008b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 ffec 	bl	8009ab8 <xTaskPriorityDisinherit>
 8008ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	609a      	str	r2, [r3, #8]
 8008ae8:	e043      	b.n	8008b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d119      	bne.n	8008b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6858      	ldr	r0, [r3, #4]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	461a      	mov	r2, r3
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	f002 f8c2 	bl	800ac84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b08:	441a      	add	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d32b      	bcc.n	8008b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	e026      	b.n	8008b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68d8      	ldr	r0, [r3, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	f002 f8a8 	bl	800ac84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3c:	425b      	negs	r3, r3
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d207      	bcs.n	8008b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	425b      	negs	r3, r3
 8008b5a:	441a      	add	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d105      	bne.n	8008b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b7a:	697b      	ldr	r3, [r7, #20]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d018      	beq.n	8008bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	441a      	add	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d303      	bcc.n	8008bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68d9      	ldr	r1, [r3, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6838      	ldr	r0, [r7, #0]
 8008bc4:	f002 f85e 	bl	800ac84 <memcpy>
	}
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bd8:	f001 fcb0 	bl	800a53c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be4:	e011      	b.n	8008c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d012      	beq.n	8008c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3324      	adds	r3, #36	@ 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fd74 	bl	80096e0 <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bfe:	f000 fe53 	bl	80098a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dce9      	bgt.n	8008be6 <prvUnlockQueue+0x16>
 8008c12:	e000      	b.n	8008c16 <prvUnlockQueue+0x46>
					break;
 8008c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	22ff      	movs	r2, #255	@ 0xff
 8008c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c1e:	f001 fcc3 	bl	800a5a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c22:	f001 fc8b 	bl	800a53c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c2e:	e011      	b.n	8008c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d012      	beq.n	8008c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3310      	adds	r3, #16
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 fd4f 	bl	80096e0 <xTaskRemoveFromEventList>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c48:	f000 fe2e 	bl	80098a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dce9      	bgt.n	8008c30 <prvUnlockQueue+0x60>
 8008c5c:	e000      	b.n	8008c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	22ff      	movs	r2, #255	@ 0xff
 8008c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c68:	f001 fc9e 	bl	800a5a8 <vPortExitCritical>
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c7c:	f001 fc5e 	bl	800a53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e001      	b.n	8008c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c92:	f001 fc89 	bl	800a5a8 <vPortExitCritical>

	return xReturn;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ca8:	f001 fc48 	bl	800a53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d102      	bne.n	8008cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	e001      	b.n	8008cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cc2:	f001 fc71 	bl	800a5a8 <vPortExitCritical>

	return xReturn;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	e014      	b.n	8008d0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8008d20 <vQueueAddToRegistry+0x50>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10b      	bne.n	8008d04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cec:	490c      	ldr	r1, [pc, #48]	@ (8008d20 <vQueueAddToRegistry+0x50>)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8008d20 <vQueueAddToRegistry+0x50>)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d02:	e006      	b.n	8008d12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b07      	cmp	r3, #7
 8008d0e:	d9e7      	bls.n	8008ce0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20000c54 	.word	0x20000c54

08008d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d34:	f001 fc02 	bl	800a53c <vPortEnterCritical>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d3e:	b25b      	sxtb	r3, r3
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d103      	bne.n	8008d4e <vQueueWaitForMessageRestricted+0x2a>
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d54:	b25b      	sxtb	r3, r3
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d103      	bne.n	8008d64 <vQueueWaitForMessageRestricted+0x40>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d64:	f001 fc20 	bl	800a5a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	3324      	adds	r3, #36	@ 0x24
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fc83 	bl	8009684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d7e:	6978      	ldr	r0, [r7, #20]
 8008d80:	f7ff ff26 	bl	8008bd0 <prvUnlockQueue>
	}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08e      	sub	sp, #56	@ 0x38
 8008d90:	af04      	add	r7, sp, #16
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10d      	bne.n	8008dbc <xTaskCreateStatic+0x30>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	b672      	cpsid	i
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	b662      	cpsie	i
 8008db4:	623b      	str	r3, [r7, #32]
}
 8008db6:	bf00      	nop
 8008db8:	bf00      	nop
 8008dba:	e7fd      	b.n	8008db8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <xTaskCreateStatic+0x52>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	b672      	cpsid	i
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	b662      	cpsie	i
 8008dd6:	61fb      	str	r3, [r7, #28]
}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	e7fd      	b.n	8008dda <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dde:	23a8      	movs	r3, #168	@ 0xa8
 8008de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2ba8      	cmp	r3, #168	@ 0xa8
 8008de6:	d00d      	beq.n	8008e04 <xTaskCreateStatic+0x78>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dec:	b672      	cpsid	i
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	b662      	cpsie	i
 8008dfc:	61bb      	str	r3, [r7, #24]
}
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	e7fd      	b.n	8008e00 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01e      	beq.n	8008e4a <xTaskCreateStatic+0xbe>
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01b      	beq.n	8008e4a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e24:	2300      	movs	r3, #0
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	f107 0314 	add.w	r3, r7, #20
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f851 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e44:	f000 f8f8 	bl	8009038 <prvAddNewTaskToReadyList>
 8008e48:	e001      	b.n	8008e4e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e4e:	697b      	ldr	r3, [r7, #20]
	}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3728      	adds	r7, #40	@ 0x28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	@ 0x30
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4613      	mov	r3, r2
 8008e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fc93 	bl	800a798 <pvPortMalloc>
 8008e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e7a:	20a8      	movs	r0, #168	@ 0xa8
 8008e7c:	f001 fc8c 	bl	800a798 <pvPortMalloc>
 8008e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e8e:	e005      	b.n	8008e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e90:	6978      	ldr	r0, [r7, #20]
 8008e92:	f001 fd4f 	bl	800a934 <vPortFree>
 8008e96:	e001      	b.n	8008e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f80f 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ec6:	69f8      	ldr	r0, [r7, #28]
 8008ec8:	f000 f8b6 	bl	8009038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e002      	b.n	8008ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	461a      	mov	r2, r3
 8008efc:	21a5      	movs	r1, #165	@ 0xa5
 8008efe:	f001 fe35 	bl	800ab6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008f0c:	440b      	add	r3, r1
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	617b      	str	r3, [r7, #20]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01f      	beq.n	8008f88 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	e012      	b.n	8008f74 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	7819      	ldrb	r1, [r3, #0]
 8008f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3334      	adds	r3, #52	@ 0x34
 8008f5e:	460a      	mov	r2, r1
 8008f60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	4413      	add	r3, r2
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d9e9      	bls.n	8008f4e <prvInitialiseNewTask+0x6a>
 8008f7a:	e000      	b.n	8008f7e <prvInitialiseNewTask+0x9a>
			{
				break;
 8008f7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f86:	e003      	b.n	8008f90 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	2b37      	cmp	r3, #55	@ 0x37
 8008f94:	d901      	bls.n	8008f9a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f96:	2337      	movs	r3, #55	@ 0x37
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	2200      	movs	r2, #0
 8008faa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff f93d 	bl	8008230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	3318      	adds	r3, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff f938 	bl	8008230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	3354      	adds	r3, #84	@ 0x54
 8008fea:	224c      	movs	r2, #76	@ 0x4c
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fdbc 	bl	800ab6c <memset>
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800902c <prvInitialiseNewTask+0x148>)
 8008ff8:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8009030 <prvInitialiseNewTask+0x14c>)
 8008ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	4a0c      	ldr	r2, [pc, #48]	@ (8009034 <prvInitialiseNewTask+0x150>)
 8009004:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	69b8      	ldr	r0, [r7, #24]
 800900c:	f001 f984 	bl	800a318 <pxPortInitialiseStack>
 8009010:	4602      	mov	r2, r0
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800901c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009022:	bf00      	nop
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20004ee0 	.word	0x20004ee0
 8009030:	20004f48 	.word	0x20004f48
 8009034:	20004fb0 	.word	0x20004fb0

08009038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009040:	f001 fa7c 	bl	800a53c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009044:	4b2d      	ldr	r3, [pc, #180]	@ (80090fc <prvAddNewTaskToReadyList+0xc4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	4a2c      	ldr	r2, [pc, #176]	@ (80090fc <prvAddNewTaskToReadyList+0xc4>)
 800904c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800904e:	4b2c      	ldr	r3, [pc, #176]	@ (8009100 <prvAddNewTaskToReadyList+0xc8>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009056:	4a2a      	ldr	r2, [pc, #168]	@ (8009100 <prvAddNewTaskToReadyList+0xc8>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <prvAddNewTaskToReadyList+0xc4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d110      	bne.n	8009086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009064:	f000 fc44 	bl	80098f0 <prvInitialiseTaskLists>
 8009068:	e00d      	b.n	8009086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800906a:	4b26      	ldr	r3, [pc, #152]	@ (8009104 <prvAddNewTaskToReadyList+0xcc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009072:	4b23      	ldr	r3, [pc, #140]	@ (8009100 <prvAddNewTaskToReadyList+0xc8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907c:	429a      	cmp	r2, r3
 800907e:	d802      	bhi.n	8009086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009080:	4a1f      	ldr	r2, [pc, #124]	@ (8009100 <prvAddNewTaskToReadyList+0xc8>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009086:	4b20      	ldr	r3, [pc, #128]	@ (8009108 <prvAddNewTaskToReadyList+0xd0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a1e      	ldr	r2, [pc, #120]	@ (8009108 <prvAddNewTaskToReadyList+0xd0>)
 800908e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009090:	4b1d      	ldr	r3, [pc, #116]	@ (8009108 <prvAddNewTaskToReadyList+0xd0>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909c:	4b1b      	ldr	r3, [pc, #108]	@ (800910c <prvAddNewTaskToReadyList+0xd4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d903      	bls.n	80090ac <prvAddNewTaskToReadyList+0x74>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	4a18      	ldr	r2, [pc, #96]	@ (800910c <prvAddNewTaskToReadyList+0xd4>)
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4a15      	ldr	r2, [pc, #84]	@ (8009110 <prvAddNewTaskToReadyList+0xd8>)
 80090ba:	441a      	add	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3304      	adds	r3, #4
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7ff f8c1 	bl	800824a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090c8:	f001 fa6e 	bl	800a5a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009104 <prvAddNewTaskToReadyList+0xcc>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00e      	beq.n	80090f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <prvAddNewTaskToReadyList+0xc8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	429a      	cmp	r2, r3
 80090e0:	d207      	bcs.n	80090f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009114 <prvAddNewTaskToReadyList+0xdc>)
 80090e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20001168 	.word	0x20001168
 8009100:	20000c94 	.word	0x20000c94
 8009104:	20001174 	.word	0x20001174
 8009108:	20001184 	.word	0x20001184
 800910c:	20001170 	.word	0x20001170
 8009110:	20000c98 	.word	0x20000c98
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01a      	beq.n	8009160 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <vTaskDelay+0x68>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00d      	beq.n	800914e <vTaskDelay+0x36>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	b672      	cpsid	i
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	b662      	cpsie	i
 8009146:	60bb      	str	r3, [r7, #8]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800914e:	f000 f88f 	bl	8009270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fd23 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800915a:	f000 f897 	bl	800928c <xTaskResumeAll>
 800915e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009166:	4b07      	ldr	r3, [pc, #28]	@ (8009184 <vTaskDelay+0x6c>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20001190 	.word	0x20001190
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	@ 0x28
 800918c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009196:	463a      	mov	r2, r7
 8009198:	1d39      	adds	r1, r7, #4
 800919a:	f107 0308 	add.w	r3, r7, #8
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fff2 	bl	8008188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	9202      	str	r2, [sp, #8]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	2300      	movs	r3, #0
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	460a      	mov	r2, r1
 80091b6:	4926      	ldr	r1, [pc, #152]	@ (8009250 <vTaskStartScheduler+0xc8>)
 80091b8:	4826      	ldr	r0, [pc, #152]	@ (8009254 <vTaskStartScheduler+0xcc>)
 80091ba:	f7ff fde7 	bl	8008d8c <xTaskCreateStatic>
 80091be:	4603      	mov	r3, r0
 80091c0:	4a25      	ldr	r2, [pc, #148]	@ (8009258 <vTaskStartScheduler+0xd0>)
 80091c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091c4:	4b24      	ldr	r3, [pc, #144]	@ (8009258 <vTaskStartScheduler+0xd0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091cc:	2301      	movs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e001      	b.n	80091d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d102      	bne.n	80091e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091dc:	f000 fd34 	bl	8009c48 <xTimerCreateTimerTask>
 80091e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11d      	bne.n	8009224 <vTaskStartScheduler+0x9c>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	b672      	cpsid	i
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	b662      	cpsie	i
 80091fc:	613b      	str	r3, [r7, #16]
}
 80091fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009200:	4b16      	ldr	r3, [pc, #88]	@ (800925c <vTaskStartScheduler+0xd4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3354      	adds	r3, #84	@ 0x54
 8009206:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <vTaskStartScheduler+0xd8>)
 8009208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800920a:	4b16      	ldr	r3, [pc, #88]	@ (8009264 <vTaskStartScheduler+0xdc>)
 800920c:	f04f 32ff 	mov.w	r2, #4294967295
 8009210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009212:	4b15      	ldr	r3, [pc, #84]	@ (8009268 <vTaskStartScheduler+0xe0>)
 8009214:	2201      	movs	r2, #1
 8009216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009218:	4b14      	ldr	r3, [pc, #80]	@ (800926c <vTaskStartScheduler+0xe4>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800921e:	f001 f90f 	bl	800a440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009222:	e011      	b.n	8009248 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922a:	d10d      	bne.n	8009248 <vTaskStartScheduler+0xc0>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009230:	b672      	cpsid	i
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	b662      	cpsie	i
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	e7fd      	b.n	8009244 <vTaskStartScheduler+0xbc>
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	0800ad7c 	.word	0x0800ad7c
 8009254:	080098c1 	.word	0x080098c1
 8009258:	2000118c 	.word	0x2000118c
 800925c:	20000c94 	.word	0x20000c94
 8009260:	20000018 	.word	0x20000018
 8009264:	20001188 	.word	0x20001188
 8009268:	20001174 	.word	0x20001174
 800926c:	2000116c 	.word	0x2000116c

08009270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <vTaskSuspendAll+0x18>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	4a03      	ldr	r2, [pc, #12]	@ (8009288 <vTaskSuspendAll+0x18>)
 800927c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800927e:	bf00      	nop
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20001190 	.word	0x20001190

0800928c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009296:	2300      	movs	r3, #0
 8009298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800929a:	4b43      	ldr	r3, [pc, #268]	@ (80093a8 <xTaskResumeAll+0x11c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <xTaskResumeAll+0x32>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a6:	b672      	cpsid	i
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	b662      	cpsie	i
 80092b6:	603b      	str	r3, [r7, #0]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092be:	f001 f93d 	bl	800a53c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092c2:	4b39      	ldr	r3, [pc, #228]	@ (80093a8 <xTaskResumeAll+0x11c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	4a37      	ldr	r2, [pc, #220]	@ (80093a8 <xTaskResumeAll+0x11c>)
 80092ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b36      	ldr	r3, [pc, #216]	@ (80093a8 <xTaskResumeAll+0x11c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d162      	bne.n	800939a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092d4:	4b35      	ldr	r3, [pc, #212]	@ (80093ac <xTaskResumeAll+0x120>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d05e      	beq.n	800939a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092dc:	e02f      	b.n	800933e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092de:	4b34      	ldr	r3, [pc, #208]	@ (80093b0 <xTaskResumeAll+0x124>)
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3318      	adds	r3, #24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff f80a 	bl	8008304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff f805 	bl	8008304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fe:	4b2d      	ldr	r3, [pc, #180]	@ (80093b4 <xTaskResumeAll+0x128>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d903      	bls.n	800930e <xTaskResumeAll+0x82>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930a:	4a2a      	ldr	r2, [pc, #168]	@ (80093b4 <xTaskResumeAll+0x128>)
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4a27      	ldr	r2, [pc, #156]	@ (80093b8 <xTaskResumeAll+0x12c>)
 800931c:	441a      	add	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fe ff90 	bl	800824a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932e:	4b23      	ldr	r3, [pc, #140]	@ (80093bc <xTaskResumeAll+0x130>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d302      	bcc.n	800933e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009338:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <xTaskResumeAll+0x134>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800933e:	4b1c      	ldr	r3, [pc, #112]	@ (80093b0 <xTaskResumeAll+0x124>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1cb      	bne.n	80092de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800934c:	f000 fb76 	bl	8009a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009350:	4b1c      	ldr	r3, [pc, #112]	@ (80093c4 <xTaskResumeAll+0x138>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800935c:	f000 f846 	bl	80093ec <xTaskIncrementTick>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009366:	4b16      	ldr	r3, [pc, #88]	@ (80093c0 <xTaskResumeAll+0x134>)
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3b01      	subs	r3, #1
 8009370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f1      	bne.n	800935c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009378:	4b12      	ldr	r3, [pc, #72]	@ (80093c4 <xTaskResumeAll+0x138>)
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800937e:	4b10      	ldr	r3, [pc, #64]	@ (80093c0 <xTaskResumeAll+0x134>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009386:	2301      	movs	r3, #1
 8009388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800938a:	4b0f      	ldr	r3, [pc, #60]	@ (80093c8 <xTaskResumeAll+0x13c>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800939a:	f001 f905 	bl	800a5a8 <vPortExitCritical>

	return xAlreadyYielded;
 800939e:	68bb      	ldr	r3, [r7, #8]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20001190 	.word	0x20001190
 80093ac:	20001168 	.word	0x20001168
 80093b0:	20001128 	.word	0x20001128
 80093b4:	20001170 	.word	0x20001170
 80093b8:	20000c98 	.word	0x20000c98
 80093bc:	20000c94 	.word	0x20000c94
 80093c0:	2000117c 	.word	0x2000117c
 80093c4:	20001178 	.word	0x20001178
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093d2:	4b05      	ldr	r3, [pc, #20]	@ (80093e8 <xTaskGetTickCount+0x1c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093d8:	687b      	ldr	r3, [r7, #4]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	2000116c 	.word	0x2000116c

080093ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093f6:	4b50      	ldr	r3, [pc, #320]	@ (8009538 <xTaskIncrementTick+0x14c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 808c 	bne.w	8009518 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009400:	4b4e      	ldr	r3, [pc, #312]	@ (800953c <xTaskIncrementTick+0x150>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009408:	4a4c      	ldr	r2, [pc, #304]	@ (800953c <xTaskIncrementTick+0x150>)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d123      	bne.n	800945c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009414:	4b4a      	ldr	r3, [pc, #296]	@ (8009540 <xTaskIncrementTick+0x154>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <xTaskIncrementTick+0x4e>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	603b      	str	r3, [r7, #0]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xTaskIncrementTick+0x4a>
 800943a:	4b41      	ldr	r3, [pc, #260]	@ (8009540 <xTaskIncrementTick+0x154>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	4b40      	ldr	r3, [pc, #256]	@ (8009544 <xTaskIncrementTick+0x158>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a3e      	ldr	r2, [pc, #248]	@ (8009540 <xTaskIncrementTick+0x154>)
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	4a3e      	ldr	r2, [pc, #248]	@ (8009544 <xTaskIncrementTick+0x158>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	4b3e      	ldr	r3, [pc, #248]	@ (8009548 <xTaskIncrementTick+0x15c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a3c      	ldr	r2, [pc, #240]	@ (8009548 <xTaskIncrementTick+0x15c>)
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	f000 faf0 	bl	8009a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800945c:	4b3b      	ldr	r3, [pc, #236]	@ (800954c <xTaskIncrementTick+0x160>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	429a      	cmp	r2, r3
 8009464:	d349      	bcc.n	80094fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009466:	4b36      	ldr	r3, [pc, #216]	@ (8009540 <xTaskIncrementTick+0x154>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009470:	4b36      	ldr	r3, [pc, #216]	@ (800954c <xTaskIncrementTick+0x160>)
 8009472:	f04f 32ff 	mov.w	r2, #4294967295
 8009476:	601a      	str	r2, [r3, #0]
					break;
 8009478:	e03f      	b.n	80094fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947a:	4b31      	ldr	r3, [pc, #196]	@ (8009540 <xTaskIncrementTick+0x154>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	429a      	cmp	r2, r3
 8009490:	d203      	bcs.n	800949a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009492:	4a2e      	ldr	r2, [pc, #184]	@ (800954c <xTaskIncrementTick+0x160>)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009498:	e02f      	b.n	80094fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3304      	adds	r3, #4
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe ff30 	bl	8008304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	3318      	adds	r3, #24
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe ff27 	bl	8008304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4b25      	ldr	r3, [pc, #148]	@ (8009550 <xTaskIncrementTick+0x164>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <xTaskIncrementTick+0xde>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	4a22      	ldr	r2, [pc, #136]	@ (8009550 <xTaskIncrementTick+0x164>)
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009554 <xTaskIncrementTick+0x168>)
 80094d8:	441a      	add	r2, r3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fe feb2 	bl	800824a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009558 <xTaskIncrementTick+0x16c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d3b8      	bcc.n	8009466 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f8:	e7b5      	b.n	8009466 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094fa:	4b17      	ldr	r3, [pc, #92]	@ (8009558 <xTaskIncrementTick+0x16c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009500:	4914      	ldr	r1, [pc, #80]	@ (8009554 <xTaskIncrementTick+0x168>)
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d907      	bls.n	8009522 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009512:	2301      	movs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e004      	b.n	8009522 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009518:	4b10      	ldr	r3, [pc, #64]	@ (800955c <xTaskIncrementTick+0x170>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	4a0f      	ldr	r2, [pc, #60]	@ (800955c <xTaskIncrementTick+0x170>)
 8009520:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009522:	4b0f      	ldr	r3, [pc, #60]	@ (8009560 <xTaskIncrementTick+0x174>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800952a:	2301      	movs	r3, #1
 800952c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001190 	.word	0x20001190
 800953c:	2000116c 	.word	0x2000116c
 8009540:	20001120 	.word	0x20001120
 8009544:	20001124 	.word	0x20001124
 8009548:	20001180 	.word	0x20001180
 800954c:	20001188 	.word	0x20001188
 8009550:	20001170 	.word	0x20001170
 8009554:	20000c98 	.word	0x20000c98
 8009558:	20000c94 	.word	0x20000c94
 800955c:	20001178 	.word	0x20001178
 8009560:	2000117c 	.word	0x2000117c

08009564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800956a:	4b2c      	ldr	r3, [pc, #176]	@ (800961c <vTaskSwitchContext+0xb8>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009572:	4b2b      	ldr	r3, [pc, #172]	@ (8009620 <vTaskSwitchContext+0xbc>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009578:	e049      	b.n	800960e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800957a:	4b29      	ldr	r3, [pc, #164]	@ (8009620 <vTaskSwitchContext+0xbc>)
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009580:	4b28      	ldr	r3, [pc, #160]	@ (8009624 <vTaskSwitchContext+0xc0>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	e013      	b.n	80095b0 <vTaskSwitchContext+0x4c>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10d      	bne.n	80095aa <vTaskSwitchContext+0x46>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	607b      	str	r3, [r7, #4]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <vTaskSwitchContext+0x42>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	491d      	ldr	r1, [pc, #116]	@ (8009628 <vTaskSwitchContext+0xc4>)
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0e1      	beq.n	8009588 <vTaskSwitchContext+0x24>
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4a16      	ldr	r2, [pc, #88]	@ (8009628 <vTaskSwitchContext+0xc4>)
 80095d0:	4413      	add	r3, r2
 80095d2:	60bb      	str	r3, [r7, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	3308      	adds	r3, #8
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d104      	bne.n	80095f4 <vTaskSwitchContext+0x90>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	605a      	str	r2, [r3, #4]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	4a0c      	ldr	r2, [pc, #48]	@ (800962c <vTaskSwitchContext+0xc8>)
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4a09      	ldr	r2, [pc, #36]	@ (8009624 <vTaskSwitchContext+0xc0>)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009604:	4b09      	ldr	r3, [pc, #36]	@ (800962c <vTaskSwitchContext+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3354      	adds	r3, #84	@ 0x54
 800960a:	4a09      	ldr	r2, [pc, #36]	@ (8009630 <vTaskSwitchContext+0xcc>)
 800960c:	6013      	str	r3, [r2, #0]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20001190 	.word	0x20001190
 8009620:	2000117c 	.word	0x2000117c
 8009624:	20001170 	.word	0x20001170
 8009628:	20000c98 	.word	0x20000c98
 800962c:	20000c94 	.word	0x20000c94
 8009630:	20000018 	.word	0x20000018

08009634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10d      	bne.n	8009660 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009648:	b672      	cpsid	i
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	b662      	cpsie	i
 8009658:	60fb      	str	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	e7fd      	b.n	800965c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009660:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <vTaskPlaceOnEventList+0x4c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3318      	adds	r3, #24
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fe fe12 	bl	8008292 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800966e:	2101      	movs	r1, #1
 8009670:	6838      	ldr	r0, [r7, #0]
 8009672:	f000 fa95 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000c94 	.word	0x20000c94

08009684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10d      	bne.n	80096b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	b672      	cpsid	i
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	b662      	cpsie	i
 80096aa:	617b      	str	r3, [r7, #20]
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	e7fd      	b.n	80096ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096b2:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <vTaskPlaceOnEventListRestricted+0x58>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3318      	adds	r3, #24
 80096b8:	4619      	mov	r1, r3
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7fe fdc5 	bl	800824a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	68b8      	ldr	r0, [r7, #8]
 80096d0:	f000 fa66 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
	}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000c94 	.word	0x20000c94

080096e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	b672      	cpsid	i
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	b662      	cpsie	i
 800970a:	60fb      	str	r3, [r7, #12]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	3318      	adds	r3, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fdf4 	bl	8008304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800971c:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <xTaskRemoveFromEventList+0xb4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d11d      	bne.n	8009760 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fdeb 	bl	8008304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <xTaskRemoveFromEventList+0xb8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d903      	bls.n	8009742 <xTaskRemoveFromEventList+0x62>
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <xTaskRemoveFromEventList+0xb8>)
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a13      	ldr	r2, [pc, #76]	@ (800979c <xTaskRemoveFromEventList+0xbc>)
 8009750:	441a      	add	r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7fe fd76 	bl	800824a <vListInsertEnd>
 800975e:	e005      	b.n	800976c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3318      	adds	r3, #24
 8009764:	4619      	mov	r1, r3
 8009766:	480e      	ldr	r0, [pc, #56]	@ (80097a0 <xTaskRemoveFromEventList+0xc0>)
 8009768:	f7fe fd6f 	bl	800824a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009770:	4b0c      	ldr	r3, [pc, #48]	@ (80097a4 <xTaskRemoveFromEventList+0xc4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	429a      	cmp	r2, r3
 8009778:	d905      	bls.n	8009786 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800977e:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <xTaskRemoveFromEventList+0xc8>)
 8009780:	2201      	movs	r2, #1
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e001      	b.n	800978a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800978a:	697b      	ldr	r3, [r7, #20]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20001190 	.word	0x20001190
 8009798:	20001170 	.word	0x20001170
 800979c:	20000c98 	.word	0x20000c98
 80097a0:	20001128 	.word	0x20001128
 80097a4:	20000c94 	.word	0x20000c94
 80097a8:	2000117c 	.word	0x2000117c

080097ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097b4:	4b06      	ldr	r3, [pc, #24]	@ (80097d0 <vTaskInternalSetTimeOutState+0x24>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097bc:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <vTaskInternalSetTimeOutState+0x28>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20001180 	.word	0x20001180
 80097d4:	2000116c 	.word	0x2000116c

080097d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10d      	bne.n	8009804 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	b672      	cpsid	i
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	b662      	cpsie	i
 80097fc:	613b      	str	r3, [r7, #16]
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	e7fd      	b.n	8009800 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10d      	bne.n	8009826 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	b672      	cpsid	i
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	b662      	cpsie	i
 800981e:	60fb      	str	r3, [r7, #12]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009826:	f000 fe89 	bl	800a53c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800982a:	4b1d      	ldr	r3, [pc, #116]	@ (80098a0 <xTaskCheckForTimeOut+0xc8>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d102      	bne.n	800984a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	e023      	b.n	8009892 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b15      	ldr	r3, [pc, #84]	@ (80098a4 <xTaskCheckForTimeOut+0xcc>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d007      	beq.n	8009866 <xTaskCheckForTimeOut+0x8e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	429a      	cmp	r2, r3
 800985e:	d302      	bcc.n	8009866 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	e015      	b.n	8009892 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	429a      	cmp	r2, r3
 800986e:	d20b      	bcs.n	8009888 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff ff95 	bl	80097ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009882:	2300      	movs	r3, #0
 8009884:	61fb      	str	r3, [r7, #28]
 8009886:	e004      	b.n	8009892 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800988e:	2301      	movs	r3, #1
 8009890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009892:	f000 fe89 	bl	800a5a8 <vPortExitCritical>

	return xReturn;
 8009896:	69fb      	ldr	r3, [r7, #28]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	2000116c 	.word	0x2000116c
 80098a4:	20001180 	.word	0x20001180

080098a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098ac:	4b03      	ldr	r3, [pc, #12]	@ (80098bc <vTaskMissedYield+0x14>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
}
 80098b2:	bf00      	nop
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	2000117c 	.word	0x2000117c

080098c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098c8:	f000 f852 	bl	8009970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <prvIdleTask+0x28>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d9f9      	bls.n	80098c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098d4:	4b05      	ldr	r3, [pc, #20]	@ (80098ec <prvIdleTask+0x2c>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098e4:	e7f0      	b.n	80098c8 <prvIdleTask+0x8>
 80098e6:	bf00      	nop
 80098e8:	20000c98 	.word	0x20000c98
 80098ec:	e000ed04 	.word	0xe000ed04

080098f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f6:	2300      	movs	r3, #0
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	e00c      	b.n	8009916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4a12      	ldr	r2, [pc, #72]	@ (8009950 <prvInitialiseTaskLists+0x60>)
 8009908:	4413      	add	r3, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fc70 	bl	80081f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3301      	adds	r3, #1
 8009914:	607b      	str	r3, [r7, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b37      	cmp	r3, #55	@ 0x37
 800991a:	d9ef      	bls.n	80098fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800991c:	480d      	ldr	r0, [pc, #52]	@ (8009954 <prvInitialiseTaskLists+0x64>)
 800991e:	f7fe fc67 	bl	80081f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009922:	480d      	ldr	r0, [pc, #52]	@ (8009958 <prvInitialiseTaskLists+0x68>)
 8009924:	f7fe fc64 	bl	80081f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009928:	480c      	ldr	r0, [pc, #48]	@ (800995c <prvInitialiseTaskLists+0x6c>)
 800992a:	f7fe fc61 	bl	80081f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800992e:	480c      	ldr	r0, [pc, #48]	@ (8009960 <prvInitialiseTaskLists+0x70>)
 8009930:	f7fe fc5e 	bl	80081f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009934:	480b      	ldr	r0, [pc, #44]	@ (8009964 <prvInitialiseTaskLists+0x74>)
 8009936:	f7fe fc5b 	bl	80081f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800993a:	4b0b      	ldr	r3, [pc, #44]	@ (8009968 <prvInitialiseTaskLists+0x78>)
 800993c:	4a05      	ldr	r2, [pc, #20]	@ (8009954 <prvInitialiseTaskLists+0x64>)
 800993e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009940:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <prvInitialiseTaskLists+0x7c>)
 8009942:	4a05      	ldr	r2, [pc, #20]	@ (8009958 <prvInitialiseTaskLists+0x68>)
 8009944:	601a      	str	r2, [r3, #0]
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20000c98 	.word	0x20000c98
 8009954:	200010f8 	.word	0x200010f8
 8009958:	2000110c 	.word	0x2000110c
 800995c:	20001128 	.word	0x20001128
 8009960:	2000113c 	.word	0x2000113c
 8009964:	20001154 	.word	0x20001154
 8009968:	20001120 	.word	0x20001120
 800996c:	20001124 	.word	0x20001124

08009970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009976:	e019      	b.n	80099ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009978:	f000 fde0 	bl	800a53c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800997c:	4b10      	ldr	r3, [pc, #64]	@ (80099c0 <prvCheckTasksWaitingTermination+0x50>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fcbb 	bl	8008304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800998e:	4b0d      	ldr	r3, [pc, #52]	@ (80099c4 <prvCheckTasksWaitingTermination+0x54>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3b01      	subs	r3, #1
 8009994:	4a0b      	ldr	r2, [pc, #44]	@ (80099c4 <prvCheckTasksWaitingTermination+0x54>)
 8009996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009998:	4b0b      	ldr	r3, [pc, #44]	@ (80099c8 <prvCheckTasksWaitingTermination+0x58>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3b01      	subs	r3, #1
 800999e:	4a0a      	ldr	r2, [pc, #40]	@ (80099c8 <prvCheckTasksWaitingTermination+0x58>)
 80099a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099a2:	f000 fe01 	bl	800a5a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f810 	bl	80099cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ac:	4b06      	ldr	r3, [pc, #24]	@ (80099c8 <prvCheckTasksWaitingTermination+0x58>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e1      	bne.n	8009978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	2000113c 	.word	0x2000113c
 80099c4:	20001168 	.word	0x20001168
 80099c8:	20001150 	.word	0x20001150

080099cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3354      	adds	r3, #84	@ 0x54
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 f8cf 	bl	800ab7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d108      	bne.n	80099fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 ffa1 	bl	800a934 <vPortFree>
				vPortFree( pxTCB );
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 ff9e 	bl	800a934 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099f8:	e01b      	b.n	8009a32 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d103      	bne.n	8009a0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 ff95 	bl	800a934 <vPortFree>
	}
 8009a0a:	e012      	b.n	8009a32 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d00d      	beq.n	8009a32 <prvDeleteTCB+0x66>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	b672      	cpsid	i
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	b662      	cpsie	i
 8009a2a:	60fb      	str	r3, [r7, #12]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <prvDeleteTCB+0x62>
	}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a42:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <prvResetNextTaskUnblockTime+0x38>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d104      	bne.n	8009a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <prvResetNextTaskUnblockTime+0x3c>)
 8009a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a54:	e008      	b.n	8009a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b07      	ldr	r3, [pc, #28]	@ (8009a74 <prvResetNextTaskUnblockTime+0x38>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <prvResetNextTaskUnblockTime+0x3c>)
 8009a66:	6013      	str	r3, [r2, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	20001120 	.word	0x20001120
 8009a78:	20001188 	.word	0x20001188

08009a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a82:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab0 <xTaskGetSchedulerState+0x34>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	e008      	b.n	8009aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a90:	4b08      	ldr	r3, [pc, #32]	@ (8009ab4 <xTaskGetSchedulerState+0x38>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e001      	b.n	8009aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aa2:	687b      	ldr	r3, [r7, #4]
	}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20001174 	.word	0x20001174
 8009ab4:	20001190 	.word	0x20001190

08009ab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d05c      	beq.n	8009b88 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ace:	4b31      	ldr	r3, [pc, #196]	@ (8009b94 <xTaskPriorityDisinherit+0xdc>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d00d      	beq.n	8009af4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	b672      	cpsid	i
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	b662      	cpsie	i
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	e7fd      	b.n	8009af0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10d      	bne.n	8009b18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	b672      	cpsid	i
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	b662      	cpsie	i
 8009b10:	60bb      	str	r3, [r7, #8]
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d02c      	beq.n	8009b88 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d128      	bne.n	8009b88 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fbe2 	bl	8008304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b58:	4b0f      	ldr	r3, [pc, #60]	@ (8009b98 <xTaskPriorityDisinherit+0xe0>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d903      	bls.n	8009b68 <xTaskPriorityDisinherit+0xb0>
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b64:	4a0c      	ldr	r2, [pc, #48]	@ (8009b98 <xTaskPriorityDisinherit+0xe0>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a09      	ldr	r2, [pc, #36]	@ (8009b9c <xTaskPriorityDisinherit+0xe4>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fe fb63 	bl	800824a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b88:	697b      	ldr	r3, [r7, #20]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000c94 	.word	0x20000c94
 8009b98:	20001170 	.word	0x20001170
 8009b9c:	20000c98 	.word	0x20000c98

08009ba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b21      	ldr	r3, [pc, #132]	@ (8009c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb0:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fba4 	bl	8008304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d10a      	bne.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bca:	4b1a      	ldr	r3, [pc, #104]	@ (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4819      	ldr	r0, [pc, #100]	@ (8009c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bd4:	f7fe fb39 	bl	800824a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd8:	e026      	b.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4413      	add	r3, r2
 8009be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009be2:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d209      	bcs.n	8009c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bf2:	4b12      	ldr	r3, [pc, #72]	@ (8009c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fe fb47 	bl	8008292 <vListInsert>
}
 8009c04:	e010      	b.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c06:	4b0e      	ldr	r3, [pc, #56]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f7fe fb3d 	bl	8008292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c18:	4b0a      	ldr	r3, [pc, #40]	@ (8009c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d202      	bcs.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c22:	4a08      	ldr	r2, [pc, #32]	@ (8009c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6013      	str	r3, [r2, #0]
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	2000116c 	.word	0x2000116c
 8009c34:	20000c94 	.word	0x20000c94
 8009c38:	20001154 	.word	0x20001154
 8009c3c:	20001124 	.word	0x20001124
 8009c40:	20001120 	.word	0x20001120
 8009c44:	20001188 	.word	0x20001188

08009c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c52:	f000 fb21 	bl	800a298 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c56:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd0 <xTimerCreateTimerTask+0x88>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d021      	beq.n	8009ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c66:	1d3a      	adds	r2, r7, #4
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	f107 030c 	add.w	r3, r7, #12
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe faa3 	bl	80081bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	9202      	str	r2, [sp, #8]
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	2302      	movs	r3, #2
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2300      	movs	r3, #0
 8009c86:	460a      	mov	r2, r1
 8009c88:	4912      	ldr	r1, [pc, #72]	@ (8009cd4 <xTimerCreateTimerTask+0x8c>)
 8009c8a:	4813      	ldr	r0, [pc, #76]	@ (8009cd8 <xTimerCreateTimerTask+0x90>)
 8009c8c:	f7ff f87e 	bl	8008d8c <xTaskCreateStatic>
 8009c90:	4603      	mov	r3, r0
 8009c92:	4a12      	ldr	r2, [pc, #72]	@ (8009cdc <xTimerCreateTimerTask+0x94>)
 8009c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c96:	4b11      	ldr	r3, [pc, #68]	@ (8009cdc <xTimerCreateTimerTask+0x94>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10d      	bne.n	8009cc4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	b672      	cpsid	i
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	b662      	cpsie	i
 8009cbc:	613b      	str	r3, [r7, #16]
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	e7fd      	b.n	8009cc0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009cc4:	697b      	ldr	r3, [r7, #20]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200011c4 	.word	0x200011c4
 8009cd4:	0800ad84 	.word	0x0800ad84
 8009cd8:	08009e21 	.word	0x08009e21
 8009cdc:	200011c8 	.word	0x200011c8

08009ce0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08a      	sub	sp, #40	@ 0x28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10d      	bne.n	8009d14 <xTimerGenericCommand+0x34>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfc:	b672      	cpsid	i
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	b662      	cpsie	i
 8009d0c:	623b      	str	r3, [r7, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d14:	4b19      	ldr	r3, [pc, #100]	@ (8009d7c <xTimerGenericCommand+0x9c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d02a      	beq.n	8009d72 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	dc18      	bgt.n	8009d60 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d2e:	f7ff fea5 	bl	8009a7c <xTaskGetSchedulerState>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d109      	bne.n	8009d4c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d38:	4b10      	ldr	r3, [pc, #64]	@ (8009d7c <xTimerGenericCommand+0x9c>)
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	f107 0110 	add.w	r1, r7, #16
 8009d40:	2300      	movs	r3, #0
 8009d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d44:	f7fe fc1e 	bl	8008584 <xQueueGenericSend>
 8009d48:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d4a:	e012      	b.n	8009d72 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d7c <xTimerGenericCommand+0x9c>)
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	f107 0110 	add.w	r1, r7, #16
 8009d54:	2300      	movs	r3, #0
 8009d56:	2200      	movs	r2, #0
 8009d58:	f7fe fc14 	bl	8008584 <xQueueGenericSend>
 8009d5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d5e:	e008      	b.n	8009d72 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d60:	4b06      	ldr	r3, [pc, #24]	@ (8009d7c <xTimerGenericCommand+0x9c>)
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	f107 0110 	add.w	r1, r7, #16
 8009d68:	2300      	movs	r3, #0
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	f7fe fd14 	bl	8008798 <xQueueGenericSendFromISR>
 8009d70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3728      	adds	r7, #40	@ 0x28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200011c4 	.word	0x200011c4

08009d80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b24      	ldr	r3, [pc, #144]	@ (8009e1c <prvProcessExpiredTimer+0x9c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fab3 	bl	8008304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d025      	beq.n	8009df8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	18d1      	adds	r1, r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	f000 f8d7 	bl	8009f6c <prvInsertTimerInActiveList>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d022      	beq.n	8009e0a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	6978      	ldr	r0, [r7, #20]
 8009dd0:	f7ff ff86 	bl	8009ce0 <xTimerGenericCommand>
 8009dd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d116      	bne.n	8009e0a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	b672      	cpsid	i
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	b662      	cpsie	i
 8009df0:	60fb      	str	r3, [r7, #12]
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dfe:	f023 0301 	bic.w	r3, r3, #1
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	6978      	ldr	r0, [r7, #20]
 8009e10:	4798      	blx	r3
}
 8009e12:	bf00      	nop
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200011bc 	.word	0x200011bc

08009e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f859 	bl	8009ee4 <prvGetNextExpireTime>
 8009e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4619      	mov	r1, r3
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f805 	bl	8009e48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e3e:	f000 f8d7 	bl	8009ff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e42:	bf00      	nop
 8009e44:	e7f0      	b.n	8009e28 <prvTimerTask+0x8>
	...

08009e48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e52:	f7ff fa0d 	bl	8009270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f866 	bl	8009f2c <prvSampleTimeNow>
 8009e60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d130      	bne.n	8009eca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <prvProcessTimerOrBlockTask+0x3c>
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d806      	bhi.n	8009e84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e76:	f7ff fa09 	bl	800928c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e7a:	68f9      	ldr	r1, [r7, #12]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff ff7f 	bl	8009d80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e82:	e024      	b.n	8009ece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d008      	beq.n	8009e9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <prvProcessTimerOrBlockTask+0x90>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <prvProcessTimerOrBlockTask+0x50>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <prvProcessTimerOrBlockTask+0x52>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8009edc <prvProcessTimerOrBlockTask+0x94>)
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	f7fe ff3b 	bl	8008d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009eae:	f7ff f9ed 	bl	800928c <xTaskResumeAll>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009eb8:	4b09      	ldr	r3, [pc, #36]	@ (8009ee0 <prvProcessTimerOrBlockTask+0x98>)
 8009eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	f3bf 8f6f 	isb	sy
}
 8009ec8:	e001      	b.n	8009ece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eca:	f7ff f9df 	bl	800928c <xTaskResumeAll>
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200011c0 	.word	0x200011c0
 8009edc:	200011c4 	.word	0x200011c4
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009eec:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <prvGetNextExpireTime+0x44>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <prvGetNextExpireTime+0x16>
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	e000      	b.n	8009efc <prvGetNextExpireTime+0x18>
 8009efa:	2200      	movs	r2, #0
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d105      	bne.n	8009f14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f08:	4b07      	ldr	r3, [pc, #28]	@ (8009f28 <prvGetNextExpireTime+0x44>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e001      	b.n	8009f18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f18:	68fb      	ldr	r3, [r7, #12]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	200011bc 	.word	0x200011bc

08009f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f34:	f7ff fa4a 	bl	80093cc <xTaskGetTickCount>
 8009f38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f68 <prvSampleTimeNow+0x3c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d205      	bcs.n	8009f50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f44:	f000 f940 	bl	800a1c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e002      	b.n	8009f56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f56:	4a04      	ldr	r2, [pc, #16]	@ (8009f68 <prvSampleTimeNow+0x3c>)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	200011cc 	.word	0x200011cc

08009f6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d812      	bhi.n	8009fb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d302      	bcc.n	8009fa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e01b      	b.n	8009fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fa6:	4b10      	ldr	r3, [pc, #64]	@ (8009fe8 <prvInsertTimerInActiveList+0x7c>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f7fe f96e 	bl	8008292 <vListInsert>
 8009fb6:	e012      	b.n	8009fde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d206      	bcs.n	8009fce <prvInsertTimerInActiveList+0x62>
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d302      	bcc.n	8009fce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	e007      	b.n	8009fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fce:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <prvInsertTimerInActiveList+0x80>)
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4610      	mov	r0, r2
 8009fda:	f7fe f95a 	bl	8008292 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fde:	697b      	ldr	r3, [r7, #20]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	200011c0 	.word	0x200011c0
 8009fec:	200011bc 	.word	0x200011bc

08009ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	@ 0x38
 8009ff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ff6:	e0d4      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	da1b      	bge.n	800a036 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ffe:	1d3b      	adds	r3, r7, #4
 800a000:	3304      	adds	r3, #4
 800a002:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10d      	bne.n	800a026 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	b672      	cpsid	i
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	b662      	cpsie	i
 800a01e:	61fb      	str	r3, [r7, #28]
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	e7fd      	b.n	800a022 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a02c:	6850      	ldr	r0, [r2, #4]
 800a02e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a030:	6892      	ldr	r2, [r2, #8]
 800a032:	4611      	mov	r1, r2
 800a034:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f2c0 80b2 	blt.w	800a1a2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04c:	3304      	adds	r3, #4
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe f958 	bl	8008304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a054:	463b      	mov	r3, r7
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff ff68 	bl	8009f2c <prvSampleTimeNow>
 800a05c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b09      	cmp	r3, #9
 800a062:	f200 809b 	bhi.w	800a19c <prvProcessReceivedCommands+0x1ac>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <prvProcessReceivedCommands+0x7c>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a095 	.word	0x0800a095
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a095 	.word	0x0800a095
 800a078:	0800a10f 	.word	0x0800a10f
 800a07c:	0800a123 	.word	0x0800a123
 800a080:	0800a173 	.word	0x0800a173
 800a084:	0800a095 	.word	0x0800a095
 800a088:	0800a095 	.word	0x0800a095
 800a08c:	0800a10f 	.word	0x0800a10f
 800a090:	0800a123 	.word	0x0800a123
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a09a:	f043 0301 	orr.w	r3, r3, #1
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	18d1      	adds	r1, r2, r3
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0b4:	f7ff ff5a 	bl	8009f6c <prvInsertTimerInActiveList>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d070      	beq.n	800a1a0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d065      	beq.n	800a1a0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	441a      	add	r2, r3
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e6:	f7ff fdfb 	bl	8009ce0 <xTimerGenericCommand>
 800a0ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d156      	bne.n	800a1a0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	b672      	cpsid	i
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	b662      	cpsie	i
 800a106:	61bb      	str	r3, [r7, #24]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a114:	f023 0301 	bic.w	r3, r3, #1
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a120:	e03f      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a128:	f043 0301 	orr.w	r3, r3, #1
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a138:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10d      	bne.n	800a15e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a146:	b672      	cpsid	i
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	b662      	cpsie	i
 800a156:	617b      	str	r3, [r7, #20]
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	18d1      	adds	r1, r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a16a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a16c:	f7ff fefe 	bl	8009f6c <prvInsertTimerInActiveList>
					break;
 800a170:	e017      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d103      	bne.n	800a188 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a182:	f000 fbd7 	bl	800a934 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a186:	e00c      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	b2da      	uxtb	r2, r3
 800a194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a19a:	e002      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a19c:	bf00      	nop
 800a19e:	e000      	b.n	800a1a2 <prvProcessReceivedCommands+0x1b2>
					break;
 800a1a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1a2:	4b08      	ldr	r3, [pc, #32]	@ (800a1c4 <prvProcessReceivedCommands+0x1d4>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	1d39      	adds	r1, r7, #4
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fb98 	bl	80088e0 <xQueueReceive>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f47f af20 	bne.w	8009ff8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	3730      	adds	r7, #48	@ 0x30
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200011c4 	.word	0x200011c4

0800a1c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1ce:	e04b      	b.n	800a268 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1d0:	4b2f      	ldr	r3, [pc, #188]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1da:	4b2d      	ldr	r3, [pc, #180]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe f88b 	bl	8008304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d031      	beq.n	800a268 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	d90e      	bls.n	800a234 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a222:	4b1b      	ldr	r3, [pc, #108]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3304      	adds	r3, #4
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f7fe f830 	bl	8008292 <vListInsert>
 800a232:	e019      	b.n	800a268 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a234:	2300      	movs	r3, #0
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	2300      	movs	r3, #0
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	2100      	movs	r1, #0
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff fd4e 	bl	8009ce0 <xTimerGenericCommand>
 800a244:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10d      	bne.n	800a268 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a250:	b672      	cpsid	i
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	b662      	cpsie	i
 800a260:	603b      	str	r3, [r7, #0]
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	e7fd      	b.n	800a264 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a268:	4b09      	ldr	r3, [pc, #36]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1ae      	bne.n	800a1d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a272:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a278:	4b06      	ldr	r3, [pc, #24]	@ (800a294 <prvSwitchTimerLists+0xcc>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a04      	ldr	r2, [pc, #16]	@ (800a290 <prvSwitchTimerLists+0xc8>)
 800a27e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a280:	4a04      	ldr	r2, [pc, #16]	@ (800a294 <prvSwitchTimerLists+0xcc>)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	6013      	str	r3, [r2, #0]
}
 800a286:	bf00      	nop
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	200011bc 	.word	0x200011bc
 800a294:	200011c0 	.word	0x200011c0

0800a298 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a29e:	f000 f94d 	bl	800a53c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2a2:	4b15      	ldr	r3, [pc, #84]	@ (800a2f8 <prvCheckForValidListAndQueue+0x60>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d120      	bne.n	800a2ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2aa:	4814      	ldr	r0, [pc, #80]	@ (800a2fc <prvCheckForValidListAndQueue+0x64>)
 800a2ac:	f7fd ffa0 	bl	80081f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2b0:	4813      	ldr	r0, [pc, #76]	@ (800a300 <prvCheckForValidListAndQueue+0x68>)
 800a2b2:	f7fd ff9d 	bl	80081f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2b6:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <prvCheckForValidListAndQueue+0x6c>)
 800a2b8:	4a10      	ldr	r2, [pc, #64]	@ (800a2fc <prvCheckForValidListAndQueue+0x64>)
 800a2ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2bc:	4b12      	ldr	r3, [pc, #72]	@ (800a308 <prvCheckForValidListAndQueue+0x70>)
 800a2be:	4a10      	ldr	r2, [pc, #64]	@ (800a300 <prvCheckForValidListAndQueue+0x68>)
 800a2c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4b11      	ldr	r3, [pc, #68]	@ (800a30c <prvCheckForValidListAndQueue+0x74>)
 800a2c8:	4a11      	ldr	r2, [pc, #68]	@ (800a310 <prvCheckForValidListAndQueue+0x78>)
 800a2ca:	2110      	movs	r1, #16
 800a2cc:	200a      	movs	r0, #10
 800a2ce:	f7fe f8af 	bl	8008430 <xQueueGenericCreateStatic>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4a08      	ldr	r2, [pc, #32]	@ (800a2f8 <prvCheckForValidListAndQueue+0x60>)
 800a2d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <prvCheckForValidListAndQueue+0x60>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2e0:	4b05      	ldr	r3, [pc, #20]	@ (800a2f8 <prvCheckForValidListAndQueue+0x60>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	490b      	ldr	r1, [pc, #44]	@ (800a314 <prvCheckForValidListAndQueue+0x7c>)
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fcf2 	bl	8008cd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2ec:	f000 f95c 	bl	800a5a8 <vPortExitCritical>
}
 800a2f0:	bf00      	nop
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200011c4 	.word	0x200011c4
 800a2fc:	20001194 	.word	0x20001194
 800a300:	200011a8 	.word	0x200011a8
 800a304:	200011bc 	.word	0x200011bc
 800a308:	200011c0 	.word	0x200011c0
 800a30c:	20001270 	.word	0x20001270
 800a310:	200011d0 	.word	0x200011d0
 800a314:	0800ad8c 	.word	0x0800ad8c

0800a318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3b04      	subs	r3, #4
 800a328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3b04      	subs	r3, #4
 800a336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0201 	bic.w	r2, r3, #1
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3b04      	subs	r3, #4
 800a346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a348:	4a0c      	ldr	r2, [pc, #48]	@ (800a37c <pxPortInitialiseStack+0x64>)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b14      	subs	r3, #20
 800a352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3b04      	subs	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f06f 0202 	mvn.w	r2, #2
 800a366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3b20      	subs	r3, #32
 800a36c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	0800a381 	.word	0x0800a381

0800a380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a38a:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <prvTaskExitError+0x60>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d00d      	beq.n	800a3b0 <prvTaskExitError+0x30>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	b672      	cpsid	i
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	b662      	cpsie	i
 800a3a8:	60fb      	str	r3, [r7, #12]
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <prvTaskExitError+0x2c>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	b672      	cpsid	i
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	b662      	cpsie	i
 800a3c4:	60bb      	str	r3, [r7, #8]
}
 800a3c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3c8:	bf00      	nop
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0fc      	beq.n	800a3ca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000014 	.word	0x20000014
	...

0800a3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3f0:	4b07      	ldr	r3, [pc, #28]	@ (800a410 <pxCurrentTCBConst2>)
 800a3f2:	6819      	ldr	r1, [r3, #0]
 800a3f4:	6808      	ldr	r0, [r1, #0]
 800a3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fa:	f380 8809 	msr	PSP, r0
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f04f 0000 	mov.w	r0, #0
 800a406:	f380 8811 	msr	BASEPRI, r0
 800a40a:	4770      	bx	lr
 800a40c:	f3af 8000 	nop.w

0800a410 <pxCurrentTCBConst2>:
 800a410:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop

0800a418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a418:	4808      	ldr	r0, [pc, #32]	@ (800a43c <prvPortStartFirstTask+0x24>)
 800a41a:	6800      	ldr	r0, [r0, #0]
 800a41c:	6800      	ldr	r0, [r0, #0]
 800a41e:	f380 8808 	msr	MSP, r0
 800a422:	f04f 0000 	mov.w	r0, #0
 800a426:	f380 8814 	msr	CONTROL, r0
 800a42a:	b662      	cpsie	i
 800a42c:	b661      	cpsie	f
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	df00      	svc	0
 800a438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a43a:	bf00      	nop
 800a43c:	e000ed08 	.word	0xe000ed08

0800a440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a446:	4b37      	ldr	r3, [pc, #220]	@ (800a524 <xPortStartScheduler+0xe4>)
 800a448:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	22ff      	movs	r2, #255	@ 0xff
 800a456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	4b2f      	ldr	r3, [pc, #188]	@ (800a528 <xPortStartScheduler+0xe8>)
 800a46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a46e:	4b2f      	ldr	r3, [pc, #188]	@ (800a52c <xPortStartScheduler+0xec>)
 800a470:	2207      	movs	r2, #7
 800a472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a474:	e009      	b.n	800a48a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a476:	4b2d      	ldr	r3, [pc, #180]	@ (800a52c <xPortStartScheduler+0xec>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	4a2b      	ldr	r2, [pc, #172]	@ (800a52c <xPortStartScheduler+0xec>)
 800a47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	b2db      	uxtb	r3, r3
 800a488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a492:	2b80      	cmp	r3, #128	@ 0x80
 800a494:	d0ef      	beq.n	800a476 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a496:	4b25      	ldr	r3, [pc, #148]	@ (800a52c <xPortStartScheduler+0xec>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f1c3 0307 	rsb	r3, r3, #7
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d00d      	beq.n	800a4be <xPortStartScheduler+0x7e>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	b672      	cpsid	i
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	b662      	cpsie	i
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4be:	4b1b      	ldr	r3, [pc, #108]	@ (800a52c <xPortStartScheduler+0xec>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	4a19      	ldr	r2, [pc, #100]	@ (800a52c <xPortStartScheduler+0xec>)
 800a4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4c8:	4b18      	ldr	r3, [pc, #96]	@ (800a52c <xPortStartScheduler+0xec>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4d0:	4a16      	ldr	r2, [pc, #88]	@ (800a52c <xPortStartScheduler+0xec>)
 800a4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4dc:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <xPortStartScheduler+0xf0>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a13      	ldr	r2, [pc, #76]	@ (800a530 <xPortStartScheduler+0xf0>)
 800a4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4e8:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <xPortStartScheduler+0xf0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a10      	ldr	r2, [pc, #64]	@ (800a530 <xPortStartScheduler+0xf0>)
 800a4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4f4:	f000 f8dc 	bl	800a6b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a534 <xPortStartScheduler+0xf4>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4fe:	f000 f8fb 	bl	800a6f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a502:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <xPortStartScheduler+0xf8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a0c      	ldr	r2, [pc, #48]	@ (800a538 <xPortStartScheduler+0xf8>)
 800a508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a50e:	f7ff ff83 	bl	800a418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a512:	f7ff f827 	bl	8009564 <vTaskSwitchContext>
	prvTaskExitError();
 800a516:	f7ff ff33 	bl	800a380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	e000e400 	.word	0xe000e400
 800a528:	200012c0 	.word	0x200012c0
 800a52c:	200012c4 	.word	0x200012c4
 800a530:	e000ed20 	.word	0xe000ed20
 800a534:	20000014 	.word	0x20000014
 800a538:	e000ef34 	.word	0xe000ef34

0800a53c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	b672      	cpsid	i
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	b662      	cpsie	i
 800a556:	607b      	str	r3, [r7, #4]
}
 800a558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a55a:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <vPortEnterCritical+0x64>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3301      	adds	r3, #1
 800a560:	4a0f      	ldr	r2, [pc, #60]	@ (800a5a0 <vPortEnterCritical+0x64>)
 800a562:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a564:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a0 <vPortEnterCritical+0x64>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d112      	bne.n	800a592 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a56c:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a4 <vPortEnterCritical+0x68>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00d      	beq.n	800a592 <vPortEnterCritical+0x56>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57a:	b672      	cpsid	i
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	b662      	cpsie	i
 800a58a:	603b      	str	r3, [r7, #0]
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	e7fd      	b.n	800a58e <vPortEnterCritical+0x52>
	}
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000014 	.word	0x20000014
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5ae:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <vPortExitCritical+0x54>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <vPortExitCritical+0x2a>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	b672      	cpsid	i
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	b662      	cpsie	i
 800a5ca:	607b      	str	r3, [r7, #4]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5fc <vPortExitCritical+0x54>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	4a08      	ldr	r2, [pc, #32]	@ (800a5fc <vPortExitCritical+0x54>)
 800a5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5dc:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <vPortExitCritical+0x54>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <vPortExitCritical+0x48>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f383 8811 	msr	BASEPRI, r3
}
 800a5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	20000014 	.word	0x20000014

0800a600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a600:	f3ef 8009 	mrs	r0, PSP
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4b15      	ldr	r3, [pc, #84]	@ (800a660 <pxCurrentTCBConst>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	f01e 0f10 	tst.w	lr, #16
 800a610:	bf08      	it	eq
 800a612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	6010      	str	r0, [r2, #0]
 800a61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a624:	b672      	cpsid	i
 800a626:	f380 8811 	msr	BASEPRI, r0
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	b662      	cpsie	i
 800a634:	f7fe ff96 	bl	8009564 <vTaskSwitchContext>
 800a638:	f04f 0000 	mov.w	r0, #0
 800a63c:	f380 8811 	msr	BASEPRI, r0
 800a640:	bc09      	pop	{r0, r3}
 800a642:	6819      	ldr	r1, [r3, #0]
 800a644:	6808      	ldr	r0, [r1, #0]
 800a646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64a:	f01e 0f10 	tst.w	lr, #16
 800a64e:	bf08      	it	eq
 800a650:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a654:	f380 8809 	msr	PSP, r0
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop

0800a660 <pxCurrentTCBConst>:
 800a660:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop

0800a668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	b672      	cpsid	i
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	b662      	cpsie	i
 800a682:	607b      	str	r3, [r7, #4]
}
 800a684:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a686:	f7fe feb1 	bl	80093ec <xTaskIncrementTick>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a690:	4b06      	ldr	r3, [pc, #24]	@ (800a6ac <SysTick_Handler+0x44>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	2300      	movs	r3, #0
 800a69a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	f383 8811 	msr	BASEPRI, r3
}
 800a6a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e4 <vPortSetupTimerInterrupt+0x34>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <vPortSetupTimerInterrupt+0x38>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ec <vPortSetupTimerInterrupt+0x3c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a6f0 <vPortSetupTimerInterrupt+0x40>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	099b      	lsrs	r3, r3, #6
 800a6cc:	4a09      	ldr	r2, [pc, #36]	@ (800a6f4 <vPortSetupTimerInterrupt+0x44>)
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6d2:	4b04      	ldr	r3, [pc, #16]	@ (800a6e4 <vPortSetupTimerInterrupt+0x34>)
 800a6d4:	2207      	movs	r2, #7
 800a6d6:	601a      	str	r2, [r3, #0]
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	e000e010 	.word	0xe000e010
 800a6e8:	e000e018 	.word	0xe000e018
 800a6ec:	20000008 	.word	0x20000008
 800a6f0:	10624dd3 	.word	0x10624dd3
 800a6f4:	e000e014 	.word	0xe000e014

0800a6f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a708 <vPortEnableVFP+0x10>
 800a6fc:	6801      	ldr	r1, [r0, #0]
 800a6fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a702:	6001      	str	r1, [r0, #0]
 800a704:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a706:	bf00      	nop
 800a708:	e000ed88 	.word	0xe000ed88

0800a70c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a712:	f3ef 8305 	mrs	r3, IPSR
 800a716:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	d917      	bls.n	800a74e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a71e:	4a1a      	ldr	r2, [pc, #104]	@ (800a788 <vPortValidateInterruptPriority+0x7c>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a728:	4b18      	ldr	r3, [pc, #96]	@ (800a78c <vPortValidateInterruptPriority+0x80>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	7afa      	ldrb	r2, [r7, #11]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d20d      	bcs.n	800a74e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	607b      	str	r3, [r7, #4]
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a74e:	4b10      	ldr	r3, [pc, #64]	@ (800a790 <vPortValidateInterruptPriority+0x84>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a756:	4b0f      	ldr	r3, [pc, #60]	@ (800a794 <vPortValidateInterruptPriority+0x88>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d90d      	bls.n	800a77a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	b672      	cpsid	i
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	b662      	cpsie	i
 800a772:	603b      	str	r3, [r7, #0]
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	e7fd      	b.n	800a776 <vPortValidateInterruptPriority+0x6a>
	}
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	e000e3f0 	.word	0xe000e3f0
 800a78c:	200012c0 	.word	0x200012c0
 800a790:	e000ed0c 	.word	0xe000ed0c
 800a794:	200012c4 	.word	0x200012c4

0800a798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7a4:	f7fe fd64 	bl	8009270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7a8:	4b5d      	ldr	r3, [pc, #372]	@ (800a920 <pvPortMalloc+0x188>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7b0:	f000 f920 	bl	800a9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7b4:	4b5b      	ldr	r3, [pc, #364]	@ (800a924 <pvPortMalloc+0x18c>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f040 8094 	bne.w	800a8ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d020      	beq.n	800a80a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a7c8:	2208      	movs	r2, #8
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d017      	beq.n	800a80a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f023 0307 	bic.w	r3, r3, #7
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00d      	beq.n	800a80a <pvPortMalloc+0x72>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	b672      	cpsid	i
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	b662      	cpsie	i
 800a802:	617b      	str	r3, [r7, #20]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d06c      	beq.n	800a8ea <pvPortMalloc+0x152>
 800a810:	4b45      	ldr	r3, [pc, #276]	@ (800a928 <pvPortMalloc+0x190>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d867      	bhi.n	800a8ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a81a:	4b44      	ldr	r3, [pc, #272]	@ (800a92c <pvPortMalloc+0x194>)
 800a81c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a81e:	4b43      	ldr	r3, [pc, #268]	@ (800a92c <pvPortMalloc+0x194>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a824:	e004      	b.n	800a830 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	429a      	cmp	r2, r3
 800a838:	d903      	bls.n	800a842 <pvPortMalloc+0xaa>
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f1      	bne.n	800a826 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a842:	4b37      	ldr	r3, [pc, #220]	@ (800a920 <pvPortMalloc+0x188>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a848:	429a      	cmp	r2, r3
 800a84a:	d04e      	beq.n	800a8ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2208      	movs	r2, #8
 800a852:	4413      	add	r3, r2
 800a854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	1ad2      	subs	r2, r2, r3
 800a866:	2308      	movs	r3, #8
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d922      	bls.n	800a8b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	f003 0307 	and.w	r3, r3, #7
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00d      	beq.n	800a89c <pvPortMalloc+0x104>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a884:	b672      	cpsid	i
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	b662      	cpsie	i
 800a894:	613b      	str	r3, [r7, #16]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	1ad2      	subs	r2, r2, r3
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8ae:	69b8      	ldr	r0, [r7, #24]
 800a8b0:	f000 f902 	bl	800aab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <pvPortMalloc+0x190>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	4a1a      	ldr	r2, [pc, #104]	@ (800a928 <pvPortMalloc+0x190>)
 800a8c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8c2:	4b19      	ldr	r3, [pc, #100]	@ (800a928 <pvPortMalloc+0x190>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a930 <pvPortMalloc+0x198>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d203      	bcs.n	800a8d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8ce:	4b16      	ldr	r3, [pc, #88]	@ (800a928 <pvPortMalloc+0x190>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a17      	ldr	r2, [pc, #92]	@ (800a930 <pvPortMalloc+0x198>)
 800a8d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	4b12      	ldr	r3, [pc, #72]	@ (800a924 <pvPortMalloc+0x18c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8ea:	f7fe fccf 	bl	800928c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00d      	beq.n	800a914 <pvPortMalloc+0x17c>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	b672      	cpsid	i
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	b662      	cpsie	i
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	bf00      	nop
 800a912:	e7fd      	b.n	800a910 <pvPortMalloc+0x178>
	return pvReturn;
 800a914:	69fb      	ldr	r3, [r7, #28]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3728      	adds	r7, #40	@ 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20004ed0 	.word	0x20004ed0
 800a924:	20004edc 	.word	0x20004edc
 800a928:	20004ed4 	.word	0x20004ed4
 800a92c:	20004ec8 	.word	0x20004ec8
 800a930:	20004ed8 	.word	0x20004ed8

0800a934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d04e      	beq.n	800a9e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a946:	2308      	movs	r3, #8
 800a948:	425b      	negs	r3, r3
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4413      	add	r3, r2
 800a94e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	4b24      	ldr	r3, [pc, #144]	@ (800a9ec <vPortFree+0xb8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4013      	ands	r3, r2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10d      	bne.n	800a97e <vPortFree+0x4a>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	b672      	cpsid	i
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	b662      	cpsie	i
 800a976:	60fb      	str	r3, [r7, #12]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <vPortFree+0x6e>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	b672      	cpsid	i
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	b662      	cpsie	i
 800a99a:	60bb      	str	r3, [r7, #8]
}
 800a99c:	bf00      	nop
 800a99e:	bf00      	nop
 800a9a0:	e7fd      	b.n	800a99e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	4b11      	ldr	r3, [pc, #68]	@ (800a9ec <vPortFree+0xb8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d019      	beq.n	800a9e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d115      	bne.n	800a9e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a9ec <vPortFree+0xb8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	43db      	mvns	r3, r3
 800a9c2:	401a      	ands	r2, r3
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9c8:	f7fe fc52 	bl	8009270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	4b07      	ldr	r3, [pc, #28]	@ (800a9f0 <vPortFree+0xbc>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	4a06      	ldr	r2, [pc, #24]	@ (800a9f0 <vPortFree+0xbc>)
 800a9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f000 f86c 	bl	800aab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9e0:	f7fe fc54 	bl	800928c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20004edc 	.word	0x20004edc
 800a9f0:	20004ed4 	.word	0x20004ed4

0800a9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9fa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa00:	4b27      	ldr	r3, [pc, #156]	@ (800aaa0 <prvHeapInit+0xac>)
 800aa02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00c      	beq.n	800aa28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3307      	adds	r3, #7
 800aa12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 0307 	bic.w	r3, r3, #7
 800aa1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	4a1f      	ldr	r2, [pc, #124]	@ (800aaa0 <prvHeapInit+0xac>)
 800aa24:	4413      	add	r3, r2
 800aa26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa2c:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa4 <prvHeapInit+0xb0>)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa4 <prvHeapInit+0xb0>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa40:	2208      	movs	r2, #8
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4a15      	ldr	r2, [pc, #84]	@ (800aaa8 <prvHeapInit+0xb4>)
 800aa54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa56:	4b14      	ldr	r3, [pc, #80]	@ (800aaa8 <prvHeapInit+0xb4>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa5e:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <prvHeapInit+0xb4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa74:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa8 <prvHeapInit+0xb4>)
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	@ (800aaac <prvHeapInit+0xb8>)
 800aa82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4a09      	ldr	r2, [pc, #36]	@ (800aab0 <prvHeapInit+0xbc>)
 800aa8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa8c:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <prvHeapInit+0xc0>)
 800aa8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	200012c8 	.word	0x200012c8
 800aaa4:	20004ec8 	.word	0x20004ec8
 800aaa8:	20004ed0 	.word	0x20004ed0
 800aaac:	20004ed8 	.word	0x20004ed8
 800aab0:	20004ed4 	.word	0x20004ed4
 800aab4:	20004edc 	.word	0x20004edc

0800aab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aac0:	4b28      	ldr	r3, [pc, #160]	@ (800ab64 <prvInsertBlockIntoFreeList+0xac>)
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e002      	b.n	800aacc <prvInsertBlockIntoFreeList+0x14>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d8f7      	bhi.n	800aac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	4413      	add	r3, r2
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d108      	bne.n	800aafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	441a      	add	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	441a      	add	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d118      	bne.n	800ab40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b15      	ldr	r3, [pc, #84]	@ (800ab68 <prvInsertBlockIntoFreeList+0xb0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d00d      	beq.n	800ab36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e008      	b.n	800ab48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab36:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <prvInsertBlockIntoFreeList+0xb0>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	e003      	b.n	800ab48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d002      	beq.n	800ab56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20004ec8 	.word	0x20004ec8
 800ab68:	20004ed0 	.word	0x20004ed0

0800ab6c <memset>:
 800ab6c:	4402      	add	r2, r0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d100      	bne.n	800ab76 <memset+0xa>
 800ab74:	4770      	bx	lr
 800ab76:	f803 1b01 	strb.w	r1, [r3], #1
 800ab7a:	e7f9      	b.n	800ab70 <memset+0x4>

0800ab7c <_reclaim_reent>:
 800ab7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac34 <_reclaim_reent+0xb8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4283      	cmp	r3, r0
 800ab82:	b570      	push	{r4, r5, r6, lr}
 800ab84:	4604      	mov	r4, r0
 800ab86:	d053      	beq.n	800ac30 <_reclaim_reent+0xb4>
 800ab88:	69c3      	ldr	r3, [r0, #28]
 800ab8a:	b31b      	cbz	r3, 800abd4 <_reclaim_reent+0x58>
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	b163      	cbz	r3, 800abaa <_reclaim_reent+0x2e>
 800ab90:	2500      	movs	r5, #0
 800ab92:	69e3      	ldr	r3, [r4, #28]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	5959      	ldr	r1, [r3, r5]
 800ab98:	b9b1      	cbnz	r1, 800abc8 <_reclaim_reent+0x4c>
 800ab9a:	3504      	adds	r5, #4
 800ab9c:	2d80      	cmp	r5, #128	@ 0x80
 800ab9e:	d1f8      	bne.n	800ab92 <_reclaim_reent+0x16>
 800aba0:	69e3      	ldr	r3, [r4, #28]
 800aba2:	4620      	mov	r0, r4
 800aba4:	68d9      	ldr	r1, [r3, #12]
 800aba6:	f000 f87b 	bl	800aca0 <_free_r>
 800abaa:	69e3      	ldr	r3, [r4, #28]
 800abac:	6819      	ldr	r1, [r3, #0]
 800abae:	b111      	cbz	r1, 800abb6 <_reclaim_reent+0x3a>
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 f875 	bl	800aca0 <_free_r>
 800abb6:	69e3      	ldr	r3, [r4, #28]
 800abb8:	689d      	ldr	r5, [r3, #8]
 800abba:	b15d      	cbz	r5, 800abd4 <_reclaim_reent+0x58>
 800abbc:	4629      	mov	r1, r5
 800abbe:	4620      	mov	r0, r4
 800abc0:	682d      	ldr	r5, [r5, #0]
 800abc2:	f000 f86d 	bl	800aca0 <_free_r>
 800abc6:	e7f8      	b.n	800abba <_reclaim_reent+0x3e>
 800abc8:	680e      	ldr	r6, [r1, #0]
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 f868 	bl	800aca0 <_free_r>
 800abd0:	4631      	mov	r1, r6
 800abd2:	e7e1      	b.n	800ab98 <_reclaim_reent+0x1c>
 800abd4:	6961      	ldr	r1, [r4, #20]
 800abd6:	b111      	cbz	r1, 800abde <_reclaim_reent+0x62>
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f861 	bl	800aca0 <_free_r>
 800abde:	69e1      	ldr	r1, [r4, #28]
 800abe0:	b111      	cbz	r1, 800abe8 <_reclaim_reent+0x6c>
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 f85c 	bl	800aca0 <_free_r>
 800abe8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800abea:	b111      	cbz	r1, 800abf2 <_reclaim_reent+0x76>
 800abec:	4620      	mov	r0, r4
 800abee:	f000 f857 	bl	800aca0 <_free_r>
 800abf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abf4:	b111      	cbz	r1, 800abfc <_reclaim_reent+0x80>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 f852 	bl	800aca0 <_free_r>
 800abfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800abfe:	b111      	cbz	r1, 800ac06 <_reclaim_reent+0x8a>
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 f84d 	bl	800aca0 <_free_r>
 800ac06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac08:	b111      	cbz	r1, 800ac10 <_reclaim_reent+0x94>
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 f848 	bl	800aca0 <_free_r>
 800ac10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac12:	b111      	cbz	r1, 800ac1a <_reclaim_reent+0x9e>
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f843 	bl	800aca0 <_free_r>
 800ac1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac1c:	b111      	cbz	r1, 800ac24 <_reclaim_reent+0xa8>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f83e 	bl	800aca0 <_free_r>
 800ac24:	6a23      	ldr	r3, [r4, #32]
 800ac26:	b11b      	cbz	r3, 800ac30 <_reclaim_reent+0xb4>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac2e:	4718      	bx	r3
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	bf00      	nop
 800ac34:	20000018 	.word	0x20000018

0800ac38 <__libc_init_array>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac70 <__libc_init_array+0x38>)
 800ac3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ac74 <__libc_init_array+0x3c>)
 800ac3e:	1b64      	subs	r4, r4, r5
 800ac40:	10a4      	asrs	r4, r4, #2
 800ac42:	2600      	movs	r6, #0
 800ac44:	42a6      	cmp	r6, r4
 800ac46:	d109      	bne.n	800ac5c <__libc_init_array+0x24>
 800ac48:	4d0b      	ldr	r5, [pc, #44]	@ (800ac78 <__libc_init_array+0x40>)
 800ac4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ac7c <__libc_init_array+0x44>)
 800ac4c:	f000 f87e 	bl	800ad4c <_init>
 800ac50:	1b64      	subs	r4, r4, r5
 800ac52:	10a4      	asrs	r4, r4, #2
 800ac54:	2600      	movs	r6, #0
 800ac56:	42a6      	cmp	r6, r4
 800ac58:	d105      	bne.n	800ac66 <__libc_init_array+0x2e>
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac60:	4798      	blx	r3
 800ac62:	3601      	adds	r6, #1
 800ac64:	e7ee      	b.n	800ac44 <__libc_init_array+0xc>
 800ac66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6a:	4798      	blx	r3
 800ac6c:	3601      	adds	r6, #1
 800ac6e:	e7f2      	b.n	800ac56 <__libc_init_array+0x1e>
 800ac70:	0800ae04 	.word	0x0800ae04
 800ac74:	0800ae04 	.word	0x0800ae04
 800ac78:	0800ae04 	.word	0x0800ae04
 800ac7c:	0800ae08 	.word	0x0800ae08

0800ac80 <__retarget_lock_acquire_recursive>:
 800ac80:	4770      	bx	lr

0800ac82 <__retarget_lock_release_recursive>:
 800ac82:	4770      	bx	lr

0800ac84 <memcpy>:
 800ac84:	440a      	add	r2, r1
 800ac86:	4291      	cmp	r1, r2
 800ac88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac8c:	d100      	bne.n	800ac90 <memcpy+0xc>
 800ac8e:	4770      	bx	lr
 800ac90:	b510      	push	{r4, lr}
 800ac92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac9a:	4291      	cmp	r1, r2
 800ac9c:	d1f9      	bne.n	800ac92 <memcpy+0xe>
 800ac9e:	bd10      	pop	{r4, pc}

0800aca0 <_free_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4605      	mov	r5, r0
 800aca4:	2900      	cmp	r1, #0
 800aca6:	d041      	beq.n	800ad2c <_free_r+0x8c>
 800aca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acac:	1f0c      	subs	r4, r1, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bfb8      	it	lt
 800acb2:	18e4      	addlt	r4, r4, r3
 800acb4:	f000 f83e 	bl	800ad34 <__malloc_lock>
 800acb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad30 <_free_r+0x90>)
 800acba:	6813      	ldr	r3, [r2, #0]
 800acbc:	b933      	cbnz	r3, 800accc <_free_r+0x2c>
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	6014      	str	r4, [r2, #0]
 800acc2:	4628      	mov	r0, r5
 800acc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc8:	f000 b83a 	b.w	800ad40 <__malloc_unlock>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d908      	bls.n	800ace2 <_free_r+0x42>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	1821      	adds	r1, r4, r0
 800acd4:	428b      	cmp	r3, r1
 800acd6:	bf01      	itttt	eq
 800acd8:	6819      	ldreq	r1, [r3, #0]
 800acda:	685b      	ldreq	r3, [r3, #4]
 800acdc:	1809      	addeq	r1, r1, r0
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	e7ed      	b.n	800acbe <_free_r+0x1e>
 800ace2:	461a      	mov	r2, r3
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b10b      	cbz	r3, 800acec <_free_r+0x4c>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x42>
 800acec:	6811      	ldr	r1, [r2, #0]
 800acee:	1850      	adds	r0, r2, r1
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x6c>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4401      	add	r1, r0
 800acf8:	1850      	adds	r0, r2, r1
 800acfa:	4283      	cmp	r3, r0
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	d1e0      	bne.n	800acc2 <_free_r+0x22>
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	6053      	str	r3, [r2, #4]
 800ad06:	4408      	add	r0, r1
 800ad08:	6010      	str	r0, [r2, #0]
 800ad0a:	e7da      	b.n	800acc2 <_free_r+0x22>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x74>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	e7d6      	b.n	800acc2 <_free_r+0x22>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf04      	itt	eq
 800ad1c:	6819      	ldreq	r1, [r3, #0]
 800ad1e:	685b      	ldreq	r3, [r3, #4]
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	bf04      	itt	eq
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	6054      	str	r4, [r2, #4]
 800ad2a:	e7ca      	b.n	800acc2 <_free_r+0x22>
 800ad2c:	bd38      	pop	{r3, r4, r5, pc}
 800ad2e:	bf00      	nop
 800ad30:	2000501c 	.word	0x2000501c

0800ad34 <__malloc_lock>:
 800ad34:	4801      	ldr	r0, [pc, #4]	@ (800ad3c <__malloc_lock+0x8>)
 800ad36:	f7ff bfa3 	b.w	800ac80 <__retarget_lock_acquire_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	20005018 	.word	0x20005018

0800ad40 <__malloc_unlock>:
 800ad40:	4801      	ldr	r0, [pc, #4]	@ (800ad48 <__malloc_unlock+0x8>)
 800ad42:	f7ff bf9e 	b.w	800ac82 <__retarget_lock_release_recursive>
 800ad46:	bf00      	nop
 800ad48:	20005018 	.word	0x20005018

0800ad4c <_init>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	bf00      	nop
 800ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad52:	bc08      	pop	{r3}
 800ad54:	469e      	mov	lr, r3
 800ad56:	4770      	bx	lr

0800ad58 <_fini>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr
