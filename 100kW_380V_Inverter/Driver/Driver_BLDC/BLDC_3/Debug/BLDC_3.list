
BLDC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b3e4  0800b3e4  0000c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b47c  0800b47c  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b484  0800b484  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b484  0800b484  0000c484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b488  0800b488  0000c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b48c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fc8  20000068  0800b4f4  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005030  0800b4f4  0000e030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219ff  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046c4  00000000  00000000  0002ea97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00033160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001427  00000000  00000000  00034b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b7b  00000000  00000000  00035f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020890  00000000  00000000  0005bafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee134  00000000  00000000  0007c38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a4be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec8  00000000  00000000  0016a504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001713cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b3cc 	.word	0x0800b3cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b3cc 	.word	0x0800b3cc

08000220 <BLDC_MotorCommutation>:
.syntax unified
.thumb
.global BLDC_MotorCommutation

BLDC_MotorCommutation:
    push {r4-r7, lr}           // сохраняем регистры
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}

    mov r4, r0                 // halls -> r4
 8000222:	4604      	mov	r4, r0

    // Проверяем, если halls == 0 или 7 -> обнуление всех фаз
    cmp r4, #0
 8000224:	2c00      	cmp	r4, #0
    beq _zero_phases
 8000226:	d038      	beq.n	800029a <_zero_phases>
    cmp r4, #7
 8000228:	2c07      	cmp	r4, #7
    beq _zero_phases
 800022a:	d036      	beq.n	800029a <_zero_phases>

    // Основная логика: каждая комбинация вызывает функции HAL
    cmp r4, #1
 800022c:	2c01      	cmp	r4, #1
    beq _case1
 800022e:	d00a      	beq.n	8000246 <_case1>
    cmp r4, #2
 8000230:	2c02      	cmp	r4, #2
    beq _case2
 8000232:	d00f      	beq.n	8000254 <_case2>
    cmp r4, #3
 8000234:	2c03      	cmp	r4, #3
    beq _case3
 8000236:	d014      	beq.n	8000262 <_case3>
    cmp r4, #4
 8000238:	2c04      	cmp	r4, #4
    beq _case4
 800023a:	d019      	beq.n	8000270 <_case4>
    cmp r4, #5
 800023c:	2c05      	cmp	r4, #5
    beq _case5
 800023e:	d01e      	beq.n	800027e <_case5>
    cmp r4, #6
 8000240:	2c06      	cmp	r4, #6
    beq _case6
 8000242:	d023      	beq.n	800028c <_case6>
    b _end
 8000244:	e02f      	b.n	80002a6 <_end>

08000246 <_case1>:

_case1:
    bl Phaze_A_ON
 8000246:	f000 f9f9 	bl	800063c <Phaze_A_ON>
    bl Phaze_B_ZZ
 800024a:	f000 fa3d 	bl	80006c8 <Phaze_B_ZZ>
    bl Phaze_C_OFF
 800024e:	f000 fa57 	bl	8000700 <Phaze_C_OFF>
    b _end
 8000252:	e028      	b.n	80002a6 <_end>

08000254 <_case2>:

_case2:
    bl Phaze_A_OFF
 8000254:	f000 fa00 	bl	8000658 <Phaze_A_OFF>
    bl Phaze_B_ON
 8000258:	f000 fa1a 	bl	8000690 <Phaze_B_ON>
    bl Phaze_C_ZZ
 800025c:	f000 fa5e 	bl	800071c <Phaze_C_ZZ>
    b _end
 8000260:	e021      	b.n	80002a6 <_end>

08000262 <_case3>:

_case3:
    bl Phaze_A_ZZ
 8000262:	f000 fa07 	bl	8000674 <Phaze_A_ZZ>
    bl Phaze_B_ON
 8000266:	f000 fa13 	bl	8000690 <Phaze_B_ON>
    bl Phaze_C_OFF
 800026a:	f000 fa49 	bl	8000700 <Phaze_C_OFF>
    b _end
 800026e:	e01a      	b.n	80002a6 <_end>

08000270 <_case4>:

_case4:
    bl Phaze_A_ZZ
 8000270:	f000 fa00 	bl	8000674 <Phaze_A_ZZ>
    bl Phaze_B_OFF
 8000274:	f000 fa1a 	bl	80006ac <Phaze_B_OFF>
    bl Phaze_C_ON
 8000278:	f000 fa34 	bl	80006e4 <Phaze_C_ON>
    b _end
 800027c:	e013      	b.n	80002a6 <_end>

0800027e <_case5>:

_case5:
    bl Phaze_A_ON
 800027e:	f000 f9dd 	bl	800063c <Phaze_A_ON>
    bl Phaze_B_OFF
 8000282:	f000 fa13 	bl	80006ac <Phaze_B_OFF>
    bl Phaze_C_ZZ
 8000286:	f000 fa49 	bl	800071c <Phaze_C_ZZ>
    b _end
 800028a:	e00c      	b.n	80002a6 <_end>

0800028c <_case6>:

_case6:
    bl Phaze_A_OFF
 800028c:	f000 f9e4 	bl	8000658 <Phaze_A_OFF>
    bl Phaze_B_ZZ
 8000290:	f000 fa1a 	bl	80006c8 <Phaze_B_ZZ>
    bl Phaze_C_ON
 8000294:	f000 fa26 	bl	80006e4 <Phaze_C_ON>
    b _end
 8000298:	e005      	b.n	80002a6 <_end>

0800029a <_zero_phases>:

_zero_phases:
    bl Phaze_A_ZZ
 800029a:	f000 f9eb 	bl	8000674 <Phaze_A_ZZ>
    bl Phaze_B_ZZ
 800029e:	f000 fa13 	bl	80006c8 <Phaze_B_ZZ>
    bl Phaze_C_ZZ
 80002a2:	f000 fa3b 	bl	800071c <Phaze_C_ZZ>

080002a6 <_end>:

_end:
    pop {r4-r7, pc}            // восстановление регистров и возврат
 80002a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002a8 <__aeabi_uldivmod>:
 80002a8:	b953      	cbnz	r3, 80002c0 <__aeabi_uldivmod+0x18>
 80002aa:	b94a      	cbnz	r2, 80002c0 <__aeabi_uldivmod+0x18>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf08      	it	eq
 80002b0:	2800      	cmpeq	r0, #0
 80002b2:	bf1c      	itt	ne
 80002b4:	f04f 31ff 	movne.w	r1, #4294967295
 80002b8:	f04f 30ff 	movne.w	r0, #4294967295
 80002bc:	f000 b988 	b.w	80005d0 <__aeabi_idiv0>
 80002c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c8:	f000 f806 	bl	80002d8 <__udivmoddi4>
 80002cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d4:	b004      	add	sp, #16
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9d08      	ldr	r5, [sp, #32]
 80002de:	468e      	mov	lr, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	4688      	mov	r8, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4617      	mov	r7, r2
 80002ec:	d962      	bls.n	80003b4 <__udivmoddi4+0xdc>
 80002ee:	fab2 f682 	clz	r6, r2
 80002f2:	b14e      	cbz	r6, 8000308 <__udivmoddi4+0x30>
 80002f4:	f1c6 0320 	rsb	r3, r6, #32
 80002f8:	fa01 f806 	lsl.w	r8, r1, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	40b7      	lsls	r7, r6
 8000302:	ea43 0808 	orr.w	r8, r3, r8
 8000306:	40b4      	lsls	r4, r6
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	fbb8 f1fe 	udiv	r1, r8, lr
 8000314:	0c23      	lsrs	r3, r4, #16
 8000316:	fb0e 8811 	mls	r8, lr, r1, r8
 800031a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031e:	fb01 f20c 	mul.w	r2, r1, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x62>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f101 30ff 	add.w	r0, r1, #4294967295
 800032c:	f080 80ea 	bcs.w	8000504 <__udivmoddi4+0x22c>
 8000330:	429a      	cmp	r2, r3
 8000332:	f240 80e7 	bls.w	8000504 <__udivmoddi4+0x22c>
 8000336:	3902      	subs	r1, #2
 8000338:	443b      	add	r3, r7
 800033a:	1a9a      	subs	r2, r3, r2
 800033c:	b2a3      	uxth	r3, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb00 fc0c 	mul.w	ip, r0, ip
 800034e:	459c      	cmp	ip, r3
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x8e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	f080 80d6 	bcs.w	8000508 <__udivmoddi4+0x230>
 800035c:	459c      	cmp	ip, r3
 800035e:	f240 80d3 	bls.w	8000508 <__udivmoddi4+0x230>
 8000362:	443b      	add	r3, r7
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036a:	eba3 030c 	sub.w	r3, r3, ip
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa2>
 8000372:	40f3      	lsrs	r3, r6
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xb6>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb0>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa2>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x14c>
 8000396:	4573      	cmp	r3, lr
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xc8>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 8105 	bhi.w	80005aa <__udivmoddi4+0x2d2>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4690      	mov	r8, r2
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0e5      	beq.n	800037a <__udivmoddi4+0xa2>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7e2      	b.n	800037a <__udivmoddi4+0xa2>
 80003b4:	2a00      	cmp	r2, #0
 80003b6:	f000 8090 	beq.w	80004da <__udivmoddi4+0x202>
 80003ba:	fab2 f682 	clz	r6, r2
 80003be:	2e00      	cmp	r6, #0
 80003c0:	f040 80a4 	bne.w	800050c <__udivmoddi4+0x234>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	0c03      	lsrs	r3, r0, #16
 80003c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003cc:	b280      	uxth	r0, r0
 80003ce:	b2bc      	uxth	r4, r7
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80003da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003de:	fb04 f20c 	mul.w	r2, r4, ip
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x11e>
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x11c>
 80003ee:	429a      	cmp	r2, r3
 80003f0:	f200 80e0 	bhi.w	80005b4 <__udivmoddi4+0x2dc>
 80003f4:	46c4      	mov	ip, r8
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80003fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000400:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000404:	fb02 f404 	mul.w	r4, r2, r4
 8000408:	429c      	cmp	r4, r3
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x144>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x142>
 8000414:	429c      	cmp	r4, r3
 8000416:	f200 80ca 	bhi.w	80005ae <__udivmoddi4+0x2d6>
 800041a:	4602      	mov	r2, r0
 800041c:	1b1b      	subs	r3, r3, r4
 800041e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa0e f401 	lsl.w	r4, lr, r1
 8000434:	fa20 f306 	lsr.w	r3, r0, r6
 8000438:	fa2e fe06 	lsr.w	lr, lr, r6
 800043c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa00 f801 	lsl.w	r8, r0, r1
 8000446:	fa1f fc87 	uxth.w	ip, r7
 800044a:	fbbe f0f9 	udiv	r0, lr, r9
 800044e:	0c1c      	lsrs	r4, r3, #16
 8000450:	fb09 ee10 	mls	lr, r9, r0, lr
 8000454:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000458:	fb00 fe0c 	mul.w	lr, r0, ip
 800045c:	45a6      	cmp	lr, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d909      	bls.n	8000478 <__udivmoddi4+0x1a0>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	f080 809c 	bcs.w	80005a6 <__udivmoddi4+0x2ce>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f240 8099 	bls.w	80005a6 <__udivmoddi4+0x2ce>
 8000474:	3802      	subs	r0, #2
 8000476:	443c      	add	r4, r7
 8000478:	eba4 040e 	sub.w	r4, r4, lr
 800047c:	fa1f fe83 	uxth.w	lr, r3
 8000480:	fbb4 f3f9 	udiv	r3, r4, r9
 8000484:	fb09 4413 	mls	r4, r9, r3, r4
 8000488:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800048c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000490:	45a4      	cmp	ip, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x1ce>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f103 3eff 	add.w	lr, r3, #4294967295
 800049a:	f080 8082 	bcs.w	80005a2 <__udivmoddi4+0x2ca>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d97f      	bls.n	80005a2 <__udivmoddi4+0x2ca>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b2:	4564      	cmp	r4, ip
 80004b4:	4673      	mov	r3, lr
 80004b6:	46e1      	mov	r9, ip
 80004b8:	d362      	bcc.n	8000580 <__udivmoddi4+0x2a8>
 80004ba:	d05f      	beq.n	800057c <__udivmoddi4+0x2a4>
 80004bc:	b15d      	cbz	r5, 80004d6 <__udivmoddi4+0x1fe>
 80004be:	ebb8 0203 	subs.w	r2, r8, r3
 80004c2:	eb64 0409 	sbc.w	r4, r4, r9
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	fa22 f301 	lsr.w	r3, r2, r1
 80004ce:	431e      	orrs	r6, r3
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	e9c5 6400 	strd	r6, r4, [r5]
 80004d6:	2100      	movs	r1, #0
 80004d8:	e74f      	b.n	800037a <__udivmoddi4+0xa2>
 80004da:	fbb1 fcf2 	udiv	ip, r1, r2
 80004de:	0c01      	lsrs	r1, r0, #16
 80004e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004ea:	463b      	mov	r3, r7
 80004ec:	4638      	mov	r0, r7
 80004ee:	463c      	mov	r4, r7
 80004f0:	46b8      	mov	r8, r7
 80004f2:	46be      	mov	lr, r7
 80004f4:	2620      	movs	r6, #32
 80004f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80004fa:	eba2 0208 	sub.w	r2, r2, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e766      	b.n	80003d2 <__udivmoddi4+0xfa>
 8000504:	4601      	mov	r1, r0
 8000506:	e718      	b.n	800033a <__udivmoddi4+0x62>
 8000508:	4610      	mov	r0, r2
 800050a:	e72c      	b.n	8000366 <__udivmoddi4+0x8e>
 800050c:	f1c6 0220 	rsb	r2, r6, #32
 8000510:	fa2e f302 	lsr.w	r3, lr, r2
 8000514:	40b7      	lsls	r7, r6
 8000516:	40b1      	lsls	r1, r6
 8000518:	fa20 f202 	lsr.w	r2, r0, r2
 800051c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000520:	430a      	orrs	r2, r1
 8000522:	fbb3 f8fe 	udiv	r8, r3, lr
 8000526:	b2bc      	uxth	r4, r7
 8000528:	fb0e 3318 	mls	r3, lr, r8, r3
 800052c:	0c11      	lsrs	r1, r2, #16
 800052e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000532:	fb08 f904 	mul.w	r9, r8, r4
 8000536:	40b0      	lsls	r0, r6
 8000538:	4589      	cmp	r9, r1
 800053a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053e:	b280      	uxth	r0, r0
 8000540:	d93e      	bls.n	80005c0 <__udivmoddi4+0x2e8>
 8000542:	1879      	adds	r1, r7, r1
 8000544:	f108 3cff 	add.w	ip, r8, #4294967295
 8000548:	d201      	bcs.n	800054e <__udivmoddi4+0x276>
 800054a:	4589      	cmp	r9, r1
 800054c:	d81f      	bhi.n	800058e <__udivmoddi4+0x2b6>
 800054e:	eba1 0109 	sub.w	r1, r1, r9
 8000552:	fbb1 f9fe 	udiv	r9, r1, lr
 8000556:	fb09 f804 	mul.w	r8, r9, r4
 800055a:	fb0e 1119 	mls	r1, lr, r9, r1
 800055e:	b292      	uxth	r2, r2
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	4542      	cmp	r2, r8
 8000566:	d229      	bcs.n	80005bc <__udivmoddi4+0x2e4>
 8000568:	18ba      	adds	r2, r7, r2
 800056a:	f109 31ff 	add.w	r1, r9, #4294967295
 800056e:	d2c4      	bcs.n	80004fa <__udivmoddi4+0x222>
 8000570:	4542      	cmp	r2, r8
 8000572:	d2c2      	bcs.n	80004fa <__udivmoddi4+0x222>
 8000574:	f1a9 0102 	sub.w	r1, r9, #2
 8000578:	443a      	add	r2, r7
 800057a:	e7be      	b.n	80004fa <__udivmoddi4+0x222>
 800057c:	45f0      	cmp	r8, lr
 800057e:	d29d      	bcs.n	80004bc <__udivmoddi4+0x1e4>
 8000580:	ebbe 0302 	subs.w	r3, lr, r2
 8000584:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000588:	3801      	subs	r0, #1
 800058a:	46e1      	mov	r9, ip
 800058c:	e796      	b.n	80004bc <__udivmoddi4+0x1e4>
 800058e:	eba7 0909 	sub.w	r9, r7, r9
 8000592:	4449      	add	r1, r9
 8000594:	f1a8 0c02 	sub.w	ip, r8, #2
 8000598:	fbb1 f9fe 	udiv	r9, r1, lr
 800059c:	fb09 f804 	mul.w	r8, r9, r4
 80005a0:	e7db      	b.n	800055a <__udivmoddi4+0x282>
 80005a2:	4673      	mov	r3, lr
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1ce>
 80005a6:	4650      	mov	r0, sl
 80005a8:	e766      	b.n	8000478 <__udivmoddi4+0x1a0>
 80005aa:	4608      	mov	r0, r1
 80005ac:	e6fd      	b.n	80003aa <__udivmoddi4+0xd2>
 80005ae:	443b      	add	r3, r7
 80005b0:	3a02      	subs	r2, #2
 80005b2:	e733      	b.n	800041c <__udivmoddi4+0x144>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e71c      	b.n	80003f6 <__udivmoddi4+0x11e>
 80005bc:	4649      	mov	r1, r9
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x222>
 80005c0:	eba1 0109 	sub.w	r1, r1, r9
 80005c4:	46c4      	mov	ip, r8
 80005c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ca:	fb09 f804 	mul.w	r8, r9, r4
 80005ce:	e7c4      	b.n	800055a <__udivmoddi4+0x282>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SWITCH>:
 *  Created on: Jun 20, 2024
 *      Author: chipi
 */
#include "BLDC.h"

uint8_t SWITCH( bool coils[]){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b25a      	sxtb	r2, r3
 80005ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	b25b      	sxtb	r3, r3
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	b25a      	sxtb	r2, r3
 8000608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060c:	4313      	orrs	r3, r2
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3302      	adds	r3, #2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b25b      	sxtb	r3, r3
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	b25a      	sxtb	r2, r3
 8000624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000628:	4313      	orrs	r3, r2
 800062a:	b25b      	sxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
return connector;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <Phaze_A_ON>:

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);}
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
 8000640:	2100      	movs	r1, #0
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <Phaze_A_ON+0x18>)
 8000644:	f006 fa8e 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 8000648:	2100      	movs	r1, #0
 800064a:	4802      	ldr	r0, [pc, #8]	@ (8000654 <Phaze_A_ON+0x18>)
 800064c:	f004 fdc4 	bl	80051d8 <HAL_TIM_PWM_Start>
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200002d8 	.word	0x200002d8

08000658 <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);}
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
 800065c:	2100      	movs	r1, #0
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <Phaze_A_OFF+0x18>)
 8000660:	f004 feb4 	bl	80053cc <HAL_TIM_PWM_Stop>
 8000664:	2100      	movs	r1, #0
 8000666:	4802      	ldr	r0, [pc, #8]	@ (8000670 <Phaze_A_OFF+0x18>)
 8000668:	f006 f9ba 	bl	80069e0 <HAL_TIMEx_PWMN_Start>
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002d8 	.word	0x200002d8

08000674 <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);}
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
 8000678:	2100      	movs	r1, #0
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <Phaze_A_ZZ+0x18>)
 800067c:	f004 fea6 	bl	80053cc <HAL_TIM_PWM_Stop>
 8000680:	2100      	movs	r1, #0
 8000682:	4802      	ldr	r0, [pc, #8]	@ (800068c <Phaze_A_ZZ+0x18>)
 8000684:	f006 fa6e 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200002d8 	.word	0x200002d8

08000690 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);}
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
 8000694:	2104      	movs	r1, #4
 8000696:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <Phaze_B_ON+0x18>)
 8000698:	f006 fa64 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 800069c:	2104      	movs	r1, #4
 800069e:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <Phaze_B_ON+0x18>)
 80006a0:	f004 fd9a 	bl	80051d8 <HAL_TIM_PWM_Start>
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200002d8 	.word	0x200002d8

080006ac <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); }
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	2104      	movs	r1, #4
 80006b2:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <Phaze_B_OFF+0x18>)
 80006b4:	f004 fe8a 	bl	80053cc <HAL_TIM_PWM_Stop>
 80006b8:	2104      	movs	r1, #4
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Phaze_B_OFF+0x18>)
 80006bc:	f006 f990 	bl	80069e0 <HAL_TIMEx_PWMN_Start>
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200002d8 	.word	0x200002d8

080006c8 <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <Phaze_B_ZZ+0x18>)
 80006d0:	f004 fe7c 	bl	80053cc <HAL_TIM_PWM_Stop>
 80006d4:	2104      	movs	r1, #4
 80006d6:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <Phaze_B_ZZ+0x18>)
 80006d8:	f006 fa44 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200002d8 	.word	0x200002d8

080006e4 <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  }
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	2108      	movs	r1, #8
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <Phaze_C_ON+0x18>)
 80006ec:	f006 fa3a 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 80006f0:	2108      	movs	r1, #8
 80006f2:	4802      	ldr	r0, [pc, #8]	@ (80006fc <Phaze_C_ON+0x18>)
 80006f4:	f004 fd70 	bl	80051d8 <HAL_TIM_PWM_Start>
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200002d8 	.word	0x200002d8

08000700 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);}
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
 8000704:	2108      	movs	r1, #8
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <Phaze_C_OFF+0x18>)
 8000708:	f004 fe60 	bl	80053cc <HAL_TIM_PWM_Stop>
 800070c:	2108      	movs	r1, #8
 800070e:	4802      	ldr	r0, [pc, #8]	@ (8000718 <Phaze_C_OFF+0x18>)
 8000710:	f006 f966 	bl	80069e0 <HAL_TIMEx_PWMN_Start>
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200002d8 	.word	0x200002d8

0800071c <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);}
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
 8000720:	2108      	movs	r1, #8
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <Phaze_C_ZZ+0x18>)
 8000724:	f004 fe52 	bl	80053cc <HAL_TIM_PWM_Stop>
 8000728:	2108      	movs	r1, #8
 800072a:	4802      	ldr	r0, [pc, #8]	@ (8000734 <Phaze_C_ZZ+0x18>)
 800072c:	f006 fa1a 	bl	8006b64 <HAL_TIMEx_PWMN_Stop>
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200002d8 	.word	0x200002d8

08000738 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	4b55      	ldr	r3, [pc, #340]	@ (80008a0 <Registers_handler+0x168>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d021      	beq.n	8000796 <Registers_handler+0x5e>
 8000752:	2300      	movs	r3, #0
 8000754:	82fb      	strh	r3, [r7, #22]
 8000756:	e007      	b.n	8000768 <Registers_handler+0x30>
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	3301      	adds	r3, #1
 8000766:	82fb      	strh	r3, [r7, #22]
 8000768:	8afb      	ldrh	r3, [r7, #22]
 800076a:	2b3f      	cmp	r3, #63	@ 0x3f
 800076c:	d9f4      	bls.n	8000758 <Registers_handler+0x20>
	     RX_2;
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000774:	484b      	ldr	r0, [pc, #300]	@ (80008a4 <Registers_handler+0x16c>)
 8000776:	f003 fa8d 	bl	8003c94 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800077a:	2240      	movs	r2, #64	@ 0x40
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <Registers_handler+0x170>)
 8000780:	f007 feaf 	bl	80084e2 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000784:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <Registers_handler+0x174>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <Registers_handler+0x174>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f022 0208 	bic.w	r2, r2, #8
 8000792:	601a      	str	r2, [r3, #0]
		return;}
 8000794:	e081      	b.n	800089a <Registers_handler+0x162>


	if (Size < 4) {
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d805      	bhi.n	80007a8 <Registers_handler+0x70>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 800079c:	2202      	movs	r2, #2
 800079e:	2103      	movs	r1, #3
 80007a0:	4841      	ldr	r0, [pc, #260]	@ (80008a8 <Registers_handler+0x170>)
 80007a2:	f001 f887 	bl	80018b4 <sendError>

	        return;
 80007a6:	e078      	b.n	800089a <Registers_handler+0x162>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	3b02      	subs	r3, #2
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	440b      	add	r3, r1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	3b02      	subs	r3, #2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f000 ffef 	bl	80017b8 <calcCRC16ModBus>
 80007da:	4603      	mov	r3, r0
 80007dc:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 80007de:	8aba      	ldrh	r2, [r7, #20]
 80007e0:	8a7b      	ldrh	r3, [r7, #18]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d005      	beq.n	80007f2 <Registers_handler+0xba>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 80007e6:	2203      	movs	r2, #3
 80007e8:	2103      	movs	r1, #3
 80007ea:	482f      	ldr	r0, [pc, #188]	@ (80008a8 <Registers_handler+0x170>)
 80007ec:	f001 f862 	bl	80018b4 <sendError>

	        return;
 80007f0:	e053      	b.n	800089a <Registers_handler+0x162>
	    }


                       uint8_t opCode = rxFrame[1];
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 80007f8:	7c7b      	ldrb	r3, [r7, #17]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d845      	bhi.n	800088c <Registers_handler+0x154>
 8000800:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <Registers_handler+0xd0>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000849 	.word	0x08000849
 800080c:	08000857 	.word	0x08000857
 8000810:	08000865 	.word	0x08000865
 8000814:	0800086f 	.word	0x0800086f
 8000818:	0800088d 	.word	0x0800088d
 800081c:	08000879 	.word	0x08000879
 8000820:	0800088d 	.word	0x0800088d
 8000824:	0800088d 	.word	0x0800088d
 8000828:	0800088d 	.word	0x0800088d
 800082c:	0800088d 	.word	0x0800088d
 8000830:	0800088d 	.word	0x0800088d
 8000834:	0800088d 	.word	0x0800088d
 8000838:	0800088d 	.word	0x0800088d
 800083c:	0800088d 	.word	0x0800088d
 8000840:	0800088d 	.word	0x0800088d
 8000844:	08000883 	.word	0x08000883
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <Registers_handler+0x178>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <Registers_handler+0x170>)
 8000850:	f001 f952 	bl	8001af8 <handleReadCoils>
				  			   break;
 8000854:	e021      	b.n	800089a <Registers_handler+0x162>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <Registers_handler+0x17c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <Registers_handler+0x170>)
 800085e:	f001 f9b5 	bl	8001bcc <handleReadDiscreteInputs>
							   break;
 8000862:	e01a      	b.n	800089a <Registers_handler+0x162>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <Registers_handler+0x170>)
 8000868:	f001 f854 	bl	8001914 <handleReadHoldingRegs>
				  			   break;
 800086c:	e015      	b.n	800089a <Registers_handler+0x162>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <Registers_handler+0x170>)
 8000872:	f001 f8c7 	bl	8001a04 <handleReadInputRegs>

				  			   break;
 8000876:	e010      	b.n	800089a <Registers_handler+0x162>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <Registers_handler+0x170>)
 800087c:	f001 fa14 	bl	8001ca8 <handleWriteMulyipleHandlingRegister>

                               break;
 8000880:	e00b      	b.n	800089a <Registers_handler+0x162>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <Registers_handler+0x170>)
 8000886:	f001 fa0f 	bl	8001ca8 <handleWriteMulyipleHandlingRegister>

                               break;
 800088a:	e006      	b.n	800089a <Registers_handler+0x162>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 800088c:	7c7b      	ldrb	r3, [r7, #17]
 800088e:	2201      	movs	r2, #1
 8000890:	4619      	mov	r1, r3
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <Registers_handler+0x170>)
 8000894:	f001 f80e 	bl	80018b4 <sendError>
				  			   break;
 8000898:	bf00      	nop
				  			     }



                          }
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000000 	.word	0x20000000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	20000370 	.word	0x20000370
 80008ac:	200003f8 	.word	0x200003f8
 80008b0:	20000209 	.word	0x20000209
 80008b4:	20000208 	.word	0x20000208

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008bc:	f000 ff38 	bl	8001730 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f001 fe53 	bl	800256a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f8d4 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 fb8a 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008cc:	f000 fb62 	bl	8000f94 <MX_DMA_Init>
  MX_TIM1_Init();
 80008d0:	f000 f9ca 	bl	8000c68 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008d4:	f000 fa8e 	bl	8000df4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80008d8:	f000 fb2c 	bl	8000f34 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80008dc:	f000 f934 	bl	8000b48 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008e0:	f000 f984 	bl	8000bec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TX_2;
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ea:	4855      	ldr	r0, [pc, #340]	@ (8000a40 <main+0x188>)
 80008ec:	f003 f9d2 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_1_ON ;
 80008f0:	2201      	movs	r2, #1
 80008f2:	2108      	movs	r1, #8
 80008f4:	4853      	ldr	r0, [pc, #332]	@ (8000a44 <main+0x18c>)
 80008f6:	f003 f9cd 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_2_ON ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	4851      	ldr	r0, [pc, #324]	@ (8000a44 <main+0x18c>)
 8000900:	f003 f9c8 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_3_ON ;
 8000904:	2201      	movs	r2, #1
 8000906:	2140      	movs	r1, #64	@ 0x40
 8000908:	484e      	ldr	r0, [pc, #312]	@ (8000a44 <main+0x18c>)
 800090a:	f003 f9c3 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_4_ON ;
 800090e:	2201      	movs	r2, #1
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	484c      	ldr	r0, [pc, #304]	@ (8000a44 <main+0x18c>)
 8000914:	f003 f9be 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_5_ON ;
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800091e:	4849      	ldr	r0, [pc, #292]	@ (8000a44 <main+0x18c>)
 8000920:	f003 f9b8 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_6_ON ;
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800092a:	4846      	ldr	r0, [pc, #280]	@ (8000a44 <main+0x18c>)
 800092c:	f003 f9b2 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_7_ON ;
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000936:	4843      	ldr	r0, [pc, #268]	@ (8000a44 <main+0x18c>)
 8000938:	f003 f9ac 	bl	8003c94 <HAL_GPIO_WritePin>
  LED_8_ON ;
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000942:	4840      	ldr	r0, [pc, #256]	@ (8000a44 <main+0x18c>)
 8000944:	f003 f9a6 	bl	8003c94 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094c:	f001 fe3a 	bl	80025c4 <HAL_Delay>
  DRIVE_1_ON;
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <main+0x18c>)
 8000956:	f003 f99d 	bl	8003c94 <HAL_GPIO_WritePin>
  DRIVE_2_ON;
 800095a:	2201      	movs	r2, #1
 800095c:	2102      	movs	r1, #2
 800095e:	4839      	ldr	r0, [pc, #228]	@ (8000a44 <main+0x18c>)
 8000960:	f003 f998 	bl	8003c94 <HAL_GPIO_WritePin>
  DRIVE_3_ON;
 8000964:	2201      	movs	r2, #1
 8000966:	2104      	movs	r1, #4
 8000968:	4836      	ldr	r0, [pc, #216]	@ (8000a44 <main+0x18c>)
 800096a:	f003 f993 	bl	8003c94 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800096e:	2240      	movs	r2, #64	@ 0x40
 8000970:	4935      	ldr	r1, [pc, #212]	@ (8000a48 <main+0x190>)
 8000972:	4836      	ldr	r0, [pc, #216]	@ (8000a4c <main+0x194>)
 8000974:	f007 fdb5 	bl	80084e2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000978:	4b35      	ldr	r3, [pc, #212]	@ (8000a50 <main+0x198>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <main+0x198>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0208 	bic.w	r2, r2, #8
 8000986:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim2);
 8000988:	4832      	ldr	r0, [pc, #200]	@ (8000a54 <main+0x19c>)
 800098a:	f004 fb4b 	bl	8005024 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	4830      	ldr	r0, [pc, #192]	@ (8000a54 <main+0x19c>)
 8000992:	f004 fdfd 	bl	8005590 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000996:	2104      	movs	r1, #4
 8000998:	482e      	ldr	r0, [pc, #184]	@ (8000a54 <main+0x19c>)
 800099a:	f004 fdf9 	bl	8005590 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800099e:	2108      	movs	r1, #8
 80009a0:	482c      	ldr	r0, [pc, #176]	@ (8000a54 <main+0x19c>)
 80009a2:	f004 fdf5 	bl	8005590 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80009a6:	210c      	movs	r1, #12
 80009a8:	482a      	ldr	r0, [pc, #168]	@ (8000a54 <main+0x19c>)
 80009aa:	f004 fdf1 	bl	8005590 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
*/
    LED_1_OFF ;
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <main+0x18c>)
 80009b4:	f003 f96e 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_2_OFF ;
 80009b8:	2200      	movs	r2, #0
 80009ba:	2110      	movs	r1, #16
 80009bc:	4821      	ldr	r0, [pc, #132]	@ (8000a44 <main+0x18c>)
 80009be:	f003 f969 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_3_OFF ;
 80009c2:	2200      	movs	r2, #0
 80009c4:	2140      	movs	r1, #64	@ 0x40
 80009c6:	481f      	ldr	r0, [pc, #124]	@ (8000a44 <main+0x18c>)
 80009c8:	f003 f964 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_4_OFF ;
 80009cc:	2200      	movs	r2, #0
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <main+0x18c>)
 80009d2:	f003 f95f 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_5_OFF ;
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009dc:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <main+0x18c>)
 80009de:	f003 f959 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_6_OFF ;
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e8:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <main+0x18c>)
 80009ea:	f003 f953 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_7_OFF ;
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f4:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <main+0x18c>)
 80009f6:	f003 f94d 	bl	8003c94 <HAL_GPIO_WritePin>
    LED_8_OFF ;
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a00:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <main+0x18c>)
 8000a02:	f003 f947 	bl	8003c94 <HAL_GPIO_WritePin>
  //  DRIVE_1_OFF;
  //  DRIVE_2_OFF;
  //  DRIVE_3_OFF;
    RX_2;
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <main+0x188>)
 8000a0e:	f003 f941 	bl	8003c94 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a12:	f007 fdc1 	bl	8008598 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a16:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <main+0x1a0>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <main+0x1a4>)
 8000a1c:	f007 fe26 	bl	800866c <osThreadNew>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <main+0x1a8>)
 8000a24:	6013      	str	r3, [r2, #0]

  /* creation of ModBusData */
  ModBusDataHandle = osThreadNew(StartTask02, NULL, &ModBusData_attributes);
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <main+0x1ac>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <main+0x1b0>)
 8000a2c:	f007 fe1e 	bl	800866c <osThreadNew>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <main+0x1b4>)
 8000a34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a36:	f007 fde3 	bl	8008600 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3a:	bf00      	nop
 8000a3c:	e7fd      	b.n	8000a3a <main+0x182>
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800
 8000a48:	20000088 	.word	0x20000088
 8000a4c:	20000370 	.word	0x20000370
 8000a50:	200003f8 	.word	0x200003f8
 8000a54:	20000324 	.word	0x20000324
 8000a58:	0800b414 	.word	0x0800b414
 8000a5c:	080014f1 	.word	0x080014f1
 8000a60:	200004b8 	.word	0x200004b8
 8000a64:	0800b438 	.word	0x0800b438
 8000a68:	08001529 	.word	0x08001529
 8000a6c:	200004bc 	.word	0x200004bc

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fbb4 	bl	800b1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	4a29      	ldr	r2, [pc, #164]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa0:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aac:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a24      	ldr	r2, [pc, #144]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000adc:	23d8      	movs	r3, #216	@ 0xd8
 8000ade:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f953 	bl	8003d98 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000af8:	f000 fe58 	bl	80017ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000afc:	f003 f8fc 	bl	8003cf8 <HAL_PWREx_EnableOverDrive>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 fe51 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2107      	movs	r1, #7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fbd9 	bl	80042e0 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b34:	f000 fe3a 	bl	80017ac <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3750      	adds	r7, #80	@ 0x50
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <MX_ADC1_Init+0xa0>)
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000baa:	f001 fd2f 	bl	800260c <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 fdfa 	bl	80017ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000bca:	f001 fd63 	bl	8002694 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd4:	f000 fdea 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000022c 	.word	0x2000022c
 8000be4:	40012000 	.word	0x40012000
 8000be8:	0f000001 	.word	0x0f000001

08000bec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c64 <MX_SPI1_Init+0x78>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_SPI1_Init+0x74>)
 8000c4c:	f004 f8e8 	bl	8004e20 <HAL_SPI_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 fda9 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000274 	.word	0x20000274
 8000c64:	40013000 	.word	0x40013000

08000c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09a      	sub	sp, #104	@ 0x68
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	222c      	movs	r2, #44	@ 0x2c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00a faa2 	bl	800b1ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca8:	4b50      	ldr	r3, [pc, #320]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000caa:	4a51      	ldr	r2, [pc, #324]	@ (8000df0 <MX_TIM1_Init+0x188>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8000cae:	4b4f      	ldr	r3, [pc, #316]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000cba:	4b4c      	ldr	r3, [pc, #304]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cbc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc8:	4b48      	ldr	r3, [pc, #288]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cd4:	4845      	ldr	r0, [pc, #276]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cd6:	f004 f94e 	bl	8004f76 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f000 fd64 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cee:	4619      	mov	r1, r3
 8000cf0:	483e      	ldr	r0, [pc, #248]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000cf2:	f005 f855 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cfc:	f000 fd56 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d00:	483a      	ldr	r0, [pc, #232]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000d02:	f004 fa07 	bl	8005114 <HAL_TIM_PWM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d0c:	f000 fd4e 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4832      	ldr	r0, [pc, #200]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000d24:	f005 ff7c 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d2e:	f000 fd3d 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	@ 0x60
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d44:	2304      	movs	r3, #4
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4824      	ldr	r0, [pc, #144]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000d5a:	f004 ff0d 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000d64:	f000 fd22 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481e      	ldr	r0, [pc, #120]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000d72:	f004 ff01 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000d7c:	f000 fd16 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d84:	2208      	movs	r2, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	4818      	ldr	r0, [pc, #96]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000d8a:	f004 fef5 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000d94:	f000 fd0a 	bl	80017ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000da4:	23ff      	movs	r3, #255	@ 0xff
 8000da6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000dce:	f005 ffb5 	bl	8006d3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000dd8:	f000 fce8 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_TIM1_Init+0x184>)
 8000dde:	f001 f957 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3768      	adds	r7, #104	@ 0x68
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200002d8 	.word	0x200002d8
 8000df0:	40010000 	.word	0x40010000

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e20:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e28:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e34:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e48:	4839      	ldr	r0, [pc, #228]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e4a:	f004 f894 	bl	8004f76 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000e54:	f000 fcaa 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	4619      	mov	r1, r3
 8000e64:	4832      	ldr	r0, [pc, #200]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e66:	f004 ff9b 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e70:	f000 fc9c 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e74:	482e      	ldr	r0, [pc, #184]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e76:	f004 fb29 	bl	80054cc <HAL_TIM_IC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e80:	f000 fc94 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4827      	ldr	r0, [pc, #156]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000e94:	f005 fec4 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000e9e:	f000 fc85 	bl	80017ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 13;
 8000eae:	230d      	movs	r3, #13
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481d      	ldr	r0, [pc, #116]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000eba:	f004 fdc0 	bl	8005a3e <HAL_TIM_IC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000ec4:	f000 fc72 	bl	80017ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000edc:	f004 fdaf 	bl	8005a3e <HAL_TIM_IC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000ee6:	f000 fc61 	bl	80017ac <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 13;
 8000eee:	230d      	movs	r3, #13
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000efa:	f004 fda0 	bl	8005a3e <HAL_TIM_IC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8000f04:	f000 fc52 	bl	80017ac <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	220c      	movs	r2, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <MX_TIM2_Init+0x13c>)
 8000f18:	f004 fd91 	bl	8005a3e <HAL_TIM_IC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x132>
  {
    Error_Handler();
 8000f22:	f000 fc43 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3730      	adds	r7, #48	@ 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000324 	.word	0x20000324

08000f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	f005 ffa1 	bl	8006ebe <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 fc13 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000370 	.word	0x20000370
 8000f90:	40011000 	.word	0x40011000

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	203a      	movs	r0, #58	@ 0x3a
 8000fb8:	f001 fe98 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fbc:	203a      	movs	r0, #58	@ 0x3a
 8000fbe:	f001 feb1 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	2046      	movs	r0, #70	@ 0x46
 8000fc8:	f001 fe90 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fcc:	2046      	movs	r0, #70	@ 0x46
 8000fce:	f001 fea9 	bl	8002d24 <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	4b41      	ldr	r3, [pc, #260]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a40      	ldr	r2, [pc, #256]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <MX_GPIO_Init+0x11c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a34      	ldr	r2, [pc, #208]	@ (80010fc <MX_GPIO_Init+0x11c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a2e      	ldr	r2, [pc, #184]	@ (80010fc <MX_GPIO_Init+0x11c>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <MX_GPIO_Init+0x11c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 8001056:	2200      	movs	r2, #0
 8001058:	f640 71df 	movw	r1, #4063	@ 0xfdf
 800105c:	4828      	ldr	r0, [pc, #160]	@ (8001100 <MX_GPIO_Init+0x120>)
 800105e:	f002 fe19 	bl	8003c94 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 8001068:	4826      	ldr	r0, [pc, #152]	@ (8001104 <MX_GPIO_Init+0x124>)
 800106a:	f002 fe13 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Port_1_Pin Port_2_Pin Port_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin LED_7_Pin LED_8_Pin */
  GPIO_InitStruct.Pin = Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 800106e:	f640 73df 	movw	r3, #4063	@ 0xfdf
 8001072:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	481e      	ldr	r0, [pc, #120]	@ (8001100 <MX_GPIO_Init+0x120>)
 8001088:	f002 fb54 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 800108c:	2307      	movs	r3, #7
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001090:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4818      	ldr	r0, [pc, #96]	@ (8001104 <MX_GPIO_Init+0x124>)
 80010a2:	f002 fb47 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_3_Pin DIRECT_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin;
 80010a6:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_GPIO_Init+0x124>)
 80010c0:	f002 fb38 	bl	8003734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	2006      	movs	r0, #6
 80010ca:	f001 fe0f 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ce:	2006      	movs	r0, #6
 80010d0:	f001 fe28 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	2007      	movs	r0, #7
 80010da:	f001 fe07 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010de:	2007      	movs	r0, #7
 80010e0:	f001 fe20 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2105      	movs	r1, #5
 80010e8:	2008      	movs	r0, #8
 80010ea:	f001 fdff 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ee:	2008      	movs	r0, #8
 80010f0:	f001 fe18 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020800 	.word	0x40020800
 8001104:	40020400 	.word	0x40020400

08001108 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */


uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	b29b      	uxth	r3, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <Reset_USART1>:



void Reset_USART1(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_4_ON;
 8001134:	2201      	movs	r2, #1
 8001136:	2180      	movs	r1, #128	@ 0x80
 8001138:	4826      	ldr	r0, [pc, #152]	@ (80011d4 <Reset_USART1+0xa4>)
 800113a:	f002 fdab 	bl	8003c94 <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 800113e:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <Reset_USART1+0xa8>)
 8001140:	f005 ffc4 	bl	80070cc <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001144:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <Reset_USART1+0xac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <Reset_USART1+0x22>
        HAL_DMA_Abort(&hdma_usart1_rx);
 800114c:	4823      	ldr	r0, [pc, #140]	@ (80011dc <Reset_USART1+0xac>)
 800114e:	f001 ffe9 	bl	8003124 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <Reset_USART1+0xb0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <Reset_USART1+0x30>
        HAL_DMA_Abort(&hdma_usart1_tx);
 800115a:	4821      	ldr	r0, [pc, #132]	@ (80011e0 <Reset_USART1+0xb0>)
 800115c:	f001 ffe2 	bl	8003124 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <Reset_USART1+0xa8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <Reset_USART1+0xa8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800116e:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <Reset_USART1+0xa8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2208      	movs	r2, #8
 8001176:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <Reset_USART1+0xa8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Reset_USART1+0xb4>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <Reset_USART1+0xb4>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_Delay(1); // Задержка для завершения сброса
 800118c:	2001      	movs	r0, #1
 800118e:	f001 fa19 	bl	80025c4 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <Reset_USART1+0xb4>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <Reset_USART1+0xb4>)
 8001198:	f023 0310 	bic.w	r3, r3, #16
 800119c:	6253      	str	r3, [r2, #36]	@ 0x24

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <Reset_USART1+0xa8>)
 80011a0:	f005 fedb 	bl	8006f5a <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80011a4:	f7ff fec6 	bl	8000f34 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80011a8:	f7ff fef4 	bl	8000f94 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80011ac:	2240      	movs	r2, #64	@ 0x40
 80011ae:	490e      	ldr	r1, [pc, #56]	@ (80011e8 <Reset_USART1+0xb8>)
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <Reset_USART1+0xa8>)
 80011b2:	f007 f996 	bl	80084e2 <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <Reset_USART1+0xac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <Reset_USART1+0xac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0208 	bic.w	r2, r2, #8
 80011c4:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 80011c6:	f001 f9f1 	bl	80025ac <HAL_GetTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <Reset_USART1+0xbc>)
 80011ce:	6013      	str	r3, [r2, #0]


}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020800 	.word	0x40020800
 80011d8:	20000370 	.word	0x20000370
 80011dc:	200003f8 	.word	0x200003f8
 80011e0:	20000458 	.word	0x20000458
 80011e4:	40023800 	.word	0x40023800
 80011e8:	20000088 	.word	0x20000088
 80011ec:	20000084 	.word	0x20000084

080011f0 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	    RX_2;
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fe:	4813      	ldr	r0, [pc, #76]	@ (800124c <HAL_UART_TxCpltCallback+0x5c>)
 8001200:	f002 fd48 	bl	8003c94 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001204:	f001 f9d2 	bl	80025ac <HAL_GetTick>
 8001208:	4603      	mov	r3, r0
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_UART_TxCpltCallback+0x60>)
 800120c:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800120e:	2240      	movs	r2, #64	@ 0x40
 8001210:	4910      	ldr	r1, [pc, #64]	@ (8001254 <HAL_UART_TxCpltCallback+0x64>)
 8001212:	4811      	ldr	r0, [pc, #68]	@ (8001258 <HAL_UART_TxCpltCallback+0x68>)
 8001214:	f007 f965 	bl	80084e2 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_UART_TxCpltCallback+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_UART_TxCpltCallback+0x68>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0210 	orr.w	r2, r2, #16
 8001226:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_UART_TxCpltCallback+0x6c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_UART_TxCpltCallback+0x6c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0208 	bic.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
       LED_4_OFF;
 8001238:	2200      	movs	r2, #0
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <HAL_UART_TxCpltCallback+0x70>)
 800123e:	f002 fd29 	bl	8003c94 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400
 8001250:	20000084 	.word	0x20000084
 8001254:	20000088 	.word	0x20000088
 8001258:	20000370 	.word	0x20000370
 800125c:	200003f8 	.word	0x200003f8
 8001260:	40020800 	.word	0x40020800

08001264 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d115      	bne.n	80012a6 <HAL_UARTEx_RxEventCallback+0x42>
	{

		lastActivityTime = HAL_GetTick();
 800127a:	f001 f997 	bl	80025ac <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_UARTEx_RxEventCallback+0x50>)
 8001282:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_UARTEx_RxEventCallback+0x54>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_UARTEx_RxEventCallback+0x54>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0210 	bic.w	r2, r2, #16
 8001292:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <HAL_UARTEx_RxEventCallback+0x58>)
 8001296:	f001 ff45 	bl	8003124 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800129e:	4909      	ldr	r1, [pc, #36]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x60>)
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x64>)
 80012a2:	f7ff fa49 	bl	8000738 <Registers_handler>

	}
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40011000 	.word	0x40011000
 80012b4:	20000084 	.word	0x20000084
 80012b8:	20000370 	.word	0x20000370
 80012bc:	200003f8 	.word	0x200003f8
 80012c0:	200001e8 	.word	0x200001e8
 80012c4:	200001c8 	.word	0x200001c8
 80012c8:	20000088 	.word	0x20000088

080012cc <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80012d0:	f001 f96c 	bl	80025ac <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <Check_USART1_Timeout+0x2c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80012e0:	d307      	bcc.n	80012f2 <Check_USART1_Timeout+0x26>
     {
         Reset_USART1();
 80012e2:	f7ff ff25 	bl	8001130 <Reset_USART1>
         RX_2;
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <Check_USART1_Timeout+0x30>)
 80012ee:	f002 fcd1 	bl	8003c94 <HAL_GPIO_WritePin>
     }
 }
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000084 	.word	0x20000084
 80012fc:	40020400 	.word	0x40020400

08001300 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == HALL_A_Pin) // Прерывание по PB0
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d12c      	bne.n	800136a <HAL_GPIO_EXTI_Callback+0x6a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 8001310:	2101      	movs	r1, #1
 8001312:	4848      	ldr	r0, [pc, #288]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 8001314:	f002 fca6 	bl	8003c64 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10f      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0x3e>
        {
            LED_1_ON;
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	4845      	ldr	r0, [pc, #276]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 8001324:	f002 fcb6 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 0;
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800132e:	4843      	ldr	r0, [pc, #268]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001330:	f7ff f950 	bl	80005d4 <SWITCH>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff72 	bl	8000220 <BLDC_MotorCommutation>
 800133c:	e015      	b.n	800136a <HAL_GPIO_EXTI_Callback+0x6a>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 800133e:	2101      	movs	r1, #1
 8001340:	483c      	ldr	r0, [pc, #240]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 8001342:	f002 fc8f 	bl	8003c64 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10e      	bne.n	800136a <HAL_GPIO_EXTI_Callback+0x6a>
        {
            LED_1_OFF;
 800134c:	2200      	movs	r2, #0
 800134e:	2108      	movs	r1, #8
 8001350:	4839      	ldr	r0, [pc, #228]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 8001352:	f002 fc9f 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 1;
 8001356:	4b39      	ldr	r3, [pc, #228]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800135c:	4837      	ldr	r0, [pc, #220]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 800135e:	f7ff f939 	bl	80005d4 <SWITCH>
 8001362:	4603      	mov	r3, r0
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff5b 	bl	8000220 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_B_Pin) // Прерывание по PB1
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d12c      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0xca>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 8001370:	2102      	movs	r1, #2
 8001372:	4830      	ldr	r0, [pc, #192]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 8001374:	f002 fc76 	bl	8003c64 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10f      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x9e>
        {
            LED_2_ON;
 800137e:	2201      	movs	r2, #1
 8001380:	2110      	movs	r1, #16
 8001382:	482d      	ldr	r0, [pc, #180]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 8001384:	f002 fc86 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 0;
 8001388:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 800138a:	2200      	movs	r2, #0
 800138c:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800138e:	482b      	ldr	r0, [pc, #172]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001390:	f7ff f920 	bl	80005d4 <SWITCH>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff42 	bl	8000220 <BLDC_MotorCommutation>
 800139c:	e015      	b.n	80013ca <HAL_GPIO_EXTI_Callback+0xca>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 800139e:	2102      	movs	r1, #2
 80013a0:	4824      	ldr	r0, [pc, #144]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 80013a2:	f002 fc5f 	bl	8003c64 <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10e      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0xca>
        {
            LED_2_OFF;
 80013ac:	2200      	movs	r2, #0
 80013ae:	2110      	movs	r1, #16
 80013b0:	4821      	ldr	r0, [pc, #132]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 80013b2:	f002 fc6f 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013bc:	481f      	ldr	r0, [pc, #124]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013be:	f7ff f909 	bl	80005d4 <SWITCH>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff2b 	bl	8000220 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_C_Pin) // Прерывание по PB2
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d12c      	bne.n	800142a <HAL_GPIO_EXTI_Callback+0x12a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 80013d0:	2104      	movs	r1, #4
 80013d2:	4818      	ldr	r0, [pc, #96]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 80013d4:	f002 fc46 	bl	8003c64 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10f      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0xfe>
        {
            LED_3_ON;
 80013de:	2201      	movs	r2, #1
 80013e0:	2140      	movs	r1, #64	@ 0x40
 80013e2:	4815      	ldr	r0, [pc, #84]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 80013e4:	f002 fc56 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 0;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013ee:	4813      	ldr	r0, [pc, #76]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013f0:	f7ff f8f0 	bl	80005d4 <SWITCH>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff12 	bl	8000220 <BLDC_MotorCommutation>
            LED_3_OFF;
            BLDC_STATE[2] = 1;
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
        }
    }
}
 80013fc:	e015      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x12a>
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 80013fe:	2104      	movs	r1, #4
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <HAL_GPIO_EXTI_Callback+0x134>)
 8001402:	f002 fc2f 	bl	8003c64 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10e      	bne.n	800142a <HAL_GPIO_EXTI_Callback+0x12a>
            LED_3_OFF;
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	4809      	ldr	r0, [pc, #36]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x138>)
 8001412:	f002 fc3f 	bl	8003c94 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 1;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001418:	2201      	movs	r2, #1
 800141a:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <HAL_GPIO_EXTI_Callback+0x13c>)
 800141e:	f7ff f8d9 	bl	80005d4 <SWITCH>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fefb 	bl	8000220 <BLDC_MotorCommutation>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	20000224 	.word	0x20000224

08001440 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001450:	d139      	bne.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x86>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7f1b      	ldrb	r3, [r3, #28]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d12c      	bne.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x74>
        {



		  period = 0;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
		      TIM2->CNT = 0;
 8001460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
		      period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001468:	2104      	movs	r1, #4
 800146a:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x94>)
 800146c:	f004 fd62 	bl	8005f34 <HAL_TIM_ReadCapturedValue>
 8001470:	4603      	mov	r3, r0
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001474:	6013      	str	r3, [r2, #0]

		      // Правильные константы для 216 MHz и 8 магнитов:
		      rpm = 1620000000 / period/2;  // 216M * 60 / 8 = 1620M
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x98>)
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	4a16      	ldr	r2, [pc, #88]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001482:	6013      	str	r3, [r2, #0]
		      f = 27000000 / period/2;      // 216M / 8 = 27M
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a15      	ldr	r2, [pc, #84]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001492:	801a      	strh	r2, [r3, #0]

		      // Корректируем граничные значения:
		      if((period > 1620000000) || (period <= 2160)) {  // period <= 2160 = ~100,000 RPM
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d804      	bhi.n	80014a8 <HAL_TIM_IC_CaptureCallback+0x68>
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f5b3 6f07 	cmp.w	r3, #2160	@ 0x870
 80014a6:	d805      	bhi.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x74>
		          rpm = 0;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x9c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
		          f = 0;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
		      }

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7f1b      	ldrb	r3, [r3, #28]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d104      	bne.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x86>
        {
        	 moove = HAL_GetTick();
 80014bc:	f001 f876 	bl	80025ac <HAL_GetTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0xac>)
 80014c4:	6013      	str	r3, [r2, #0]
        }
    }



}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000210 	.word	0x20000210
 80014d4:	20000324 	.word	0x20000324
 80014d8:	30479e80 	.word	0x30479e80
 80014dc:	20000218 	.word	0x20000218
 80014e0:	00cdfe60 	.word	0x00cdfe60
 80014e4:	20000214 	.word	0x20000214
 80014e8:	608f3d00 	.word	0x608f3d00
 80014ec:	2000021c 	.word	0x2000021c

080014f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Check_USART1_Timeout(); // Добавьте эту строку
 80014f8:	f7ff fee8 	bl	80012cc <Check_USART1_Timeout>
	  if((HAL_GetTick()-moove)>=ROTATE_TIME){rpm=0;}
 80014fc:	f001 f856 	bl	80025ac <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <StartDefaultTask+0x30>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800150c:	d302      	bcc.n	8001514 <StartDefaultTask+0x24>
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <StartDefaultTask+0x34>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	      osDelay(2000); // Проверяем каждые 100 мс (можно настроить)
 8001514:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001518:	f007 f94e 	bl	80087b8 <osDelay>
	  Check_USART1_Timeout(); // Добавьте эту строку
 800151c:	e7ec      	b.n	80014f8 <StartDefaultTask+0x8>
 800151e:	bf00      	nop
 8001520:	2000021c 	.word	0x2000021c
 8001524:	20000218 	.word	0x20000218

08001528 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if(auto_mode==0){
 8001530:	4b72      	ldr	r3, [pc, #456]	@ (80016fc <StartTask02+0x1d4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d021      	beq.n	8001582 <StartTask02+0x5a>

	         pwm=rcv_data_reg[0];
 800153e:	4b70      	ldr	r3, [pc, #448]	@ (8001700 <StartTask02+0x1d8>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <StartTask02+0x1dc>)
 8001546:	601a      	str	r2, [r3, #0]
	         if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 8001548:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <StartTask02+0x1e0>)
 800154a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154c:	4b6d      	ldr	r3, [pc, #436]	@ (8001704 <StartTask02+0x1dc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d803      	bhi.n	800155c <StartTask02+0x34>
 8001554:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <StartTask02+0x1e0>)
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	4a6a      	ldr	r2, [pc, #424]	@ (8001704 <StartTask02+0x1dc>)
 800155a:	6013      	str	r3, [r2, #0]
	         if(pwm<=0){pwm=0;}
 800155c:	4b69      	ldr	r3, [pc, #420]	@ (8001704 <StartTask02+0x1dc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <StartTask02+0x42>
 8001564:	4b67      	ldr	r3, [pc, #412]	@ (8001704 <StartTask02+0x1dc>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

	         TIM1->CCR1=pwm;
 800156a:	4a67      	ldr	r2, [pc, #412]	@ (8001708 <StartTask02+0x1e0>)
 800156c:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <StartTask02+0x1dc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6353      	str	r3, [r2, #52]	@ 0x34
	         TIM1->CCR2=pwm;
 8001572:	4a65      	ldr	r2, [pc, #404]	@ (8001708 <StartTask02+0x1e0>)
 8001574:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <StartTask02+0x1dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6393      	str	r3, [r2, #56]	@ 0x38
	         TIM1->CCR3=pwm;
 800157a:	4a63      	ldr	r2, [pc, #396]	@ (8001708 <StartTask02+0x1e0>)
 800157c:	4b61      	ldr	r3, [pc, #388]	@ (8001704 <StartTask02+0x1dc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	63d3      	str	r3, [r2, #60]	@ 0x3c

		  }

		  if(auto_mode==1){
 8001582:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <StartTask02+0x1d4>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <StartTask02+0xc4>

			  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 800158a:	f001 f80f 	bl	80025ac <HAL_GetTick>
 800158e:	4603      	mov	r3, r0
 8001590:	4a5e      	ldr	r2, [pc, #376]	@ (800170c <StartTask02+0x1e4>)
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800159a:	d327      	bcc.n	80015ec <StartTask02+0xc4>
	           pwm=pwm+5;
 800159c:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <StartTask02+0x1dc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3305      	adds	r3, #5
 80015a2:	4a58      	ldr	r2, [pc, #352]	@ (8001704 <StartTask02+0x1dc>)
 80015a4:	6013      	str	r3, [r2, #0]
	           if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 80015a6:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <StartTask02+0x1e0>)
 80015a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015aa:	4b56      	ldr	r3, [pc, #344]	@ (8001704 <StartTask02+0x1dc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d803      	bhi.n	80015ba <StartTask02+0x92>
 80015b2:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <StartTask02+0x1e0>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	4a53      	ldr	r2, [pc, #332]	@ (8001704 <StartTask02+0x1dc>)
 80015b8:	6013      	str	r3, [r2, #0]
	           if(pwm<=0){pwm=0;}
 80015ba:	4b52      	ldr	r3, [pc, #328]	@ (8001704 <StartTask02+0x1dc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <StartTask02+0xa0>
 80015c2:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <StartTask02+0x1dc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

	           TIM1->CCR1=pwm;
 80015c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001708 <StartTask02+0x1e0>)
 80015ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001704 <StartTask02+0x1dc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6353      	str	r3, [r2, #52]	@ 0x34
	           TIM1->CCR2=pwm;
 80015d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001708 <StartTask02+0x1e0>)
 80015d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001704 <StartTask02+0x1dc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6393      	str	r3, [r2, #56]	@ 0x38
	           TIM1->CCR3=pwm;
 80015d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001708 <StartTask02+0x1e0>)
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <StartTask02+0x1dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	63d3      	str	r3, [r2, #60]	@ 0x3c


			  auto_mode_timer=HAL_GetTick();}
 80015e0:	f000 ffe4 	bl	80025ac <HAL_GetTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b48      	ldr	r3, [pc, #288]	@ (800170c <StartTask02+0x1e4>)
 80015ea:	801a      	strh	r2, [r3, #0]
		  }



	TIM1->ARR= rcv_data_reg[4];
 80015ec:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <StartTask02+0x1d8>)
 80015ee:	891a      	ldrh	r2, [r3, #8]
 80015f0:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <StartTask02+0x1e0>)
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 80015f4:	4b46      	ldr	r3, [pc, #280]	@ (8001710 <StartTask02+0x1e8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	4843      	ldr	r0, [pc, #268]	@ (8001708 <StartTask02+0x1e0>)
 80015fc:	f7ff fd84 	bl	8001108 <calculateTimerFrequency>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <StartTask02+0x1ec>)
 8001606:	801a      	strh	r2, [r3, #0]
	data_reg[2]=rpm;
 8001608:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <StartTask02+0x1f0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <StartTask02+0x1ec>)
 8001610:	809a      	strh	r2, [r3, #4]
    osDelay(100);
 8001612:	2064      	movs	r0, #100	@ 0x64
 8001614:	f007 f8d0 	bl	80087b8 <osDelay>
    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 8001618:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <StartTask02+0x1e8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	483a      	ldr	r0, [pc, #232]	@ (8001708 <StartTask02+0x1e0>)
 8001620:	f7ff fd72 	bl	8001108 <calculateTimerFrequency>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <StartTask02+0x1ec>)
 800162a:	801a      	strh	r2, [r3, #0]
   	data_reg[1]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <StartTask02+0x1e8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4835      	ldr	r0, [pc, #212]	@ (8001708 <StartTask02+0x1e0>)
 8001634:	f7ff fd68 	bl	8001108 <calculateTimerFrequency>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b35      	ldr	r3, [pc, #212]	@ (8001714 <StartTask02+0x1ec>)
 800163e:	805a      	strh	r2, [r3, #2]
   	    data_reg[2]=rpm;       //Скорость об.мин
 8001640:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <StartTask02+0x1f0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b33      	ldr	r3, [pc, #204]	@ (8001714 <StartTask02+0x1ec>)
 8001648:	809a      	strh	r2, [r3, #4]
   	    data_reg[3]=TIM1->ARR; //Период таймера 1
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <StartTask02+0x1e0>)
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <StartTask02+0x1ec>)
 8001652:	80da      	strh	r2, [r3, #6]
   	    data_reg[4]=pwm;       //Значение ШИМ
 8001654:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <StartTask02+0x1dc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <StartTask02+0x1ec>)
 800165c:	811a      	strh	r2, [r3, #8]


    coil_1= (rcv_data_reg[7]>>1)&0x01;
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <StartTask02+0x1d8>)
 8001660:	89db      	ldrh	r3, [r3, #14]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <StartTask02+0x1f4>)
 8001676:	701a      	strb	r2, [r3, #0]
    coil_2= (rcv_data_reg[7]>>2)&0x01;
 8001678:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <StartTask02+0x1d8>)
 800167a:	89db      	ldrh	r3, [r3, #14]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	b29b      	uxth	r3, r3
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <StartTask02+0x1f8>)
 8001690:	701a      	strb	r2, [r3, #0]
    coil_3= (rcv_data_reg[7]>>3)&0x01;
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <StartTask02+0x1d8>)
 8001694:	89db      	ldrh	r3, [r3, #14]
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	b29b      	uxth	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <StartTask02+0x1fc>)
 80016aa:	701a      	strb	r2, [r3, #0]
    coil_4= (rcv_data_reg[7]>>4)&0x01;
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <StartTask02+0x1d8>)
 80016ae:	89db      	ldrh	r3, [r3, #14]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <StartTask02+0x200>)
 80016c4:	701a      	strb	r2, [r3, #0]
 auto_mode= (rcv_data_reg[7]>>5)&0x01;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <StartTask02+0x1d8>)
 80016c8:	89db      	ldrh	r3, [r3, #14]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <StartTask02+0x1d4>)
 80016de:	701a      	strb	r2, [r3, #0]
    pwr_on= (rcv_data_reg[7]>>6)&0x01;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <StartTask02+0x1d8>)
 80016e2:	89db      	ldrh	r3, [r3, #14]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <StartTask02+0x204>)
 80016f8:	701a      	strb	r2, [r3, #0]
	  if(auto_mode==0){
 80016fa:	e719      	b.n	8001530 <StartTask02+0x8>
 80016fc:	20000227 	.word	0x20000227
 8001700:	200001e8 	.word	0x200001e8
 8001704:	2000020c 	.word	0x2000020c
 8001708:	40010000 	.word	0x40010000
 800170c:	2000020a 	.word	0x2000020a
 8001710:	20000004 	.word	0x20000004
 8001714:	200001c8 	.word	0x200001c8
 8001718:	20000218 	.word	0x20000218
 800171c:	20000220 	.word	0x20000220
 8001720:	20000221 	.word	0x20000221
 8001724:	20000222 	.word	0x20000222
 8001728:	20000223 	.word	0x20000223
 800172c:	20000228 	.word	0x20000228

08001730 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001742:	f001 fb0b 	bl	8002d5c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800174a:	2300      	movs	r3, #0
 800174c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001752:	231f      	movs	r3, #31
 8001754:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001756:	2387      	movs	r3, #135	@ 0x87
 8001758:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800175a:	2300      	movs	r3, #0
 800175c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800175e:	2300      	movs	r3, #0
 8001760:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001772:	463b      	mov	r3, r7
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fb29 	bl	8002dcc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800177a:	2004      	movs	r0, #4
 800177c:	f001 fb06 	bl	8002d8c <HAL_MPU_Enable>

}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800179a:	f000 fef3 	bl	8002584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40002000 	.word	0x40002000

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <Error_Handler+0x8>

080017b8 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80017c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c8:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	74fb      	strb	r3, [r7, #19]
 80017ce:	e022      	b.n	8001816 <calcCRC16ModBus+0x5e>
		temp = temp ^ buffer[i];
 80017d0:	7cfb      	ldrb	r3, [r7, #19]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4053      	eors	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80017e0:	2301      	movs	r3, #1
 80017e2:	74bb      	strb	r3, [r7, #18]
 80017e4:	e011      	b.n	800180a <calcCRC16ModBus+0x52>
			flag = temp & 0x0001;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
			if (flag)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <calcCRC16ModBus+0x4c>
				temp ^= 0xA001;
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001800:	4053      	eors	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001804:	7cbb      	ldrb	r3, [r7, #18]
 8001806:	3301      	adds	r3, #1
 8001808:	74bb      	strb	r3, [r7, #18]
 800180a:	7cbb      	ldrb	r3, [r7, #18]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d9ea      	bls.n	80017e6 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	3301      	adds	r3, #1
 8001814:	74fb      	strb	r3, [r7, #19]
 8001816:	7cfa      	ldrb	r2, [r7, #19]
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3d8      	bcc.n	80017d0 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b29b      	uxth	r3, r3
 8001832:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	b29b      	uxth	r3, r3

}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4619      	mov	r1, r3
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f7ff ffae 	bl	80017b8 <calcCRC16ModBus>
 800185c:	4603      	mov	r3, r0
 800185e:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3301      	adds	r3, #1
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	8afa      	ldrh	r2, [r7, #22]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 800186e:	8afb      	ldrh	r3, [r7, #22]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b299      	uxth	r1, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]

    TX_2;
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001884:	480a      	ldr	r0, [pc, #40]	@ (80018b0 <sendModBusRequest+0x6c>)
 8001886:	f002 fa05 	bl	8003c94 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	b29b      	uxth	r3, r3
 800188e:	3302      	adds	r3, #2
 8001890:	b29b      	uxth	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f005 fb9c 	bl	8006fd4 <HAL_UART_Transmit_DMA>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <sendModBusRequest+0x62>

    //	LED_1_OFF;

	        Error_Handler();
 80018a2:	f7ff ff83 	bl	80017ac <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020400 	.word	0x40020400

080018b4 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
 80018c0:	4613      	mov	r3, r2
 80018c2:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <sendError+0x5c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff6a 	bl	80017b8 <calcCRC16ModBus>
 80018e4:	4603      	mov	r3, r0
 80018e6:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2205      	movs	r2, #5
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff9f 	bl	8001844 <sendModBusRequest>

}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000

08001914 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800191e:	4b36      	ldr	r3, [pc, #216]	@ (80019f8 <handleReadHoldingRegs+0xe4>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	b21b      	sxth	r3, r3
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <handleReadHoldingRegs+0xe4>)
 800192a:	78db      	ldrb	r3, [r3, #3]
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001934:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <handleReadHoldingRegs+0xe4>)
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	b21b      	sxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <handleReadHoldingRegs+0xe4>)
 8001940:	795b      	ldrb	r3, [r3, #5]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 800194a:	8afa      	ldrh	r2, [r7, #22]
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	4413      	add	r3, r2
 8001950:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 8001952:	897b      	ldrh	r3, [r7, #10]
 8001954:	2b7d      	cmp	r3, #125	@ 0x7d
 8001956:	d905      	bls.n	8001964 <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001958:	2103      	movs	r1, #3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fa26 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001960:	2300      	movs	r3, #0
 8001962:	e045      	b.n	80019f0 <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	2b3c      	cmp	r3, #60	@ 0x3c
 8001968:	d905      	bls.n	8001976 <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800196a:	2102      	movs	r1, #2
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fa1d 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001972:	2300      	movs	r3, #0
 8001974:	e03c      	b.n	80019f0 <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <handleReadHoldingRegs+0xe8>)
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 800197c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 800197e:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <handleReadHoldingRegs+0xe4>)
 8001980:	785a      	ldrb	r2, [r3, #1]
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 8001984:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 8001990:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001992:	2303      	movs	r3, #3
 8001994:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e01d      	b.n	80019d8 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800199c:	8afb      	ldrh	r3, [r7, #22]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b299      	uxth	r1, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	613a      	str	r2, [r7, #16]
 80019b0:	b2c9      	uxtb	r1, r1
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 80019b4:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80019b6:	8afb      	ldrh	r3, [r7, #22]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	8819      	ldrh	r1, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	613a      	str	r2, [r7, #16]
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 80019ca:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80019cc:	8afb      	ldrh	r3, [r7, #22]
 80019ce:	3301      	adds	r3, #1
 80019d0:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbdd      	blt.n	800199c <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4906      	ldr	r1, [pc, #24]	@ (8001a00 <handleReadHoldingRegs+0xec>)
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff2b 	bl	8001844 <sendModBusRequest>
	return 1;
 80019ee:	2301      	movs	r3, #1

}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000088 	.word	0x20000088
 80019fc:	20000000 	.word	0x20000000
 8001a00:	200000c8 	.word	0x200000c8

08001a04 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <handleReadInputRegs+0xe8>)
 8001a10:	789b      	ldrb	r3, [r3, #2]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <handleReadInputRegs+0xe8>)
 8001a1a:	78db      	ldrb	r3, [r3, #3]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001a24:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <handleReadInputRegs+0xe8>)
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <handleReadInputRegs+0xe8>)
 8001a30:	795b      	ldrb	r3, [r3, #5]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001a3a:	8afa      	ldrh	r2, [r7, #22]
 8001a3c:	897b      	ldrh	r3, [r7, #10]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	2b7d      	cmp	r3, #125	@ 0x7d
 8001a4a:	d905      	bls.n	8001a58 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f9ac 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e045      	b.n	8001ae4 <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a5c:	d905      	bls.n	8001a6a <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001a5e:	2102      	movs	r1, #2
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f9a3 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e03c      	b.n	8001ae4 <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <handleReadInputRegs+0xec>)
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001a70:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <handleReadInputRegs+0xe8>)
 8001a74:	785a      	ldrb	r2, [r3, #1]
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001a78:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001a84:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001a86:	2303      	movs	r3, #3
 8001a88:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e01d      	b.n	8001acc <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	613a      	str	r2, [r7, #16]
 8001aa4:	b2c9      	uxtb	r1, r1
 8001aa6:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001aa8:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001aaa:	8afb      	ldrh	r3, [r7, #22]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	8819      	ldrh	r1, [r3, #0]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	613a      	str	r2, [r7, #16]
 8001aba:	b2c9      	uxtb	r1, r1
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001abe:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001ac0:	8afb      	ldrh	r3, [r7, #22]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbdd      	blt.n	8001a90 <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4906      	ldr	r1, [pc, #24]	@ (8001af4 <handleReadInputRegs+0xf0>)
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff feb1 	bl	8001844 <sendModBusRequest>
	return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000088 	.word	0x20000088
 8001af0:	20000000 	.word	0x20000000
 8001af4:	200000c8 	.word	0x200000c8

08001af8 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <handleReadCoils+0xc8>)
 8001b04:	789b      	ldrb	r3, [r3, #2]
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <handleReadCoils+0xc8>)
 8001b0e:	78db      	ldrb	r3, [r3, #3]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001b18:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <handleReadCoils+0xc8>)
 8001b1a:	791b      	ldrb	r3, [r3, #4]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <handleReadCoils+0xc8>)
 8001b24:	795b      	ldrb	r3, [r3, #5]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <handleReadCoils+0x44>
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b3a:	d905      	bls.n	8001b48 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f934 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e037      	b.n	8001bb8 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001b48:	89fa      	ldrh	r2, [r7, #14]
 8001b4a:	89bb      	ldrh	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b58:	d905      	bls.n	8001b66 <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f925 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e028      	b.n	8001bb8 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4815      	ldr	r0, [pc, #84]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001b6e:	f009 fb3d 	bl	800b1ec <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <handleReadCoils+0xd0>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001b78:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <handleReadCoils+0xc8>)
 8001b7c:	785a      	ldrb	r2, [r3, #1]
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001b80:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001b82:	89bb      	ldrh	r3, [r7, #12]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	89ba      	ldrh	r2, [r7, #12]
 8001b8c:	f002 0207 	and.w	r2, r2, #7
 8001b90:	b292      	uxth	r2, r2
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2201      	movne	r2, #1
 8001b98:	2200      	moveq	r2, #0
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001ba2:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001ba6:	789b      	ldrb	r3, [r3, #2]
 8001ba8:	3303      	adds	r3, #3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4905      	ldr	r1, [pc, #20]	@ (8001bc4 <handleReadCoils+0xcc>)
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe47 	bl	8001844 <sendModBusRequest>
	return 1;
 8001bb6:	2301      	movs	r3, #1

}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000088 	.word	0x20000088
 8001bc4:	200000c8 	.word	0x200000c8
 8001bc8:	20000000 	.word	0x20000000

08001bcc <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <handleReadDiscreteInputs+0xd0>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <handleReadDiscreteInputs+0xd0>)
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <handleReadDiscreteInputs+0xd0>)
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <handleReadDiscreteInputs+0xd0>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001c02:	89bb      	ldrh	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <handleReadDiscreteInputs+0x44>
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c0e:	d905      	bls.n	8001c1c <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001c10:	2103      	movs	r1, #3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8ca 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e03a      	b.n	8001c92 <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001c1c:	89fa      	ldrh	r2, [r7, #14]
 8001c1e:	89bb      	ldrh	r3, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c2c:	d905      	bls.n	8001c3a <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001c2e:	2102      	movs	r1, #2
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8bb 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e02b      	b.n	8001c92 <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 8001c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c42:	f009 fad3 	bl	800b1ec <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <handleReadDiscreteInputs+0xd8>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c4c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <handleReadDiscreteInputs+0xd0>)
 8001c50:	785a      	ldrb	r2, [r3, #1]
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c54:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001c56:	89bb      	ldrh	r3, [r7, #12]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	89ba      	ldrh	r2, [r7, #12]
 8001c60:	f002 0207 	and.w	r2, r2, #7
 8001c64:	b292      	uxth	r2, r2
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2201      	movne	r2, #1
 8001c6c:	2200      	moveq	r2, #0
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	4413      	add	r3, r2
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c76:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001c7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c80:	789b      	ldrb	r3, [r3, #2]
 8001c82:	3303      	adds	r3, #3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4905      	ldr	r1, [pc, #20]	@ (8001ca0 <handleReadDiscreteInputs+0xd4>)
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fdda 	bl	8001844 <sendModBusRequest>
	return 1;
 8001c90:	2301      	movs	r3, #1

}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000088 	.word	0x20000088
 8001ca0:	200000c8 	.word	0x200000c8
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cb4:	789b      	ldrb	r3, [r3, #2]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001cc8:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	4b33      	ldr	r3, [pc, #204]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <handleWriteMulyipleHandlingRegister+0x42>
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	2b7b      	cmp	r3, #123	@ 0x7b
 8001ce8:	d905      	bls.n	8001cf6 <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001cea:	2103      	movs	r1, #3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f85d 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e050      	b.n	8001d98 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001cf6:	8afa      	ldrh	r2, [r7, #22]
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	2b3c      	cmp	r3, #60	@ 0x3c
 8001d06:	d905      	bls.n	8001d14 <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001d08:	2102      	movs	r1, #2
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f84e 	bl	8001dac <sendModbusException>
		return MODBUS_ERROR;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e041      	b.n	8001d98 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001d14:	2307      	movs	r3, #7
 8001d16:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e01a      	b.n	8001d54 <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	613a      	str	r2, [r7, #16]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	6139      	str	r1, [r7, #16]
 8001d34:	491a      	ldr	r1, [pc, #104]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b219      	sxth	r1, r3
 8001d3e:	8afb      	ldrh	r3, [r7, #22]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	82fa      	strh	r2, [r7, #22]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b28a      	uxth	r2, r1
 8001d4c:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbe0      	blt.n	8001d1e <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d62:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d66:	785a      	ldrb	r2, [r3, #1]
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d6a:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d6e:	789a      	ldrb	r2, [r3, #2]
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d72:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d76:	78da      	ldrb	r2, [r3, #3]
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d7a:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d7e:	791a      	ldrb	r2, [r3, #4]
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d82:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d86:	795a      	ldrb	r2, [r3, #5]
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d8a:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	4906      	ldr	r1, [pc, #24]	@ (8001da8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fd57 	bl	8001844 <sendModBusRequest>
	return 1;   // success
 8001d96:	2301      	movs	r3, #1

}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000088 	.word	0x20000088
 8001da4:	20000000 	.word	0x20000000
 8001da8:	200000c8 	.word	0x200000c8

08001dac <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <sendModbusException+0x3c>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <sendModbusException+0x40>)
 8001dbe:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <sendModbusException+0x3c>)
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <sendModbusException+0x40>)
 8001dcc:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001dce:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <sendModbusException+0x40>)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4905      	ldr	r1, [pc, #20]	@ (8001dec <sendModbusException+0x40>)
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fd33 	bl	8001844 <sendModBusRequest>
 8001dde:	4603      	mov	r3, r0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000088 	.word	0x20000088
 8001dec:	200000c8 	.word	0x200000c8

08001df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_MspInit+0x5c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	210f      	movs	r1, #15
 8001e2a:	f06f 0001 	mvn.w	r0, #1
 8001e2e:	f000 ff5d 	bl	8002cec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	2005      	movs	r0, #5
 8001e38:	f000 ff58 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e3c:	2005      	movs	r0, #5
 8001e3e:	f000 ff71 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <HAL_ADC_MspInit+0x74>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d123      	bne.n	8001eba <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_ADC_MspInit+0x78>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <HAL_ADC_MspInit+0x7c>)
 8001eb6:	f001 fc3d 	bl	8003734 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <HAL_SPI_MspInit+0xb4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d143      	bne.n	8001f7a <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef2:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a24      	ldr	r2, [pc, #144]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001ef8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_SPI_MspInit+0xb8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <HAL_SPI_MspInit+0xbc>)
 8001f56:	f001 fbed 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f5a:	2330      	movs	r3, #48	@ 0x30
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4806      	ldr	r0, [pc, #24]	@ (8001f90 <HAL_SPI_MspInit+0xc0>)
 8001f76:	f001 fbdd 	bl	8003734 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	@ 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40013000 	.word	0x40013000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400

08001f94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a33      	ldr	r2, [pc, #204]	@ (8002080 <HAL_TIM_Base_MspInit+0xec>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb6:	4b33      	ldr	r3, [pc, #204]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a32      	ldr	r2, [pc, #200]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b30      	ldr	r3, [pc, #192]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fce:	e052      	b.n	8002076 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd8:	d14d      	bne.n	8002076 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a29      	ldr	r2, [pc, #164]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_TIM_Base_MspInit+0xf0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002034:	2301      	movs	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4812      	ldr	r0, [pc, #72]	@ (8002088 <HAL_TIM_Base_MspInit+0xf4>)
 8002040:	f001 fb78 	bl	8003734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002044:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002056:	2301      	movs	r3, #1
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	480a      	ldr	r0, [pc, #40]	@ (800208c <HAL_TIM_Base_MspInit+0xf8>)
 8002062:	f001 fb67 	bl	8003734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2105      	movs	r1, #5
 800206a:	201c      	movs	r0, #28
 800206c:	f000 fe3e 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002070:	201c      	movs	r0, #28
 8002072:	f000 fe57 	bl	8002d24 <HAL_NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3730      	adds	r7, #48	@ 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a20      	ldr	r2, [pc, #128]	@ (8002130 <HAL_TIM_MspPostInit+0xa0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d139      	bne.n	8002126 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_TIM_MspPostInit+0xa4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	480e      	ldr	r0, [pc, #56]	@ (8002138 <HAL_TIM_MspPostInit+0xa8>)
 8002100:	f001 fb18 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002104:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4806      	ldr	r0, [pc, #24]	@ (800213c <HAL_TIM_MspPostInit+0xac>)
 8002122:	f001 fb07 	bl	8003734 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400
 800213c:	40020000 	.word	0x40020000

08002140 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0aa      	sub	sp, #168	@ 0xa8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f009 f843 	bl	800b1ec <memset>
  if(huart->Instance==USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a54      	ldr	r2, [pc, #336]	@ (80022bc <HAL_UART_MspInit+0x17c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 80a0 	bne.w	80022b2 <HAL_UART_MspInit+0x172>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002172:	2340      	movs	r3, #64	@ 0x40
 8002174:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002176:	2300      	movs	r3, #0
 8002178:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fb04 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff fb0f 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218e:	4b4c      	ldr	r3, [pc, #304]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a4b      	ldr	r2, [pc, #300]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4b46      	ldr	r3, [pc, #280]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a45      	ldr	r2, [pc, #276]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <HAL_UART_MspInit+0x180>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021be:	23c0      	movs	r3, #192	@ 0xc0
 80021c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d6:	2307      	movs	r3, #7
 80021d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021e0:	4619      	mov	r1, r3
 80021e2:	4838      	ldr	r0, [pc, #224]	@ (80022c4 <HAL_UART_MspInit+0x184>)
 80021e4:	f001 faa6 	bl	8003734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021e8:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 80021ea:	4a38      	ldr	r2, [pc, #224]	@ (80022cc <HAL_UART_MspInit+0x18c>)
 80021ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021ee:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 80021f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fc:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002202:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 8002204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002208:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002216:	4b2c      	ldr	r3, [pc, #176]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800221c:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 800221e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002222:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800222a:	4827      	ldr	r0, [pc, #156]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 800222c:	f000 fe0e 	bl	8002e4c <HAL_DMA_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002236:	f7ff fab9 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 800223e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002240:	4a21      	ldr	r2, [pc, #132]	@ (80022c8 <HAL_UART_MspInit+0x188>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002248:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_UART_MspInit+0x194>)
 800224a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800224c:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800224e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002252:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002256:	2240      	movs	r2, #64	@ 0x40
 8002258:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002266:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002286:	4812      	ldr	r0, [pc, #72]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 8002288:	f000 fde0 	bl	8002e4c <HAL_DMA_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002292:	f7ff fa8b 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800229a:	671a      	str	r2, [r3, #112]	@ 0x70
 800229c:	4a0c      	ldr	r2, [pc, #48]	@ (80022d0 <HAL_UART_MspInit+0x190>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2105      	movs	r1, #5
 80022a6:	2025      	movs	r0, #37	@ 0x25
 80022a8:	f000 fd20 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ac:	2025      	movs	r0, #37	@ 0x25
 80022ae:	f000 fd39 	bl	8002d24 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	37a8      	adds	r7, #168	@ 0xa8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40011000 	.word	0x40011000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	200003f8 	.word	0x200003f8
 80022cc:	40026440 	.word	0x40026440
 80022d0:	20000458 	.word	0x20000458
 80022d4:	400264b8 	.word	0x400264b8

080022d8 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <HAL_UART_MspDeInit+0x48>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d116      	bne.n	8002318 <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_UART_MspDeInit+0x4c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_UART_MspDeInit+0x4c>)
 80022f0:	f023 0310 	bic.w	r3, r3, #16
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80022f6:	21c0      	movs	r1, #192	@ 0xc0
 80022f8:	480b      	ldr	r0, [pc, #44]	@ (8002328 <HAL_UART_MspDeInit+0x50>)
 80022fa:	f001 fbb7 	bl	8003a6c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fe50 	bl	8002fa8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fe4b 	bl	8002fa8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002312:	2025      	movs	r0, #37	@ 0x25
 8002314:	f000 fd14 	bl	8002d40 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40011000 	.word	0x40011000
 8002324:	40023800 	.word	0x40023800
 8002328:	40020400 	.word	0x40020400

0800232c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	@ 0x38
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800233c:	4b33      	ldr	r3, [pc, #204]	@ (800240c <HAL_InitTick+0xe0>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a32      	ldr	r2, [pc, #200]	@ (800240c <HAL_InitTick+0xe0>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b30      	ldr	r3, [pc, #192]	@ (800240c <HAL_InitTick+0xe0>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002354:	f107 0210 	add.w	r2, r7, #16
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f002 f9e2 	bl	8004728 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800236e:	f002 f9b3 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8002372:	6378      	str	r0, [r7, #52]	@ 0x34
 8002374:	e004      	b.n	8002380 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002376:	f002 f9af 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 800237a:	4603      	mov	r3, r0
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <HAL_InitTick+0xe4>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	3b01      	subs	r3, #1
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800238e:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_InitTick+0xe8>)
 8002390:	4a21      	ldr	r2, [pc, #132]	@ (8002418 <HAL_InitTick+0xec>)
 8002392:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_InitTick+0xe8>)
 8002396:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800239a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_InitTick+0xe8>)
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <HAL_InitTick+0xe8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <HAL_InitTick+0xe8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_InitTick+0xe8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80023b4:	4817      	ldr	r0, [pc, #92]	@ (8002414 <HAL_InitTick+0xe8>)
 80023b6:	f002 fdde 	bl	8004f76 <HAL_TIM_Base_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11b      	bne.n	8002400 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80023c8:	4812      	ldr	r0, [pc, #72]	@ (8002414 <HAL_InitTick+0xe8>)
 80023ca:	f002 fe2b 	bl	8005024 <HAL_TIM_Base_Start_IT>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80023dc:	202d      	movs	r0, #45	@ 0x2d
 80023de:	f000 fca1 	bl	8002d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d808      	bhi.n	80023fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	202d      	movs	r0, #45	@ 0x2d
 80023ee:	f000 fc7d 	bl	8002cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_InitTick+0xf0>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e002      	b.n	8002400 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002400:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002404:	4618      	mov	r0, r3
 8002406:	3738      	adds	r7, #56	@ 0x38
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	431bde83 	.word	0x431bde83
 8002414:	200004c0 	.word	0x200004c0
 8002418:	40002000 	.word	0x40002000
 800241c:	2000000c 	.word	0x2000000c

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <NMI_Handler+0x4>

08002428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <MemManage_Handler+0x4>

08002438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <UsageFault_Handler+0x4>

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 8002468:	2001      	movs	r0, #1
 800246a:	f001 fc2d 	bl	8003cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}

08002472 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 8002476:	2002      	movs	r0, #2
 8002478:	f001 fc26 	bl	8003cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 8002484:	2004      	movs	r0, #4
 8002486:	f001 fc1f 	bl	8003cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f003 f9cb 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000324 	.word	0x20000324

080024a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <USART1_IRQHandler+0x10>)
 80024aa:	f004 fea1 	bl	80071f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000370 	.word	0x20000370

080024b8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80024be:	f003 f9b7 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200004c0 	.word	0x200004c0

080024cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA2_Stream2_IRQHandler+0x10>)
 80024d2:	f000 feb9 	bl	8003248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200003f8 	.word	0x200003f8

080024e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA2_Stream7_IRQHandler+0x10>)
 80024e6:	f000 feaf 	bl	8003248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000458 	.word	0x20000458

080024f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 800251c:	f7ff ffea 	bl	80024f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002520:	480c      	ldr	r0, [pc, #48]	@ (8002554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002522:	490d      	ldr	r1, [pc, #52]	@ (8002558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0a      	ldr	r2, [pc, #40]	@ (8002560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002538:	4c0a      	ldr	r4, [pc, #40]	@ (8002564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002546:	f008 feb7 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7fe f9b5 	bl	80008b8 <main>
  bx  lr    
 800254e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002558:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800255c:	0800b48c 	.word	0x0800b48c
  ldr r2, =_sbss
 8002560:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002564:	20005030 	.word	0x20005030

08002568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>

0800256a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256e:	2003      	movs	r0, #3
 8002570:	f000 fbb1 	bl	8002cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002574:	200f      	movs	r0, #15
 8002576:	f7ff fed9 	bl	800232c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257a:	f7ff fc39 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000010 	.word	0x20000010
 80025a8:	2000050c 	.word	0x2000050c

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000050c 	.word	0x2000050c

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff ffee 	bl	80025ac <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffde 	bl	80025ac <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000010 	.word	0x20000010

0800260c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e031      	b.n	8002686 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fc10 	bl	8001e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_ADC_Init+0x84>)
 8002650:	4013      	ands	r3, r2
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f970 	bl	8002940 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
 8002676:	e001      	b.n	800267c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	ffffeefd 	.word	0xffffeefd

08002694 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e136      	b.n	800291e <HAL_ADC_ConfigChannel+0x28a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d93a      	bls.n	8002736 <HAL_ADC_ConfigChannel+0xa2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026c8:	d035      	beq.n	8002736 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	3b1e      	subs	r3, #30
 80026e0:	2207      	movs	r2, #7
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a8d      	ldr	r2, [pc, #564]	@ (800292c <HAL_ADC_ConfigChannel+0x298>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	061a      	lsls	r2, r3, #24
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	e035      	b.n	800277c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68d9      	ldr	r1, [r3, #12]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	4603      	mov	r3, r0
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4403      	add	r3, r0
 8002728:	3b1e      	subs	r3, #30
 800272a:	409a      	lsls	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002734:	e022      	b.n	800277c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	2207      	movs	r2, #7
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	4603      	mov	r3, r0
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4403      	add	r3, r0
 8002772:	409a      	lsls	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d824      	bhi.n	80027ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b05      	subs	r3, #5
 8002796:	221f      	movs	r2, #31
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43da      	mvns	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	3b05      	subs	r3, #5
 80027c0:	fa00 f203 	lsl.w	r2, r0, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80027cc:	e04c      	b.n	8002868 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d824      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b23      	subs	r3, #35	@ 0x23
 80027e8:	221f      	movs	r2, #31
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b23      	subs	r3, #35	@ 0x23
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	631a      	str	r2, [r3, #48]	@ 0x30
 800281e:	e023      	b.n	8002868 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b41      	subs	r3, #65	@ 0x41
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b41      	subs	r3, #65	@ 0x41
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a30      	ldr	r2, [pc, #192]	@ (8002930 <HAL_ADC_ConfigChannel+0x29c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1f4>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a2c      	ldr	r2, [pc, #176]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 8002882:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002886:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a28      	ldr	r2, [pc, #160]	@ (8002930 <HAL_ADC_ConfigChannel+0x29c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10f      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x21e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b12      	cmp	r3, #18
 8002898:	d10b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800289a:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028a4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028a6:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <HAL_ADC_ConfigChannel+0x29c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d12b      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x280>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_ADC_ConfigChannel+0x298>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <HAL_ADC_ConfigChannel+0x23a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b11      	cmp	r3, #17
 80028cc:	d122      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80028d8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028e4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_ADC_ConfigChannel+0x298>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_ADC_ConfigChannel+0x2a4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_ADC_ConfigChannel+0x2a8>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9a      	lsrs	r2, r3, #18
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002906:	e002      	b.n	800290e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3b01      	subs	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f9      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	10000012 	.word	0x10000012
 8002930:	40012000 	.word	0x40012000
 8002934:	40012300 	.word	0x40012300
 8002938:	20000008 	.word	0x20000008
 800293c:	431bde83 	.word	0x431bde83

08002940 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002948:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <ADC_Init+0x1ec>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a77      	ldr	r2, [pc, #476]	@ (8002b2c <ADC_Init+0x1ec>)
 800294e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002952:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002954:	4b75      	ldr	r3, [pc, #468]	@ (8002b2c <ADC_Init+0x1ec>)
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4973      	ldr	r1, [pc, #460]	@ (8002b2c <ADC_Init+0x1ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	021a      	lsls	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	4a58      	ldr	r2, [pc, #352]	@ (8002b30 <ADC_Init+0x1f0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e00f      	b.n	8002a3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0202 	bic.w	r2, r2, #2
 8002a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	005a      	lsls	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	3b01      	subs	r3, #1
 8002a94:	035a      	lsls	r2, r3, #13
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e007      	b.n	8002ab0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	051a      	lsls	r2, r3, #20
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002af2:	025a      	lsls	r2, r3, #9
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	029a      	lsls	r2, r3, #10
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40012300 	.word	0x40012300
 8002b30:	0f000001 	.word	0x0f000001

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x40>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x40>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	05fa0000 	.word	0x05fa0000

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4907      	ldr	r1, [pc, #28]	@ (8002bd0 <__NVIC_EnableIRQ+0x38>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	db12      	blt.n	8002c0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	490a      	ldr	r1, [pc, #40]	@ (8002c18 <__NVIC_DisableIRQ+0x44>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfa:	3320      	adds	r3, #32
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c00:	f3bf 8f4f 	dsb	sy
}
 8002c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c06:	f3bf 8f6f 	isb	sy
}
 8002c0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	@ (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff28 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfe:	f7ff ff3d 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7ff ffb1 	bl	8002c70 <NVIC_EncodePriority>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff80 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff30 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff40 	bl	8002bd4 <__NVIC_DisableIRQ>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d60:	f3bf 8f5f 	dmb	sy
}
 8002d64:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <HAL_MPU_Disable+0x28>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	4a06      	ldr	r2, [pc, #24]	@ (8002d84 <HAL_MPU_Disable+0x28>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d70:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_MPU_Disable+0x2c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00
 8002d88:	e000ed90 	.word	0xe000ed90

08002d8c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <HAL_MPU_Enable+0x38>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_MPU_Enable+0x3c>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	4a09      	ldr	r2, [pc, #36]	@ (8002dc8 <HAL_MPU_Enable+0x3c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002daa:	f3bf 8f4f 	dsb	sy
}
 8002dae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002db0:	f3bf 8f6f 	isb	sy
}
 8002db4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed90 	.word	0xe000ed90
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	785a      	ldrb	r2, [r3, #1]
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_MPU_ConfigRegion+0x7c>)
 8002dda:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_MPU_ConfigRegion+0x7c>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4a19      	ldr	r2, [pc, #100]	@ (8002e48 <HAL_MPU_ConfigRegion+0x7c>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002de8:	4a17      	ldr	r2, [pc, #92]	@ (8002e48 <HAL_MPU_ConfigRegion+0x7c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7b1b      	ldrb	r3, [r3, #12]
 8002df4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7adb      	ldrb	r3, [r3, #11]
 8002dfa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7a9b      	ldrb	r3, [r3, #10]
 8002e02:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7b5b      	ldrb	r3, [r3, #13]
 8002e0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7b9b      	ldrb	r3, [r3, #14]
 8002e12:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7bdb      	ldrb	r3, [r3, #15]
 8002e1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7a5b      	ldrb	r3, [r3, #9]
 8002e22:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7a1b      	ldrb	r3, [r3, #8]
 8002e2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e2c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e38:	6113      	str	r3, [r2, #16]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed90 	.word	0xe000ed90

08002e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff fba8 	bl	80025ac <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e099      	b.n	8002f9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e00f      	b.n	8002eaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff fb8f 	bl	80025ac <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d908      	bls.n	8002eaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e078      	b.n	8002f9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e8      	bne.n	8002e8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4b38      	ldr	r3, [pc, #224]	@ (8002fa4 <HAL_DMA_Init+0x158>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d117      	bne.n	8002f6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb73 	bl	800363c <DMA_CheckFifoParam>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e016      	b.n	8002f9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fb2a 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	223f      	movs	r2, #63	@ 0x3f
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e010803f 	.word	0xe010803f

08002fa8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e050      	b.n	800305c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e048      	b.n	800305c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2221      	movs	r2, #33	@ 0x21
 8003008:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fae0 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8003010:	4603      	mov	r3, r0
 8003012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	223f      	movs	r2, #63	@ 0x3f
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_DMA_Start_IT+0x26>
 8003086:	2302      	movs	r3, #2
 8003088:	e048      	b.n	800311c <HAL_DMA_Start_IT+0xb8>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d137      	bne.n	800310e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa5e 	bl	8003574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	223f      	movs	r2, #63	@ 0x3f
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0216 	orr.w	r2, r2, #22
 80030d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003132:	f7ff fa3b 	bl	80025ac <HAL_GetTick>
 8003136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e052      	b.n	80031fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0216 	bic.w	r2, r2, #22
 8003164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_DMA_Abort+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0208 	bic.w	r2, r2, #8
 8003194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a6:	e013      	b.n	80031d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a8:	f7ff fa00 	bl	80025ac <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d90c      	bls.n	80031d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2203      	movs	r2, #3
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e015      	b.n	80031fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e4      	bne.n	80031a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	223f      	movs	r2, #63	@ 0x3f
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2280      	movs	r2, #128	@ 0x80
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00c      	b.n	800323c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2205      	movs	r2, #5
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003254:	4b8e      	ldr	r3, [pc, #568]	@ (8003490 <HAL_DMA_IRQHandler+0x248>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a8e      	ldr	r2, [pc, #568]	@ (8003494 <HAL_DMA_IRQHandler+0x24c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2208      	movs	r2, #8
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2208      	movs	r2, #8
 80032a2:	409a      	lsls	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	2204      	movs	r2, #4
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d012      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2210      	movs	r2, #16
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d043      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	2210      	movs	r2, #16
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d018      	beq.n	800338a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d024      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
 8003376:	e01f      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e016      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0208 	bic.w	r2, r2, #8
 80033a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	2220      	movs	r2, #32
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 808f 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8087 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	2220      	movs	r2, #32
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d136      	bne.n	8003460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_IRQHandler+0x1da>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	223f      	movs	r2, #63	@ 0x3f
 8003438:	409a      	lsls	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07e      	beq.n	8003554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
        }
        return;
 800345e:	e079      	b.n	8003554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	2b00      	cmp	r3, #0
 8003482:	d031      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e02c      	b.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
 800348e:	bf00      	nop
 8003490:	20000008 	.word	0x20000008
 8003494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e01e      	b.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10f      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0210 	bic.w	r2, r2, #16
 80034c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2205      	movs	r2, #5
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	d307      	bcc.n	8003530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f2      	bne.n	8003514 <HAL_DMA_IRQHandler+0x2cc>
 800352e:	e000      	b.n	8003532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
 8003552:	e000      	b.n	8003556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003554:	bf00      	nop
    }
  }
}
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b10      	subs	r3, #16
 80035e0:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <DMA_CalcBaseAndBitshift+0x60>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <DMA_CalcBaseAndBitshift+0x64>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d908      	bls.n	8003610 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 8003606:	4013      	ands	r3, r2
 8003608:	1d1a      	adds	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	@ 0x58
 800360e:	e006      	b.n	800361e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	aaaaaaab 	.word	0xaaaaaaab
 8003634:	0800b474 	.word	0x0800b474
 8003638:	fffffc00 	.word	0xfffffc00

0800363c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d856      	bhi.n	800370a <DMA_CheckFifoParam+0xce>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <DMA_CheckFifoParam+0x28>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003687 	.word	0x08003687
 800366c:	08003675 	.word	0x08003675
 8003670:	0800370b 	.word	0x0800370b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e043      	b.n	800370e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368e:	d140      	bne.n	8003712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e03d      	b.n	8003712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369e:	d121      	bne.n	80036e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d837      	bhi.n	8003716 <DMA_CheckFifoParam+0xda>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <DMA_CheckFifoParam+0x70>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c3 	.word	0x080036c3
 80036b4:	080036bd 	.word	0x080036bd
 80036b8:	080036d5 	.word	0x080036d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e030      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d2:	e022      	b.n	800371a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e2:	e01c      	b.n	800371e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d903      	bls.n	80036f2 <DMA_CheckFifoParam+0xb6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f0:	e018      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e015      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e00b      	b.n	8003722 <DMA_CheckFifoParam+0xe6>
      break;
 800370a:	bf00      	nop
 800370c:	e00a      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e008      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e006      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;   
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
    }
  } 
  
  return status; 
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e169      	b.n	8003a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	f040 8158 	bne.w	8003a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d005      	beq.n	800378a <HAL_GPIO_Init+0x56>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d130      	bne.n	80037ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0201 	and.w	r2, r3, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d017      	beq.n	8003828 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d123      	bne.n	800387c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80b2 	beq.w	8003a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	4b60      	ldr	r3, [pc, #384]	@ (8003a40 <HAL_GPIO_Init+0x30c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003a40 <HAL_GPIO_Init+0x30c>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_GPIO_Init+0x30c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a44 <HAL_GPIO_Init+0x310>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a52      	ldr	r2, [pc, #328]	@ (8003a48 <HAL_GPIO_Init+0x314>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02b      	beq.n	800395a <HAL_GPIO_Init+0x226>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a51      	ldr	r2, [pc, #324]	@ (8003a4c <HAL_GPIO_Init+0x318>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d025      	beq.n	8003956 <HAL_GPIO_Init+0x222>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a50      	ldr	r2, [pc, #320]	@ (8003a50 <HAL_GPIO_Init+0x31c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01f      	beq.n	8003952 <HAL_GPIO_Init+0x21e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4f      	ldr	r2, [pc, #316]	@ (8003a54 <HAL_GPIO_Init+0x320>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_Init+0x21a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a58 <HAL_GPIO_Init+0x324>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0x216>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a4d      	ldr	r2, [pc, #308]	@ (8003a5c <HAL_GPIO_Init+0x328>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_Init+0x212>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a60 <HAL_GPIO_Init+0x32c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x20e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4b      	ldr	r2, [pc, #300]	@ (8003a64 <HAL_GPIO_Init+0x330>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_Init+0x20a>
 800393a:	2307      	movs	r3, #7
 800393c:	e00e      	b.n	800395c <HAL_GPIO_Init+0x228>
 800393e:	2308      	movs	r3, #8
 8003940:	e00c      	b.n	800395c <HAL_GPIO_Init+0x228>
 8003942:	2306      	movs	r3, #6
 8003944:	e00a      	b.n	800395c <HAL_GPIO_Init+0x228>
 8003946:	2305      	movs	r3, #5
 8003948:	e008      	b.n	800395c <HAL_GPIO_Init+0x228>
 800394a:	2304      	movs	r3, #4
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x228>
 800394e:	2303      	movs	r3, #3
 8003950:	e004      	b.n	800395c <HAL_GPIO_Init+0x228>
 8003952:	2302      	movs	r3, #2
 8003954:	e002      	b.n	800395c <HAL_GPIO_Init+0x228>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_GPIO_Init+0x228>
 800395a:	2300      	movs	r3, #0
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	f002 0203 	and.w	r2, r2, #3
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	4093      	lsls	r3, r2
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800396c:	4935      	ldr	r1, [pc, #212]	@ (8003a44 <HAL_GPIO_Init+0x310>)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399e:	4a32      	ldr	r2, [pc, #200]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a4:	4b30      	ldr	r3, [pc, #192]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c8:	4a27      	ldr	r2, [pc, #156]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ce:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a1c:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <HAL_GPIO_Init+0x334>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f ae92 	bls.w	8003754 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3724      	adds	r7, #36	@ 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40020800 	.word	0x40020800
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40021400 	.word	0x40021400
 8003a60:	40021800 	.word	0x40021800
 8003a64:	40021c00 	.word	0x40021c00
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e0cd      	b.n	8003c24 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	f040 80bd 	bne.w	8003c1e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_GPIO_DeInit+0x1d0>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c40 <HAL_GPIO_DeInit+0x1d4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <HAL_GPIO_DeInit+0xba>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a5c      	ldr	r2, [pc, #368]	@ (8003c44 <HAL_GPIO_DeInit+0x1d8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d025      	beq.n	8003b22 <HAL_GPIO_DeInit+0xb6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8003c48 <HAL_GPIO_DeInit+0x1dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01f      	beq.n	8003b1e <HAL_GPIO_DeInit+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c4c <HAL_GPIO_DeInit+0x1e0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_DeInit+0xae>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a59      	ldr	r2, [pc, #356]	@ (8003c50 <HAL_GPIO_DeInit+0x1e4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_DeInit+0xaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a58      	ldr	r2, [pc, #352]	@ (8003c54 <HAL_GPIO_DeInit+0x1e8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_DeInit+0xa6>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a57      	ldr	r2, [pc, #348]	@ (8003c58 <HAL_GPIO_DeInit+0x1ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_DeInit+0xa2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a56      	ldr	r2, [pc, #344]	@ (8003c5c <HAL_GPIO_DeInit+0x1f0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_DeInit+0x9e>
 8003b06:	2307      	movs	r3, #7
 8003b08:	e00e      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_DeInit+0xbc>
 8003b26:	2300      	movs	r3, #0
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d132      	bne.n	8003b9e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b38:	4b49      	ldr	r3, [pc, #292]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	4947      	ldr	r1, [pc, #284]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b46:	4b46      	ldr	r3, [pc, #280]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4944      	ldr	r1, [pc, #272]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b54:	4b42      	ldr	r3, [pc, #264]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4940      	ldr	r1, [pc, #256]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b62:	4b3f      	ldr	r3, [pc, #252]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	493d      	ldr	r1, [pc, #244]	@ (8003c60 <HAL_GPIO_DeInit+0x1f4>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003b80:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <HAL_GPIO_DeInit+0x1d0>)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	482a      	ldr	r0, [pc, #168]	@ (8003c3c <HAL_GPIO_DeInit+0x1d0>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	400a      	ands	r2, r1
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	401a      	ands	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	08d2      	lsrs	r2, r2, #3
 8003bd4:	4019      	ands	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2103      	movs	r1, #3
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2103      	movs	r1, #3
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	f67f af2e 	bls.w	8003a88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	40020000 	.word	0x40020000
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020c00 	.word	0x40020c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40021400 	.word	0x40021400
 8003c58:	40021800 	.word	0x40021800
 8003c5c:	40021c00 	.word	0x40021c00
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e001      	b.n	8003c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	041a      	lsls	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fb0a 	bl	8001300 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	4a22      	ldr	r2, [pc, #136]	@ (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d26:	f7fe fc41 	bl	80025ac <HAL_GetTick>
 8003d2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d2c:	e009      	b.n	8003d42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d2e:	f7fe fc3d 	bl	80025ac <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e022      	b.n	8003d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d42:	4b14      	ldr	r3, [pc, #80]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d5c:	f7fe fc26 	bl	80025ac <HAL_GetTick>
 8003d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d62:	e009      	b.n	8003d78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d64:	f7fe fc22 	bl	80025ac <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d72:	d901      	bls.n	8003d78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e007      	b.n	8003d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d84:	d1ee      	bne.n	8003d64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e291      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8087 	beq.w	8003eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dbc:	4b96      	ldr	r3, [pc, #600]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d00c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc8:	4b93      	ldr	r3, [pc, #588]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d112      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
 8003dd4:	4b90      	ldr	r3, [pc, #576]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de2:	4b8d      	ldr	r3, [pc, #564]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x130>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d168      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e26b      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x7a>
 8003e04:	4b84      	ldr	r3, [pc, #528]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a83      	ldr	r2, [pc, #524]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x9c>
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b7c      	ldr	r3, [pc, #496]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7b      	ldr	r2, [pc, #492]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	4b76      	ldr	r3, [pc, #472]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a75      	ldr	r2, [pc, #468]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b73      	ldr	r3, [pc, #460]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a72      	ldr	r2, [pc, #456]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e58:	4b6f      	ldr	r3, [pc, #444]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b6c      	ldr	r3, [pc, #432]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6b      	ldr	r2, [pc, #428]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fb98 	bl	80025ac <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe fb94 	bl	80025ac <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e21f      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b61      	ldr	r3, [pc, #388]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe8>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fb84 	bl	80025ac <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fb80 	bl	80025ac <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e20b      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b57      	ldr	r3, [pc, #348]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x110>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d069      	beq.n	8003faa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed6:	4b50      	ldr	r3, [pc, #320]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x190>
 8003eee:	4b4a      	ldr	r3, [pc, #296]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x17a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1df      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	493d      	ldr	r1, [pc, #244]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e040      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b39      	ldr	r3, [pc, #228]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a38      	ldr	r2, [pc, #224]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fb36 	bl	80025ac <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fe fb32 	bl	80025ac <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1bd      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4929      	ldr	r1, [pc, #164]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	e018      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f78:	4b27      	ldr	r3, [pc, #156]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fb12 	bl	80025ac <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fe fb0e 	bl	80025ac <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e199      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d038      	beq.n	8004028 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc2:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fe faef 	bl	80025ac <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fe faeb 	bl	80025ac <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e176      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x23a>
 8003ff0:	e01a      	b.n	8004028 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fe fad5 	bl	80025ac <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004006:	f7fe fad1 	bl	80025ac <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d903      	bls.n	800401c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e15c      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
 8004018:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b91      	ldr	r3, [pc, #580]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ee      	bne.n	8004006 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a4 	beq.w	800417e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004036:	4b8b      	ldr	r3, [pc, #556]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b88      	ldr	r3, [pc, #544]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a87      	ldr	r2, [pc, #540]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	@ 0x40
 800404e:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405e:	4b82      	ldr	r3, [pc, #520]	@ (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800406a:	4b7f      	ldr	r3, [pc, #508]	@ (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7e      	ldr	r2, [pc, #504]	@ (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fe fa99 	bl	80025ac <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fe fa95 	bl	80025ac <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	@ 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e120      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	4b75      	ldr	r3, [pc, #468]	@ (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x31a>
 80040a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b0:	e02d      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x33c>
 80040ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	4a69      	ldr	r2, [pc, #420]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c6:	4b67      	ldr	r3, [pc, #412]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	4a66      	ldr	r2, [pc, #408]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d2:	e01c      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d10c      	bne.n	80040f6 <HAL_RCC_OscConfig+0x35e>
 80040dc:	4b61      	ldr	r3, [pc, #388]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a60      	ldr	r2, [pc, #384]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	6713      	str	r3, [r2, #112]	@ 0x70
 8004102:	4b58      	ldr	r3, [pc, #352]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004106:	4a57      	ldr	r2, [pc, #348]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fe fa49 	bl	80025ac <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe fa45 	bl	80025ac <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0ce      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	4b4b      	ldr	r3, [pc, #300]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ee      	beq.n	800411e <HAL_RCC_OscConfig+0x386>
 8004140:	e014      	b.n	800416c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe fa33 	bl	80025ac <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fa2f 	bl	80025ac <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0b8      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ee      	bne.n	800414a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	4a3b      	ldr	r2, [pc, #236]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80a4 	beq.w	80042d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004188:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d06b      	beq.n	800426c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d149      	bne.n	8004230 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a30      	ldr	r2, [pc, #192]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fe fa00 	bl	80025ac <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe f9fc 	bl	80025ac <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e087      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b28      	ldr	r3, [pc, #160]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	019b      	lsls	r3, r3, #6
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	4313      	orrs	r3, r2
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80041f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f9d0 	bl	80025ac <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe f9cc 	bl	80025ac <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e057      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x478>
 800422e:	e04f      	b.n	80042d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe f9b6 	bl	80025ac <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fe f9b2 	bl	80025ac <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e03d      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <HAL_RCC_OscConfig+0x4cc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x4ac>
 8004262:	e035      	b.n	80042d0 <HAL_RCC_OscConfig+0x538>
 8004264:	40023800 	.word	0x40023800
 8004268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800426c:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x544>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d028      	beq.n	80042cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d121      	bne.n	80042cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d11a      	bne.n	80042cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0d0      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d910      	bls.n	8004328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b67      	ldr	r3, [pc, #412]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 020f 	bic.w	r2, r3, #15
 800430e:	4965      	ldr	r1, [pc, #404]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d040      	beq.n	8004404 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d115      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e073      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b2:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06b      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c2:	4b39      	ldr	r3, [pc, #228]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 0203 	bic.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4936      	ldr	r1, [pc, #216]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fe f8ea 	bl	80025ac <HAL_GetTick>
 80043d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043dc:	f7fe f8e6 	bl	80025ac <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e053      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 020c 	and.w	r2, r3, #12
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	429a      	cmp	r2, r3
 8004402:	d1eb      	bne.n	80043dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004404:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d210      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	4922      	ldr	r1, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f821 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x1cc>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1d0>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd ff4a 	bl	800232c <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800b45c 	.word	0x0800b45c
 80044b0:	20000008 	.word	0x20000008
 80044b4:	2000000c 	.word	0x2000000c

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b094      	sub	sp, #80	@ 0x50
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c4:	2300      	movs	r3, #0
 80044c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d0:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x40>
 80044dc:	2b08      	cmp	r3, #8
 80044de:	f200 80e1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ea:	e0db      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b73      	ldr	r3, [pc, #460]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f0:	e0db      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f2:	4b72      	ldr	r3, [pc, #456]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b6f      	ldr	r3, [pc, #444]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004502:	4b6d      	ldr	r3, [pc, #436]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004518:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	@ 0x34
 8004526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4621      	mov	r1, r4
 8004544:	1a51      	subs	r1, r2, r1
 8004546:	6139      	str	r1, [r7, #16]
 8004548:	4629      	mov	r1, r5
 800454a:	eb63 0301 	sbc.w	r3, r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	018b      	lsls	r3, r1, #6
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004566:	4651      	mov	r1, sl
 8004568:	018a      	lsls	r2, r1, #6
 800456a:	4651      	mov	r1, sl
 800456c:	ebb2 0801 	subs.w	r8, r2, r1
 8004570:	4659      	mov	r1, fp
 8004572:	eb63 0901 	sbc.w	r9, r3, r1
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458a:	4690      	mov	r8, r2
 800458c:	4699      	mov	r9, r3
 800458e:	4623      	mov	r3, r4
 8004590:	eb18 0303 	adds.w	r3, r8, r3
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045aa:	4629      	mov	r1, r5
 80045ac:	028b      	lsls	r3, r1, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b4:	4621      	mov	r1, r4
 80045b6:	028a      	lsls	r2, r1, #10
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045c8:	f7fb fe6e 	bl	80002a8 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d4:	e058      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	4611      	mov	r1, r2
 80045e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4641      	mov	r1, r8
 800460a:	ebb2 0a01 	subs.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb63 0b01 	sbc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004628:	ebb2 040a 	subs.w	r4, r2, sl
 800462c:	eb63 050b 	sbc.w	r5, r3, fp
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	464b      	mov	r3, r9
 800464c:	eb45 0303 	adc.w	r3, r5, r3
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	61fa      	str	r2, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	f7fb fe14 	bl	80002a8 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3750      	adds	r7, #80	@ 0x50
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400

080046c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000008 	.word	0x20000008

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046dc:	f7ff fff0 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	0800b46c 	.word	0x0800b46c

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004704:	f7ff ffdc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0b5b      	lsrs	r3, r3, #13
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4903      	ldr	r1, [pc, #12]	@ (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	0800b46c 	.word	0x0800b46c

08004728 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	220f      	movs	r2, #15
 8004736:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004738:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <HAL_RCC_GetClockConfig+0x5c>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 0203 	and.w	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <HAL_RCC_GetClockConfig+0x5c>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004750:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <HAL_RCC_GetClockConfig+0x5c>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_GetClockConfig+0x5c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	08db      	lsrs	r3, r3, #3
 8004762:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800476a:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <HAL_RCC_GetClockConfig+0x60>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	601a      	str	r2, [r3, #0]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	40023c00 	.word	0x40023c00

0800478c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b0:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a64      	ldr	r2, [pc, #400]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047ba:	6093      	str	r3, [r2, #8]
 80047bc:	4b62      	ldr	r3, [pc, #392]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	4960      	ldr	r1, [pc, #384]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d017      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e2:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f0:	4955      	ldr	r1, [pc, #340]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004800:	d101      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800481e:	4b4a      	ldr	r3, [pc, #296]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004824:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	4946      	ldr	r1, [pc, #280]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 808b 	beq.w	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b3a      	ldr	r3, [pc, #232]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	4a39      	ldr	r2, [pc, #228]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	@ 0x40
 8004868:	4b37      	ldr	r3, [pc, #220]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004874:	4b35      	ldr	r3, [pc, #212]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a34      	ldr	r2, [pc, #208]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004880:	f7fd fe94 	bl	80025ac <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fd fe90 	bl	80025ac <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e2bc      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048a6:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d035      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d02e      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c4:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	4a1a      	ldr	r2, [pc, #104]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048e6:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d114      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd fe58 	bl	80025ac <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	e00a      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd fe54 	bl	80025ac <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e27e      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0ee      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800492e:	d111      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800493c:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800493e:	400b      	ands	r3, r1
 8004940:	4901      	ldr	r1, [pc, #4]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
 8004946:	e00b      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000
 8004950:	0ffffcff 	.word	0x0ffffcff
 8004954:	4ba4      	ldr	r3, [pc, #656]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4aa3      	ldr	r2, [pc, #652]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800495a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800495e:	6093      	str	r3, [r2, #8]
 8004960:	4ba1      	ldr	r3, [pc, #644]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004962:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496c:	499e      	ldr	r1, [pc, #632]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800497e:	4b9a      	ldr	r3, [pc, #616]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004984:	4a98      	ldr	r2, [pc, #608]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800498a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800498e:	4b96      	ldr	r3, [pc, #600]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004990:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	4993      	ldr	r1, [pc, #588]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ac:	4b8e      	ldr	r3, [pc, #568]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	498b      	ldr	r1, [pc, #556]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ce:	4b86      	ldr	r3, [pc, #536]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	4982      	ldr	r1, [pc, #520]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049f0:	4b7d      	ldr	r3, [pc, #500]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fe:	497a      	ldr	r1, [pc, #488]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a12:	4b75      	ldr	r3, [pc, #468]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a18:	f023 0203 	bic.w	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	4971      	ldr	r1, [pc, #452]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a34:	4b6c      	ldr	r3, [pc, #432]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f023 020c 	bic.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	4969      	ldr	r1, [pc, #420]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a56:	4b64      	ldr	r3, [pc, #400]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	4960      	ldr	r1, [pc, #384]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a78:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a86:	4958      	ldr	r1, [pc, #352]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9a:	4b53      	ldr	r3, [pc, #332]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa8:	494f      	ldr	r1, [pc, #316]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004abc:	4b4a      	ldr	r3, [pc, #296]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	4947      	ldr	r1, [pc, #284]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ade:	4b42      	ldr	r3, [pc, #264]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aec:	493e      	ldr	r1, [pc, #248]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b00:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	4936      	ldr	r1, [pc, #216]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d011      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b22:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b30:	492d      	ldr	r1, [pc, #180]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b52:	4b25      	ldr	r3, [pc, #148]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b60:	4921      	ldr	r1, [pc, #132]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b74:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b82:	4919      	ldr	r1, [pc, #100]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b96:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba4:	4910      	ldr	r1, [pc, #64]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d006      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 809d 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd fcee 	bl	80025ac <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd2:	e00b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bd4:	f7fd fcea 	bl	80025ac <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	@ 0x64
 8004be0:	d904      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e116      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bec:	4b8b      	ldr	r3, [pc, #556]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ed      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d017      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c0c:	4b83      	ldr	r3, [pc, #524]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c12:	0e1b      	lsrs	r3, r3, #24
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	071b      	lsls	r3, r3, #28
 8004c2c:	497b      	ldr	r1, [pc, #492]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5e:	d11f      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c60:	4b6e      	ldr	r3, [pc, #440]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c66:	0f1b      	lsrs	r3, r3, #28
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	019a      	lsls	r2, r3, #6
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	4966      	ldr	r1, [pc, #408]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c88:	4b64      	ldr	r3, [pc, #400]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8e:	f023 021f 	bic.w	r2, r3, #31
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	4960      	ldr	r1, [pc, #384]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00d      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	071b      	lsls	r3, r3, #28
 8004cc0:	4956      	ldr	r1, [pc, #344]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc8:	4b54      	ldr	r3, [pc, #336]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a53      	ldr	r2, [pc, #332]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fd fc6a 	bl	80025ac <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cdc:	f7fd fc66 	bl	80025ac <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	@ 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e092      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cee:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f040 8088 	bne.w	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d02:	4b46      	ldr	r3, [pc, #280]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a45      	ldr	r2, [pc, #276]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fd fc4d 	bl	80025ac <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d16:	f7fd fc49 	bl	80025ac <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b64      	cmp	r3, #100	@ 0x64
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e075      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d28:	4b3c      	ldr	r3, [pc, #240]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d34:	d0ef      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d024      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d120      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	019a      	lsls	r2, r3, #6
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	4927      	ldr	r1, [pc, #156]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d86:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d8c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4920      	ldr	r1, [pc, #128]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d018      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004db4:	d113      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbc:	0e1b      	lsrs	r3, r3, #24
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	019a      	lsls	r2, r3, #6
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	4911      	ldr	r1, [pc, #68]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dde:	4b0f      	ldr	r3, [pc, #60]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a0e      	ldr	r2, [pc, #56]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dea:	f7fd fbdf 	bl	80025ac <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004df2:	f7fd fbdb 	bl	80025ac <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b64      	cmp	r3, #100	@ 0x64
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e007      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e10:	d1ef      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800

08004e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e09d      	b.n	8004f6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e42:	d009      	beq.n	8004e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
 8004e4a:	e005      	b.n	8004e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd f82c 	bl	8001ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e98:	d902      	bls.n	8004ea0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e002      	b.n	8004ea6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eae:	d007      	beq.n	8004ec0 <HAL_SPI_Init+0xa0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	ea42 0103 	orr.w	r1, r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	f003 0204 	and.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f3c:	ea42 0103 	orr.w	r1, r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e049      	b.n	800501c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc fff9 	bl	8001f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f001 f81f 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d001      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e054      	b.n	80050e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a26      	ldr	r2, [pc, #152]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d01d      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a22      	ldr	r2, [pc, #136]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a21      	ldr	r2, [pc, #132]	@ (80050fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1f      	ldr	r2, [pc, #124]	@ (8005100 <HAL_TIM_Base_Start_IT+0xdc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1e      	ldr	r2, [pc, #120]	@ (8005104 <HAL_TIM_Base_Start_IT+0xe0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1c      	ldr	r2, [pc, #112]	@ (8005108 <HAL_TIM_Base_Start_IT+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <HAL_TIM_Base_Start_IT+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d115      	bne.n	80050d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	4b19      	ldr	r3, [pc, #100]	@ (8005110 <HAL_TIM_Base_Start_IT+0xec>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d015      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0xbe>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050bc:	d011      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	e008      	b.n	80050e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e000      	b.n	80050e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000
 800510c:	40001800 	.word	0x40001800
 8005110:	00010007 	.word	0x00010007

08005114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e049      	b.n	80051ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f841 	bl	80051c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 ff50 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x24>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e03c      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d109      	bne.n	8005216 <HAL_TIM_PWM_Start+0x3e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e02f      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x58>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e022      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x72>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e015      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b10      	cmp	r3, #16
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x8c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e092      	b.n	80053a4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xb6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	e023      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xc6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	e01b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	e013      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xe6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052bc:	e00b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start+0xf6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fb58 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <HAL_TIM_PWM_Start+0x1d4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_PWM_Start+0x120>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <HAL_TIM_PWM_Start+0x1d8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_PWM_Start+0x124>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Start+0x126>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a25      	ldr	r2, [pc, #148]	@ (80053ac <HAL_TIM_PWM_Start+0x1d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d01d      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <HAL_TIM_PWM_Start+0x1dc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a20      	ldr	r2, [pc, #128]	@ (80053b8 <HAL_TIM_PWM_Start+0x1e0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1f      	ldr	r2, [pc, #124]	@ (80053bc <HAL_TIM_PWM_Start+0x1e4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a19      	ldr	r2, [pc, #100]	@ (80053b0 <HAL_TIM_PWM_Start+0x1d8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_TIM_PWM_Start+0x1e8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a19      	ldr	r2, [pc, #100]	@ (80053c4 <HAL_TIM_PWM_Start+0x1ec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d115      	bne.n	800538e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	4b17      	ldr	r3, [pc, #92]	@ (80053c8 <HAL_TIM_PWM_Start+0x1f0>)
 800536a:	4013      	ands	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b06      	cmp	r3, #6
 8005372:	d015      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537a:	d011      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	e008      	b.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e000      	b.n	80053a2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800
 80053c8:	00010007 	.word	0x00010007

080053cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fad8 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a36      	ldr	r2, [pc, #216]	@ (80054c4 <HAL_TIM_PWM_Stop+0xf8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_PWM_Stop+0x2c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	@ (80054c8 <HAL_TIM_PWM_Stop+0xfc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_PWM_Stop+0x30>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_TIM_PWM_Stop+0x32>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d017      	beq.n	8005432 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f241 1311 	movw	r3, #4369	@ 0x1111
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_TIM_PWM_Stop+0x66>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	f240 4344 	movw	r3, #1092	@ 0x444
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <HAL_TIM_PWM_Stop+0x66>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	f241 1311 	movw	r3, #4369	@ 0x1111
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <HAL_TIM_PWM_Stop+0x96>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	f240 4344 	movw	r3, #1092	@ 0x444
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <HAL_TIM_PWM_Stop+0x96>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Stop+0xa6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005470:	e023      	b.n	80054ba <HAL_TIM_PWM_Stop+0xee>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b04      	cmp	r3, #4
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Stop+0xb6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005480:	e01b      	b.n	80054ba <HAL_TIM_PWM_Stop+0xee>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Stop+0xc6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005490:	e013      	b.n	80054ba <HAL_TIM_PWM_Stop+0xee>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0xd6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054a0:	e00b      	b.n	80054ba <HAL_TIM_PWM_Stop+0xee>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_PWM_Stop+0xe6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054b0:	e003      	b.n	80054ba <HAL_TIM_PWM_Stop+0xee>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e049      	b.n	8005572 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f841 	bl	800557a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 fd74 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_IT+0x1e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e023      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x66>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_IT+0x2e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e01b      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x66>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0x3e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e013      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x66>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_IT+0x4e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x66>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0x5e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e003      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x66>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <HAL_TIM_IC_Start_IT+0x78>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e013      	b.n	8005630 <HAL_TIM_IC_Start_IT+0xa0>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d104      	bne.n	8005618 <HAL_TIM_IC_Start_IT+0x88>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e00b      	b.n	8005630 <HAL_TIM_IC_Start_IT+0xa0>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b08      	cmp	r3, #8
 800561c:	d104      	bne.n	8005628 <HAL_TIM_IC_Start_IT+0x98>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e003      	b.n	8005630 <HAL_TIM_IC_Start_IT+0xa0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800562e:	b2db      	uxtb	r3, r3
 8005630:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d102      	bne.n	800563e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005638:	7b7b      	ldrb	r3, [r7, #13]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d001      	beq.n	8005642 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0e2      	b.n	8005808 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_TIM_IC_Start_IT+0xc2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005650:	e023      	b.n	800569a <HAL_TIM_IC_Start_IT+0x10a>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d104      	bne.n	8005662 <HAL_TIM_IC_Start_IT+0xd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005660:	e01b      	b.n	800569a <HAL_TIM_IC_Start_IT+0x10a>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d104      	bne.n	8005672 <HAL_TIM_IC_Start_IT+0xe2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005670:	e013      	b.n	800569a <HAL_TIM_IC_Start_IT+0x10a>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b0c      	cmp	r3, #12
 8005676:	d104      	bne.n	8005682 <HAL_TIM_IC_Start_IT+0xf2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005680:	e00b      	b.n	800569a <HAL_TIM_IC_Start_IT+0x10a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b10      	cmp	r3, #16
 8005686:	d104      	bne.n	8005692 <HAL_TIM_IC_Start_IT+0x102>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005690:	e003      	b.n	800569a <HAL_TIM_IC_Start_IT+0x10a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0x11a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a8:	e013      	b.n	80056d2 <HAL_TIM_IC_Start_IT+0x142>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_IC_Start_IT+0x12a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056b8:	e00b      	b.n	80056d2 <HAL_TIM_IC_Start_IT+0x142>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d104      	bne.n	80056ca <HAL_TIM_IC_Start_IT+0x13a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056c8:	e003      	b.n	80056d2 <HAL_TIM_IC_Start_IT+0x142>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d841      	bhi.n	800575c <HAL_TIM_IC_Start_IT+0x1cc>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <HAL_TIM_IC_Start_IT+0x150>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005715 	.word	0x08005715
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	0800575d 	.word	0x0800575d
 80056ec:	0800575d 	.word	0x0800575d
 80056f0:	08005727 	.word	0x08005727
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	0800575d 	.word	0x0800575d
 80056fc:	0800575d 	.word	0x0800575d
 8005700:	08005739 	.word	0x08005739
 8005704:	0800575d 	.word	0x0800575d
 8005708:	0800575d 	.word	0x0800575d
 800570c:	0800575d 	.word	0x0800575d
 8005710:	0800574b 	.word	0x0800574b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0202 	orr.w	r2, r2, #2
 8005722:	60da      	str	r2, [r3, #12]
      break;
 8005724:	e01d      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0204 	orr.w	r2, r2, #4
 8005734:	60da      	str	r2, [r3, #12]
      break;
 8005736:	e014      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	60da      	str	r2, [r3, #12]
      break;
 8005748:	e00b      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0210 	orr.w	r2, r2, #16
 8005758:	60da      	str	r2, [r3, #12]
      break;
 800575a:	e002      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	bf00      	nop
  }

  if (status == HAL_OK)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d14e      	bne.n	8005806 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f90f 	bl	8006994 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a25      	ldr	r2, [pc, #148]	@ (8005810 <HAL_TIM_IC_Start_IT+0x280>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005788:	d01d      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	@ (8005814 <HAL_TIM_IC_Start_IT+0x284>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <HAL_TIM_IC_Start_IT+0x288>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	@ (800581c <HAL_TIM_IC_Start_IT+0x28c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_TIM_IC_Start_IT+0x290>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <HAL_TIM_IC_Start_IT+0x294>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIM_IC_Start_IT+0x236>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <HAL_TIM_IC_Start_IT+0x298>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d115      	bne.n	80057f2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4b17      	ldr	r3, [pc, #92]	@ (800582c <HAL_TIM_IC_Start_IT+0x29c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	d015      	beq.n	8005804 <HAL_TIM_IC_Start_IT+0x274>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057de:	d011      	beq.n	8005804 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f0:	e008      	b.n	8005804 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e000      	b.n	8005806 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40010000 	.word	0x40010000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40010400 	.word	0x40010400
 8005824:	40014000 	.word	0x40014000
 8005828:	40001800 	.word	0x40001800
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fb fde0 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb9a 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fba1 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb fdba 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb74 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb7b 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d020      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01b      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0208 	mvn.w	r2, #8
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fd94 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fb4e 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb55 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb fd6e 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb28 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb2f 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb fef6 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fa41 	bl	8006e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00c      	beq.n	80059ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fa39 	bl	8006e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fae9 	bl	8005fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f06f 0220 	mvn.w	r2, #32
 8005a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fa01 	bl	8006e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e088      	b.n	8005b6e <HAL_TIM_IC_ConfigChannel+0x130>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11b      	bne.n	8005aa2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005a7a:	f000 fdc7 	bl	800660c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 020c 	bic.w	r2, r2, #12
 8005a8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6999      	ldr	r1, [r3, #24]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	619a      	str	r2, [r3, #24]
 8005aa0:	e060      	b.n	8005b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d11c      	bne.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ab8:	f000 fe4b 	bl	8006752 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005aca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	619a      	str	r2, [r3, #24]
 8005ae0:	e040      	b.n	8005b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005af8:	f000 fe98 	bl	800682c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 020c 	bic.w	r2, r2, #12
 8005b0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69d9      	ldr	r1, [r3, #28]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	61da      	str	r2, [r3, #28]
 8005b1e:	e021      	b.n	8005b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b0c      	cmp	r3, #12
 8005b24:	d11c      	bne.n	8005b60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b36:	f000 feb5 	bl	80068a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69d9      	ldr	r1, [r3, #28]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	021a      	lsls	r2, r3, #8
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	61da      	str	r2, [r3, #28]
 8005b5e:	e001      	b.n	8005b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0ff      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b14      	cmp	r3, #20
 8005ba2:	f200 80f0 	bhi.w	8005d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005d87 	.word	0x08005d87
 8005bb4:	08005d87 	.word	0x08005d87
 8005bb8:	08005d87 	.word	0x08005d87
 8005bbc:	08005c41 	.word	0x08005c41
 8005bc0:	08005d87 	.word	0x08005d87
 8005bc4:	08005d87 	.word	0x08005d87
 8005bc8:	08005d87 	.word	0x08005d87
 8005bcc:	08005c83 	.word	0x08005c83
 8005bd0:	08005d87 	.word	0x08005d87
 8005bd4:	08005d87 	.word	0x08005d87
 8005bd8:	08005d87 	.word	0x08005d87
 8005bdc:	08005cc3 	.word	0x08005cc3
 8005be0:	08005d87 	.word	0x08005d87
 8005be4:	08005d87 	.word	0x08005d87
 8005be8:	08005d87 	.word	0x08005d87
 8005bec:	08005d05 	.word	0x08005d05
 8005bf0:	08005d87 	.word	0x08005d87
 8005bf4:	08005d87 	.word	0x08005d87
 8005bf8:	08005d87 	.word	0x08005d87
 8005bfc:	08005d45 	.word	0x08005d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 faa2 	bl	8006150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e0a5      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 faf4 	bl	8006234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e084      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb4b 	bl	8006324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e064      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fba1 	bl	8006410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e043      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fbd8 	bl	80064c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0208 	orr.w	r2, r2, #8
 8005d1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0204 	bic.w	r2, r2, #4
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d42:	e023      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc0a 	bl	8006564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	021a      	lsls	r2, r3, #8
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d84:	e002      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop

08005da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_ConfigClockSource+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0b4      	b.n	8005f26 <HAL_TIM_ConfigClockSource+0x186>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4b56      	ldr	r3, [pc, #344]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x190>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d03e      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0xd4>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	f200 8087 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e02:	f000 8086 	beq.w	8005f12 <HAL_TIM_ConfigClockSource+0x172>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d87f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b70      	cmp	r3, #112	@ 0x70
 8005e0e:	d01a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xa6>
 8005e10:	2b70      	cmp	r3, #112	@ 0x70
 8005e12:	d87b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b60      	cmp	r3, #96	@ 0x60
 8005e16:	d050      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x11a>
 8005e18:	2b60      	cmp	r3, #96	@ 0x60
 8005e1a:	d877      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b50      	cmp	r3, #80	@ 0x50
 8005e1e:	d03c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xfa>
 8005e20:	2b50      	cmp	r3, #80	@ 0x50
 8005e22:	d873      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d058      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x13a>
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d86f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b30      	cmp	r3, #48	@ 0x30
 8005e2e:	d064      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e30:	2b30      	cmp	r3, #48	@ 0x30
 8005e32:	d86b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d060      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d867      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d05a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e44:	e062      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	f000 fd7d 	bl	8006954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
      break;
 8005e72:	e04f      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	f000 fd66 	bl	8006954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e96:	609a      	str	r2, [r3, #8]
      break;
 8005e98:	e03c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 fc24 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2150      	movs	r1, #80	@ 0x50
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fd33 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e02c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 fc80 	bl	80067cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2160      	movs	r1, #96	@ 0x60
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fd23 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 fc04 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2140      	movs	r1, #64	@ 0x40
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fd13 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e00c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 fd0a 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8005f0a:	e003      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e000      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	fffeff88 	.word	0xfffeff88

08005f34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d831      	bhi.n	8005fac <HAL_TIM_ReadCapturedValue+0x78>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005fad 	.word	0x08005fad
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005fad 	.word	0x08005fad
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8a:	60fb      	str	r3, [r7, #12]

      break;
 8005f8c:	e00f      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	60fb      	str	r3, [r7, #12]

      break;
 8005f96:	e00a      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9e:	60fb      	str	r3, [r7, #12]

      break;
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	60fb      	str	r3, [r7, #12]

      break;
 8005faa:	e000      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005fac:	bf00      	nop
  }

  return tmpreg;
 8005fae:	68fb      	ldr	r3, [r7, #12]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a46      	ldr	r2, [pc, #280]	@ (8006124 <TIM_Base_SetConfig+0x12c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006016:	d00f      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a43      	ldr	r2, [pc, #268]	@ (8006128 <TIM_Base_SetConfig+0x130>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a42      	ldr	r2, [pc, #264]	@ (800612c <TIM_Base_SetConfig+0x134>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a41      	ldr	r2, [pc, #260]	@ (8006130 <TIM_Base_SetConfig+0x138>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a40      	ldr	r2, [pc, #256]	@ (8006134 <TIM_Base_SetConfig+0x13c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a35      	ldr	r2, [pc, #212]	@ (8006124 <TIM_Base_SetConfig+0x12c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006058:	d027      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a32      	ldr	r2, [pc, #200]	@ (8006128 <TIM_Base_SetConfig+0x130>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d023      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a31      	ldr	r2, [pc, #196]	@ (800612c <TIM_Base_SetConfig+0x134>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a30      	ldr	r2, [pc, #192]	@ (8006130 <TIM_Base_SetConfig+0x138>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2f      	ldr	r2, [pc, #188]	@ (8006134 <TIM_Base_SetConfig+0x13c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a2e      	ldr	r2, [pc, #184]	@ (8006138 <TIM_Base_SetConfig+0x140>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2d      	ldr	r2, [pc, #180]	@ (800613c <TIM_Base_SetConfig+0x144>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2c      	ldr	r2, [pc, #176]	@ (8006140 <TIM_Base_SetConfig+0x148>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2b      	ldr	r2, [pc, #172]	@ (8006144 <TIM_Base_SetConfig+0x14c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2a      	ldr	r2, [pc, #168]	@ (8006148 <TIM_Base_SetConfig+0x150>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a29      	ldr	r2, [pc, #164]	@ (800614c <TIM_Base_SetConfig+0x154>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a10      	ldr	r2, [pc, #64]	@ (8006124 <TIM_Base_SetConfig+0x12c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0xf8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a12      	ldr	r2, [pc, #72]	@ (8006134 <TIM_Base_SetConfig+0x13c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d103      	bne.n	80060f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b01      	cmp	r3, #1
 8006108:	d105      	bne.n	8006116 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]
  }
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40010400 	.word	0x40010400
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	40014800 	.word	0x40014800
 8006144:	40001800 	.word	0x40001800
 8006148:	40001c00 	.word	0x40001c00
 800614c:	40002000 	.word	0x40002000

08006150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 0201 	bic.w	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4b2b      	ldr	r3, [pc, #172]	@ (8006228 <TIM_OC1_SetConfig+0xd8>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 0302 	bic.w	r3, r3, #2
 8006198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a21      	ldr	r2, [pc, #132]	@ (800622c <TIM_OC1_SetConfig+0xdc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_OC1_SetConfig+0x64>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a20      	ldr	r2, [pc, #128]	@ (8006230 <TIM_OC1_SetConfig+0xe0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10c      	bne.n	80061ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0308 	bic.w	r3, r3, #8
 80061ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a16      	ldr	r2, [pc, #88]	@ (800622c <TIM_OC1_SetConfig+0xdc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC1_SetConfig+0x8e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a15      	ldr	r2, [pc, #84]	@ (8006230 <TIM_OC1_SetConfig+0xe0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d111      	bne.n	8006202 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	fffeff8f 	.word	0xfffeff8f
 800622c:	40010000 	.word	0x40010000
 8006230:	40010400 	.word	0x40010400

08006234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0210 	bic.w	r2, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4b2e      	ldr	r3, [pc, #184]	@ (8006318 <TIM_OC2_SetConfig+0xe4>)
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800626a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0320 	bic.w	r3, r3, #32
 800627e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a23      	ldr	r2, [pc, #140]	@ (800631c <TIM_OC2_SetConfig+0xe8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_OC2_SetConfig+0x68>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a22      	ldr	r2, [pc, #136]	@ (8006320 <TIM_OC2_SetConfig+0xec>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10d      	bne.n	80062b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a18      	ldr	r2, [pc, #96]	@ (800631c <TIM_OC2_SetConfig+0xe8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC2_SetConfig+0x94>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <TIM_OC2_SetConfig+0xec>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d113      	bne.n	80062f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	feff8fff 	.word	0xfeff8fff
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4b2d      	ldr	r3, [pc, #180]	@ (8006404 <TIM_OC3_SetConfig+0xe0>)
 8006350:	4013      	ands	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a22      	ldr	r2, [pc, #136]	@ (8006408 <TIM_OC3_SetConfig+0xe4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_OC3_SetConfig+0x66>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a21      	ldr	r2, [pc, #132]	@ (800640c <TIM_OC3_SetConfig+0xe8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d10d      	bne.n	80063a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a17      	ldr	r2, [pc, #92]	@ (8006408 <TIM_OC3_SetConfig+0xe4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_OC3_SetConfig+0x92>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a16      	ldr	r2, [pc, #88]	@ (800640c <TIM_OC3_SetConfig+0xe8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d113      	bne.n	80063de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	621a      	str	r2, [r3, #32]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	fffeff8f 	.word	0xfffeff8f
 8006408:	40010000 	.word	0x40010000
 800640c:	40010400 	.word	0x40010400

08006410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4b1e      	ldr	r3, [pc, #120]	@ (80064b4 <TIM_OC4_SetConfig+0xa4>)
 800643c:	4013      	ands	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800645a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a13      	ldr	r2, [pc, #76]	@ (80064b8 <TIM_OC4_SetConfig+0xa8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC4_SetConfig+0x68>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <TIM_OC4_SetConfig+0xac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d109      	bne.n	800648c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800647e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	feff8fff 	.word	0xfeff8fff
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006558 <TIM_OC5_SetConfig+0x98>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a12      	ldr	r2, [pc, #72]	@ (800655c <TIM_OC5_SetConfig+0x9c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC5_SetConfig+0x5e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <TIM_OC5_SetConfig+0xa0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d109      	bne.n	8006532 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	fffeff8f 	.word	0xfffeff8f
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400

08006564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <TIM_OC6_SetConfig+0x9c>)
 8006590:	4013      	ands	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	051b      	lsls	r3, r3, #20
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <TIM_OC6_SetConfig+0xa0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC6_SetConfig+0x60>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a12      	ldr	r2, [pc, #72]	@ (8006608 <TIM_OC6_SetConfig+0xa4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d109      	bne.n	80065d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	029b      	lsls	r3, r3, #10
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	feff8fff 	.word	0xfeff8fff
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0201 	bic.w	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a28      	ldr	r2, [pc, #160]	@ (80066d8 <TIM_TI1_SetConfig+0xcc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01b      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006640:	d017      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a25      	ldr	r2, [pc, #148]	@ (80066dc <TIM_TI1_SetConfig+0xd0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a24      	ldr	r2, [pc, #144]	@ (80066e0 <TIM_TI1_SetConfig+0xd4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a23      	ldr	r2, [pc, #140]	@ (80066e4 <TIM_TI1_SetConfig+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a22      	ldr	r2, [pc, #136]	@ (80066e8 <TIM_TI1_SetConfig+0xdc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a21      	ldr	r2, [pc, #132]	@ (80066ec <TIM_TI1_SetConfig+0xe0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a20      	ldr	r2, [pc, #128]	@ (80066f0 <TIM_TI1_SetConfig+0xe4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <TIM_TI1_SetConfig+0x6a>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <TIM_TI1_SetConfig+0x6c>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e003      	b.n	8006696 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800669c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 030a 	bic.w	r3, r3, #10
 80066b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 030a 	and.w	r3, r3, #10
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800

080066f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0201 	bic.w	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 030a 	bic.w	r3, r3, #10
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006752:	b480      	push	{r7}
 8006754:	b087      	sub	sp, #28
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0210 	bic.w	r2, r3, #16
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	031b      	lsls	r3, r3, #12
 8006796:	b29b      	uxth	r3, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0210 	bic.w	r2, r3, #16
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	031b      	lsls	r3, r3, #12
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006808:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	b2db      	uxtb	r3, r3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800687c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	031b      	lsls	r3, r3, #12
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	031b      	lsls	r3, r3, #12
 80068fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	f043 0307 	orr.w	r3, r3, #7
 8006940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800696e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	431a      	orrs	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4313      	orrs	r3, r2
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	609a      	str	r2, [r3, #8]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2201      	movs	r2, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_TIMEx_PWMN_Start+0x24>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e022      	b.n	8006a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d109      	bne.n	8006a1e <HAL_TIMEx_PWMN_Start+0x3e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e015      	b.n	8006a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d109      	bne.n	8006a38 <HAL_TIMEx_PWMN_Start+0x58>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e008      	b.n	8006a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e073      	b.n	8006b3a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_TIMEx_PWMN_Start+0x82>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a60:	e013      	b.n	8006a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d104      	bne.n	8006a72 <HAL_TIMEx_PWMN_Start+0x92>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a70:	e00b      	b.n	8006a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d104      	bne.n	8006a82 <HAL_TIMEx_PWMN_Start+0xa2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a80:	e003      	b.n	8006a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f9ee 	bl	8006e74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a25      	ldr	r2, [pc, #148]	@ (8006b44 <HAL_TIMEx_PWMN_Start+0x164>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aba:	d01d      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a21      	ldr	r2, [pc, #132]	@ (8006b48 <HAL_TIMEx_PWMN_Start+0x168>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a20      	ldr	r2, [pc, #128]	@ (8006b4c <HAL_TIMEx_PWMN_Start+0x16c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b50 <HAL_TIMEx_PWMN_Start+0x170>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <HAL_TIMEx_PWMN_Start+0x174>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <HAL_TIMEx_PWMN_Start+0x178>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_TIMEx_PWMN_Start+0x118>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b5c <HAL_TIMEx_PWMN_Start+0x17c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d115      	bne.n	8006b24 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	4b18      	ldr	r3, [pc, #96]	@ (8006b60 <HAL_TIMEx_PWMN_Start+0x180>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b06      	cmp	r3, #6
 8006b08:	d015      	beq.n	8006b36 <HAL_TIMEx_PWMN_Start+0x156>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b10:	d011      	beq.n	8006b36 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	e008      	b.n	8006b36 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e000      	b.n	8006b38 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40000c00 	.word	0x40000c00
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40001800 	.word	0x40001800
 8006b60:	00010007 	.word	0x00010007

08006b64 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2200      	movs	r2, #0
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f97c 	bl	8006e74 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_TIMEx_PWMN_Stop+0x48>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <HAL_TIMEx_PWMN_Stop+0x48>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10f      	bne.n	8006bdc <HAL_TIMEx_PWMN_Stop+0x78>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_TIMEx_PWMN_Stop+0x78>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_TIMEx_PWMN_Stop+0x88>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bea:	e013      	b.n	8006c14 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIMEx_PWMN_Stop+0x98>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bfa:	e00b      	b.n	8006c14 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d104      	bne.n	8006c0c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c0a:	e003      	b.n	8006c14 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e06d      	b.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a30      	ldr	r2, [pc, #192]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a20      	ldr	r2, [pc, #128]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	d01d      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10c      	bne.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	40010000 	.word	0x40010000
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
 8006d30:	40000c00 	.word	0x40000c00
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40001800 	.word	0x40001800

08006d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e065      	b.n	8006e24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	@ (8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a14      	ldr	r2, [pc, #80]	@ (8006e34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d115      	bne.n	8006e12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	051b      	lsls	r3, r3, #20
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40010400 	.word	0x40010400

08006e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	2204      	movs	r2, #4
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	401a      	ands	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e040      	b.n	8006f52 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fb f92d 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2224      	movs	r2, #36	@ 0x24
 8006eea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fed1 	bl	8007cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fc6a 	bl	80077e4 <UART_SetConfig>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e01b      	b.n	8006f52 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 ff50 	bl	8007df0 <UART_CheckIdleState>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e02f      	b.n	8006fcc <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	@ 0x24
 8006f70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fb f99c 	bl	80022d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d165      	bne.n	80070b6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <HAL_UART_Transmit_DMA+0x22>
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e05e      	b.n	80070b8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2221      	movs	r2, #33	@ 0x21
 800701c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007022:	2b00      	cmp	r3, #0
 8007024:	d027      	beq.n	8007076 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <HAL_UART_Transmit_DMA+0xec>)
 800702c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007032:	4a24      	ldr	r2, [pc, #144]	@ (80070c4 <HAL_UART_Transmit_DMA+0xf0>)
 8007034:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703a:	4a23      	ldr	r2, [pc, #140]	@ (80070c8 <HAL_UART_Transmit_DMA+0xf4>)
 800703c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	2200      	movs	r2, #0
 8007044:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704e:	4619      	mov	r1, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3328      	adds	r3, #40	@ 0x28
 8007056:	461a      	mov	r2, r3
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	f7fc f803 	bl	8003064 <HAL_DMA_Start_IT>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2210      	movs	r2, #16
 8007068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e020      	b.n	80070b8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2240      	movs	r2, #64	@ 0x40
 800707c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	613b      	str	r3, [r7, #16]
   return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709e:	623a      	str	r2, [r7, #32]
 80070a0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	@ 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	080081cd 	.word	0x080081cd
 80070c4:	08008263 	.word	0x08008263
 80070c8:	080083e5 	.word	0x080083e5

080070cc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b090      	sub	sp, #64	@ 0x40
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e0:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ec:	2b80      	cmp	r3, #128	@ 0x80
 80070ee:	d139      	bne.n	8007164 <HAL_UART_DMAStop+0x98>
 80070f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f2:	2b21      	cmp	r3, #33	@ 0x21
 80070f4:	d136      	bne.n	8007164 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	61fb      	str	r3, [r7, #28]
   return(result);
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800711c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	2b00      	cmp	r3, #0
 8007130:	d015      	beq.n	800715e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007136:	4618      	mov	r0, r3
 8007138:	f7fb fff4 	bl	8003124 <HAL_DMA_Abort>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	4618      	mov	r0, r3
 8007148:	f7fc fa08 	bl	800355c <HAL_DMA_GetError>
 800714c:	4603      	mov	r3, r0
 800714e:	2b20      	cmp	r3, #32
 8007150:	d105      	bne.n	800715e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2210      	movs	r2, #16
 8007156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e044      	b.n	80071e8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 ffaa 	bl	80080b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d139      	bne.n	80071e6 <HAL_UART_DMAStop+0x11a>
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	2b22      	cmp	r3, #34	@ 0x22
 8007176:	d136      	bne.n	80071e6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007198:	61ba      	str	r2, [r7, #24]
 800719a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fb ffb3 	bl	8003124 <HAL_DMA_Abort>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00d      	beq.n	80071e0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fc f9c7 	bl	800355c <HAL_DMA_GetError>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d105      	bne.n	80071e0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2210      	movs	r2, #16
 80071d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e003      	b.n	80071e8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 ff8f 	bl	8008104 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3740      	adds	r7, #64	@ 0x40
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b0ba      	sub	sp, #232	@ 0xe8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007216:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800721a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800721e:	4013      	ands	r3, r2
 8007220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d115      	bne.n	8007258 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00f      	beq.n	8007258 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8297 	beq.w	800777c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
      }
      return;
 8007256:	e291      	b.n	800777c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8117 	beq.w	8007490 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800726e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007272:	4b85      	ldr	r3, [pc, #532]	@ (8007488 <HAL_UART_IRQHandler+0x298>)
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 810a 	beq.w	8007490 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800727c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d011      	beq.n	80072ac <HAL_UART_IRQHandler+0xbc>
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2201      	movs	r2, #1
 800729a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a2:	f043 0201 	orr.w	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d011      	beq.n	80072dc <HAL_UART_IRQHandler+0xec>
 80072b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2202      	movs	r2, #2
 80072ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d2:	f043 0204 	orr.w	r2, r3, #4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d011      	beq.n	800730c <HAL_UART_IRQHandler+0x11c>
 80072e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2204      	movs	r2, #4
 80072fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007328:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733e:	f043 0208 	orr.w	r2, r3, #8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <HAL_UART_IRQHandler+0x18a>
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007358:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81fd 	beq.w	8007780 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c2:	2b40      	cmp	r3, #64	@ 0x40
 80073c4:	d005      	beq.n	80073d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d04f      	beq.n	8007472 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fe96 	bl	8008104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e2:	2b40      	cmp	r3, #64	@ 0x40
 80073e4:	d141      	bne.n	800746a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800741e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800742a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1d9      	bne.n	80073e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007436:	2b00      	cmp	r3, #0
 8007438:	d013      	beq.n	8007462 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800743e:	4a13      	ldr	r2, [pc, #76]	@ (800748c <HAL_UART_IRQHandler+0x29c>)
 8007440:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007446:	4618      	mov	r0, r3
 8007448:	f7fb fedc 	bl	8003204 <HAL_DMA_Abort_IT>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d017      	beq.n	8007482 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007460:	e00f      	b.n	8007482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f9b4 	bl	80077d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	e00b      	b.n	8007482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9b0 	bl	80077d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007470:	e007      	b.n	8007482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9ac 	bl	80077d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007480:	e17e      	b.n	8007780 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007482:	bf00      	nop
    return;
 8007484:	e17c      	b.n	8007780 <HAL_UART_IRQHandler+0x590>
 8007486:	bf00      	nop
 8007488:	04000120 	.word	0x04000120
 800748c:	08008463 	.word	0x08008463

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 814c 	bne.w	8007732 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8145 	beq.w	8007732 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 813e 	beq.w	8007732 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2210      	movs	r2, #16
 80074bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c8:	2b40      	cmp	r3, #64	@ 0x40
 80074ca:	f040 80b6 	bne.w	800763a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8150 	beq.w	8007784 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074ee:	429a      	cmp	r2, r3
 80074f0:	f080 8148 	bcs.w	8007784 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007508:	f000 8086 	beq.w	8007618 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800753a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007542:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800754e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1da      	bne.n	800750c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800757a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800757e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800758c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e1      	bne.n	8007556 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e3      	bne.n	8007592 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e8:	f023 0310 	bic.w	r3, r3, #16
 80075ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e4      	bne.n	80075d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007612:	4618      	mov	r0, r3
 8007614:	f7fb fd86 	bl	8003124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800762a:	b29b      	uxth	r3, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 fe16 	bl	8001264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007638:	e0a4      	b.n	8007784 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007646:	b29b      	uxth	r3, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8096 	beq.w	8007788 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800765c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8091 	beq.w	8007788 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800767a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007688:	647b      	str	r3, [r7, #68]	@ 0x44
 800768a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800768e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e4      	bne.n	8007666 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	623b      	str	r3, [r7, #32]
   return(result);
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80076c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e3      	bne.n	800769c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	69b9      	ldr	r1, [r7, #24]
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	617b      	str	r3, [r7, #20]
   return(result);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e4      	bne.n	80076e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7f9 fd9a 	bl	8001264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007730:	e02a      	b.n	8007788 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800773e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d008      	beq.n	800775c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01c      	beq.n	800778c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
    }
    return;
 800775a:	e017      	b.n	800778c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <HAL_UART_IRQHandler+0x59e>
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fe8a 	bl	800848e <UART_EndTransmit_IT>
    return;
 800777a:	e008      	b.n	800778e <HAL_UART_IRQHandler+0x59e>
      return;
 800777c:	bf00      	nop
 800777e:	e006      	b.n	800778e <HAL_UART_IRQHandler+0x59e>
    return;
 8007780:	bf00      	nop
 8007782:	e004      	b.n	800778e <HAL_UART_IRQHandler+0x59e>
      return;
 8007784:	bf00      	nop
 8007786:	e002      	b.n	800778e <HAL_UART_IRQHandler+0x59e>
      return;
 8007788:	bf00      	nop
 800778a:	e000      	b.n	800778e <HAL_UART_IRQHandler+0x59e>
    return;
 800778c:	bf00      	nop
  }

}
 800778e:	37e8      	adds	r7, #232	@ 0xe8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4ba6      	ldr	r3, [pc, #664]	@ (8007aa8 <UART_SetConfig+0x2c4>)
 8007810:	4013      	ands	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	6979      	ldr	r1, [r7, #20]
 8007818:	430b      	orrs	r3, r1
 800781a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	430a      	orrs	r2, r1
 8007854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a94      	ldr	r2, [pc, #592]	@ (8007aac <UART_SetConfig+0x2c8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d120      	bne.n	80078a2 <UART_SetConfig+0xbe>
 8007860:	4b93      	ldr	r3, [pc, #588]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b03      	cmp	r3, #3
 800786c:	d816      	bhi.n	800789c <UART_SetConfig+0xb8>
 800786e:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <UART_SetConfig+0x90>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	08007885 	.word	0x08007885
 8007878:	08007891 	.word	0x08007891
 800787c:	0800788b 	.word	0x0800788b
 8007880:	08007897 	.word	0x08007897
 8007884:	2301      	movs	r3, #1
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e150      	b.n	8007b2c <UART_SetConfig+0x348>
 800788a:	2302      	movs	r3, #2
 800788c:	77fb      	strb	r3, [r7, #31]
 800788e:	e14d      	b.n	8007b2c <UART_SetConfig+0x348>
 8007890:	2304      	movs	r3, #4
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e14a      	b.n	8007b2c <UART_SetConfig+0x348>
 8007896:	2308      	movs	r3, #8
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e147      	b.n	8007b2c <UART_SetConfig+0x348>
 800789c:	2310      	movs	r3, #16
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e144      	b.n	8007b2c <UART_SetConfig+0x348>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a83      	ldr	r2, [pc, #524]	@ (8007ab4 <UART_SetConfig+0x2d0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d132      	bne.n	8007912 <UART_SetConfig+0x12e>
 80078ac:	4b80      	ldr	r3, [pc, #512]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b0c      	cmp	r3, #12
 80078b8:	d828      	bhi.n	800790c <UART_SetConfig+0x128>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <UART_SetConfig+0xdc>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078f5 	.word	0x080078f5
 80078c4:	0800790d 	.word	0x0800790d
 80078c8:	0800790d 	.word	0x0800790d
 80078cc:	0800790d 	.word	0x0800790d
 80078d0:	08007901 	.word	0x08007901
 80078d4:	0800790d 	.word	0x0800790d
 80078d8:	0800790d 	.word	0x0800790d
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	080078fb 	.word	0x080078fb
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	08007907 	.word	0x08007907
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e118      	b.n	8007b2c <UART_SetConfig+0x348>
 80078fa:	2302      	movs	r3, #2
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e115      	b.n	8007b2c <UART_SetConfig+0x348>
 8007900:	2304      	movs	r3, #4
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e112      	b.n	8007b2c <UART_SetConfig+0x348>
 8007906:	2308      	movs	r3, #8
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e10f      	b.n	8007b2c <UART_SetConfig+0x348>
 800790c:	2310      	movs	r3, #16
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e10c      	b.n	8007b2c <UART_SetConfig+0x348>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a68      	ldr	r2, [pc, #416]	@ (8007ab8 <UART_SetConfig+0x2d4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d120      	bne.n	800795e <UART_SetConfig+0x17a>
 800791c:	4b64      	ldr	r3, [pc, #400]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007926:	2b30      	cmp	r3, #48	@ 0x30
 8007928:	d013      	beq.n	8007952 <UART_SetConfig+0x16e>
 800792a:	2b30      	cmp	r3, #48	@ 0x30
 800792c:	d814      	bhi.n	8007958 <UART_SetConfig+0x174>
 800792e:	2b20      	cmp	r3, #32
 8007930:	d009      	beq.n	8007946 <UART_SetConfig+0x162>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d810      	bhi.n	8007958 <UART_SetConfig+0x174>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <UART_SetConfig+0x15c>
 800793a:	2b10      	cmp	r3, #16
 800793c:	d006      	beq.n	800794c <UART_SetConfig+0x168>
 800793e:	e00b      	b.n	8007958 <UART_SetConfig+0x174>
 8007940:	2300      	movs	r3, #0
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e0f2      	b.n	8007b2c <UART_SetConfig+0x348>
 8007946:	2302      	movs	r3, #2
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e0ef      	b.n	8007b2c <UART_SetConfig+0x348>
 800794c:	2304      	movs	r3, #4
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e0ec      	b.n	8007b2c <UART_SetConfig+0x348>
 8007952:	2308      	movs	r3, #8
 8007954:	77fb      	strb	r3, [r7, #31]
 8007956:	e0e9      	b.n	8007b2c <UART_SetConfig+0x348>
 8007958:	2310      	movs	r3, #16
 800795a:	77fb      	strb	r3, [r7, #31]
 800795c:	e0e6      	b.n	8007b2c <UART_SetConfig+0x348>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a56      	ldr	r2, [pc, #344]	@ (8007abc <UART_SetConfig+0x2d8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d120      	bne.n	80079aa <UART_SetConfig+0x1c6>
 8007968:	4b51      	ldr	r3, [pc, #324]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007972:	2bc0      	cmp	r3, #192	@ 0xc0
 8007974:	d013      	beq.n	800799e <UART_SetConfig+0x1ba>
 8007976:	2bc0      	cmp	r3, #192	@ 0xc0
 8007978:	d814      	bhi.n	80079a4 <UART_SetConfig+0x1c0>
 800797a:	2b80      	cmp	r3, #128	@ 0x80
 800797c:	d009      	beq.n	8007992 <UART_SetConfig+0x1ae>
 800797e:	2b80      	cmp	r3, #128	@ 0x80
 8007980:	d810      	bhi.n	80079a4 <UART_SetConfig+0x1c0>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <UART_SetConfig+0x1a8>
 8007986:	2b40      	cmp	r3, #64	@ 0x40
 8007988:	d006      	beq.n	8007998 <UART_SetConfig+0x1b4>
 800798a:	e00b      	b.n	80079a4 <UART_SetConfig+0x1c0>
 800798c:	2300      	movs	r3, #0
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e0cc      	b.n	8007b2c <UART_SetConfig+0x348>
 8007992:	2302      	movs	r3, #2
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e0c9      	b.n	8007b2c <UART_SetConfig+0x348>
 8007998:	2304      	movs	r3, #4
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e0c6      	b.n	8007b2c <UART_SetConfig+0x348>
 800799e:	2308      	movs	r3, #8
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e0c3      	b.n	8007b2c <UART_SetConfig+0x348>
 80079a4:	2310      	movs	r3, #16
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e0c0      	b.n	8007b2c <UART_SetConfig+0x348>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a44      	ldr	r2, [pc, #272]	@ (8007ac0 <UART_SetConfig+0x2dc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d125      	bne.n	8007a00 <UART_SetConfig+0x21c>
 80079b4:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079c2:	d017      	beq.n	80079f4 <UART_SetConfig+0x210>
 80079c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079c8:	d817      	bhi.n	80079fa <UART_SetConfig+0x216>
 80079ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ce:	d00b      	beq.n	80079e8 <UART_SetConfig+0x204>
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d4:	d811      	bhi.n	80079fa <UART_SetConfig+0x216>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <UART_SetConfig+0x1fe>
 80079da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079de:	d006      	beq.n	80079ee <UART_SetConfig+0x20a>
 80079e0:	e00b      	b.n	80079fa <UART_SetConfig+0x216>
 80079e2:	2300      	movs	r3, #0
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e0a1      	b.n	8007b2c <UART_SetConfig+0x348>
 80079e8:	2302      	movs	r3, #2
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e09e      	b.n	8007b2c <UART_SetConfig+0x348>
 80079ee:	2304      	movs	r3, #4
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e09b      	b.n	8007b2c <UART_SetConfig+0x348>
 80079f4:	2308      	movs	r3, #8
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e098      	b.n	8007b2c <UART_SetConfig+0x348>
 80079fa:	2310      	movs	r3, #16
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e095      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a2f      	ldr	r2, [pc, #188]	@ (8007ac4 <UART_SetConfig+0x2e0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d125      	bne.n	8007a56 <UART_SetConfig+0x272>
 8007a0a:	4b29      	ldr	r3, [pc, #164]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a18:	d017      	beq.n	8007a4a <UART_SetConfig+0x266>
 8007a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a1e:	d817      	bhi.n	8007a50 <UART_SetConfig+0x26c>
 8007a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a24:	d00b      	beq.n	8007a3e <UART_SetConfig+0x25a>
 8007a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2a:	d811      	bhi.n	8007a50 <UART_SetConfig+0x26c>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <UART_SetConfig+0x254>
 8007a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a34:	d006      	beq.n	8007a44 <UART_SetConfig+0x260>
 8007a36:	e00b      	b.n	8007a50 <UART_SetConfig+0x26c>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	77fb      	strb	r3, [r7, #31]
 8007a3c:	e076      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	77fb      	strb	r3, [r7, #31]
 8007a42:	e073      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a44:	2304      	movs	r3, #4
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e070      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	e06d      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a50:	2310      	movs	r3, #16
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e06a      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d138      	bne.n	8007ad2 <UART_SetConfig+0x2ee>
 8007a60:	4b13      	ldr	r3, [pc, #76]	@ (8007ab0 <UART_SetConfig+0x2cc>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a6e:	d017      	beq.n	8007aa0 <UART_SetConfig+0x2bc>
 8007a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a74:	d82a      	bhi.n	8007acc <UART_SetConfig+0x2e8>
 8007a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a7a:	d00b      	beq.n	8007a94 <UART_SetConfig+0x2b0>
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a80:	d824      	bhi.n	8007acc <UART_SetConfig+0x2e8>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <UART_SetConfig+0x2aa>
 8007a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a8a:	d006      	beq.n	8007a9a <UART_SetConfig+0x2b6>
 8007a8c:	e01e      	b.n	8007acc <UART_SetConfig+0x2e8>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e04b      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a94:	2302      	movs	r3, #2
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e048      	b.n	8007b2c <UART_SetConfig+0x348>
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e045      	b.n	8007b2c <UART_SetConfig+0x348>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e042      	b.n	8007b2c <UART_SetConfig+0x348>
 8007aa6:	bf00      	nop
 8007aa8:	efff69f3 	.word	0xefff69f3
 8007aac:	40011000 	.word	0x40011000
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40004400 	.word	0x40004400
 8007ab8:	40004800 	.word	0x40004800
 8007abc:	40004c00 	.word	0x40004c00
 8007ac0:	40005000 	.word	0x40005000
 8007ac4:	40011400 	.word	0x40011400
 8007ac8:	40007800 	.word	0x40007800
 8007acc:	2310      	movs	r3, #16
 8007ace:	77fb      	strb	r3, [r7, #31]
 8007ad0:	e02c      	b.n	8007b2c <UART_SetConfig+0x348>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a72      	ldr	r2, [pc, #456]	@ (8007ca0 <UART_SetConfig+0x4bc>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d125      	bne.n	8007b28 <UART_SetConfig+0x344>
 8007adc:	4b71      	ldr	r3, [pc, #452]	@ (8007ca4 <UART_SetConfig+0x4c0>)
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ae6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007aea:	d017      	beq.n	8007b1c <UART_SetConfig+0x338>
 8007aec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007af0:	d817      	bhi.n	8007b22 <UART_SetConfig+0x33e>
 8007af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af6:	d00b      	beq.n	8007b10 <UART_SetConfig+0x32c>
 8007af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007afc:	d811      	bhi.n	8007b22 <UART_SetConfig+0x33e>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <UART_SetConfig+0x326>
 8007b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b06:	d006      	beq.n	8007b16 <UART_SetConfig+0x332>
 8007b08:	e00b      	b.n	8007b22 <UART_SetConfig+0x33e>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e00d      	b.n	8007b2c <UART_SetConfig+0x348>
 8007b10:	2302      	movs	r3, #2
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e00a      	b.n	8007b2c <UART_SetConfig+0x348>
 8007b16:	2304      	movs	r3, #4
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e007      	b.n	8007b2c <UART_SetConfig+0x348>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e004      	b.n	8007b2c <UART_SetConfig+0x348>
 8007b22:	2310      	movs	r3, #16
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e001      	b.n	8007b2c <UART_SetConfig+0x348>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b34:	d15b      	bne.n	8007bee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007b36:	7ffb      	ldrb	r3, [r7, #31]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d828      	bhi.n	8007b8e <UART_SetConfig+0x3aa>
 8007b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <UART_SetConfig+0x360>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b8f 	.word	0x08007b8f
 8007b54:	08007b7f 	.word	0x08007b7f
 8007b58:	08007b8f 	.word	0x08007b8f
 8007b5c:	08007b8f 	.word	0x08007b8f
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b68:	f7fc fdb6 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8007b6c:	61b8      	str	r0, [r7, #24]
        break;
 8007b6e:	e013      	b.n	8007b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b70:	f7fc fdc6 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8007b74:	61b8      	str	r0, [r7, #24]
        break;
 8007b76:	e00f      	b.n	8007b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b4b      	ldr	r3, [pc, #300]	@ (8007ca8 <UART_SetConfig+0x4c4>)
 8007b7a:	61bb      	str	r3, [r7, #24]
        break;
 8007b7c:	e00c      	b.n	8007b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fc fc9b 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8007b82:	61b8      	str	r0, [r7, #24]
        break;
 8007b84:	e008      	b.n	8007b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8a:	61bb      	str	r3, [r7, #24]
        break;
 8007b8c:	e004      	b.n	8007b98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	77bb      	strb	r3, [r7, #30]
        break;
 8007b96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d074      	beq.n	8007c88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	005a      	lsls	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d916      	bls.n	8007be8 <UART_SetConfig+0x404>
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc0:	d212      	bcs.n	8007be8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f023 030f 	bic.w	r3, r3, #15
 8007bca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	89fa      	ldrh	r2, [r7, #14]
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	e04f      	b.n	8007c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	77bb      	strb	r3, [r7, #30]
 8007bec:	e04c      	b.n	8007c88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d828      	bhi.n	8007c46 <UART_SetConfig+0x462>
 8007bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <UART_SetConfig+0x418>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c31 	.word	0x08007c31
 8007c08:	08007c47 	.word	0x08007c47
 8007c0c:	08007c37 	.word	0x08007c37
 8007c10:	08007c47 	.word	0x08007c47
 8007c14:	08007c47 	.word	0x08007c47
 8007c18:	08007c47 	.word	0x08007c47
 8007c1c:	08007c3f 	.word	0x08007c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fc fd5a 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8007c24:	61b8      	str	r0, [r7, #24]
        break;
 8007c26:	e013      	b.n	8007c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7fc fd6a 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8007c2c:	61b8      	str	r0, [r7, #24]
        break;
 8007c2e:	e00f      	b.n	8007c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca8 <UART_SetConfig+0x4c4>)
 8007c32:	61bb      	str	r3, [r7, #24]
        break;
 8007c34:	e00c      	b.n	8007c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c36:	f7fc fc3f 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8007c3a:	61b8      	str	r0, [r7, #24]
        break;
 8007c3c:	e008      	b.n	8007c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e004      	b.n	8007c50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8007c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d018      	beq.n	8007c88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	085a      	lsrs	r2, r3, #1
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	441a      	add	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d909      	bls.n	8007c84 <UART_SetConfig+0x4a0>
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c76:	d205      	bcs.n	8007c84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e001      	b.n	8007c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c94:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40007c00 	.word	0x40007c00
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	00f42400 	.word	0x00f42400

08007cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007daa:	d10a      	bne.n	8007dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08c      	sub	sp, #48	@ 0x30
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e00:	f7fa fbd4 	bl	80025ac <HAL_GetTick>
 8007e04:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d12e      	bne.n	8007e72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f83b 	bl	8007e9e <UART_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d021      	beq.n	8007e72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e42:	623b      	str	r3, [r7, #32]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69b9      	ldr	r1, [r7, #24]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e011      	b.n	8007e96 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3728      	adds	r7, #40	@ 0x28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eae:	e04f      	b.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d04b      	beq.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb8:	f7fa fb78 	bl	80025ac <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d302      	bcc.n	8007ece <UART_WaitOnFlagUntilTimeout+0x30>
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e04e      	b.n	8007f70 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d037      	beq.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b80      	cmp	r3, #128	@ 0x80
 8007ee4:	d034      	beq.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d031      	beq.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d110      	bne.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2208      	movs	r2, #8
 8007f00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f8fe 	bl	8008104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e029      	b.n	8007f70 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f2a:	d111      	bne.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f8e4 	bl	8008104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e00f      	b.n	8007f70 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d0a0      	beq.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b096      	sub	sp, #88	@ 0x58
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	88fa      	ldrh	r2, [r7, #6]
 8007f90:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2222      	movs	r2, #34	@ 0x22
 8007fa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d028      	beq.n	8007ffe <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80080ac <UART_Start_Receive_DMA+0x134>)
 8007fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80080b0 <UART_Start_Receive_DMA+0x138>)
 8007fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80080b4 <UART_Start_Receive_DMA+0x13c>)
 8007fc2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fc8:	2200      	movs	r2, #0
 8007fca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3324      	adds	r3, #36	@ 0x24
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	461a      	mov	r2, r3
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	f7fb f840 	bl	8003064 <HAL_DMA_Start_IT>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2210      	movs	r2, #16
 8007fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e051      	b.n	80080a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d018      	beq.n	8008038 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800801a:	657b      	str	r3, [r7, #84]	@ 0x54
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008026:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800802a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e6      	bne.n	8008006 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3308      	adds	r3, #8
 800803e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008058:	637a      	str	r2, [r7, #52]	@ 0x34
 800805a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800805e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3308      	adds	r3, #8
 8008072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	613b      	str	r3, [r7, #16]
   return(result);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800808c:	623a      	str	r2, [r7, #32]
 800808e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	61bb      	str	r3, [r7, #24]
   return(result);
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e5      	bne.n	800806c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3758      	adds	r7, #88	@ 0x58
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	0800827f 	.word	0x0800827f
 80080b0:	080083a7 	.word	0x080083a7
 80080b4:	080083e5 	.word	0x080083e5

080080b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b089      	sub	sp, #36	@ 0x24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6979      	ldr	r1, [r7, #20]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	613b      	str	r3, [r7, #16]
   return(result);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e6      	bne.n	80080c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80080f8:	bf00      	nop
 80080fa:	3724      	adds	r7, #36	@ 0x24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b095      	sub	sp, #84	@ 0x54
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800812a:	643b      	str	r3, [r7, #64]	@ 0x40
 800812c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e6      	bne.n	800810c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	61fb      	str	r3, [r7, #28]
   return(result);
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800815e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008176:	2b01      	cmp	r3, #1
 8008178:	d118      	bne.n	80081ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	60bb      	str	r3, [r7, #8]
   return(result);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f023 0310 	bic.w	r3, r3, #16
 800818e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6979      	ldr	r1, [r7, #20]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	613b      	str	r3, [r7, #16]
   return(result);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e6      	bne.n	800817a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80081c0:	bf00      	nop
 80081c2:	3754      	adds	r7, #84	@ 0x54
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b090      	sub	sp, #64	@ 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e2:	d037      	beq.n	8008254 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80081e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3308      	adds	r3, #8
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	623b      	str	r3, [r7, #32]
   return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800820c:	633a      	str	r2, [r7, #48]	@ 0x30
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e5      	bne.n	80081ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60fb      	str	r3, [r7, #12]
   return(result);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	69b9      	ldr	r1, [r7, #24]
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	617b      	str	r3, [r7, #20]
   return(result);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008252:	e002      	b.n	800825a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008254:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008256:	f7f8 ffcb 	bl	80011f0 <HAL_UART_TxCpltCallback>
}
 800825a:	bf00      	nop
 800825c:	3740      	adds	r7, #64	@ 0x40
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fa8f 	bl	8007794 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b09c      	sub	sp, #112	@ 0x70
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008294:	d071      	beq.n	800837a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008298:	2200      	movs	r2, #0
 800829a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800829e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80082e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3308      	adds	r3, #8
 80082ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082f0:	647a      	str	r2, [r7, #68]	@ 0x44
 80082f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	623b      	str	r3, [r7, #32]
   return(result);
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800831a:	663b      	str	r3, [r7, #96]	@ 0x60
 800831c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008324:	633a      	str	r2, [r7, #48]	@ 0x30
 8008326:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800833a:	2220      	movs	r2, #32
 800833c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008344:	2b01      	cmp	r3, #1
 8008346:	d118      	bne.n	800837a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	60fb      	str	r3, [r7, #12]
   return(result);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f023 0310 	bic.w	r3, r3, #16
 800835c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800835e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	69b9      	ldr	r1, [r7, #24]
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	617b      	str	r3, [r7, #20]
   return(result);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800837a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800837c:	2200      	movs	r2, #0
 800837e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008384:	2b01      	cmp	r3, #1
 8008386:	d107      	bne.n	8008398 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800838e:	4619      	mov	r1, r3
 8008390:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008392:	f7f8 ff67 	bl	8001264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008396:	e002      	b.n	800839e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008398:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800839a:	f7ff fa05 	bl	80077a8 <HAL_UART_RxCpltCallback>
}
 800839e:	bf00      	nop
 80083a0:	3770      	adds	r7, #112	@ 0x70
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7f8 ff48 	bl	8001264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083d4:	e002      	b.n	80083dc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff f9f0 	bl	80077bc <HAL_UART_RxHalfCpltCallback>
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800840a:	2b80      	cmp	r3, #128	@ 0x80
 800840c:	d109      	bne.n	8008422 <UART_DMAError+0x3e>
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b21      	cmp	r3, #33	@ 0x21
 8008412:	d106      	bne.n	8008422 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800841c:	6978      	ldr	r0, [r7, #20]
 800841e:	f7ff fe4b 	bl	80080b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	d109      	bne.n	8008444 <UART_DMAError+0x60>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b22      	cmp	r3, #34	@ 0x22
 8008434:	d106      	bne.n	8008444 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f7ff fe60 	bl	8008104 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800844a:	f043 0210 	orr.w	r2, r3, #16
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f7ff f9bb 	bl	80077d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845a:	bf00      	nop
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff f9a5 	bl	80077d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b088      	sub	sp, #32
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6979      	ldr	r1, [r7, #20]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	613b      	str	r3, [r7, #16]
   return(result);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e6      	bne.n	8008496 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7f8 fe8b 	bl	80011f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084da:	bf00      	nop
 80084dc:	3720      	adds	r7, #32
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b08c      	sub	sp, #48	@ 0x30
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	4613      	mov	r3, r2
 80084ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d142      	bne.n	8008580 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e03b      	b.n	8008582 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	461a      	mov	r2, r3
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff fd2b 	bl	8007f78 <UART_Start_Receive_DMA>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800852c:	2b00      	cmp	r3, #0
 800852e:	d124      	bne.n	800857a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11d      	bne.n	8008574 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2210      	movs	r2, #16
 800853e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	617b      	str	r3, [r7, #20]
   return(result);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f043 0310 	orr.w	r3, r3, #16
 8008554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008560:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6a39      	ldr	r1, [r7, #32]
 8008564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	61fb      	str	r3, [r7, #28]
   return(result);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008572:	e002      	b.n	800857a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800857a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800857e:	e000      	b.n	8008582 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	3730      	adds	r7, #48	@ 0x30
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800858a:	b480      	push	{r7}
 800858c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800858e:	bf00      	nop
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800859e:	f3ef 8305 	mrs	r3, IPSR
 80085a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80085a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10f      	bne.n	80085ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085aa:	f3ef 8310 	mrs	r3, PRIMASK
 80085ae:	607b      	str	r3, [r7, #4]
  return(result);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085b6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ba:	603b      	str	r3, [r7, #0]
  return(result);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <osKernelInitialize+0x3a>
 80085c2:	4b0e      	ldr	r3, [pc, #56]	@ (80085fc <osKernelInitialize+0x64>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d103      	bne.n	80085d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80085ca:	f06f 0305 	mvn.w	r3, #5
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e00c      	b.n	80085ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085d2:	4b0a      	ldr	r3, [pc, #40]	@ (80085fc <osKernelInitialize+0x64>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085da:	4b08      	ldr	r3, [pc, #32]	@ (80085fc <osKernelInitialize+0x64>)
 80085dc:	2201      	movs	r2, #1
 80085de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e002      	b.n	80085ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80085e6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000510 	.word	0x20000510

08008600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008606:	f3ef 8305 	mrs	r3, IPSR
 800860a:	60bb      	str	r3, [r7, #8]
  return(result);
 800860c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10f      	bne.n	8008632 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008612:	f3ef 8310 	mrs	r3, PRIMASK
 8008616:	607b      	str	r3, [r7, #4]
  return(result);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800861e:	f3ef 8311 	mrs	r3, BASEPRI
 8008622:	603b      	str	r3, [r7, #0]
  return(result);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <osKernelStart+0x3a>
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <osKernelStart+0x68>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d103      	bne.n	800863a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008632:	f06f 0305 	mvn.w	r3, #5
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e010      	b.n	800865c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800863a:	4b0b      	ldr	r3, [pc, #44]	@ (8008668 <osKernelStart+0x68>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d109      	bne.n	8008656 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008642:	f7ff ffa2 	bl	800858a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008646:	4b08      	ldr	r3, [pc, #32]	@ (8008668 <osKernelStart+0x68>)
 8008648:	2202      	movs	r2, #2
 800864a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800864c:	f001 f8e2 	bl	8009814 <vTaskStartScheduler>
      stat = osOK;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e002      	b.n	800865c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
 800865a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800865c:	68fb      	ldr	r3, [r7, #12]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000510 	.word	0x20000510

0800866c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b090      	sub	sp, #64	@ 0x40
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800867c:	f3ef 8305 	mrs	r3, IPSR
 8008680:	61fb      	str	r3, [r7, #28]
  return(result);
 8008682:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 808f 	bne.w	80087a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800868a:	f3ef 8310 	mrs	r3, PRIMASK
 800868e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008696:	f3ef 8311 	mrs	r3, BASEPRI
 800869a:	617b      	str	r3, [r7, #20]
  return(result);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <osThreadNew+0x3e>
 80086a2:	4b44      	ldr	r3, [pc, #272]	@ (80087b4 <osThreadNew+0x148>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d07e      	beq.n	80087a8 <osThreadNew+0x13c>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d07b      	beq.n	80087a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80086b0:	2380      	movs	r3, #128	@ 0x80
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80086b4:	2318      	movs	r3, #24
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295
 80086c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d045      	beq.n	8008754 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <osThreadNew+0x6a>
        name = attr->name;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <osThreadNew+0x90>
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	2b38      	cmp	r3, #56	@ 0x38
 80086ee:	d805      	bhi.n	80086fc <osThreadNew+0x90>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <osThreadNew+0x94>
        return (NULL);
 80086fc:	2300      	movs	r3, #0
 80086fe:	e054      	b.n	80087aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	089b      	lsrs	r3, r3, #2
 800870e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <osThreadNew+0xca>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	2ba7      	cmp	r3, #167	@ 0xa7
 800871e:	d90a      	bls.n	8008736 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008724:	2b00      	cmp	r3, #0
 8008726:	d006      	beq.n	8008736 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <osThreadNew+0xca>
        mem = 1;
 8008730:	2301      	movs	r3, #1
 8008732:	623b      	str	r3, [r7, #32]
 8008734:	e010      	b.n	8008758 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10c      	bne.n	8008758 <osThreadNew+0xec>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d108      	bne.n	8008758 <osThreadNew+0xec>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d104      	bne.n	8008758 <osThreadNew+0xec>
          mem = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	623b      	str	r3, [r7, #32]
 8008752:	e001      	b.n	8008758 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d110      	bne.n	8008780 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008766:	9202      	str	r2, [sp, #8]
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fe4f 	bl	8009418 <xTaskCreateStatic>
 800877a:	4603      	mov	r3, r0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	e013      	b.n	80087a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d110      	bne.n	80087a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	b29a      	uxth	r2, r3
 800878a:	f107 0310 	add.w	r3, r7, #16
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fea3 	bl	80094e4 <xTaskCreate>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d001      	beq.n	80087a8 <osThreadNew+0x13c>
          hTask = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087a8:	693b      	ldr	r3, [r7, #16]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3730      	adds	r7, #48	@ 0x30
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000510 	.word	0x20000510

080087b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c0:	f3ef 8305 	mrs	r3, IPSR
 80087c4:	613b      	str	r3, [r7, #16]
  return(result);
 80087c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10f      	bne.n	80087ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087cc:	f3ef 8310 	mrs	r3, PRIMASK
 80087d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d8:	f3ef 8311 	mrs	r3, BASEPRI
 80087dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <osDelay+0x3c>
 80087e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <osDelay+0x58>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d103      	bne.n	80087f4 <osDelay+0x3c>
    stat = osErrorISR;
 80087ec:	f06f 0305 	mvn.w	r3, #5
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e007      	b.n	8008804 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <osDelay+0x4c>
      vTaskDelay(ticks);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 ffd0 	bl	80097a4 <vTaskDelay>
    }
  }

  return (stat);
 8008804:	697b      	ldr	r3, [r7, #20]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000510 	.word	0x20000510

08008814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a07      	ldr	r2, [pc, #28]	@ (8008840 <vApplicationGetIdleTaskMemory+0x2c>)
 8008824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a06      	ldr	r2, [pc, #24]	@ (8008844 <vApplicationGetIdleTaskMemory+0x30>)
 800882a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2280      	movs	r2, #128	@ 0x80
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000514 	.word	0x20000514
 8008844:	200005bc 	.word	0x200005bc

08008848 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4a07      	ldr	r2, [pc, #28]	@ (8008874 <vApplicationGetTimerTaskMemory+0x2c>)
 8008858:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4a06      	ldr	r2, [pc, #24]	@ (8008878 <vApplicationGetTimerTaskMemory+0x30>)
 800885e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008866:	601a      	str	r2, [r3, #0]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	200007bc 	.word	0x200007bc
 8008878:	20000864 	.word	0x20000864

0800887c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f103 0208 	add.w	r2, r3, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f04f 32ff 	mov.w	r2, #4294967295
 8008894:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f103 0208 	add.w	r2, r3, #8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0208 	add.w	r2, r3, #8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d103      	bne.n	800893e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	e00c      	b.n	8008958 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3308      	adds	r3, #8
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e002      	b.n	800894c <vListInsert+0x2e>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d2f6      	bcs.n	8008946 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6892      	ldr	r2, [r2, #8]
 80089a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6852      	ldr	r2, [r2, #4]
 80089b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d103      	bne.n	80089c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	1e5a      	subs	r2, r3, #1
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10d      	bne.n	8008a14 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	b672      	cpsid	i
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	b662      	cpsie	i
 8008a0c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a0e:	bf00      	nop
 8008a10:	bf00      	nop
 8008a12:	e7fd      	b.n	8008a10 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008a14:	f002 f8d2 	bl	800abbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a20:	68f9      	ldr	r1, [r7, #12]
 8008a22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a44:	3b01      	subs	r3, #1
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	441a      	add	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	22ff      	movs	r2, #255	@ 0xff
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	22ff      	movs	r2, #255	@ 0xff
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d114      	bne.n	8008a94 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01a      	beq.n	8008aa8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3310      	adds	r3, #16
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 f978 	bl	8009d6c <xTaskRemoveFromEventList>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d012      	beq.n	8008aa8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <xQueueGenericReset+0xd4>)
 8008a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	e009      	b.n	8008aa8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3310      	adds	r3, #16
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff feef 	bl	800887c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3324      	adds	r3, #36	@ 0x24
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff feea 	bl	800887c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008aa8:	f002 f8be 	bl	800ac28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008aac:	2301      	movs	r3, #1
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	@ 0x38
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10d      	bne.n	8008aec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	b672      	cpsid	i
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	b662      	cpsie	i
 8008ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10d      	bne.n	8008b0e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af6:	b672      	cpsid	i
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	b662      	cpsie	i
 8008b06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <xQueueGenericCreateStatic+0x5e>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <xQueueGenericCreateStatic+0x62>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <xQueueGenericCreateStatic+0x64>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10d      	bne.n	8008b40 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	623b      	str	r3, [r7, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	e7fd      	b.n	8008b3c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <xQueueGenericCreateStatic+0x90>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <xQueueGenericCreateStatic+0x94>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <xQueueGenericCreateStatic+0x96>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10d      	bne.n	8008b72 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	b672      	cpsid	i
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	b662      	cpsie	i
 8008b6a:	61fb      	str	r3, [r7, #28]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b72:	2350      	movs	r3, #80	@ 0x50
 8008b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b50      	cmp	r3, #80	@ 0x50
 8008b7a:	d00d      	beq.n	8008b98 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	b672      	cpsid	i
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	b662      	cpsie	i
 8008b90:	61bb      	str	r3, [r7, #24]
}
 8008b92:	bf00      	nop
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00d      	beq.n	8008bc0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68b9      	ldr	r1, [r7, #8]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f805 	bl	8008bca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3730      	adds	r7, #48	@ 0x30
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d103      	bne.n	8008be6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e002      	b.n	8008bec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	69b8      	ldr	r0, [r7, #24]
 8008bfc:	f7ff fef2 	bl	80089e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08e      	sub	sp, #56	@ 0x38
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10d      	bne.n	8008c48 <xQueueGenericSend+0x38>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	b672      	cpsid	i
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	b662      	cpsie	i
 8008c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <xQueueGenericSend+0x46>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <xQueueGenericSend+0x4a>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <xQueueGenericSend+0x4c>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10d      	bne.n	8008c7c <xQueueGenericSend+0x6c>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	b672      	cpsid	i
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	b662      	cpsie	i
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d103      	bne.n	8008c8a <xQueueGenericSend+0x7a>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <xQueueGenericSend+0x7e>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <xQueueGenericSend+0x80>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10d      	bne.n	8008cb0 <xQueueGenericSend+0xa0>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	b672      	cpsid	i
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	b662      	cpsie	i
 8008ca8:	623b      	str	r3, [r7, #32]
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	e7fd      	b.n	8008cac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cb0:	f001 fa2a 	bl	800a108 <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <xQueueGenericSend+0xb0>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <xQueueGenericSend+0xb4>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <xQueueGenericSend+0xb6>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10d      	bne.n	8008ce6 <xQueueGenericSend+0xd6>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	b672      	cpsid	i
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	b662      	cpsie	i
 8008cde:	61fb      	str	r3, [r7, #28]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ce6:	f001 ff69 	bl	800abbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d302      	bcc.n	8008cfc <xQueueGenericSend+0xec>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d129      	bne.n	8008d50 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d02:	f000 fa1b 	bl	800913c <prvCopyDataToQueue>
 8008d06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d010      	beq.n	8008d32 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	3324      	adds	r3, #36	@ 0x24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 f829 	bl	8009d6c <xTaskRemoveFromEventList>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d013      	beq.n	8008d48 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d20:	4b3f      	ldr	r3, [pc, #252]	@ (8008e20 <xQueueGenericSend+0x210>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	e00a      	b.n	8008d48 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d38:	4b39      	ldr	r3, [pc, #228]	@ (8008e20 <xQueueGenericSend+0x210>)
 8008d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d48:	f001 ff6e 	bl	800ac28 <vPortExitCritical>
				return pdPASS;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e063      	b.n	8008e18 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d56:	f001 ff67 	bl	800ac28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e05c      	b.n	8008e18 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 f865 	bl	8009e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d72:	f001 ff59 	bl	800ac28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d76:	f000 fdc1 	bl	80098fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d7a:	f001 ff1f 	bl	800abbc <vPortEnterCritical>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d103      	bne.n	8008d94 <xQueueGenericSend+0x184>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d103      	bne.n	8008daa <xQueueGenericSend+0x19a>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008daa:	f001 ff3d 	bl	800ac28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dae:	1d3a      	adds	r2, r7, #4
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 f854 	bl	8009e64 <xTaskCheckForTimeOut>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d124      	bne.n	8008e0c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dc4:	f000 fab2 	bl	800932c <prvIsQueueFull>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d018      	beq.n	8008e00 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	3310      	adds	r3, #16
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff72 	bl	8009cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dde:	f000 fa3d 	bl	800925c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008de2:	f000 fd99 	bl	8009918 <xTaskResumeAll>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f47f af7c 	bne.w	8008ce6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008dee:	4b0c      	ldr	r3, [pc, #48]	@ (8008e20 <xQueueGenericSend+0x210>)
 8008df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	e772      	b.n	8008ce6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e02:	f000 fa2b 	bl	800925c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e06:	f000 fd87 	bl	8009918 <xTaskResumeAll>
 8008e0a:	e76c      	b.n	8008ce6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e0e:	f000 fa25 	bl	800925c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e12:	f000 fd81 	bl	8009918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3738      	adds	r7, #56	@ 0x38
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08e      	sub	sp, #56	@ 0x38
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10d      	bne.n	8008e58 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	e7fd      	b.n	8008e54 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <xQueueGenericSendFromISR+0x42>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <xQueueGenericSendFromISR+0x46>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <xQueueGenericSendFromISR+0x48>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10d      	bne.n	8008e8c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	623b      	str	r3, [r7, #32]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d103      	bne.n	8008e9a <xQueueGenericSendFromISR+0x76>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <xQueueGenericSendFromISR+0x7a>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <xQueueGenericSendFromISR+0x7c>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10d      	bne.n	8008ec0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	b672      	cpsid	i
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	b662      	cpsie	i
 8008eb8:	61fb      	str	r3, [r7, #28]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ec0:	f001 ff64 	bl	800ad8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ec4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	61ba      	str	r2, [r7, #24]
 8008ede:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d302      	bcc.n	8008ef6 <xQueueGenericSendFromISR+0xd2>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d12c      	bne.n	8008f50 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f06:	f000 f919 	bl	800913c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d112      	bne.n	8008f3a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d016      	beq.n	8008f4a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	3324      	adds	r3, #36	@ 0x24
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 ff23 	bl	8009d6c <xTaskRemoveFromEventList>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00e      	beq.n	8008f4a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e007      	b.n	8008f4a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f3e:	3301      	adds	r3, #1
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	b25a      	sxtb	r2, r3
 8008f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008f4e:	e001      	b.n	8008f54 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3738      	adds	r7, #56	@ 0x38
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08c      	sub	sp, #48	@ 0x30
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <xQueueReceive+0x36>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
 8008f9a:	623b      	str	r3, [r7, #32]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <xQueueReceive+0x44>
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <xQueueReceive+0x48>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <xQueueReceive+0x4a>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10d      	bne.n	8008fd6 <xQueueReceive+0x6a>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbe:	b672      	cpsid	i
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	b662      	cpsie	i
 8008fce:	61fb      	str	r3, [r7, #28]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fd6:	f001 f897 	bl	800a108 <xTaskGetSchedulerState>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <xQueueReceive+0x7a>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <xQueueReceive+0x7e>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e000      	b.n	8008fec <xQueueReceive+0x80>
 8008fea:	2300      	movs	r3, #0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10d      	bne.n	800900c <xQueueReceive+0xa0>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	b672      	cpsid	i
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	b662      	cpsie	i
 8009004:	61bb      	str	r3, [r7, #24]
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	e7fd      	b.n	8009008 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800900c:	f001 fdd6 	bl	800abbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01f      	beq.n	800905c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009020:	f000 f8f6 	bl	8009210 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	1e5a      	subs	r2, r3, #1
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00f      	beq.n	8009054 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009036:	3310      	adds	r3, #16
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fe97 	bl	8009d6c <xTaskRemoveFromEventList>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009044:	4b3c      	ldr	r3, [pc, #240]	@ (8009138 <xQueueReceive+0x1cc>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009054:	f001 fde8 	bl	800ac28 <vPortExitCritical>
				return pdPASS;
 8009058:	2301      	movs	r3, #1
 800905a:	e069      	b.n	8009130 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009062:	f001 fde1 	bl	800ac28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009066:	2300      	movs	r3, #0
 8009068:	e062      	b.n	8009130 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009070:	f107 0310 	add.w	r3, r7, #16
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fedf 	bl	8009e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800907a:	2301      	movs	r3, #1
 800907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800907e:	f001 fdd3 	bl	800ac28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009082:	f000 fc3b 	bl	80098fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009086:	f001 fd99 	bl	800abbc <vPortEnterCritical>
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009090:	b25b      	sxtb	r3, r3
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d103      	bne.n	80090a0 <xQueueReceive+0x134>
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090a6:	b25b      	sxtb	r3, r3
 80090a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ac:	d103      	bne.n	80090b6 <xQueueReceive+0x14a>
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090b6:	f001 fdb7 	bl	800ac28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090ba:	1d3a      	adds	r2, r7, #4
 80090bc:	f107 0310 	add.w	r3, r7, #16
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fece 	bl	8009e64 <xTaskCheckForTimeOut>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d123      	bne.n	8009116 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090d0:	f000 f916 	bl	8009300 <prvIsQueueEmpty>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d017      	beq.n	800910a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	3324      	adds	r3, #36	@ 0x24
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fdec 	bl	8009cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090ea:	f000 f8b7 	bl	800925c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090ee:	f000 fc13 	bl	8009918 <xTaskResumeAll>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d189      	bne.n	800900c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80090f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009138 <xQueueReceive+0x1cc>)
 80090fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	e780      	b.n	800900c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800910a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800910c:	f000 f8a6 	bl	800925c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009110:	f000 fc02 	bl	8009918 <xTaskResumeAll>
 8009114:	e77a      	b.n	800900c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009118:	f000 f8a0 	bl	800925c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800911c:	f000 fbfc 	bl	8009918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009120:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009122:	f000 f8ed 	bl	8009300 <prvIsQueueEmpty>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	f43f af6f 	beq.w	800900c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800912e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009130:	4618      	mov	r0, r3
 8009132:	3730      	adds	r7, #48	@ 0x30
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009150:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d14d      	bne.n	80091fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 ffec 	bl	800a144 <xTaskPriorityDisinherit>
 800916c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	609a      	str	r2, [r3, #8]
 8009174:	e043      	b.n	80091fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d119      	bne.n	80091b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6858      	ldr	r0, [r3, #4]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009184:	461a      	mov	r2, r3
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	f002 f8bc 	bl	800b304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d32b      	bcc.n	80091fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	e026      	b.n	80091fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68d8      	ldr	r0, [r3, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b8:	461a      	mov	r2, r3
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	f002 f8a2 	bl	800b304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	425b      	negs	r3, r3
 80091ca:	441a      	add	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d207      	bcs.n	80091ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e4:	425b      	negs	r3, r3
 80091e6:	441a      	add	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d105      	bne.n	80091fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009206:	697b      	ldr	r3, [r7, #20]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	d018      	beq.n	8009254 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922a:	441a      	add	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	d303      	bcc.n	8009244 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68d9      	ldr	r1, [r3, #12]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924c:	461a      	mov	r2, r3
 800924e:	6838      	ldr	r0, [r7, #0]
 8009250:	f002 f858 	bl	800b304 <memcpy>
	}
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009264:	f001 fcaa 	bl	800abbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800926e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009270:	e011      	b.n	8009296 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3324      	adds	r3, #36	@ 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fd74 	bl	8009d6c <xTaskRemoveFromEventList>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800928a:	f000 fe53 	bl	8009f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	3b01      	subs	r3, #1
 8009292:	b2db      	uxtb	r3, r3
 8009294:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dce9      	bgt.n	8009272 <prvUnlockQueue+0x16>
 800929e:	e000      	b.n	80092a2 <prvUnlockQueue+0x46>
					break;
 80092a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	22ff      	movs	r2, #255	@ 0xff
 80092a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80092aa:	f001 fcbd 	bl	800ac28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092ae:	f001 fc85 	bl	800abbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092ba:	e011      	b.n	80092e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d012      	beq.n	80092ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3310      	adds	r3, #16
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fd4f 	bl	8009d6c <xTaskRemoveFromEventList>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092d4:	f000 fe2e 	bl	8009f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	3b01      	subs	r3, #1
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dce9      	bgt.n	80092bc <prvUnlockQueue+0x60>
 80092e8:	e000      	b.n	80092ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	22ff      	movs	r2, #255	@ 0xff
 80092f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092f4:	f001 fc98 	bl	800ac28 <vPortExitCritical>
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009308:	f001 fc58 	bl	800abbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e001      	b.n	800931e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800931e:	f001 fc83 	bl	800ac28 <vPortExitCritical>

	return xReturn;
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009334:	f001 fc42 	bl	800abbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009340:	429a      	cmp	r2, r3
 8009342:	d102      	bne.n	800934a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009344:	2301      	movs	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e001      	b.n	800934e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800934e:	f001 fc6b 	bl	800ac28 <vPortExitCritical>

	return xReturn;
 8009352:	68fb      	ldr	r3, [r7, #12]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	e014      	b.n	8009396 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800936c:	4a0f      	ldr	r2, [pc, #60]	@ (80093ac <vQueueAddToRegistry+0x50>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10b      	bne.n	8009390 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009378:	490c      	ldr	r1, [pc, #48]	@ (80093ac <vQueueAddToRegistry+0x50>)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009382:	4a0a      	ldr	r2, [pc, #40]	@ (80093ac <vQueueAddToRegistry+0x50>)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800938e:	e006      	b.n	800939e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b07      	cmp	r3, #7
 800939a:	d9e7      	bls.n	800936c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000c64 	.word	0x20000c64

080093b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093c0:	f001 fbfc 	bl	800abbc <vPortEnterCritical>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ca:	b25b      	sxtb	r3, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d103      	bne.n	80093da <vQueueWaitForMessageRestricted+0x2a>
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093e0:	b25b      	sxtb	r3, r3
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d103      	bne.n	80093f0 <vQueueWaitForMessageRestricted+0x40>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093f0:	f001 fc1a 	bl	800ac28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	3324      	adds	r3, #36	@ 0x24
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fc83 	bl	8009d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f7ff ff26 	bl	800925c <prvUnlockQueue>
	}
 8009410:	bf00      	nop
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08e      	sub	sp, #56	@ 0x38
 800941c:	af04      	add	r7, sp, #16
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10d      	bne.n	8009448 <xTaskCreateStatic+0x30>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	623b      	str	r3, [r7, #32]
}
 8009442:	bf00      	nop
 8009444:	bf00      	nop
 8009446:	e7fd      	b.n	8009444 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10d      	bne.n	800946a <xTaskCreateStatic+0x52>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	b672      	cpsid	i
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	b662      	cpsie	i
 8009462:	61fb      	str	r3, [r7, #28]
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800946a:	23a8      	movs	r3, #168	@ 0xa8
 800946c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2ba8      	cmp	r3, #168	@ 0xa8
 8009472:	d00d      	beq.n	8009490 <xTaskCreateStatic+0x78>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009478:	b672      	cpsid	i
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	b662      	cpsie	i
 8009488:	61bb      	str	r3, [r7, #24]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01e      	beq.n	80094d6 <xTaskCreateStatic+0xbe>
 8009498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01b      	beq.n	80094d6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094b0:	2300      	movs	r3, #0
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	f107 0314 	add.w	r3, r7, #20
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f851 	bl	8009570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094d0:	f000 f8f8 	bl	80096c4 <prvAddNewTaskToReadyList>
 80094d4:	e001      	b.n	80094da <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094da:	697b      	ldr	r3, [r7, #20]
	}
 80094dc:	4618      	mov	r0, r3
 80094de:	3728      	adds	r7, #40	@ 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08c      	sub	sp, #48	@ 0x30
 80094e8:	af04      	add	r7, sp, #16
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 fc8d 	bl	800ae18 <pvPortMalloc>
 80094fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009506:	20a8      	movs	r0, #168	@ 0xa8
 8009508:	f001 fc86 	bl	800ae18 <pvPortMalloc>
 800950c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	631a      	str	r2, [r3, #48]	@ 0x30
 800951a:	e005      	b.n	8009528 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f001 fd49 	bl	800afb4 <vPortFree>
 8009522:	e001      	b.n	8009528 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	2300      	movs	r3, #0
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f80f 	bl	8009570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009552:	69f8      	ldr	r0, [r7, #28]
 8009554:	f000 f8b6 	bl	80096c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009558:	2301      	movs	r3, #1
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	e002      	b.n	8009564 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800955e:	f04f 33ff 	mov.w	r3, #4294967295
 8009562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009564:	69bb      	ldr	r3, [r7, #24]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	461a      	mov	r2, r3
 8009588:	21a5      	movs	r1, #165	@ 0xa5
 800958a:	f001 fe2f 	bl	800b1ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009598:	440b      	add	r3, r1
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <prvInitialiseNewTask+0x5e>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	617b      	str	r3, [r7, #20]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01f      	beq.n	8009614 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095d4:	2300      	movs	r3, #0
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e012      	b.n	8009600 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	4413      	add	r3, r2
 80095e0:	7819      	ldrb	r1, [r3, #0]
 80095e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	3334      	adds	r3, #52	@ 0x34
 80095ea:	460a      	mov	r2, r1
 80095ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3301      	adds	r3, #1
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b0f      	cmp	r3, #15
 8009604:	d9e9      	bls.n	80095da <prvInitialiseNewTask+0x6a>
 8009606:	e000      	b.n	800960a <prvInitialiseNewTask+0x9a>
			{
				break;
 8009608:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009612:	e003      	b.n	800961c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	2b37      	cmp	r3, #55	@ 0x37
 8009620:	d901      	bls.n	8009626 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009622:	2337      	movs	r3, #55	@ 0x37
 8009624:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800962a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009630:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	2200      	movs	r2, #0
 8009636:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	3304      	adds	r3, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f93d 	bl	80088bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	3318      	adds	r3, #24
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f938 	bl	80088bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009650:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800965c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009660:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	2200      	movs	r2, #0
 8009666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	2200      	movs	r2, #0
 800966e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	3354      	adds	r3, #84	@ 0x54
 8009676:	224c      	movs	r2, #76	@ 0x4c
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fdb6 	bl	800b1ec <memset>
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	4a0d      	ldr	r2, [pc, #52]	@ (80096b8 <prvInitialiseNewTask+0x148>)
 8009684:	659a      	str	r2, [r3, #88]	@ 0x58
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	4a0c      	ldr	r2, [pc, #48]	@ (80096bc <prvInitialiseNewTask+0x14c>)
 800968a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	4a0c      	ldr	r2, [pc, #48]	@ (80096c0 <prvInitialiseNewTask+0x150>)
 8009690:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	68f9      	ldr	r1, [r7, #12]
 8009696:	69b8      	ldr	r0, [r7, #24]
 8009698:	f001 f984 	bl	800a9a4 <pxPortInitialiseStack>
 800969c:	4602      	mov	r2, r0
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ae:	bf00      	nop
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20004ef0 	.word	0x20004ef0
 80096bc:	20004f58 	.word	0x20004f58
 80096c0:	20004fc0 	.word	0x20004fc0

080096c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096cc:	f001 fa76 	bl	800abbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009788 <prvAddNewTaskToReadyList+0xc4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3301      	adds	r3, #1
 80096d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009788 <prvAddNewTaskToReadyList+0xc4>)
 80096d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096da:	4b2c      	ldr	r3, [pc, #176]	@ (800978c <prvAddNewTaskToReadyList+0xc8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096e2:	4a2a      	ldr	r2, [pc, #168]	@ (800978c <prvAddNewTaskToReadyList+0xc8>)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096e8:	4b27      	ldr	r3, [pc, #156]	@ (8009788 <prvAddNewTaskToReadyList+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d110      	bne.n	8009712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096f0:	f000 fc44 	bl	8009f7c <prvInitialiseTaskLists>
 80096f4:	e00d      	b.n	8009712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096f6:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <prvAddNewTaskToReadyList+0xcc>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096fe:	4b23      	ldr	r3, [pc, #140]	@ (800978c <prvAddNewTaskToReadyList+0xc8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009708:	429a      	cmp	r2, r3
 800970a:	d802      	bhi.n	8009712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800970c:	4a1f      	ldr	r2, [pc, #124]	@ (800978c <prvAddNewTaskToReadyList+0xc8>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009712:	4b20      	ldr	r3, [pc, #128]	@ (8009794 <prvAddNewTaskToReadyList+0xd0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	4a1e      	ldr	r2, [pc, #120]	@ (8009794 <prvAddNewTaskToReadyList+0xd0>)
 800971a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800971c:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <prvAddNewTaskToReadyList+0xd0>)
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009728:	4b1b      	ldr	r3, [pc, #108]	@ (8009798 <prvAddNewTaskToReadyList+0xd4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d903      	bls.n	8009738 <prvAddNewTaskToReadyList+0x74>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009734:	4a18      	ldr	r2, [pc, #96]	@ (8009798 <prvAddNewTaskToReadyList+0xd4>)
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4a15      	ldr	r2, [pc, #84]	@ (800979c <prvAddNewTaskToReadyList+0xd8>)
 8009746:	441a      	add	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7ff f8c1 	bl	80088d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009754:	f001 fa68 	bl	800ac28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009758:	4b0d      	ldr	r3, [pc, #52]	@ (8009790 <prvAddNewTaskToReadyList+0xcc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00e      	beq.n	800977e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009760:	4b0a      	ldr	r3, [pc, #40]	@ (800978c <prvAddNewTaskToReadyList+0xc8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	429a      	cmp	r2, r3
 800976c:	d207      	bcs.n	800977e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800976e:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <prvAddNewTaskToReadyList+0xdc>)
 8009770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20001178 	.word	0x20001178
 800978c:	20000ca4 	.word	0x20000ca4
 8009790:	20001184 	.word	0x20001184
 8009794:	20001194 	.word	0x20001194
 8009798:	20001180 	.word	0x20001180
 800979c:	20000ca8 	.word	0x20000ca8
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d01a      	beq.n	80097ec <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097b6:	4b15      	ldr	r3, [pc, #84]	@ (800980c <vTaskDelay+0x68>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00d      	beq.n	80097da <vTaskDelay+0x36>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	b672      	cpsid	i
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	b662      	cpsie	i
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80097da:	f000 f88f 	bl	80098fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097de:	2100      	movs	r1, #0
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fd23 	bl	800a22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097e6:	f000 f897 	bl	8009918 <xTaskResumeAll>
 80097ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d107      	bne.n	8009802 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80097f2:	4b07      	ldr	r3, [pc, #28]	@ (8009810 <vTaskDelay+0x6c>)
 80097f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	200011a0 	.word	0x200011a0
 8009810:	e000ed04 	.word	0xe000ed04

08009814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	@ 0x28
 8009818:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009822:	463a      	mov	r2, r7
 8009824:	1d39      	adds	r1, r7, #4
 8009826:	f107 0308 	add.w	r3, r7, #8
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fff2 	bl	8008814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	2300      	movs	r3, #0
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	2300      	movs	r3, #0
 8009840:	460a      	mov	r2, r1
 8009842:	4926      	ldr	r1, [pc, #152]	@ (80098dc <vTaskStartScheduler+0xc8>)
 8009844:	4826      	ldr	r0, [pc, #152]	@ (80098e0 <vTaskStartScheduler+0xcc>)
 8009846:	f7ff fde7 	bl	8009418 <xTaskCreateStatic>
 800984a:	4603      	mov	r3, r0
 800984c:	4a25      	ldr	r2, [pc, #148]	@ (80098e4 <vTaskStartScheduler+0xd0>)
 800984e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009850:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <vTaskStartScheduler+0xd0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e001      	b.n	8009862 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d102      	bne.n	800986e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009868:	f000 fd34 	bl	800a2d4 <xTimerCreateTimerTask>
 800986c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d11d      	bne.n	80098b0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009878:	b672      	cpsid	i
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	b662      	cpsie	i
 8009888:	613b      	str	r3, [r7, #16]
}
 800988a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800988c:	4b16      	ldr	r3, [pc, #88]	@ (80098e8 <vTaskStartScheduler+0xd4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3354      	adds	r3, #84	@ 0x54
 8009892:	4a16      	ldr	r2, [pc, #88]	@ (80098ec <vTaskStartScheduler+0xd8>)
 8009894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009896:	4b16      	ldr	r3, [pc, #88]	@ (80098f0 <vTaskStartScheduler+0xdc>)
 8009898:	f04f 32ff 	mov.w	r2, #4294967295
 800989c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800989e:	4b15      	ldr	r3, [pc, #84]	@ (80098f4 <vTaskStartScheduler+0xe0>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098a4:	4b14      	ldr	r3, [pc, #80]	@ (80098f8 <vTaskStartScheduler+0xe4>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098aa:	f001 f909 	bl	800aac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098ae:	e011      	b.n	80098d4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d10d      	bne.n	80098d4 <vTaskStartScheduler+0xc0>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098bc:	b672      	cpsid	i
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	b662      	cpsie	i
 80098cc:	60fb      	str	r3, [r7, #12]
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <vTaskStartScheduler+0xbc>
}
 80098d4:	bf00      	nop
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	0800b3fc 	.word	0x0800b3fc
 80098e0:	08009f4d 	.word	0x08009f4d
 80098e4:	2000119c 	.word	0x2000119c
 80098e8:	20000ca4 	.word	0x20000ca4
 80098ec:	20000018 	.word	0x20000018
 80098f0:	20001198 	.word	0x20001198
 80098f4:	20001184 	.word	0x20001184
 80098f8:	2000117c 	.word	0x2000117c

080098fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009900:	4b04      	ldr	r3, [pc, #16]	@ (8009914 <vTaskSuspendAll+0x18>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	4a03      	ldr	r2, [pc, #12]	@ (8009914 <vTaskSuspendAll+0x18>)
 8009908:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800990a:	bf00      	nop
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	200011a0 	.word	0x200011a0

08009918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009926:	4b43      	ldr	r3, [pc, #268]	@ (8009a34 <xTaskResumeAll+0x11c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <xTaskResumeAll+0x32>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	b672      	cpsid	i
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	b662      	cpsie	i
 8009942:	603b      	str	r3, [r7, #0]
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop
 8009948:	e7fd      	b.n	8009946 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800994a:	f001 f937 	bl	800abbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800994e:	4b39      	ldr	r3, [pc, #228]	@ (8009a34 <xTaskResumeAll+0x11c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3b01      	subs	r3, #1
 8009954:	4a37      	ldr	r2, [pc, #220]	@ (8009a34 <xTaskResumeAll+0x11c>)
 8009956:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009958:	4b36      	ldr	r3, [pc, #216]	@ (8009a34 <xTaskResumeAll+0x11c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d162      	bne.n	8009a26 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009960:	4b35      	ldr	r3, [pc, #212]	@ (8009a38 <xTaskResumeAll+0x120>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d05e      	beq.n	8009a26 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009968:	e02f      	b.n	80099ca <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996a:	4b34      	ldr	r3, [pc, #208]	@ (8009a3c <xTaskResumeAll+0x124>)
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3318      	adds	r3, #24
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff f80a 	bl	8008990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3304      	adds	r3, #4
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff f805 	bl	8008990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998a:	4b2d      	ldr	r3, [pc, #180]	@ (8009a40 <xTaskResumeAll+0x128>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d903      	bls.n	800999a <xTaskResumeAll+0x82>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	4a2a      	ldr	r2, [pc, #168]	@ (8009a40 <xTaskResumeAll+0x128>)
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4a27      	ldr	r2, [pc, #156]	@ (8009a44 <xTaskResumeAll+0x12c>)
 80099a8:	441a      	add	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4619      	mov	r1, r3
 80099b0:	4610      	mov	r0, r2
 80099b2:	f7fe ff90 	bl	80088d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ba:	4b23      	ldr	r3, [pc, #140]	@ (8009a48 <xTaskResumeAll+0x130>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d302      	bcc.n	80099ca <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80099c4:	4b21      	ldr	r3, [pc, #132]	@ (8009a4c <xTaskResumeAll+0x134>)
 80099c6:	2201      	movs	r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ca:	4b1c      	ldr	r3, [pc, #112]	@ (8009a3c <xTaskResumeAll+0x124>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1cb      	bne.n	800996a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099d8:	f000 fb76 	bl	800a0c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a50 <xTaskResumeAll+0x138>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d010      	beq.n	8009a0a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099e8:	f000 f846 	bl	8009a78 <xTaskIncrementTick>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80099f2:	4b16      	ldr	r3, [pc, #88]	@ (8009a4c <xTaskResumeAll+0x134>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1f1      	bne.n	80099e8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009a04:	4b12      	ldr	r3, [pc, #72]	@ (8009a50 <xTaskResumeAll+0x138>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a0a:	4b10      	ldr	r3, [pc, #64]	@ (8009a4c <xTaskResumeAll+0x134>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a12:	2301      	movs	r3, #1
 8009a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a16:	4b0f      	ldr	r3, [pc, #60]	@ (8009a54 <xTaskResumeAll+0x13c>)
 8009a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a26:	f001 f8ff 	bl	800ac28 <vPortExitCritical>

	return xAlreadyYielded;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200011a0 	.word	0x200011a0
 8009a38:	20001178 	.word	0x20001178
 8009a3c:	20001138 	.word	0x20001138
 8009a40:	20001180 	.word	0x20001180
 8009a44:	20000ca8 	.word	0x20000ca8
 8009a48:	20000ca4 	.word	0x20000ca4
 8009a4c:	2000118c 	.word	0x2000118c
 8009a50:	20001188 	.word	0x20001188
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a5e:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <xTaskGetTickCount+0x1c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a64:	687b      	ldr	r3, [r7, #4]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	2000117c 	.word	0x2000117c

08009a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a82:	4b50      	ldr	r3, [pc, #320]	@ (8009bc4 <xTaskIncrementTick+0x14c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f040 808c 	bne.w	8009ba4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a8c:	4b4e      	ldr	r3, [pc, #312]	@ (8009bc8 <xTaskIncrementTick+0x150>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a94:	4a4c      	ldr	r2, [pc, #304]	@ (8009bc8 <xTaskIncrementTick+0x150>)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d123      	bne.n	8009ae8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8009bcc <xTaskIncrementTick+0x154>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	b672      	cpsid	i
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	b662      	cpsie	i
 8009abe:	603b      	str	r3, [r7, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <xTaskIncrementTick+0x4a>
 8009ac6:	4b41      	ldr	r3, [pc, #260]	@ (8009bcc <xTaskIncrementTick+0x154>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	4b40      	ldr	r3, [pc, #256]	@ (8009bd0 <xTaskIncrementTick+0x158>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8009bcc <xTaskIncrementTick+0x154>)
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8009bd0 <xTaskIncrementTick+0x158>)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4b3e      	ldr	r3, [pc, #248]	@ (8009bd4 <xTaskIncrementTick+0x15c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8009bd4 <xTaskIncrementTick+0x15c>)
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	f000 faf0 	bl	800a0c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd8 <xTaskIncrementTick+0x160>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d349      	bcc.n	8009b86 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009af2:	4b36      	ldr	r3, [pc, #216]	@ (8009bcc <xTaskIncrementTick+0x154>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009afc:	4b36      	ldr	r3, [pc, #216]	@ (8009bd8 <xTaskIncrementTick+0x160>)
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	601a      	str	r2, [r3, #0]
					break;
 8009b04:	e03f      	b.n	8009b86 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b06:	4b31      	ldr	r3, [pc, #196]	@ (8009bcc <xTaskIncrementTick+0x154>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d203      	bcs.n	8009b26 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8009bd8 <xTaskIncrementTick+0x160>)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b24:	e02f      	b.n	8009b86 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe ff30 	bl	8008990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3318      	adds	r3, #24
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe ff27 	bl	8008990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b46:	4b25      	ldr	r3, [pc, #148]	@ (8009bdc <xTaskIncrementTick+0x164>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d903      	bls.n	8009b56 <xTaskIncrementTick+0xde>
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b52:	4a22      	ldr	r2, [pc, #136]	@ (8009bdc <xTaskIncrementTick+0x164>)
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4a1f      	ldr	r2, [pc, #124]	@ (8009be0 <xTaskIncrementTick+0x168>)
 8009b64:	441a      	add	r2, r3
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f7fe feb2 	bl	80088d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b76:	4b1b      	ldr	r3, [pc, #108]	@ (8009be4 <xTaskIncrementTick+0x16c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d3b8      	bcc.n	8009af2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009b80:	2301      	movs	r3, #1
 8009b82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b84:	e7b5      	b.n	8009af2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b86:	4b17      	ldr	r3, [pc, #92]	@ (8009be4 <xTaskIncrementTick+0x16c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b8c:	4914      	ldr	r1, [pc, #80]	@ (8009be0 <xTaskIncrementTick+0x168>)
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d907      	bls.n	8009bae <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	e004      	b.n	8009bae <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ba4:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <xTaskIncrementTick+0x170>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	4a0f      	ldr	r2, [pc, #60]	@ (8009be8 <xTaskIncrementTick+0x170>)
 8009bac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009bae:	4b0f      	ldr	r3, [pc, #60]	@ (8009bec <xTaskIncrementTick+0x174>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009bba:	697b      	ldr	r3, [r7, #20]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	200011a0 	.word	0x200011a0
 8009bc8:	2000117c 	.word	0x2000117c
 8009bcc:	20001130 	.word	0x20001130
 8009bd0:	20001134 	.word	0x20001134
 8009bd4:	20001190 	.word	0x20001190
 8009bd8:	20001198 	.word	0x20001198
 8009bdc:	20001180 	.word	0x20001180
 8009be0:	20000ca8 	.word	0x20000ca8
 8009be4:	20000ca4 	.word	0x20000ca4
 8009be8:	20001188 	.word	0x20001188
 8009bec:	2000118c 	.word	0x2000118c

08009bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <vTaskSwitchContext+0xb8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8009cac <vTaskSwitchContext+0xbc>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c04:	e049      	b.n	8009c9a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8009c06:	4b29      	ldr	r3, [pc, #164]	@ (8009cac <vTaskSwitchContext+0xbc>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0c:	4b28      	ldr	r3, [pc, #160]	@ (8009cb0 <vTaskSwitchContext+0xc0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	e013      	b.n	8009c3c <vTaskSwitchContext+0x4c>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10d      	bne.n	8009c36 <vTaskSwitchContext+0x46>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	b672      	cpsid	i
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	b662      	cpsie	i
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <vTaskSwitchContext+0x42>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	491d      	ldr	r1, [pc, #116]	@ (8009cb4 <vTaskSwitchContext+0xc4>)
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0e1      	beq.n	8009c14 <vTaskSwitchContext+0x24>
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4a16      	ldr	r2, [pc, #88]	@ (8009cb4 <vTaskSwitchContext+0xc4>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	60bb      	str	r3, [r7, #8]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	3308      	adds	r3, #8
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d104      	bne.n	8009c80 <vTaskSwitchContext+0x90>
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	605a      	str	r2, [r3, #4]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	4a0c      	ldr	r2, [pc, #48]	@ (8009cb8 <vTaskSwitchContext+0xc8>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	4a09      	ldr	r2, [pc, #36]	@ (8009cb0 <vTaskSwitchContext+0xc0>)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c90:	4b09      	ldr	r3, [pc, #36]	@ (8009cb8 <vTaskSwitchContext+0xc8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3354      	adds	r3, #84	@ 0x54
 8009c96:	4a09      	ldr	r2, [pc, #36]	@ (8009cbc <vTaskSwitchContext+0xcc>)
 8009c98:	6013      	str	r3, [r2, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	200011a0 	.word	0x200011a0
 8009cac:	2000118c 	.word	0x2000118c
 8009cb0:	20001180 	.word	0x20001180
 8009cb4:	20000ca8 	.word	0x20000ca8
 8009cb8:	20000ca4 	.word	0x20000ca4
 8009cbc:	20000018 	.word	0x20000018

08009cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10d      	bne.n	8009cec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd4:	b672      	cpsid	i
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	b662      	cpsie	i
 8009ce4:	60fb      	str	r3, [r7, #12]
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cec:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <vTaskPlaceOnEventList+0x4c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3318      	adds	r3, #24
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe fe12 	bl	800891e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6838      	ldr	r0, [r7, #0]
 8009cfe:	f000 fa95 	bl	800a22c <prvAddCurrentTaskToDelayedList>
}
 8009d02:	bf00      	nop
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000ca4 	.word	0x20000ca4

08009d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d26:	b672      	cpsid	i
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	b662      	cpsie	i
 8009d36:	617b      	str	r3, [r7, #20]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d68 <vTaskPlaceOnEventListRestricted+0x58>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3318      	adds	r3, #24
 8009d44:	4619      	mov	r1, r3
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7fe fdc5 	bl	80088d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009d52:	f04f 33ff 	mov.w	r3, #4294967295
 8009d56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	68b8      	ldr	r0, [r7, #8]
 8009d5c:	f000 fa66 	bl	800a22c <prvAddCurrentTaskToDelayedList>
	}
 8009d60:	bf00      	nop
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20000ca4 	.word	0x20000ca4

08009d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10d      	bne.n	8009d9e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d86:	b672      	cpsid	i
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	b662      	cpsie	i
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	3318      	adds	r3, #24
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fdf4 	bl	8008990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da8:	4b1d      	ldr	r3, [pc, #116]	@ (8009e20 <xTaskRemoveFromEventList+0xb4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d11d      	bne.n	8009dec <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fdeb 	bl	8008990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbe:	4b19      	ldr	r3, [pc, #100]	@ (8009e24 <xTaskRemoveFromEventList+0xb8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d903      	bls.n	8009dce <xTaskRemoveFromEventList+0x62>
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	4a16      	ldr	r2, [pc, #88]	@ (8009e24 <xTaskRemoveFromEventList+0xb8>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4a13      	ldr	r2, [pc, #76]	@ (8009e28 <xTaskRemoveFromEventList+0xbc>)
 8009ddc:	441a      	add	r2, r3
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7fe fd76 	bl	80088d6 <vListInsertEnd>
 8009dea:	e005      	b.n	8009df8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	3318      	adds	r3, #24
 8009df0:	4619      	mov	r1, r3
 8009df2:	480e      	ldr	r0, [pc, #56]	@ (8009e2c <xTaskRemoveFromEventList+0xc0>)
 8009df4:	f7fe fd6f 	bl	80088d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8009e30 <xTaskRemoveFromEventList+0xc4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d905      	bls.n	8009e12 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <xTaskRemoveFromEventList+0xc8>)
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e001      	b.n	8009e16 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e16:	697b      	ldr	r3, [r7, #20]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200011a0 	.word	0x200011a0
 8009e24:	20001180 	.word	0x20001180
 8009e28:	20000ca8 	.word	0x20000ca8
 8009e2c:	20001138 	.word	0x20001138
 8009e30:	20000ca4 	.word	0x20000ca4
 8009e34:	2000118c 	.word	0x2000118c

08009e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e40:	4b06      	ldr	r3, [pc, #24]	@ (8009e5c <vTaskInternalSetTimeOutState+0x24>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e48:	4b05      	ldr	r3, [pc, #20]	@ (8009e60 <vTaskInternalSetTimeOutState+0x28>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	20001190 	.word	0x20001190
 8009e60:	2000117c 	.word	0x2000117c

08009e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10d      	bne.n	8009e90 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	b672      	cpsid	i
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	b662      	cpsie	i
 8009e88:	613b      	str	r3, [r7, #16]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	60fb      	str	r3, [r7, #12]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009eb2:	f000 fe83 	bl	800abbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <xTaskCheckForTimeOut+0xc8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d102      	bne.n	8009ed6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e023      	b.n	8009f1e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <xTaskCheckForTimeOut+0xcc>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d007      	beq.n	8009ef2 <xTaskCheckForTimeOut+0x8e>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d302      	bcc.n	8009ef2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	61fb      	str	r3, [r7, #28]
 8009ef0:	e015      	b.n	8009f1e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d20b      	bcs.n	8009f14 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	1ad2      	subs	r2, r2, r3
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff ff95 	bl	8009e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	e004      	b.n	8009f1e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f1e:	f000 fe83 	bl	800ac28 <vPortExitCritical>

	return xReturn;
 8009f22:	69fb      	ldr	r3, [r7, #28]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3720      	adds	r7, #32
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	2000117c 	.word	0x2000117c
 8009f30:	20001190 	.word	0x20001190

08009f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f38:	4b03      	ldr	r3, [pc, #12]	@ (8009f48 <vTaskMissedYield+0x14>)
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	2000118c 	.word	0x2000118c

08009f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f54:	f000 f852 	bl	8009ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f58:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <prvIdleTask+0x28>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d9f9      	bls.n	8009f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f60:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <prvIdleTask+0x2c>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f70:	e7f0      	b.n	8009f54 <prvIdleTask+0x8>
 8009f72:	bf00      	nop
 8009f74:	20000ca8 	.word	0x20000ca8
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	e00c      	b.n	8009fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4a12      	ldr	r2, [pc, #72]	@ (8009fdc <prvInitialiseTaskLists+0x60>)
 8009f94:	4413      	add	r3, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fc70 	bl	800887c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	607b      	str	r3, [r7, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b37      	cmp	r3, #55	@ 0x37
 8009fa6:	d9ef      	bls.n	8009f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fa8:	480d      	ldr	r0, [pc, #52]	@ (8009fe0 <prvInitialiseTaskLists+0x64>)
 8009faa:	f7fe fc67 	bl	800887c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fae:	480d      	ldr	r0, [pc, #52]	@ (8009fe4 <prvInitialiseTaskLists+0x68>)
 8009fb0:	f7fe fc64 	bl	800887c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fb4:	480c      	ldr	r0, [pc, #48]	@ (8009fe8 <prvInitialiseTaskLists+0x6c>)
 8009fb6:	f7fe fc61 	bl	800887c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fba:	480c      	ldr	r0, [pc, #48]	@ (8009fec <prvInitialiseTaskLists+0x70>)
 8009fbc:	f7fe fc5e 	bl	800887c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fc0:	480b      	ldr	r0, [pc, #44]	@ (8009ff0 <prvInitialiseTaskLists+0x74>)
 8009fc2:	f7fe fc5b 	bl	800887c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff4 <prvInitialiseTaskLists+0x78>)
 8009fc8:	4a05      	ldr	r2, [pc, #20]	@ (8009fe0 <prvInitialiseTaskLists+0x64>)
 8009fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff8 <prvInitialiseTaskLists+0x7c>)
 8009fce:	4a05      	ldr	r2, [pc, #20]	@ (8009fe4 <prvInitialiseTaskLists+0x68>)
 8009fd0:	601a      	str	r2, [r3, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000ca8 	.word	0x20000ca8
 8009fe0:	20001108 	.word	0x20001108
 8009fe4:	2000111c 	.word	0x2000111c
 8009fe8:	20001138 	.word	0x20001138
 8009fec:	2000114c 	.word	0x2000114c
 8009ff0:	20001164 	.word	0x20001164
 8009ff4:	20001130 	.word	0x20001130
 8009ff8:	20001134 	.word	0x20001134

08009ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a002:	e019      	b.n	800a038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a004:	f000 fdda 	bl	800abbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a008:	4b10      	ldr	r3, [pc, #64]	@ (800a04c <prvCheckTasksWaitingTermination+0x50>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fcbb 	bl	8008990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a01a:	4b0d      	ldr	r3, [pc, #52]	@ (800a050 <prvCheckTasksWaitingTermination+0x54>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3b01      	subs	r3, #1
 800a020:	4a0b      	ldr	r2, [pc, #44]	@ (800a050 <prvCheckTasksWaitingTermination+0x54>)
 800a022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a024:	4b0b      	ldr	r3, [pc, #44]	@ (800a054 <prvCheckTasksWaitingTermination+0x58>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3b01      	subs	r3, #1
 800a02a:	4a0a      	ldr	r2, [pc, #40]	@ (800a054 <prvCheckTasksWaitingTermination+0x58>)
 800a02c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a02e:	f000 fdfb 	bl	800ac28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f810 	bl	800a058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <prvCheckTasksWaitingTermination+0x58>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e1      	bne.n	800a004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	2000114c 	.word	0x2000114c
 800a050:	20001178 	.word	0x20001178
 800a054:	20001160 	.word	0x20001160

0800a058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3354      	adds	r3, #84	@ 0x54
 800a064:	4618      	mov	r0, r3
 800a066:	f001 f8c9 	bl	800b1fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 ff9b 	bl	800afb4 <vPortFree>
				vPortFree( pxTCB );
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 ff98 	bl	800afb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a084:	e01b      	b.n	800a0be <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d103      	bne.n	800a098 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 ff8f 	bl	800afb4 <vPortFree>
	}
 800a096:	e012      	b.n	800a0be <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d00d      	beq.n	800a0be <prvDeleteTCB+0x66>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	b672      	cpsid	i
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	b662      	cpsie	i
 800a0b6:	60fb      	str	r3, [r7, #12]
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <prvDeleteTCB+0x62>
	}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a100 <prvResetNextTaskUnblockTime+0x38>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a104 <prvResetNextTaskUnblockTime+0x3c>)
 800a0da:	f04f 32ff 	mov.w	r2, #4294967295
 800a0de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0e0:	e008      	b.n	800a0f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e2:	4b07      	ldr	r3, [pc, #28]	@ (800a100 <prvResetNextTaskUnblockTime+0x38>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	@ (800a104 <prvResetNextTaskUnblockTime+0x3c>)
 800a0f2:	6013      	str	r3, [r2, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20001130 	.word	0x20001130
 800a104:	20001198 	.word	0x20001198

0800a108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a10e:	4b0b      	ldr	r3, [pc, #44]	@ (800a13c <xTaskGetSchedulerState+0x34>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a116:	2301      	movs	r3, #1
 800a118:	607b      	str	r3, [r7, #4]
 800a11a:	e008      	b.n	800a12e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a11c:	4b08      	ldr	r3, [pc, #32]	@ (800a140 <xTaskGetSchedulerState+0x38>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a124:	2302      	movs	r3, #2
 800a126:	607b      	str	r3, [r7, #4]
 800a128:	e001      	b.n	800a12e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a12e:	687b      	ldr	r3, [r7, #4]
	}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20001184 	.word	0x20001184
 800a140:	200011a0 	.word	0x200011a0

0800a144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d05c      	beq.n	800a214 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a15a:	4b31      	ldr	r3, [pc, #196]	@ (800a220 <xTaskPriorityDisinherit+0xdc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	429a      	cmp	r2, r3
 800a162:	d00d      	beq.n	800a180 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	b672      	cpsid	i
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	b662      	cpsie	i
 800a178:	60fb      	str	r3, [r7, #12]
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10d      	bne.n	800a1a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	60bb      	str	r3, [r7, #8]
}
 800a19e:	bf00      	nop
 800a1a0:	bf00      	nop
 800a1a2:	e7fd      	b.n	800a1a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a8:	1e5a      	subs	r2, r3, #1
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d02c      	beq.n	800a214 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d128      	bne.n	800a214 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fbe2 	bl	8008990 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <xTaskPriorityDisinherit+0xe0>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d903      	bls.n	800a1f4 <xTaskPriorityDisinherit+0xb0>
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a224 <xTaskPriorityDisinherit+0xe0>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4a09      	ldr	r2, [pc, #36]	@ (800a228 <xTaskPriorityDisinherit+0xe4>)
 800a202:	441a      	add	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe fb63 	bl	80088d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a214:	697b      	ldr	r3, [r7, #20]
	}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000ca4 	.word	0x20000ca4
 800a224:	20001180 	.word	0x20001180
 800a228:	20000ca8 	.word	0x20000ca8

0800a22c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a236:	4b21      	ldr	r3, [pc, #132]	@ (800a2bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a23c:	4b20      	ldr	r3, [pc, #128]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3304      	adds	r3, #4
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe fba4 	bl	8008990 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d10a      	bne.n	800a266 <prvAddCurrentTaskToDelayedList+0x3a>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d007      	beq.n	800a266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4819      	ldr	r0, [pc, #100]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a260:	f7fe fb39 	bl	80088d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a264:	e026      	b.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a26e:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d209      	bcs.n	800a292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a27e:	4b12      	ldr	r3, [pc, #72]	@ (800a2c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fe fb47 	bl	800891e <vListInsert>
}
 800a290:	e010      	b.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a292:	4b0e      	ldr	r3, [pc, #56]	@ (800a2cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe fb3d 	bl	800891e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d202      	bcs.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ae:	4a08      	ldr	r2, [pc, #32]	@ (800a2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6013      	str	r3, [r2, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	2000117c 	.word	0x2000117c
 800a2c0:	20000ca4 	.word	0x20000ca4
 800a2c4:	20001164 	.word	0x20001164
 800a2c8:	20001134 	.word	0x20001134
 800a2cc:	20001130 	.word	0x20001130
 800a2d0:	20001198 	.word	0x20001198

0800a2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	@ 0x28
 800a2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2de:	f000 fb21 	bl	800a924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a35c <xTimerCreateTimerTask+0x88>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d021      	beq.n	800a32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2f2:	1d3a      	adds	r2, r7, #4
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe faa3 	bl	8008848 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	9202      	str	r2, [sp, #8]
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	2302      	movs	r3, #2
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2300      	movs	r3, #0
 800a312:	460a      	mov	r2, r1
 800a314:	4912      	ldr	r1, [pc, #72]	@ (800a360 <xTimerCreateTimerTask+0x8c>)
 800a316:	4813      	ldr	r0, [pc, #76]	@ (800a364 <xTimerCreateTimerTask+0x90>)
 800a318:	f7ff f87e 	bl	8009418 <xTaskCreateStatic>
 800a31c:	4603      	mov	r3, r0
 800a31e:	4a12      	ldr	r2, [pc, #72]	@ (800a368 <xTimerCreateTimerTask+0x94>)
 800a320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a322:	4b11      	ldr	r3, [pc, #68]	@ (800a368 <xTimerCreateTimerTask+0x94>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10d      	bne.n	800a350 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a338:	b672      	cpsid	i
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	b662      	cpsie	i
 800a348:	613b      	str	r3, [r7, #16]
}
 800a34a:	bf00      	nop
 800a34c:	bf00      	nop
 800a34e:	e7fd      	b.n	800a34c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a350:	697b      	ldr	r3, [r7, #20]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	200011d4 	.word	0x200011d4
 800a360:	0800b404 	.word	0x0800b404
 800a364:	0800a4ad 	.word	0x0800a4ad
 800a368:	200011d8 	.word	0x200011d8

0800a36c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08a      	sub	sp, #40	@ 0x28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10d      	bne.n	800a3a0 <xTimerGenericCommand+0x34>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a388:	b672      	cpsid	i
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	b662      	cpsie	i
 800a398:	623b      	str	r3, [r7, #32]
}
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
 800a39e:	e7fd      	b.n	800a39c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3a0:	4b19      	ldr	r3, [pc, #100]	@ (800a408 <xTimerGenericCommand+0x9c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02a      	beq.n	800a3fe <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b05      	cmp	r3, #5
 800a3b8:	dc18      	bgt.n	800a3ec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ba:	f7ff fea5 	bl	800a108 <xTaskGetSchedulerState>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d109      	bne.n	800a3d8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3c4:	4b10      	ldr	r3, [pc, #64]	@ (800a408 <xTimerGenericCommand+0x9c>)
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	f107 0110 	add.w	r1, r7, #16
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d0:	f7fe fc1e 	bl	8008c10 <xQueueGenericSend>
 800a3d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a3d6:	e012      	b.n	800a3fe <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <xTimerGenericCommand+0x9c>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	f107 0110 	add.w	r1, r7, #16
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f7fe fc14 	bl	8008c10 <xQueueGenericSend>
 800a3e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a3ea:	e008      	b.n	800a3fe <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3ec:	4b06      	ldr	r3, [pc, #24]	@ (800a408 <xTimerGenericCommand+0x9c>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	f107 0110 	add.w	r1, r7, #16
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	f7fe fd14 	bl	8008e24 <xQueueGenericSendFromISR>
 800a3fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a400:	4618      	mov	r0, r3
 800a402:	3728      	adds	r7, #40	@ 0x28
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	200011d4 	.word	0x200011d4

0800a40c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af02      	add	r7, sp, #8
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a416:	4b24      	ldr	r3, [pc, #144]	@ (800a4a8 <prvProcessExpiredTimer+0x9c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	3304      	adds	r3, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe fab3 	bl	8008990 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d025      	beq.n	800a484 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	699a      	ldr	r2, [r3, #24]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	18d1      	adds	r1, r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	6978      	ldr	r0, [r7, #20]
 800a446:	f000 f8d7 	bl	800a5f8 <prvInsertTimerInActiveList>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d022      	beq.n	800a496 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a450:	2300      	movs	r3, #0
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	2300      	movs	r3, #0
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	2100      	movs	r1, #0
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	f7ff ff86 	bl	800a36c <xTimerGenericCommand>
 800a460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d116      	bne.n	800a496 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46c:	b672      	cpsid	i
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	b662      	cpsie	i
 800a47c:	60fb      	str	r3, [r7, #12]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	6978      	ldr	r0, [r7, #20]
 800a49c:	4798      	blx	r3
}
 800a49e:	bf00      	nop
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200011cc 	.word	0x200011cc

0800a4ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4b4:	f107 0308 	add.w	r3, r7, #8
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 f859 	bl	800a570 <prvGetNextExpireTime>
 800a4be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f805 	bl	800a4d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4ca:	f000 f8d7 	bl	800a67c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4ce:	bf00      	nop
 800a4d0:	e7f0      	b.n	800a4b4 <prvTimerTask+0x8>
	...

0800a4d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4de:	f7ff fa0d 	bl	80098fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4e2:	f107 0308 	add.w	r3, r7, #8
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 f866 	bl	800a5b8 <prvSampleTimeNow>
 800a4ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d130      	bne.n	800a556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <prvProcessTimerOrBlockTask+0x3c>
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d806      	bhi.n	800a510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a502:	f7ff fa09 	bl	8009918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ff7f 	bl	800a40c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a50e:	e024      	b.n	800a55a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d008      	beq.n	800a528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a516:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <prvProcessTimerOrBlockTask+0x90>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <prvProcessTimerOrBlockTask+0x50>
 800a520:	2301      	movs	r3, #1
 800a522:	e000      	b.n	800a526 <prvProcessTimerOrBlockTask+0x52>
 800a524:	2300      	movs	r3, #0
 800a526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a528:	4b0f      	ldr	r3, [pc, #60]	@ (800a568 <prvProcessTimerOrBlockTask+0x94>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4619      	mov	r1, r3
 800a536:	f7fe ff3b 	bl	80093b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a53a:	f7ff f9ed 	bl	8009918 <xTaskResumeAll>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a544:	4b09      	ldr	r3, [pc, #36]	@ (800a56c <prvProcessTimerOrBlockTask+0x98>)
 800a546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	f3bf 8f6f 	isb	sy
}
 800a554:	e001      	b.n	800a55a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a556:	f7ff f9df 	bl	8009918 <xTaskResumeAll>
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	200011d0 	.word	0x200011d0
 800a568:	200011d4 	.word	0x200011d4
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a578:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b4 <prvGetNextExpireTime+0x44>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <prvGetNextExpireTime+0x16>
 800a582:	2201      	movs	r2, #1
 800a584:	e000      	b.n	800a588 <prvGetNextExpireTime+0x18>
 800a586:	2200      	movs	r2, #0
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a594:	4b07      	ldr	r3, [pc, #28]	@ (800a5b4 <prvGetNextExpireTime+0x44>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e001      	b.n	800a5a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	200011cc 	.word	0x200011cc

0800a5b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5c0:	f7ff fa4a 	bl	8009a58 <xTaskGetTickCount>
 800a5c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <prvSampleTimeNow+0x3c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d205      	bcs.n	800a5dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5d0:	f000 f940 	bl	800a854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e002      	b.n	800a5e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5e2:	4a04      	ldr	r2, [pc, #16]	@ (800a5f4 <prvSampleTimeNow+0x3c>)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200011dc 	.word	0x200011dc

0800a5f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d812      	bhi.n	800a644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	1ad2      	subs	r2, r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d302      	bcc.n	800a632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a62c:	2301      	movs	r3, #1
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	e01b      	b.n	800a66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a632:	4b10      	ldr	r3, [pc, #64]	@ (800a674 <prvInsertTimerInActiveList+0x7c>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fe f96e 	bl	800891e <vListInsert>
 800a642:	e012      	b.n	800a66a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d206      	bcs.n	800a65a <prvInsertTimerInActiveList+0x62>
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d302      	bcc.n	800a65a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a654:	2301      	movs	r3, #1
 800a656:	617b      	str	r3, [r7, #20]
 800a658:	e007      	b.n	800a66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a65a:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <prvInsertTimerInActiveList+0x80>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3304      	adds	r3, #4
 800a662:	4619      	mov	r1, r3
 800a664:	4610      	mov	r0, r2
 800a666:	f7fe f95a 	bl	800891e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a66a:	697b      	ldr	r3, [r7, #20]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	200011d0 	.word	0x200011d0
 800a678:	200011cc 	.word	0x200011cc

0800a67c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08e      	sub	sp, #56	@ 0x38
 800a680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a682:	e0d4      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	da1b      	bge.n	800a6c2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a68a:	1d3b      	adds	r3, r7, #4
 800a68c:	3304      	adds	r3, #4
 800a68e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10d      	bne.n	800a6b2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69a:	b672      	cpsid	i
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	b662      	cpsie	i
 800a6aa:	61fb      	str	r3, [r7, #28]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6b8:	6850      	ldr	r0, [r2, #4]
 800a6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6bc:	6892      	ldr	r2, [r2, #8]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f2c0 80b2 	blt.w	800a82e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe f958 	bl	8008990 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff ff68 	bl	800a5b8 <prvSampleTimeNow>
 800a6e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b09      	cmp	r3, #9
 800a6ee:	f200 809b 	bhi.w	800a828 <prvProcessReceivedCommands+0x1ac>
 800a6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f8 <prvProcessReceivedCommands+0x7c>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a721 	.word	0x0800a721
 800a6fc:	0800a721 	.word	0x0800a721
 800a700:	0800a721 	.word	0x0800a721
 800a704:	0800a79b 	.word	0x0800a79b
 800a708:	0800a7af 	.word	0x0800a7af
 800a70c:	0800a7ff 	.word	0x0800a7ff
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a721 	.word	0x0800a721
 800a718:	0800a79b 	.word	0x0800a79b
 800a71c:	0800a7af 	.word	0x0800a7af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	18d1      	adds	r1, r2, r3
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a740:	f7ff ff5a 	bl	800a5f8 <prvInsertTimerInActiveList>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d070      	beq.n	800a82c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d065      	beq.n	800a82c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	441a      	add	r2, r3
 800a768:	2300      	movs	r3, #0
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	2300      	movs	r3, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a772:	f7ff fdfb 	bl	800a36c <xTimerGenericCommand>
 800a776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d156      	bne.n	800a82c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	b672      	cpsid	i
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	b662      	cpsie	i
 800a792:	61bb      	str	r3, [r7, #24]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a7ac:	e03f      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7b4:	f043 0301 	orr.w	r3, r3, #1
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10d      	bne.n	800a7ea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	b672      	cpsid	i
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	b662      	cpsie	i
 800a7e2:	617b      	str	r3, [r7, #20]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	18d1      	adds	r1, r2, r3
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f8:	f7ff fefe 	bl	800a5f8 <prvInsertTimerInActiveList>
					break;
 800a7fc:	e017      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a80c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a80e:	f000 fbd1 	bl	800afb4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a812:	e00c      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a81a:	f023 0301 	bic.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a826:	e002      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a828:	bf00      	nop
 800a82a:	e000      	b.n	800a82e <prvProcessReceivedCommands+0x1b2>
					break;
 800a82c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a82e:	4b08      	ldr	r3, [pc, #32]	@ (800a850 <prvProcessReceivedCommands+0x1d4>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	1d39      	adds	r1, r7, #4
 800a834:	2200      	movs	r2, #0
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fb98 	bl	8008f6c <xQueueReceive>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f47f af20 	bne.w	800a684 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	3730      	adds	r7, #48	@ 0x30
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	200011d4 	.word	0x200011d4

0800a854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a85a:	e04b      	b.n	800a8f4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a85c:	4b2f      	ldr	r3, [pc, #188]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a866:	4b2d      	ldr	r3, [pc, #180]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3304      	adds	r3, #4
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe f88b 	bl	8008990 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d031      	beq.n	800a8f4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4413      	add	r3, r2
 800a898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d90e      	bls.n	800a8c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7fe f830 	bl	800891e <vListInsert>
 800a8be:	e019      	b.n	800a8f4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fd4e 	bl	800a36c <xTimerGenericCommand>
 800a8d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10d      	bne.n	800a8f4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	b672      	cpsid	i
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	b662      	cpsie	i
 800a8ec:	603b      	str	r3, [r7, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	bf00      	nop
 800a8f2:	e7fd      	b.n	800a8f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8f4:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1ae      	bne.n	800a85c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8fe:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a904:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <prvSwitchTimerLists+0xcc>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a04      	ldr	r2, [pc, #16]	@ (800a91c <prvSwitchTimerLists+0xc8>)
 800a90a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a90c:	4a04      	ldr	r2, [pc, #16]	@ (800a920 <prvSwitchTimerLists+0xcc>)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	6013      	str	r3, [r2, #0]
}
 800a912:	bf00      	nop
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200011cc 	.word	0x200011cc
 800a920:	200011d0 	.word	0x200011d0

0800a924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a92a:	f000 f947 	bl	800abbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a92e:	4b15      	ldr	r3, [pc, #84]	@ (800a984 <prvCheckForValidListAndQueue+0x60>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d120      	bne.n	800a978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a936:	4814      	ldr	r0, [pc, #80]	@ (800a988 <prvCheckForValidListAndQueue+0x64>)
 800a938:	f7fd ffa0 	bl	800887c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a93c:	4813      	ldr	r0, [pc, #76]	@ (800a98c <prvCheckForValidListAndQueue+0x68>)
 800a93e:	f7fd ff9d 	bl	800887c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a942:	4b13      	ldr	r3, [pc, #76]	@ (800a990 <prvCheckForValidListAndQueue+0x6c>)
 800a944:	4a10      	ldr	r2, [pc, #64]	@ (800a988 <prvCheckForValidListAndQueue+0x64>)
 800a946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a948:	4b12      	ldr	r3, [pc, #72]	@ (800a994 <prvCheckForValidListAndQueue+0x70>)
 800a94a:	4a10      	ldr	r2, [pc, #64]	@ (800a98c <prvCheckForValidListAndQueue+0x68>)
 800a94c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a94e:	2300      	movs	r3, #0
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	4b11      	ldr	r3, [pc, #68]	@ (800a998 <prvCheckForValidListAndQueue+0x74>)
 800a954:	4a11      	ldr	r2, [pc, #68]	@ (800a99c <prvCheckForValidListAndQueue+0x78>)
 800a956:	2110      	movs	r1, #16
 800a958:	200a      	movs	r0, #10
 800a95a:	f7fe f8af 	bl	8008abc <xQueueGenericCreateStatic>
 800a95e:	4603      	mov	r3, r0
 800a960:	4a08      	ldr	r2, [pc, #32]	@ (800a984 <prvCheckForValidListAndQueue+0x60>)
 800a962:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <prvCheckForValidListAndQueue+0x60>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d005      	beq.n	800a978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a96c:	4b05      	ldr	r3, [pc, #20]	@ (800a984 <prvCheckForValidListAndQueue+0x60>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	490b      	ldr	r1, [pc, #44]	@ (800a9a0 <prvCheckForValidListAndQueue+0x7c>)
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fcf2 	bl	800935c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a978:	f000 f956 	bl	800ac28 <vPortExitCritical>
}
 800a97c:	bf00      	nop
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200011d4 	.word	0x200011d4
 800a988:	200011a4 	.word	0x200011a4
 800a98c:	200011b8 	.word	0x200011b8
 800a990:	200011cc 	.word	0x200011cc
 800a994:	200011d0 	.word	0x200011d0
 800a998:	20001280 	.word	0x20001280
 800a99c:	200011e0 	.word	0x200011e0
 800a9a0:	0800b40c 	.word	0x0800b40c

0800a9a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3b04      	subs	r3, #4
 800a9b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3b04      	subs	r3, #4
 800a9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f023 0201 	bic.w	r2, r3, #1
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9d4:	4a0c      	ldr	r2, [pc, #48]	@ (800aa08 <pxPortInitialiseStack+0x64>)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3b14      	subs	r3, #20
 800a9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f06f 0202 	mvn.w	r2, #2
 800a9f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3b20      	subs	r3, #32
 800a9f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	0800aa0d 	.word	0x0800aa0d

0800aa0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa16:	4b15      	ldr	r3, [pc, #84]	@ (800aa6c <prvTaskExitError+0x60>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d00d      	beq.n	800aa3c <prvTaskExitError+0x30>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	b672      	cpsid	i
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	b662      	cpsie	i
 800aa34:	60fb      	str	r3, [r7, #12]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <prvTaskExitError+0x2c>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	b672      	cpsid	i
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	b662      	cpsie	i
 800aa50:	60bb      	str	r3, [r7, #8]
}
 800aa52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa54:	bf00      	nop
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d0fc      	beq.n	800aa56 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000014 	.word	0x20000014

0800aa70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa70:	4b07      	ldr	r3, [pc, #28]	@ (800aa90 <pxCurrentTCBConst2>)
 800aa72:	6819      	ldr	r1, [r3, #0]
 800aa74:	6808      	ldr	r0, [r1, #0]
 800aa76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7a:	f380 8809 	msr	PSP, r0
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f04f 0000 	mov.w	r0, #0
 800aa86:	f380 8811 	msr	BASEPRI, r0
 800aa8a:	4770      	bx	lr
 800aa8c:	f3af 8000 	nop.w

0800aa90 <pxCurrentTCBConst2>:
 800aa90:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop

0800aa98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa98:	4808      	ldr	r0, [pc, #32]	@ (800aabc <prvPortStartFirstTask+0x24>)
 800aa9a:	6800      	ldr	r0, [r0, #0]
 800aa9c:	6800      	ldr	r0, [r0, #0]
 800aa9e:	f380 8808 	msr	MSP, r0
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8814 	msr	CONTROL, r0
 800aaaa:	b662      	cpsie	i
 800aaac:	b661      	cpsie	f
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	df00      	svc	0
 800aab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaba:	bf00      	nop
 800aabc:	e000ed08 	.word	0xe000ed08

0800aac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aac6:	4b37      	ldr	r3, [pc, #220]	@ (800aba4 <xPortStartScheduler+0xe4>)
 800aac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22ff      	movs	r2, #255	@ 0xff
 800aad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	4b2f      	ldr	r3, [pc, #188]	@ (800aba8 <xPortStartScheduler+0xe8>)
 800aaec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaee:	4b2f      	ldr	r3, [pc, #188]	@ (800abac <xPortStartScheduler+0xec>)
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaf4:	e009      	b.n	800ab0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aaf6:	4b2d      	ldr	r3, [pc, #180]	@ (800abac <xPortStartScheduler+0xec>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4a2b      	ldr	r2, [pc, #172]	@ (800abac <xPortStartScheduler+0xec>)
 800aafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab12:	2b80      	cmp	r3, #128	@ 0x80
 800ab14:	d0ef      	beq.n	800aaf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab16:	4b25      	ldr	r3, [pc, #148]	@ (800abac <xPortStartScheduler+0xec>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1c3 0307 	rsb	r3, r3, #7
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d00d      	beq.n	800ab3e <xPortStartScheduler+0x7e>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	b672      	cpsid	i
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	b662      	cpsie	i
 800ab36:	60bb      	str	r3, [r7, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab3e:	4b1b      	ldr	r3, [pc, #108]	@ (800abac <xPortStartScheduler+0xec>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	4a19      	ldr	r2, [pc, #100]	@ (800abac <xPortStartScheduler+0xec>)
 800ab46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab48:	4b18      	ldr	r3, [pc, #96]	@ (800abac <xPortStartScheduler+0xec>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab50:	4a16      	ldr	r2, [pc, #88]	@ (800abac <xPortStartScheduler+0xec>)
 800ab52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab5c:	4b14      	ldr	r3, [pc, #80]	@ (800abb0 <xPortStartScheduler+0xf0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a13      	ldr	r2, [pc, #76]	@ (800abb0 <xPortStartScheduler+0xf0>)
 800ab62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab68:	4b11      	ldr	r3, [pc, #68]	@ (800abb0 <xPortStartScheduler+0xf0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a10      	ldr	r2, [pc, #64]	@ (800abb0 <xPortStartScheduler+0xf0>)
 800ab6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab74:	f000 f8dc 	bl	800ad30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab78:	4b0e      	ldr	r3, [pc, #56]	@ (800abb4 <xPortStartScheduler+0xf4>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab7e:	f000 f8fb 	bl	800ad78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab82:	4b0d      	ldr	r3, [pc, #52]	@ (800abb8 <xPortStartScheduler+0xf8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a0c      	ldr	r2, [pc, #48]	@ (800abb8 <xPortStartScheduler+0xf8>)
 800ab88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab8e:	f7ff ff83 	bl	800aa98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab92:	f7ff f82d 	bl	8009bf0 <vTaskSwitchContext>
	prvTaskExitError();
 800ab96:	f7ff ff39 	bl	800aa0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000e400 	.word	0xe000e400
 800aba8:	200012d0 	.word	0x200012d0
 800abac:	200012d4 	.word	0x200012d4
 800abb0:	e000ed20 	.word	0xe000ed20
 800abb4:	20000014 	.word	0x20000014
 800abb8:	e000ef34 	.word	0xe000ef34

0800abbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc6:	b672      	cpsid	i
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	b662      	cpsie	i
 800abd6:	607b      	str	r3, [r7, #4]
}
 800abd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abda:	4b11      	ldr	r3, [pc, #68]	@ (800ac20 <vPortEnterCritical+0x64>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3301      	adds	r3, #1
 800abe0:	4a0f      	ldr	r2, [pc, #60]	@ (800ac20 <vPortEnterCritical+0x64>)
 800abe2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abe4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac20 <vPortEnterCritical+0x64>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d112      	bne.n	800ac12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abec:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <vPortEnterCritical+0x68>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00d      	beq.n	800ac12 <vPortEnterCritical+0x56>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	b672      	cpsid	i
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	b662      	cpsie	i
 800ac0a:	603b      	str	r3, [r7, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <vPortEnterCritical+0x52>
	}
}
 800ac12:	bf00      	nop
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000014 	.word	0x20000014
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac2e:	4b13      	ldr	r3, [pc, #76]	@ (800ac7c <vPortExitCritical+0x54>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10d      	bne.n	800ac52 <vPortExitCritical+0x2a>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3a:	b672      	cpsid	i
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	b662      	cpsie	i
 800ac4a:	607b      	str	r3, [r7, #4]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ac52:	4b0a      	ldr	r3, [pc, #40]	@ (800ac7c <vPortExitCritical+0x54>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a08      	ldr	r2, [pc, #32]	@ (800ac7c <vPortExitCritical+0x54>)
 800ac5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac5c:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <vPortExitCritical+0x54>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d105      	bne.n	800ac70 <vPortExitCritical+0x48>
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
}
 800ac6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000014 	.word	0x20000014

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b15      	ldr	r3, [pc, #84]	@ (800ace0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f01e 0f10 	tst.w	lr, #16
 800ac90:	bf08      	it	eq
 800ac92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aca4:	b672      	cpsid	i
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	b662      	cpsie	i
 800acb4:	f7fe ff9c 	bl	8009bf0 <vTaskSwitchContext>
 800acb8:	f04f 0000 	mov.w	r0, #0
 800acbc:	f380 8811 	msr	BASEPRI, r0
 800acc0:	bc09      	pop	{r0, r3}
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	6808      	ldr	r0, [r1, #0]
 800acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	f01e 0f10 	tst.w	lr, #16
 800acce:	bf08      	it	eq
 800acd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acd4:	f380 8809 	msr	PSP, r0
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop

0800ace0 <pxCurrentTCBConst>:
 800ace0:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	607b      	str	r3, [r7, #4]
}
 800ad04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad06:	f7fe feb7 	bl	8009a78 <xTaskIncrementTick>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad10:	4b06      	ldr	r3, [pc, #24]	@ (800ad2c <SysTick_Handler+0x44>)
 800ad12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	2300      	movs	r3, #0
 800ad1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f383 8811 	msr	BASEPRI, r3
}
 800ad22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	e000ed04 	.word	0xe000ed04

0800ad30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad34:	4b0b      	ldr	r3, [pc, #44]	@ (800ad64 <vPortSetupTimerInterrupt+0x34>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad68 <vPortSetupTimerInterrupt+0x38>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad40:	4b0a      	ldr	r3, [pc, #40]	@ (800ad6c <vPortSetupTimerInterrupt+0x3c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a0a      	ldr	r2, [pc, #40]	@ (800ad70 <vPortSetupTimerInterrupt+0x40>)
 800ad46:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4a:	099b      	lsrs	r3, r3, #6
 800ad4c:	4a09      	ldr	r2, [pc, #36]	@ (800ad74 <vPortSetupTimerInterrupt+0x44>)
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad52:	4b04      	ldr	r3, [pc, #16]	@ (800ad64 <vPortSetupTimerInterrupt+0x34>)
 800ad54:	2207      	movs	r2, #7
 800ad56:	601a      	str	r2, [r3, #0]
}
 800ad58:	bf00      	nop
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	e000e010 	.word	0xe000e010
 800ad68:	e000e018 	.word	0xe000e018
 800ad6c:	20000008 	.word	0x20000008
 800ad70:	10624dd3 	.word	0x10624dd3
 800ad74:	e000e014 	.word	0xe000e014

0800ad78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad88 <vPortEnableVFP+0x10>
 800ad7c:	6801      	ldr	r1, [r0, #0]
 800ad7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad82:	6001      	str	r1, [r0, #0]
 800ad84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad86:	bf00      	nop
 800ad88:	e000ed88 	.word	0xe000ed88

0800ad8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad92:	f3ef 8305 	mrs	r3, IPSR
 800ad96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d917      	bls.n	800adce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ae08 <vPortValidateInterruptPriority+0x7c>)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4413      	add	r3, r2
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ada8:	4b18      	ldr	r3, [pc, #96]	@ (800ae0c <vPortValidateInterruptPriority+0x80>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	7afa      	ldrb	r2, [r7, #11]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d20d      	bcs.n	800adce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb6:	b672      	cpsid	i
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	b662      	cpsie	i
 800adc6:	607b      	str	r3, [r7, #4]
}
 800adc8:	bf00      	nop
 800adca:	bf00      	nop
 800adcc:	e7fd      	b.n	800adca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adce:	4b10      	ldr	r3, [pc, #64]	@ (800ae10 <vPortValidateInterruptPriority+0x84>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800add6:	4b0f      	ldr	r3, [pc, #60]	@ (800ae14 <vPortValidateInterruptPriority+0x88>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d90d      	bls.n	800adfa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	b672      	cpsid	i
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	b662      	cpsie	i
 800adf2:	603b      	str	r3, [r7, #0]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <vPortValidateInterruptPriority+0x6a>
	}
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	e000e3f0 	.word	0xe000e3f0
 800ae0c:	200012d0 	.word	0x200012d0
 800ae10:	e000ed0c 	.word	0xe000ed0c
 800ae14:	200012d4 	.word	0x200012d4

0800ae18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08a      	sub	sp, #40	@ 0x28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae20:	2300      	movs	r3, #0
 800ae22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae24:	f7fe fd6a 	bl	80098fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae28:	4b5d      	ldr	r3, [pc, #372]	@ (800afa0 <pvPortMalloc+0x188>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae30:	f000 f920 	bl	800b074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae34:	4b5b      	ldr	r3, [pc, #364]	@ (800afa4 <pvPortMalloc+0x18c>)
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8094 	bne.w	800af6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d020      	beq.n	800ae8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ae48:	2208      	movs	r2, #8
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d017      	beq.n	800ae8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f023 0307 	bic.w	r3, r3, #7
 800ae60:	3308      	adds	r3, #8
 800ae62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00d      	beq.n	800ae8a <pvPortMalloc+0x72>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae72:	b672      	cpsid	i
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	b662      	cpsie	i
 800ae82:	617b      	str	r3, [r7, #20]
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	e7fd      	b.n	800ae86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d06c      	beq.n	800af6a <pvPortMalloc+0x152>
 800ae90:	4b45      	ldr	r3, [pc, #276]	@ (800afa8 <pvPortMalloc+0x190>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d867      	bhi.n	800af6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae9a:	4b44      	ldr	r3, [pc, #272]	@ (800afac <pvPortMalloc+0x194>)
 800ae9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae9e:	4b43      	ldr	r3, [pc, #268]	@ (800afac <pvPortMalloc+0x194>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aea4:	e004      	b.n	800aeb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800aea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d903      	bls.n	800aec2 <pvPortMalloc+0xaa>
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f1      	bne.n	800aea6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aec2:	4b37      	ldr	r3, [pc, #220]	@ (800afa0 <pvPortMalloc+0x188>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d04e      	beq.n	800af6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aecc:	6a3b      	ldr	r3, [r7, #32]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2208      	movs	r2, #8
 800aed2:	4413      	add	r3, r2
 800aed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	1ad2      	subs	r2, r2, r3
 800aee6:	2308      	movs	r3, #8
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d922      	bls.n	800af34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4413      	add	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <pvPortMalloc+0x104>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	b672      	cpsid	i
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	b662      	cpsie	i
 800af14:	613b      	str	r3, [r7, #16]
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	e7fd      	b.n	800af18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af2e:	69b8      	ldr	r0, [r7, #24]
 800af30:	f000 f902 	bl	800b138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af34:	4b1c      	ldr	r3, [pc, #112]	@ (800afa8 <pvPortMalloc+0x190>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	4a1a      	ldr	r2, [pc, #104]	@ (800afa8 <pvPortMalloc+0x190>)
 800af40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af42:	4b19      	ldr	r3, [pc, #100]	@ (800afa8 <pvPortMalloc+0x190>)
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b1a      	ldr	r3, [pc, #104]	@ (800afb0 <pvPortMalloc+0x198>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d203      	bcs.n	800af56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af4e:	4b16      	ldr	r3, [pc, #88]	@ (800afa8 <pvPortMalloc+0x190>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a17      	ldr	r2, [pc, #92]	@ (800afb0 <pvPortMalloc+0x198>)
 800af54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	4b12      	ldr	r3, [pc, #72]	@ (800afa4 <pvPortMalloc+0x18c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	431a      	orrs	r2, r3
 800af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af6a:	f7fe fcd5 	bl	8009918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	f003 0307 	and.w	r3, r3, #7
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00d      	beq.n	800af94 <pvPortMalloc+0x17c>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7c:	b672      	cpsid	i
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	b662      	cpsie	i
 800af8c:	60fb      	str	r3, [r7, #12]
}
 800af8e:	bf00      	nop
 800af90:	bf00      	nop
 800af92:	e7fd      	b.n	800af90 <pvPortMalloc+0x178>
	return pvReturn;
 800af94:	69fb      	ldr	r3, [r7, #28]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3728      	adds	r7, #40	@ 0x28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20004ee0 	.word	0x20004ee0
 800afa4:	20004eec 	.word	0x20004eec
 800afa8:	20004ee4 	.word	0x20004ee4
 800afac:	20004ed8 	.word	0x20004ed8
 800afb0:	20004ee8 	.word	0x20004ee8

0800afb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d04e      	beq.n	800b064 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afc6:	2308      	movs	r3, #8
 800afc8:	425b      	negs	r3, r3
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4413      	add	r3, r2
 800afce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	4b24      	ldr	r3, [pc, #144]	@ (800b06c <vPortFree+0xb8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4013      	ands	r3, r2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10d      	bne.n	800affe <vPortFree+0x4a>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe6:	b672      	cpsid	i
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	b662      	cpsie	i
 800aff6:	60fb      	str	r3, [r7, #12]
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	e7fd      	b.n	800affa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00d      	beq.n	800b022 <vPortFree+0x6e>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00a:	b672      	cpsid	i
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	b662      	cpsie	i
 800b01a:	60bb      	str	r3, [r7, #8]
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	4b11      	ldr	r3, [pc, #68]	@ (800b06c <vPortFree+0xb8>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d019      	beq.n	800b064 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d115      	bne.n	800b064 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	4b0b      	ldr	r3, [pc, #44]	@ (800b06c <vPortFree+0xb8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	43db      	mvns	r3, r3
 800b042:	401a      	ands	r2, r3
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b048:	f7fe fc58 	bl	80098fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	4b07      	ldr	r3, [pc, #28]	@ (800b070 <vPortFree+0xbc>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4413      	add	r3, r2
 800b056:	4a06      	ldr	r2, [pc, #24]	@ (800b070 <vPortFree+0xbc>)
 800b058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b05a:	6938      	ldr	r0, [r7, #16]
 800b05c:	f000 f86c 	bl	800b138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b060:	f7fe fc5a 	bl	8009918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b064:	bf00      	nop
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20004eec 	.word	0x20004eec
 800b070:	20004ee4 	.word	0x20004ee4

0800b074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b07a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b07e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b080:	4b27      	ldr	r3, [pc, #156]	@ (800b120 <prvHeapInit+0xac>)
 800b082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00c      	beq.n	800b0a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3307      	adds	r3, #7
 800b092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0307 	bic.w	r3, r3, #7
 800b09a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b120 <prvHeapInit+0xac>)
 800b0a4:	4413      	add	r3, r2
 800b0a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b124 <prvHeapInit+0xb0>)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0b2:	4b1c      	ldr	r3, [pc, #112]	@ (800b124 <prvHeapInit+0xb0>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	4413      	add	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f023 0307 	bic.w	r3, r3, #7
 800b0ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	4a15      	ldr	r2, [pc, #84]	@ (800b128 <prvHeapInit+0xb4>)
 800b0d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0d6:	4b14      	ldr	r3, [pc, #80]	@ (800b128 <prvHeapInit+0xb4>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0de:	4b12      	ldr	r3, [pc, #72]	@ (800b128 <prvHeapInit+0xb4>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <prvHeapInit+0xb4>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	4a0a      	ldr	r2, [pc, #40]	@ (800b12c <prvHeapInit+0xb8>)
 800b102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	4a09      	ldr	r2, [pc, #36]	@ (800b130 <prvHeapInit+0xbc>)
 800b10a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b10c:	4b09      	ldr	r3, [pc, #36]	@ (800b134 <prvHeapInit+0xc0>)
 800b10e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b112:	601a      	str	r2, [r3, #0]
}
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	200012d8 	.word	0x200012d8
 800b124:	20004ed8 	.word	0x20004ed8
 800b128:	20004ee0 	.word	0x20004ee0
 800b12c:	20004ee8 	.word	0x20004ee8
 800b130:	20004ee4 	.word	0x20004ee4
 800b134:	20004eec 	.word	0x20004eec

0800b138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b140:	4b28      	ldr	r3, [pc, #160]	@ (800b1e4 <prvInsertBlockIntoFreeList+0xac>)
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	e002      	b.n	800b14c <prvInsertBlockIntoFreeList+0x14>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	429a      	cmp	r2, r3
 800b154:	d8f7      	bhi.n	800b146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	4413      	add	r3, r2
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d108      	bne.n	800b17a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	441a      	add	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	441a      	add	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d118      	bne.n	800b1c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	4b15      	ldr	r3, [pc, #84]	@ (800b1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d00d      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	441a      	add	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e008      	b.n	800b1c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	e003      	b.n	800b1c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d002      	beq.n	800b1d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20004ed8 	.word	0x20004ed8
 800b1e8:	20004ee0 	.word	0x20004ee0

0800b1ec <memset>:
 800b1ec:	4402      	add	r2, r0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d100      	bne.n	800b1f6 <memset+0xa>
 800b1f4:	4770      	bx	lr
 800b1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1fa:	e7f9      	b.n	800b1f0 <memset+0x4>

0800b1fc <_reclaim_reent>:
 800b1fc:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b4 <_reclaim_reent+0xb8>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4283      	cmp	r3, r0
 800b202:	b570      	push	{r4, r5, r6, lr}
 800b204:	4604      	mov	r4, r0
 800b206:	d053      	beq.n	800b2b0 <_reclaim_reent+0xb4>
 800b208:	69c3      	ldr	r3, [r0, #28]
 800b20a:	b31b      	cbz	r3, 800b254 <_reclaim_reent+0x58>
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	b163      	cbz	r3, 800b22a <_reclaim_reent+0x2e>
 800b210:	2500      	movs	r5, #0
 800b212:	69e3      	ldr	r3, [r4, #28]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	5959      	ldr	r1, [r3, r5]
 800b218:	b9b1      	cbnz	r1, 800b248 <_reclaim_reent+0x4c>
 800b21a:	3504      	adds	r5, #4
 800b21c:	2d80      	cmp	r5, #128	@ 0x80
 800b21e:	d1f8      	bne.n	800b212 <_reclaim_reent+0x16>
 800b220:	69e3      	ldr	r3, [r4, #28]
 800b222:	4620      	mov	r0, r4
 800b224:	68d9      	ldr	r1, [r3, #12]
 800b226:	f000 f87b 	bl	800b320 <_free_r>
 800b22a:	69e3      	ldr	r3, [r4, #28]
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	b111      	cbz	r1, 800b236 <_reclaim_reent+0x3a>
 800b230:	4620      	mov	r0, r4
 800b232:	f000 f875 	bl	800b320 <_free_r>
 800b236:	69e3      	ldr	r3, [r4, #28]
 800b238:	689d      	ldr	r5, [r3, #8]
 800b23a:	b15d      	cbz	r5, 800b254 <_reclaim_reent+0x58>
 800b23c:	4629      	mov	r1, r5
 800b23e:	4620      	mov	r0, r4
 800b240:	682d      	ldr	r5, [r5, #0]
 800b242:	f000 f86d 	bl	800b320 <_free_r>
 800b246:	e7f8      	b.n	800b23a <_reclaim_reent+0x3e>
 800b248:	680e      	ldr	r6, [r1, #0]
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 f868 	bl	800b320 <_free_r>
 800b250:	4631      	mov	r1, r6
 800b252:	e7e1      	b.n	800b218 <_reclaim_reent+0x1c>
 800b254:	6961      	ldr	r1, [r4, #20]
 800b256:	b111      	cbz	r1, 800b25e <_reclaim_reent+0x62>
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 f861 	bl	800b320 <_free_r>
 800b25e:	69e1      	ldr	r1, [r4, #28]
 800b260:	b111      	cbz	r1, 800b268 <_reclaim_reent+0x6c>
 800b262:	4620      	mov	r0, r4
 800b264:	f000 f85c 	bl	800b320 <_free_r>
 800b268:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b26a:	b111      	cbz	r1, 800b272 <_reclaim_reent+0x76>
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 f857 	bl	800b320 <_free_r>
 800b272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b274:	b111      	cbz	r1, 800b27c <_reclaim_reent+0x80>
 800b276:	4620      	mov	r0, r4
 800b278:	f000 f852 	bl	800b320 <_free_r>
 800b27c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b27e:	b111      	cbz	r1, 800b286 <_reclaim_reent+0x8a>
 800b280:	4620      	mov	r0, r4
 800b282:	f000 f84d 	bl	800b320 <_free_r>
 800b286:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b288:	b111      	cbz	r1, 800b290 <_reclaim_reent+0x94>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f848 	bl	800b320 <_free_r>
 800b290:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b292:	b111      	cbz	r1, 800b29a <_reclaim_reent+0x9e>
 800b294:	4620      	mov	r0, r4
 800b296:	f000 f843 	bl	800b320 <_free_r>
 800b29a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b29c:	b111      	cbz	r1, 800b2a4 <_reclaim_reent+0xa8>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 f83e 	bl	800b320 <_free_r>
 800b2a4:	6a23      	ldr	r3, [r4, #32]
 800b2a6:	b11b      	cbz	r3, 800b2b0 <_reclaim_reent+0xb4>
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2ae:	4718      	bx	r3
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000018 	.word	0x20000018

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f000 f87e 	bl	800b3cc <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800b484 	.word	0x0800b484
 800b2f4:	0800b484 	.word	0x0800b484
 800b2f8:	0800b484 	.word	0x0800b484
 800b2fc:	0800b488 	.word	0x0800b488

0800b300 <__retarget_lock_acquire_recursive>:
 800b300:	4770      	bx	lr

0800b302 <__retarget_lock_release_recursive>:
 800b302:	4770      	bx	lr

0800b304 <memcpy>:
 800b304:	440a      	add	r2, r1
 800b306:	4291      	cmp	r1, r2
 800b308:	f100 33ff 	add.w	r3, r0, #4294967295
 800b30c:	d100      	bne.n	800b310 <memcpy+0xc>
 800b30e:	4770      	bx	lr
 800b310:	b510      	push	{r4, lr}
 800b312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b31a:	4291      	cmp	r1, r2
 800b31c:	d1f9      	bne.n	800b312 <memcpy+0xe>
 800b31e:	bd10      	pop	{r4, pc}

0800b320 <_free_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4605      	mov	r5, r0
 800b324:	2900      	cmp	r1, #0
 800b326:	d041      	beq.n	800b3ac <_free_r+0x8c>
 800b328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32c:	1f0c      	subs	r4, r1, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfb8      	it	lt
 800b332:	18e4      	addlt	r4, r4, r3
 800b334:	f000 f83e 	bl	800b3b4 <__malloc_lock>
 800b338:	4a1d      	ldr	r2, [pc, #116]	@ (800b3b0 <_free_r+0x90>)
 800b33a:	6813      	ldr	r3, [r2, #0]
 800b33c:	b933      	cbnz	r3, 800b34c <_free_r+0x2c>
 800b33e:	6063      	str	r3, [r4, #4]
 800b340:	6014      	str	r4, [r2, #0]
 800b342:	4628      	mov	r0, r5
 800b344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b348:	f000 b83a 	b.w	800b3c0 <__malloc_unlock>
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	d908      	bls.n	800b362 <_free_r+0x42>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	1821      	adds	r1, r4, r0
 800b354:	428b      	cmp	r3, r1
 800b356:	bf01      	itttt	eq
 800b358:	6819      	ldreq	r1, [r3, #0]
 800b35a:	685b      	ldreq	r3, [r3, #4]
 800b35c:	1809      	addeq	r1, r1, r0
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	e7ed      	b.n	800b33e <_free_r+0x1e>
 800b362:	461a      	mov	r2, r3
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	b10b      	cbz	r3, 800b36c <_free_r+0x4c>
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d9fa      	bls.n	800b362 <_free_r+0x42>
 800b36c:	6811      	ldr	r1, [r2, #0]
 800b36e:	1850      	adds	r0, r2, r1
 800b370:	42a0      	cmp	r0, r4
 800b372:	d10b      	bne.n	800b38c <_free_r+0x6c>
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	4401      	add	r1, r0
 800b378:	1850      	adds	r0, r2, r1
 800b37a:	4283      	cmp	r3, r0
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	d1e0      	bne.n	800b342 <_free_r+0x22>
 800b380:	6818      	ldr	r0, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	6053      	str	r3, [r2, #4]
 800b386:	4408      	add	r0, r1
 800b388:	6010      	str	r0, [r2, #0]
 800b38a:	e7da      	b.n	800b342 <_free_r+0x22>
 800b38c:	d902      	bls.n	800b394 <_free_r+0x74>
 800b38e:	230c      	movs	r3, #12
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	e7d6      	b.n	800b342 <_free_r+0x22>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	1821      	adds	r1, r4, r0
 800b398:	428b      	cmp	r3, r1
 800b39a:	bf04      	itt	eq
 800b39c:	6819      	ldreq	r1, [r3, #0]
 800b39e:	685b      	ldreq	r3, [r3, #4]
 800b3a0:	6063      	str	r3, [r4, #4]
 800b3a2:	bf04      	itt	eq
 800b3a4:	1809      	addeq	r1, r1, r0
 800b3a6:	6021      	streq	r1, [r4, #0]
 800b3a8:	6054      	str	r4, [r2, #4]
 800b3aa:	e7ca      	b.n	800b342 <_free_r+0x22>
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000502c 	.word	0x2000502c

0800b3b4 <__malloc_lock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	@ (800b3bc <__malloc_lock+0x8>)
 800b3b6:	f7ff bfa3 	b.w	800b300 <__retarget_lock_acquire_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20005028 	.word	0x20005028

0800b3c0 <__malloc_unlock>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	@ (800b3c8 <__malloc_unlock+0x8>)
 800b3c2:	f7ff bf9e 	b.w	800b302 <__retarget_lock_release_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	20005028 	.word	0x20005028

0800b3cc <_init>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr

0800b3d8 <_fini>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr
