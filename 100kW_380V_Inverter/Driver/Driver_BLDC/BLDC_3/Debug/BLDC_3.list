
BLDC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b2d4  0800b2d4  0000c2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b36c  0800b36c  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b36c  0800b36c  0000c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b374  0800b374  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b374  0800b374  0000c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b378  0800b378  0000c378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b37c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fbc  20000068  0800b3e4  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005024  0800b3e4  0000e024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219d0  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ca  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00034b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b6f  00000000  00000000  00035f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207c1  00000000  00000000  0005ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee0ce  00000000  00000000  0007c259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eac  00000000  00000000  0016a36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00171218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b2bc 	.word	0x0800b2bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b2bc 	.word	0x0800b2bc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <SWITCH>:
 *  Created on: Jun 20, 2024
 *      Author: chipi
 */
#include "BLDC.h"

uint8_t SWITCH( bool coils[]){
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b25a      	sxtb	r2, r3
 8000564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000568:	4313      	orrs	r3, r2
 800056a:	b25b      	sxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	b25b      	sxtb	r3, r3
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000584:	4313      	orrs	r3, r2
 8000586:	b25b      	sxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3302      	adds	r3, #2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b25b      	sxtb	r3, r3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	b25a      	sxtb	r2, r3
 800059c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	73fb      	strb	r3, [r7, #15]
return connector;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <Phaze_A_ON>:

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);}
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <Phaze_A_ON+0x18>)
 80005bc:	f006 fa46 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 80005c0:	2100      	movs	r1, #0
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <Phaze_A_ON+0x18>)
 80005c4:	f004 fdb6 	bl	8005134 <HAL_TIM_PWM_Start>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200002cc 	.word	0x200002cc

080005d0 <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005d8:	f004 fea6 	bl	8005328 <HAL_TIM_PWM_Stop>
 80005dc:	2100      	movs	r1, #0
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005e0:	f006 f972 	bl	80068c8 <HAL_TIMEx_PWMN_Start>
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002cc 	.word	0x200002cc

080005ec <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);}
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005f4:	f004 fe98 	bl	8005328 <HAL_TIM_PWM_Stop>
 80005f8:	2100      	movs	r1, #0
 80005fa:	4802      	ldr	r0, [pc, #8]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005fc:	f006 fa26 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002cc 	.word	0x200002cc

08000608 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);}
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
 800060c:	2104      	movs	r1, #4
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <Phaze_B_ON+0x18>)
 8000610:	f006 fa1c 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 8000614:	2104      	movs	r1, #4
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <Phaze_B_ON+0x18>)
 8000618:	f004 fd8c 	bl	8005134 <HAL_TIM_PWM_Start>
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200002cc 	.word	0x200002cc

08000624 <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); }
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <Phaze_B_OFF+0x18>)
 800062c:	f004 fe7c 	bl	8005328 <HAL_TIM_PWM_Stop>
 8000630:	2104      	movs	r1, #4
 8000632:	4802      	ldr	r0, [pc, #8]	@ (800063c <Phaze_B_OFF+0x18>)
 8000634:	f006 f948 	bl	80068c8 <HAL_TIMEx_PWMN_Start>
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002cc 	.word	0x200002cc

08000640 <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
 8000644:	2104      	movs	r1, #4
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000648:	f004 fe6e 	bl	8005328 <HAL_TIM_PWM_Stop>
 800064c:	2104      	movs	r1, #4
 800064e:	4802      	ldr	r0, [pc, #8]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000650:	f006 f9fc 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200002cc 	.word	0x200002cc

0800065c <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  }
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	2108      	movs	r1, #8
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <Phaze_C_ON+0x18>)
 8000664:	f006 f9f2 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 8000668:	2108      	movs	r1, #8
 800066a:	4802      	ldr	r0, [pc, #8]	@ (8000674 <Phaze_C_ON+0x18>)
 800066c:	f004 fd62 	bl	8005134 <HAL_TIM_PWM_Start>
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200002cc 	.word	0x200002cc

08000678 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);}
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000680:	f004 fe52 	bl	8005328 <HAL_TIM_PWM_Stop>
 8000684:	2108      	movs	r1, #8
 8000686:	4802      	ldr	r0, [pc, #8]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000688:	f006 f91e 	bl	80068c8 <HAL_TIMEx_PWMN_Start>
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002cc 	.word	0x200002cc

08000694 <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);}
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <Phaze_C_ZZ+0x18>)
 800069c:	f004 fe44 	bl	8005328 <HAL_TIM_PWM_Stop>
 80006a0:	2108      	movs	r1, #8
 80006a2:	4802      	ldr	r0, [pc, #8]	@ (80006ac <Phaze_C_ZZ+0x18>)
 80006a4:	f006 f9d2 	bl	8006a4c <HAL_TIMEx_PWMN_Stop>
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200002cc 	.word	0x200002cc

080006b0 <BLDC_MotorCommutation>:


void BLDC_MotorCommutation(uint8_t halls  ){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]

	 switch (halls) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d84b      	bhi.n	8000758 <BLDC_MotorCommutation+0xa8>
 80006c0:	a201      	add	r2, pc, #4	@ (adr r2, 80006c8 <BLDC_MotorCommutation+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	0800074b 	.word	0x0800074b
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f7 	.word	0x080006f7
 80006d4:	08000705 	.word	0x08000705
 80006d8:	08000713 	.word	0x08000713
 80006dc:	08000721 	.word	0x08000721
 80006e0:	0800072f 	.word	0x0800072f
 80006e4:	0800073d 	.word	0x0800073d

	case 1:

    Phaze_A_ON();
 80006e8:	f7ff ff64 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_ZZ();
 80006ec:	f7ff ffa8 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_OFF();
 80006f0:	f7ff ffc2 	bl	8000678 <Phaze_C_OFF>

	break;
 80006f4:	e031      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 2:

    Phaze_A_OFF();
 80006f6:	f7ff ff6b 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ON();
 80006fa:	f7ff ff85 	bl	8000608 <Phaze_B_ON>
    Phaze_C_ZZ();
 80006fe:	f7ff ffc9 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000702:	e02a      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 3:

	Phaze_A_ZZ();
 8000704:	f7ff ff72 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ON();
 8000708:	f7ff ff7e 	bl	8000608 <Phaze_B_ON>
	Phaze_C_OFF();
 800070c:	f7ff ffb4 	bl	8000678 <Phaze_C_OFF>

	break;
 8000710:	e023      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 4:

	Phaze_A_ZZ();
 8000712:	f7ff ff6b 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_OFF();
 8000716:	f7ff ff85 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ON();
 800071a:	f7ff ff9f 	bl	800065c <Phaze_C_ON>


	break;
 800071e:	e01c      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 5:

	Phaze_A_ON();
 8000720:	f7ff ff48 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_OFF();
 8000724:	f7ff ff7e 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ZZ();
 8000728:	f7ff ffb4 	bl	8000694 <Phaze_C_ZZ>

	break;
 800072c:	e015      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 6:

	Phaze_A_OFF();
 800072e:	f7ff ff4f 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ZZ();
 8000732:	f7ff ff85 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ON();
 8000736:	f7ff ff91 	bl	800065c <Phaze_C_ON>

	break;
 800073a:	e00e      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 7:

	Phaze_A_ZZ();
 800073c:	f7ff ff56 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 8000740:	f7ff ff7e 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000744:	f7ff ffa6 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000748:	e007      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 0:

	Phaze_A_ZZ();
 800074a:	f7ff ff4f 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 800074e:	f7ff ff77 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000752:	f7ff ff9f 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000756:	e000      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	default:
	break;}
 8000758:	bf00      	nop

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop

08000764 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b55      	ldr	r3, [pc, #340]	@ (80008cc <Registers_handler+0x168>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d021      	beq.n	80007c2 <Registers_handler+0x5e>
 800077e:	2300      	movs	r3, #0
 8000780:	82fb      	strh	r3, [r7, #22]
 8000782:	e007      	b.n	8000794 <Registers_handler+0x30>
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	3301      	adds	r3, #1
 8000792:	82fb      	strh	r3, [r7, #22]
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	2b3f      	cmp	r3, #63	@ 0x3f
 8000798:	d9f4      	bls.n	8000784 <Registers_handler+0x20>
	     RX_2;
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a0:	484b      	ldr	r0, [pc, #300]	@ (80008d0 <Registers_handler+0x16c>)
 80007a2:	f003 fa25 	bl	8003bf0 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	484a      	ldr	r0, [pc, #296]	@ (80008d4 <Registers_handler+0x170>)
 80007ac:	f007 fe0d 	bl	80083ca <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007b0:	4b49      	ldr	r3, [pc, #292]	@ (80008d8 <Registers_handler+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <Registers_handler+0x174>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0208 	bic.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
		return;}
 80007c0:	e081      	b.n	80008c6 <Registers_handler+0x162>


	if (Size < 4) {
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d805      	bhi.n	80007d4 <Registers_handler+0x70>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80007c8:	2202      	movs	r2, #2
 80007ca:	2103      	movs	r1, #3
 80007cc:	4841      	ldr	r0, [pc, #260]	@ (80008d4 <Registers_handler+0x170>)
 80007ce:	f001 f831 	bl	8001834 <sendError>

	        return;
 80007d2:	e078      	b.n	80008c6 <Registers_handler+0x162>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	3b02      	subs	r3, #2
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3b02      	subs	r3, #2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 ff99 	bl	8001738 <calcCRC16ModBus>
 8000806:	4603      	mov	r3, r0
 8000808:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 800080a:	8aba      	ldrh	r2, [r7, #20]
 800080c:	8a7b      	ldrh	r3, [r7, #18]
 800080e:	429a      	cmp	r2, r3
 8000810:	d005      	beq.n	800081e <Registers_handler+0xba>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 8000812:	2203      	movs	r2, #3
 8000814:	2103      	movs	r1, #3
 8000816:	482f      	ldr	r0, [pc, #188]	@ (80008d4 <Registers_handler+0x170>)
 8000818:	f001 f80c 	bl	8001834 <sendError>

	        return;
 800081c:	e053      	b.n	80008c6 <Registers_handler+0x162>
	    }


                       uint8_t opCode = rxFrame[1];
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000824:	7c7b      	ldrb	r3, [r7, #17]
 8000826:	3b01      	subs	r3, #1
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d845      	bhi.n	80008b8 <Registers_handler+0x154>
 800082c:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <Registers_handler+0xd0>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000875 	.word	0x08000875
 8000838:	08000883 	.word	0x08000883
 800083c:	08000891 	.word	0x08000891
 8000840:	0800089b 	.word	0x0800089b
 8000844:	080008b9 	.word	0x080008b9
 8000848:	080008a5 	.word	0x080008a5
 800084c:	080008b9 	.word	0x080008b9
 8000850:	080008b9 	.word	0x080008b9
 8000854:	080008b9 	.word	0x080008b9
 8000858:	080008b9 	.word	0x080008b9
 800085c:	080008b9 	.word	0x080008b9
 8000860:	080008b9 	.word	0x080008b9
 8000864:	080008b9 	.word	0x080008b9
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008b9 	.word	0x080008b9
 8000870:	080008af 	.word	0x080008af
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <Registers_handler+0x178>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4816      	ldr	r0, [pc, #88]	@ (80008d4 <Registers_handler+0x170>)
 800087c:	f001 f8fc 	bl	8001a78 <handleReadCoils>
				  			   break;
 8000880:	e021      	b.n	80008c6 <Registers_handler+0x162>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <Registers_handler+0x17c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <Registers_handler+0x170>)
 800088a:	f001 f95f 	bl	8001b4c <handleReadDiscreteInputs>
							   break;
 800088e:	e01a      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <Registers_handler+0x170>)
 8000894:	f000 fffe 	bl	8001894 <handleReadHoldingRegs>
				  			   break;
 8000898:	e015      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <Registers_handler+0x170>)
 800089e:	f001 f871 	bl	8001984 <handleReadInputRegs>

				  			   break;
 80008a2:	e010      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <Registers_handler+0x170>)
 80008a8:	f001 f9be 	bl	8001c28 <handleWriteMulyipleHandlingRegister>

                               break;
 80008ac:	e00b      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <Registers_handler+0x170>)
 80008b2:	f001 f9b9 	bl	8001c28 <handleWriteMulyipleHandlingRegister>

                               break;
 80008b6:	e006      	b.n	80008c6 <Registers_handler+0x162>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80008b8:	7c7b      	ldrb	r3, [r7, #17]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <Registers_handler+0x170>)
 80008c0:	f000 ffb8 	bl	8001834 <sendError>
				  			   break;
 80008c4:	bf00      	nop
				  			     }



                          }
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20000364 	.word	0x20000364
 80008d8:	200003ec 	.word	0x200003ec
 80008dc:	20000209 	.word	0x20000209
 80008e0:	20000208 	.word	0x20000208

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008e8:	f000 fee2 	bl	80016b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f001 fdeb 	bl	80024c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f8ee 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 fb9c 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f8:	f000 fb74 	bl	8000fe4 <MX_DMA_Init>
  MX_TIM1_Init();
 80008fc:	f000 f9e4 	bl	8000cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000900:	f000 faa8 	bl	8000e54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fb3e 	bl	8000f84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000908:	f000 f94e 	bl	8000ba8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800090c:	f000 f99e 	bl	8000c4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TX_2;
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000916:	4861      	ldr	r0, [pc, #388]	@ (8000a9c <main+0x1b8>)
 8000918:	f003 f96a 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_1_ON ;
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	485f      	ldr	r0, [pc, #380]	@ (8000aa0 <main+0x1bc>)
 8000922:	f003 f965 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_2_ON ;
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	485d      	ldr	r0, [pc, #372]	@ (8000aa0 <main+0x1bc>)
 800092c:	f003 f960 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_3_ON ;
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	@ 0x40
 8000934:	485a      	ldr	r0, [pc, #360]	@ (8000aa0 <main+0x1bc>)
 8000936:	f003 f95b 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_4_ON ;
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	4858      	ldr	r0, [pc, #352]	@ (8000aa0 <main+0x1bc>)
 8000940:	f003 f956 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_5_ON ;
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094a:	4855      	ldr	r0, [pc, #340]	@ (8000aa0 <main+0x1bc>)
 800094c:	f003 f950 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_6_ON ;
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	4852      	ldr	r0, [pc, #328]	@ (8000aa0 <main+0x1bc>)
 8000958:	f003 f94a 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_7_ON ;
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000962:	484f      	ldr	r0, [pc, #316]	@ (8000aa0 <main+0x1bc>)
 8000964:	f003 f944 	bl	8003bf0 <HAL_GPIO_WritePin>
  LED_8_ON ;
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096e:	484c      	ldr	r0, [pc, #304]	@ (8000aa0 <main+0x1bc>)
 8000970:	f003 f93e 	bl	8003bf0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000978:	f001 fdd2 	bl	8002520 <HAL_Delay>
  DRIVE_1_ON;
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4847      	ldr	r0, [pc, #284]	@ (8000aa0 <main+0x1bc>)
 8000982:	f003 f935 	bl	8003bf0 <HAL_GPIO_WritePin>
  DRIVE_2_ON;
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <main+0x1bc>)
 800098c:	f003 f930 	bl	8003bf0 <HAL_GPIO_WritePin>
  DRIVE_3_ON;
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	4842      	ldr	r0, [pc, #264]	@ (8000aa0 <main+0x1bc>)
 8000996:	f003 f92b 	bl	8003bf0 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800099a:	2240      	movs	r2, #64	@ 0x40
 800099c:	4941      	ldr	r1, [pc, #260]	@ (8000aa4 <main+0x1c0>)
 800099e:	4842      	ldr	r0, [pc, #264]	@ (8000aa8 <main+0x1c4>)
 80009a0:	f007 fd13 	bl	80083ca <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80009a4:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <main+0x1c8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b40      	ldr	r3, [pc, #256]	@ (8000aac <main+0x1c8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 0208 	bic.w	r2, r2, #8
 80009b2:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim2);
 80009b4:	483e      	ldr	r0, [pc, #248]	@ (8000ab0 <main+0x1cc>)
 80009b6:	f004 fae3 	bl	8004f80 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	483c      	ldr	r0, [pc, #240]	@ (8000ab0 <main+0x1cc>)
 80009be:	f004 fd95 	bl	80054ec <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	483a      	ldr	r0, [pc, #232]	@ (8000ab0 <main+0x1cc>)
 80009c6:	f004 fd91 	bl	80054ec <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80009ca:	2108      	movs	r1, #8
 80009cc:	4838      	ldr	r0, [pc, #224]	@ (8000ab0 <main+0x1cc>)
 80009ce:	f004 fd8d 	bl	80054ec <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80009d2:	210c      	movs	r1, #12
 80009d4:	4836      	ldr	r0, [pc, #216]	@ (8000ab0 <main+0x1cc>)
 80009d6:	f004 fd89 	bl	80054ec <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	4835      	ldr	r0, [pc, #212]	@ (8000ab4 <main+0x1d0>)
 80009de:	f004 fba9 	bl	8005134 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <main+0x1d0>)
 80009e6:	f005 ff6f 	bl	80068c8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ea:	2104      	movs	r1, #4
 80009ec:	4831      	ldr	r0, [pc, #196]	@ (8000ab4 <main+0x1d0>)
 80009ee:	f004 fba1 	bl	8005134 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009f2:	2104      	movs	r1, #4
 80009f4:	482f      	ldr	r0, [pc, #188]	@ (8000ab4 <main+0x1d0>)
 80009f6:	f005 ff67 	bl	80068c8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009fa:	2108      	movs	r1, #8
 80009fc:	482d      	ldr	r0, [pc, #180]	@ (8000ab4 <main+0x1d0>)
 80009fe:	f004 fb99 	bl	8005134 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000a02:	2108      	movs	r1, #8
 8000a04:	482b      	ldr	r0, [pc, #172]	@ (8000ab4 <main+0x1d0>)
 8000a06:	f005 ff5f 	bl	80068c8 <HAL_TIMEx_PWMN_Start>

    LED_1_OFF ;
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <main+0x1bc>)
 8000a10:	f003 f8ee 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_2_OFF ;
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4821      	ldr	r0, [pc, #132]	@ (8000aa0 <main+0x1bc>)
 8000a1a:	f003 f8e9 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_3_OFF ;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <main+0x1bc>)
 8000a24:	f003 f8e4 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_4_OFF ;
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2180      	movs	r1, #128	@ 0x80
 8000a2c:	481c      	ldr	r0, [pc, #112]	@ (8000aa0 <main+0x1bc>)
 8000a2e:	f003 f8df 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_5_OFF ;
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a38:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <main+0x1bc>)
 8000a3a:	f003 f8d9 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_6_OFF ;
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a44:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <main+0x1bc>)
 8000a46:	f003 f8d3 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_7_OFF ;
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <main+0x1bc>)
 8000a52:	f003 f8cd 	bl	8003bf0 <HAL_GPIO_WritePin>
    LED_8_OFF ;
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <main+0x1bc>)
 8000a5e:	f003 f8c7 	bl	8003bf0 <HAL_GPIO_WritePin>
  //  DRIVE_1_OFF;
  //  DRIVE_2_OFF;
  //  DRIVE_3_OFF;
    RX_2;
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <main+0x1b8>)
 8000a6a:	f003 f8c1 	bl	8003bf0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a6e:	f007 fd07 	bl	8008480 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <main+0x1d4>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4811      	ldr	r0, [pc, #68]	@ (8000abc <main+0x1d8>)
 8000a78:	f007 fd6c 	bl	8008554 <osThreadNew>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <main+0x1dc>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* creation of ModBusData */
  ModBusDataHandle = osThreadNew(StartTask02, NULL, &ModBusData_attributes);
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <main+0x1e0>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <main+0x1e4>)
 8000a88:	f007 fd64 	bl	8008554 <osThreadNew>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <main+0x1e8>)
 8000a90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a92:	f007 fd29 	bl	80084e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <main+0x1b2>
 8000a9a:	bf00      	nop
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	20000364 	.word	0x20000364
 8000aac:	200003ec 	.word	0x200003ec
 8000ab0:	20000318 	.word	0x20000318
 8000ab4:	200002cc 	.word	0x200002cc
 8000ab8:	0800b304 	.word	0x0800b304
 8000abc:	08001491 	.word	0x08001491
 8000ac0:	200004ac 	.word	0x200004ac
 8000ac4:	0800b328 	.word	0x0800b328
 8000ac8:	080014a9 	.word	0x080014a9
 8000acc:	200004b0 	.word	0x200004b0

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	@ 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	@ 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00a fafc 	bl	800b0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a29      	ldr	r2, [pc, #164]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b3c:	23d8      	movs	r3, #216	@ 0xd8
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f8d1 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b58:	f000 fde8 	bl	800172c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b5c:	f003 f87a 	bl	8003c54 <HAL_PWREx_EnableOverDrive>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b66:	f000 fde1 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2107      	movs	r1, #7
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fb57 	bl	800423c <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b94:	f000 fdca 	bl	800172c <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3750      	adds	r7, #80	@ 0x50
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0xa0>)
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c0a:	f001 fcad 	bl	8002568 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 fd8a 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c2a:	f001 fce1 	bl	80025f0 <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c34:	f000 fd7a 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000220 	.word	0x20000220
 8000c44:	40012000 	.word	0x40012000
 8000c48:	0f000001 	.word	0x0f000001

08000c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <MX_SPI1_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000cac:	f004 f866 	bl	8004d7c <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 fd39 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000268 	.word	0x20000268
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09a      	sub	sp, #104	@ 0x68
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	222c      	movs	r2, #44	@ 0x2c
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a f9ea 	bl	800b0dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d08:	4b50      	ldr	r3, [pc, #320]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d0a:	4a51      	ldr	r2, [pc, #324]	@ (8000e50 <MX_TIM1_Init+0x188>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b4d      	ldr	r3, [pc, #308]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b4a      	ldr	r3, [pc, #296]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d28:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b47      	ldr	r3, [pc, #284]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4845      	ldr	r0, [pc, #276]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d36:	f004 f8cc 	bl	8004ed2 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 fcf4 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483e      	ldr	r0, [pc, #248]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d52:	f004 ffd3 	bl	8005cfc <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d5c:	f000 fce6 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d60:	483a      	ldr	r0, [pc, #232]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d62:	f004 f985 	bl	8005070 <HAL_TIM_PWM_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d6c:	f000 fcde 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4832      	ldr	r0, [pc, #200]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d84:	f005 fec0 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d8e:	f000 fccd 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	@ 0x60
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000da4:	2304      	movs	r3, #4
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4824      	ldr	r0, [pc, #144]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dba:	f004 fe8b 	bl	8005ad4 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000dc4:	f000 fcb2 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dcc:	2204      	movs	r2, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dd2:	f004 fe7f 	bl	8005ad4 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000ddc:	f000 fca6 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de4:	2208      	movs	r2, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dea:	f004 fe73 	bl	8005ad4 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000df4:	f000 fc9a 	bl	800172c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000e04:	23ff      	movs	r3, #255	@ 0xff
 8000e06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000e2e:	f005 fef9 	bl	8006c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000e38:	f000 fc78 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000e3e:	f001 f8df 	bl	8002000 <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3768      	adds	r7, #104	@ 0x68
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002cc 	.word	0x200002cc
 8000e50:	40010000 	.word	0x40010000

08000e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e94:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	4835      	ldr	r0, [pc, #212]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000eaa:	f004 f812 	bl	8004ed2 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f000 fc3a 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482e      	ldr	r0, [pc, #184]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ec6:	f004 ff19 	bl	8005cfc <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f000 fc2c 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ed4:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ed6:	f004 faa7 	bl	8005428 <HAL_TIM_IC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f000 fc24 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4823      	ldr	r0, [pc, #140]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ef4:	f005 fe08 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000efe:	f000 fc15 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4819      	ldr	r0, [pc, #100]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f1a:	f004 fd3e 	bl	800599a <HAL_TIM_IC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f24:	f000 fc02 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f34:	f004 fd31 	bl	800599a <HAL_TIM_IC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f000 fbf5 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f4e:	f004 fd24 	bl	800599a <HAL_TIM_IC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000f58:	f000 fbe8 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	220c      	movs	r2, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f68:	f004 fd17 	bl	800599a <HAL_TIM_IC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000f72:	f000 fbdb 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	@ 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000318 	.word	0x20000318

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	@ (8000fe0 <MX_USART1_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc8:	f005 feed 	bl	8006da6 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 fbab 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000364 	.word	0x20000364
 8000fe0:	40011000 	.word	0x40011000

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_DMA_Init+0x48>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	203a      	movs	r0, #58	@ 0x3a
 8001008:	f001 fe1e 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800100c:	203a      	movs	r0, #58	@ 0x3a
 800100e:	f001 fe37 	bl	8002c80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2046      	movs	r0, #70	@ 0x46
 8001018:	f001 fe16 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800101c:	2046      	movs	r0, #70	@ 0x46
 800101e:	f001 fe2f 	bl	8002c80 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a40      	ldr	r2, [pc, #256]	@ (800114c <MX_GPIO_Init+0x11c>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a3a      	ldr	r2, [pc, #232]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <MX_GPIO_Init+0x11c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b35      	ldr	r3, [pc, #212]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a34      	ldr	r2, [pc, #208]	@ (800114c <MX_GPIO_Init+0x11c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a2e      	ldr	r2, [pc, #184]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <MX_GPIO_Init+0x11c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 80010a6:	2200      	movs	r2, #0
 80010a8:	f640 71df 	movw	r1, #4063	@ 0xfdf
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <MX_GPIO_Init+0x120>)
 80010ae:	f002 fd9f 	bl	8003bf0 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 80010b8:	4826      	ldr	r0, [pc, #152]	@ (8001154 <MX_GPIO_Init+0x124>)
 80010ba:	f002 fd99 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Port_1_Pin Port_2_Pin Port_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin LED_7_Pin LED_8_Pin */
  GPIO_InitStruct.Pin = Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 80010be:	f640 73df 	movw	r3, #4063	@ 0xfdf
 80010c2:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	481e      	ldr	r0, [pc, #120]	@ (8001150 <MX_GPIO_Init+0x120>)
 80010d8:	f002 fada 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80010dc:	2307      	movs	r3, #7
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_GPIO_Init+0x124>)
 80010f2:	f002 facd 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_3_Pin DIRECT_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin;
 80010f6:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_GPIO_Init+0x124>)
 8001110:	f002 fabe 	bl	8003690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2105      	movs	r1, #5
 8001118:	2006      	movs	r0, #6
 800111a:	f001 fd95 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800111e:	2006      	movs	r0, #6
 8001120:	f001 fdae 	bl	8002c80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2105      	movs	r1, #5
 8001128:	2007      	movs	r0, #7
 800112a:	f001 fd8d 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800112e:	2007      	movs	r0, #7
 8001130:	f001 fda6 	bl	8002c80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2105      	movs	r1, #5
 8001138:	2008      	movs	r0, #8
 800113a:	f001 fd85 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800113e:	2008      	movs	r0, #8
 8001140:	f001 fd9e 	bl	8002c80 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020400 	.word	0x40020400

08001158 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */


uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001166:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <Reset_USART1>:



void Reset_USART1(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_4_ON;
 8001184:	2201      	movs	r2, #1
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	4826      	ldr	r0, [pc, #152]	@ (8001224 <Reset_USART1+0xa4>)
 800118a:	f002 fd31 	bl	8003bf0 <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 800118e:	4826      	ldr	r0, [pc, #152]	@ (8001228 <Reset_USART1+0xa8>)
 8001190:	f005 ff10 	bl	8006fb4 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Reset_USART1+0xac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <Reset_USART1+0x22>
        HAL_DMA_Abort(&hdma_usart1_rx);
 800119c:	4823      	ldr	r0, [pc, #140]	@ (800122c <Reset_USART1+0xac>)
 800119e:	f001 ff6f 	bl	8003080 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <Reset_USART1+0xb0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <Reset_USART1+0x30>
        HAL_DMA_Abort(&hdma_usart1_tx);
 80011aa:	4821      	ldr	r0, [pc, #132]	@ (8001230 <Reset_USART1+0xb0>)
 80011ac:	f001 ff68 	bl	8003080 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <Reset_USART1+0xa8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <Reset_USART1+0xa8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011be:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <Reset_USART1+0xa8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 80011c8:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <Reset_USART1+0xa8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2202      	movs	r2, #2
 80011ce:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <Reset_USART1+0xb4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <Reset_USART1+0xb4>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_Delay(1); // Задержка для завершения сброса
 80011dc:	2001      	movs	r0, #1
 80011de:	f001 f99f 	bl	8002520 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <Reset_USART1+0xb4>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <Reset_USART1+0xb4>)
 80011e8:	f023 0310 	bic.w	r3, r3, #16
 80011ec:	6253      	str	r3, [r2, #36]	@ 0x24

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80011ee:	480e      	ldr	r0, [pc, #56]	@ (8001228 <Reset_USART1+0xa8>)
 80011f0:	f005 fe27 	bl	8006e42 <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80011f4:	f7ff fec6 	bl	8000f84 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80011f8:	f7ff fef4 	bl	8000fe4 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80011fc:	2240      	movs	r2, #64	@ 0x40
 80011fe:	490e      	ldr	r1, [pc, #56]	@ (8001238 <Reset_USART1+0xb8>)
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <Reset_USART1+0xa8>)
 8001202:	f007 f8e2 	bl	80083ca <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <Reset_USART1+0xac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <Reset_USART1+0xac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0208 	bic.w	r2, r2, #8
 8001214:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 8001216:	f001 f977 	bl	8002508 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <Reset_USART1+0xbc>)
 800121e:	6013      	str	r3, [r2, #0]


}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020800 	.word	0x40020800
 8001228:	20000364 	.word	0x20000364
 800122c:	200003ec 	.word	0x200003ec
 8001230:	2000044c 	.word	0x2000044c
 8001234:	40023800 	.word	0x40023800
 8001238:	20000088 	.word	0x20000088
 800123c:	20000084 	.word	0x20000084

08001240 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	    RX_2;
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800124e:	4813      	ldr	r0, [pc, #76]	@ (800129c <HAL_UART_TxCpltCallback+0x5c>)
 8001250:	f002 fcce 	bl	8003bf0 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001254:	f001 f958 	bl	8002508 <HAL_GetTick>
 8001258:	4603      	mov	r3, r0
 800125a:	4a11      	ldr	r2, [pc, #68]	@ (80012a0 <HAL_UART_TxCpltCallback+0x60>)
 800125c:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800125e:	2240      	movs	r2, #64	@ 0x40
 8001260:	4910      	ldr	r1, [pc, #64]	@ (80012a4 <HAL_UART_TxCpltCallback+0x64>)
 8001262:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <HAL_UART_TxCpltCallback+0x68>)
 8001264:	f007 f8b1 	bl	80083ca <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_UART_TxCpltCallback+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_UART_TxCpltCallback+0x68>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0210 	orr.w	r2, r2, #16
 8001276:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <HAL_UART_TxCpltCallback+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_UART_TxCpltCallback+0x6c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0208 	bic.w	r2, r2, #8
 8001286:	601a      	str	r2, [r3, #0]
       LED_4_OFF;
 8001288:	2200      	movs	r2, #0
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <HAL_UART_TxCpltCallback+0x70>)
 800128e:	f002 fcaf 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020400 	.word	0x40020400
 80012a0:	20000084 	.word	0x20000084
 80012a4:	20000088 	.word	0x20000088
 80012a8:	20000364 	.word	0x20000364
 80012ac:	200003ec 	.word	0x200003ec
 80012b0:	40020800 	.word	0x40020800

080012b4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_UARTEx_RxEventCallback+0x4c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d115      	bne.n	80012f6 <HAL_UARTEx_RxEventCallback+0x42>
	{

		lastActivityTime = HAL_GetTick();
 80012ca:	f001 f91d 	bl	8002508 <HAL_GetTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x50>)
 80012d2:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x54>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x54>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0210 	bic.w	r2, r2, #16
 80012e2:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <HAL_UARTEx_RxEventCallback+0x58>)
 80012e6:	f001 fecb 	bl	8003080 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x5c>)
 80012ee:	4909      	ldr	r1, [pc, #36]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x60>)
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <HAL_UARTEx_RxEventCallback+0x64>)
 80012f2:	f7ff fa37 	bl	8000764 <Registers_handler>

	}
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40011000 	.word	0x40011000
 8001304:	20000084 	.word	0x20000084
 8001308:	20000364 	.word	0x20000364
 800130c:	200003ec 	.word	0x200003ec
 8001310:	200001e8 	.word	0x200001e8
 8001314:	200001c8 	.word	0x200001c8
 8001318:	20000088 	.word	0x20000088

0800131c <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001320:	f001 f8f2 	bl	8002508 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Check_USART1_Timeout+0x2c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001330:	d307      	bcc.n	8001342 <Check_USART1_Timeout+0x26>
     {
         Reset_USART1();
 8001332:	f7ff ff25 	bl	8001180 <Reset_USART1>
         RX_2;
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <Check_USART1_Timeout+0x30>)
 800133e:	f002 fc57 	bl	8003bf0 <HAL_GPIO_WritePin>
     }
 }
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000084 	.word	0x20000084
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == HALL_A_Pin) // Прерывание по PB0
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d12c      	bne.n	80013ba <HAL_GPIO_EXTI_Callback+0x6a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 8001360:	2101      	movs	r1, #1
 8001362:	4848      	ldr	r0, [pc, #288]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 8001364:	f002 fc2c 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10f      	bne.n	800138e <HAL_GPIO_EXTI_Callback+0x3e>
        {
            LED_1_ON;
 800136e:	2201      	movs	r2, #1
 8001370:	2108      	movs	r1, #8
 8001372:	4845      	ldr	r0, [pc, #276]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 8001374:	f002 fc3c 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 0;
 8001378:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800137e:	4843      	ldr	r0, [pc, #268]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001380:	f7ff f8e4 	bl	800054c <SWITCH>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f992 	bl	80006b0 <BLDC_MotorCommutation>
 800138c:	e015      	b.n	80013ba <HAL_GPIO_EXTI_Callback+0x6a>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 800138e:	2101      	movs	r1, #1
 8001390:	483c      	ldr	r0, [pc, #240]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 8001392:	f002 fc15 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10e      	bne.n	80013ba <HAL_GPIO_EXTI_Callback+0x6a>
        {
            LED_1_OFF;
 800139c:	2200      	movs	r2, #0
 800139e:	2108      	movs	r1, #8
 80013a0:	4839      	ldr	r0, [pc, #228]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 80013a2:	f002 fc25 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 1;
 80013a6:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013ac:	4837      	ldr	r0, [pc, #220]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013ae:	f7ff f8cd 	bl	800054c <SWITCH>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f97b 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_B_Pin) // Прерывание по PB1
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d12c      	bne.n	800141a <HAL_GPIO_EXTI_Callback+0xca>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 80013c0:	2102      	movs	r1, #2
 80013c2:	4830      	ldr	r0, [pc, #192]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 80013c4:	f002 fbfc 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10f      	bne.n	80013ee <HAL_GPIO_EXTI_Callback+0x9e>
        {
            LED_2_ON;
 80013ce:	2201      	movs	r2, #1
 80013d0:	2110      	movs	r1, #16
 80013d2:	482d      	ldr	r0, [pc, #180]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 80013d4:	f002 fc0c 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 0;
 80013d8:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013de:	482b      	ldr	r0, [pc, #172]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 80013e0:	f7ff f8b4 	bl	800054c <SWITCH>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f962 	bl	80006b0 <BLDC_MotorCommutation>
 80013ec:	e015      	b.n	800141a <HAL_GPIO_EXTI_Callback+0xca>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 80013ee:	2102      	movs	r1, #2
 80013f0:	4824      	ldr	r0, [pc, #144]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 80013f2:	f002 fbe5 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10e      	bne.n	800141a <HAL_GPIO_EXTI_Callback+0xca>
        {
            LED_2_OFF;
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	4821      	ldr	r0, [pc, #132]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 8001402:	f002 fbf5 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 1;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001408:	2201      	movs	r2, #1
 800140a:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800140c:	481f      	ldr	r0, [pc, #124]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 800140e:	f7ff f89d 	bl	800054c <SWITCH>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f94b 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_C_Pin) // Прерывание по PB2
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d12c      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x12a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 8001420:	2104      	movs	r1, #4
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 8001424:	f002 fbcc 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10f      	bne.n	800144e <HAL_GPIO_EXTI_Callback+0xfe>
        {
            LED_3_ON;
 800142e:	2201      	movs	r2, #1
 8001430:	2140      	movs	r1, #64	@ 0x40
 8001432:	4815      	ldr	r0, [pc, #84]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 8001434:	f002 fbdc 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 0;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 800143a:	2200      	movs	r2, #0
 800143c:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800143e:	4813      	ldr	r0, [pc, #76]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001440:	f7ff f884 	bl	800054c <SWITCH>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f932 	bl	80006b0 <BLDC_MotorCommutation>
            LED_3_OFF;
            BLDC_STATE[2] = 1;
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
        }
    }
}
 800144c:	e015      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x12a>
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 800144e:	2104      	movs	r1, #4
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x134>)
 8001452:	f002 fbb5 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10e      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x12a>
            LED_3_OFF;
 800145c:	2200      	movs	r2, #0
 800145e:	2140      	movs	r1, #64	@ 0x40
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x138>)
 8001462:	f002 fbc5 	bl	8003bf0 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 1;
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001468:	2201      	movs	r2, #1
 800146a:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 800146c:	4807      	ldr	r0, [pc, #28]	@ (800148c <HAL_GPIO_EXTI_Callback+0x13c>)
 800146e:	f7ff f86d 	bl	800054c <SWITCH>
 8001472:	4603      	mov	r3, r0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f91b 	bl	80006b0 <BLDC_MotorCommutation>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	20000218 	.word	0x20000218

08001490 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001498:	f7ff ff40 	bl	800131c <Check_USART1_Timeout>
	      osDelay(2000); // Проверяем каждые 100 мс (можно настроить)
 800149c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014a0:	f007 f8fe 	bl	80086a0 <osDelay>
	  Check_USART1_Timeout(); // Добавьте эту строку
 80014a4:	bf00      	nop
 80014a6:	e7f7      	b.n	8001498 <StartDefaultTask+0x8>

080014a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if(auto_mode==0){
 80014b0:	4b72      	ldr	r3, [pc, #456]	@ (800167c <StartTask02+0x1d4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d021      	beq.n	8001502 <StartTask02+0x5a>

	         pwm=rcv_data_reg[0];
 80014be:	4b70      	ldr	r3, [pc, #448]	@ (8001680 <StartTask02+0x1d8>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001684 <StartTask02+0x1dc>)
 80014c6:	601a      	str	r2, [r3, #0]
	         if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 80014c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001688 <StartTask02+0x1e0>)
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001684 <StartTask02+0x1dc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d803      	bhi.n	80014dc <StartTask02+0x34>
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <StartTask02+0x1e0>)
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001684 <StartTask02+0x1dc>)
 80014da:	6013      	str	r3, [r2, #0]
	         if(pwm<=0){pwm=0;}
 80014dc:	4b69      	ldr	r3, [pc, #420]	@ (8001684 <StartTask02+0x1dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <StartTask02+0x42>
 80014e4:	4b67      	ldr	r3, [pc, #412]	@ (8001684 <StartTask02+0x1dc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

	         TIM1->CCR1=pwm;
 80014ea:	4a67      	ldr	r2, [pc, #412]	@ (8001688 <StartTask02+0x1e0>)
 80014ec:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <StartTask02+0x1dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6353      	str	r3, [r2, #52]	@ 0x34
	         TIM1->CCR2=pwm;
 80014f2:	4a65      	ldr	r2, [pc, #404]	@ (8001688 <StartTask02+0x1e0>)
 80014f4:	4b63      	ldr	r3, [pc, #396]	@ (8001684 <StartTask02+0x1dc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6393      	str	r3, [r2, #56]	@ 0x38
	         TIM1->CCR3=pwm;
 80014fa:	4a63      	ldr	r2, [pc, #396]	@ (8001688 <StartTask02+0x1e0>)
 80014fc:	4b61      	ldr	r3, [pc, #388]	@ (8001684 <StartTask02+0x1dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	63d3      	str	r3, [r2, #60]	@ 0x3c

		  }

		  if(auto_mode==1){
 8001502:	4b5e      	ldr	r3, [pc, #376]	@ (800167c <StartTask02+0x1d4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d030      	beq.n	800156c <StartTask02+0xc4>

			  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 800150a:	f000 fffd 	bl	8002508 <HAL_GetTick>
 800150e:	4603      	mov	r3, r0
 8001510:	4a5e      	ldr	r2, [pc, #376]	@ (800168c <StartTask02+0x1e4>)
 8001512:	8812      	ldrh	r2, [r2, #0]
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800151a:	d327      	bcc.n	800156c <StartTask02+0xc4>
	           pwm=pwm+5;
 800151c:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <StartTask02+0x1dc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3305      	adds	r3, #5
 8001522:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <StartTask02+0x1dc>)
 8001524:	6013      	str	r3, [r2, #0]
	           if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 8001526:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <StartTask02+0x1e0>)
 8001528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152a:	4b56      	ldr	r3, [pc, #344]	@ (8001684 <StartTask02+0x1dc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d803      	bhi.n	800153a <StartTask02+0x92>
 8001532:	4b55      	ldr	r3, [pc, #340]	@ (8001688 <StartTask02+0x1e0>)
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	4a53      	ldr	r2, [pc, #332]	@ (8001684 <StartTask02+0x1dc>)
 8001538:	6013      	str	r3, [r2, #0]
	           if(pwm<=0){pwm=0;}
 800153a:	4b52      	ldr	r3, [pc, #328]	@ (8001684 <StartTask02+0x1dc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <StartTask02+0xa0>
 8001542:	4b50      	ldr	r3, [pc, #320]	@ (8001684 <StartTask02+0x1dc>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

	           TIM1->CCR1=pwm;
 8001548:	4a4f      	ldr	r2, [pc, #316]	@ (8001688 <StartTask02+0x1e0>)
 800154a:	4b4e      	ldr	r3, [pc, #312]	@ (8001684 <StartTask02+0x1dc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6353      	str	r3, [r2, #52]	@ 0x34
	           TIM1->CCR2=pwm;
 8001550:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <StartTask02+0x1e0>)
 8001552:	4b4c      	ldr	r3, [pc, #304]	@ (8001684 <StartTask02+0x1dc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
	           TIM1->CCR3=pwm;
 8001558:	4a4b      	ldr	r2, [pc, #300]	@ (8001688 <StartTask02+0x1e0>)
 800155a:	4b4a      	ldr	r3, [pc, #296]	@ (8001684 <StartTask02+0x1dc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	63d3      	str	r3, [r2, #60]	@ 0x3c


			  auto_mode_timer=HAL_GetTick();}
 8001560:	f000 ffd2 	bl	8002508 <HAL_GetTick>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	@ (800168c <StartTask02+0x1e4>)
 800156a:	801a      	strh	r2, [r3, #0]
		  }



	TIM1->ARR= rcv_data_reg[4];
 800156c:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <StartTask02+0x1d8>)
 800156e:	891a      	ldrh	r2, [r3, #8]
 8001570:	4b45      	ldr	r3, [pc, #276]	@ (8001688 <StartTask02+0x1e0>)
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
	data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 8001574:	4b46      	ldr	r3, [pc, #280]	@ (8001690 <StartTask02+0x1e8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4843      	ldr	r0, [pc, #268]	@ (8001688 <StartTask02+0x1e0>)
 800157c:	f7ff fdec 	bl	8001158 <calculateTimerFrequency>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <StartTask02+0x1ec>)
 8001586:	801a      	strh	r2, [r3, #0]
	data_reg[2]=rpm;
 8001588:	4b43      	ldr	r3, [pc, #268]	@ (8001698 <StartTask02+0x1f0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <StartTask02+0x1ec>)
 8001590:	809a      	strh	r2, [r3, #4]
    osDelay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f007 f884 	bl	80086a0 <osDelay>
    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 8001598:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <StartTask02+0x1e8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	483a      	ldr	r0, [pc, #232]	@ (8001688 <StartTask02+0x1e0>)
 80015a0:	f7ff fdda 	bl	8001158 <calculateTimerFrequency>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <StartTask02+0x1ec>)
 80015aa:	801a      	strh	r2, [r3, #0]
   	data_reg[1]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 80015ac:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <StartTask02+0x1e8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4835      	ldr	r0, [pc, #212]	@ (8001688 <StartTask02+0x1e0>)
 80015b4:	f7ff fdd0 	bl	8001158 <calculateTimerFrequency>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <StartTask02+0x1ec>)
 80015be:	805a      	strh	r2, [r3, #2]
   	    data_reg[2]=rpm;       //Скорость об.мин
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <StartTask02+0x1f0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <StartTask02+0x1ec>)
 80015c8:	809a      	strh	r2, [r3, #4]
   	    data_reg[3]=TIM1->ARR; //Период таймера 1
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <StartTask02+0x1e0>)
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <StartTask02+0x1ec>)
 80015d2:	80da      	strh	r2, [r3, #6]
   	    data_reg[4]=pwm;       //Значение ШИМ
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <StartTask02+0x1dc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <StartTask02+0x1ec>)
 80015dc:	811a      	strh	r2, [r3, #8]


    coil_1= (rcv_data_reg[7]>>1)&0x01;
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <StartTask02+0x1d8>)
 80015e0:	89db      	ldrh	r3, [r3, #14]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <StartTask02+0x1f4>)
 80015f6:	701a      	strb	r2, [r3, #0]
    coil_2= (rcv_data_reg[7]>>2)&0x01;
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <StartTask02+0x1d8>)
 80015fa:	89db      	ldrh	r3, [r3, #14]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <StartTask02+0x1f8>)
 8001610:	701a      	strb	r2, [r3, #0]
    coil_3= (rcv_data_reg[7]>>3)&0x01;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <StartTask02+0x1d8>)
 8001614:	89db      	ldrh	r3, [r3, #14]
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	b29b      	uxth	r3, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <StartTask02+0x1fc>)
 800162a:	701a      	strb	r2, [r3, #0]
    coil_4= (rcv_data_reg[7]>>4)&0x01;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <StartTask02+0x1d8>)
 800162e:	89db      	ldrh	r3, [r3, #14]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	b29b      	uxth	r3, r3
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <StartTask02+0x200>)
 8001644:	701a      	strb	r2, [r3, #0]
 auto_mode= (rcv_data_reg[7]>>5)&0x01;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <StartTask02+0x1d8>)
 8001648:	89db      	ldrh	r3, [r3, #14]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	b29b      	uxth	r3, r3
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <StartTask02+0x1d4>)
 800165e:	701a      	strb	r2, [r3, #0]
    pwr_on= (rcv_data_reg[7]>>6)&0x01;
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <StartTask02+0x1d8>)
 8001662:	89db      	ldrh	r3, [r3, #14]
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	b29b      	uxth	r3, r3
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <StartTask02+0x204>)
 8001678:	701a      	strb	r2, [r3, #0]
	  if(auto_mode==0){
 800167a:	e719      	b.n	80014b0 <StartTask02+0x8>
 800167c:	2000021b 	.word	0x2000021b
 8001680:	200001e8 	.word	0x200001e8
 8001684:	2000020c 	.word	0x2000020c
 8001688:	40010000 	.word	0x40010000
 800168c:	2000020a 	.word	0x2000020a
 8001690:	20000004 	.word	0x20000004
 8001694:	200001c8 	.word	0x200001c8
 8001698:	20000210 	.word	0x20000210
 800169c:	20000214 	.word	0x20000214
 80016a0:	20000215 	.word	0x20000215
 80016a4:	20000216 	.word	0x20000216
 80016a8:	20000217 	.word	0x20000217
 80016ac:	2000021c 	.word	0x2000021c

080016b0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016c2:	f001 faf9 	bl	8002cb8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016d2:	231f      	movs	r3, #31
 80016d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016d6:	2387      	movs	r3, #135	@ 0x87
 80016d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016da:	2300      	movs	r3, #0
 80016dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016de:	2300      	movs	r3, #0
 80016e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fb17 	bl	8002d28 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016fa:	2004      	movs	r0, #4
 80016fc:	f001 faf4 	bl	8002ce8 <HAL_MPU_Enable>

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800171a:	f000 fee1 	bl	80024e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40002000 	.word	0x40002000

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <Error_Handler+0x8>

08001738 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8001744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001748:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	74fb      	strb	r3, [r7, #19]
 800174e:	e022      	b.n	8001796 <calcCRC16ModBus+0x5e>
		temp = temp ^ buffer[i];
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4053      	eors	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001760:	2301      	movs	r3, #1
 8001762:	74bb      	strb	r3, [r7, #18]
 8001764:	e011      	b.n	800178a <calcCRC16ModBus+0x52>
			flag = temp & 0x0001;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	617b      	str	r3, [r7, #20]
			if (flag)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <calcCRC16ModBus+0x4c>
				temp ^= 0xA001;
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001780:	4053      	eors	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001784:	7cbb      	ldrb	r3, [r7, #18]
 8001786:	3301      	adds	r3, #1
 8001788:	74bb      	strb	r3, [r7, #18]
 800178a:	7cbb      	ldrb	r3, [r7, #18]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d9ea      	bls.n	8001766 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	3301      	adds	r3, #1
 8001794:	74fb      	strb	r3, [r7, #19]
 8001796:	7cfa      	ldrb	r2, [r7, #19]
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3d8      	bcc.n	8001750 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b29b      	uxth	r3, r3

}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f7ff ffae 	bl	8001738 <calcCRC16ModBus>
 80017dc:	4603      	mov	r3, r0
 80017de:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	3301      	adds	r3, #1
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	8afa      	ldrh	r2, [r7, #22]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80017ee:	8afb      	ldrh	r3, [r7, #22]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	b299      	uxth	r1, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4413      	add	r3, r2
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]

    TX_2;
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001804:	480a      	ldr	r0, [pc, #40]	@ (8001830 <sendModBusRequest+0x6c>)
 8001806:	f002 f9f3 	bl	8003bf0 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	b29b      	uxth	r3, r3
 800180e:	3302      	adds	r3, #2
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f005 fb50 	bl	8006ebc <HAL_UART_Transmit_DMA>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <sendModBusRequest+0x62>

    //	LED_1_OFF;

	        Error_Handler();
 8001822:	f7ff ff83 	bl	800172c <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020400 	.word	0x40020400

08001834 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <sendError+0x5c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001850:	b2db      	uxtb	r3, r3
 8001852:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	2103      	movs	r1, #3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff6a 	bl	8001738 <calcCRC16ModBus>
 8001864:	4603      	mov	r3, r0
 8001866:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	2205      	movs	r2, #5
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff9f 	bl	80017c4 <sendModBusRequest>

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000

08001894 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800189e:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <handleReadHoldingRegs+0xe4>)
 80018a0:	789b      	ldrb	r3, [r3, #2]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <handleReadHoldingRegs+0xe4>)
 80018aa:	78db      	ldrb	r3, [r3, #3]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <handleReadHoldingRegs+0xe4>)
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21a      	sxth	r2, r3
 80018be:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <handleReadHoldingRegs+0xe4>)
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 80018ca:	8afa      	ldrh	r2, [r7, #22]
 80018cc:	897b      	ldrh	r3, [r7, #10]
 80018ce:	4413      	add	r3, r2
 80018d0:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	2b7d      	cmp	r3, #125	@ 0x7d
 80018d6:	d905      	bls.n	80018e4 <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80018d8:	2103      	movs	r1, #3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa26 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e045      	b.n	8001970 <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	2b3c      	cmp	r3, #60	@ 0x3c
 80018e8:	d905      	bls.n	80018f6 <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80018ea:	2102      	movs	r1, #2
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fa1d 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e03c      	b.n	8001970 <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80018f6:	4b21      	ldr	r3, [pc, #132]	@ (800197c <handleReadHoldingRegs+0xe8>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <handleReadHoldingRegs+0xec>)
 80018fc:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <handleReadHoldingRegs+0xe4>)
 8001900:	785a      	ldrb	r2, [r3, #1]
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <handleReadHoldingRegs+0xec>)
 8001904:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <handleReadHoldingRegs+0xec>)
 8001910:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001912:	2303      	movs	r3, #3
 8001914:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e01d      	b.n	8001958 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800191c:	8afb      	ldrh	r3, [r7, #22]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b299      	uxth	r1, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	613a      	str	r2, [r7, #16]
 8001930:	b2c9      	uxtb	r1, r1
 8001932:	4a13      	ldr	r2, [pc, #76]	@ (8001980 <handleReadHoldingRegs+0xec>)
 8001934:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001936:	8afb      	ldrh	r3, [r7, #22]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4413      	add	r3, r2
 800193e:	8819      	ldrh	r1, [r3, #0]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	613a      	str	r2, [r7, #16]
 8001946:	b2c9      	uxtb	r1, r1
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <handleReadHoldingRegs+0xec>)
 800194a:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	3301      	adds	r3, #1
 8001950:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbdd      	blt.n	800191c <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4906      	ldr	r1, [pc, #24]	@ (8001980 <handleReadHoldingRegs+0xec>)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff2b 	bl	80017c4 <sendModBusRequest>
	return 1;
 800196e:	2301      	movs	r3, #1

}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000088 	.word	0x20000088
 800197c:	20000000 	.word	0x20000000
 8001980:	200000c8 	.word	0x200000c8

08001984 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <handleReadInputRegs+0xe8>)
 8001990:	789b      	ldrb	r3, [r3, #2]
 8001992:	b21b      	sxth	r3, r3
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <handleReadInputRegs+0xe8>)
 800199a:	78db      	ldrb	r3, [r3, #3]
 800199c:	b21b      	sxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80019a4:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <handleReadInputRegs+0xe8>)
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <handleReadInputRegs+0xe8>)
 80019b0:	795b      	ldrb	r3, [r3, #5]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	4313      	orrs	r3, r2
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 80019ba:	8afa      	ldrh	r2, [r7, #22]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	4413      	add	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	2b7d      	cmp	r3, #125	@ 0x7d
 80019ca:	d905      	bls.n	80019d8 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80019cc:	2103      	movs	r1, #3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f9ac 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e045      	b.n	8001a64 <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	2b3c      	cmp	r3, #60	@ 0x3c
 80019dc:	d905      	bls.n	80019ea <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80019de:	2102      	movs	r1, #2
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f9a3 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e03c      	b.n	8001a64 <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80019ea:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <handleReadInputRegs+0xec>)
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <handleReadInputRegs+0xf0>)
 80019f0:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <handleReadInputRegs+0xe8>)
 80019f4:	785a      	ldrb	r2, [r3, #1]
 80019f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <handleReadInputRegs+0xf0>)
 80019f8:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <handleReadInputRegs+0xf0>)
 8001a04:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001a06:	2303      	movs	r3, #3
 8001a08:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e01d      	b.n	8001a4c <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001a10:	8afb      	ldrh	r3, [r7, #22]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	613a      	str	r2, [r7, #16]
 8001a24:	b2c9      	uxtb	r1, r1
 8001a26:	4a13      	ldr	r2, [pc, #76]	@ (8001a74 <handleReadInputRegs+0xf0>)
 8001a28:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001a2a:	8afb      	ldrh	r3, [r7, #22]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	8819      	ldrh	r1, [r3, #0]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	613a      	str	r2, [r7, #16]
 8001a3a:	b2c9      	uxtb	r1, r1
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <handleReadInputRegs+0xf0>)
 8001a3e:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	3301      	adds	r3, #1
 8001a44:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	897b      	ldrh	r3, [r7, #10]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbdd      	blt.n	8001a10 <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4906      	ldr	r1, [pc, #24]	@ (8001a74 <handleReadInputRegs+0xf0>)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff feb1 	bl	80017c4 <sendModBusRequest>
	return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000088 	.word	0x20000088
 8001a70:	20000000 	.word	0x20000000
 8001a74:	200000c8 	.word	0x200000c8

08001a78 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001a82:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <handleReadCoils+0xc8>)
 8001a84:	789b      	ldrb	r3, [r3, #2]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <handleReadCoils+0xc8>)
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <handleReadCoils+0xc8>)
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <handleReadCoils+0xc8>)
 8001aa4:	795b      	ldrb	r3, [r3, #5]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <handleReadCoils+0x44>
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001aba:	d905      	bls.n	8001ac8 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001abc:	2103      	movs	r1, #3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f934 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e037      	b.n	8001b38 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001ac8:	89fa      	ldrh	r2, [r7, #14]
 8001aca:	89bb      	ldrh	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001ad4:	897b      	ldrh	r3, [r7, #10]
 8001ad6:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ad8:	d905      	bls.n	8001ae6 <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001ada:	2102      	movs	r1, #2
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f925 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e028      	b.n	8001b38 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aea:	2100      	movs	r1, #0
 8001aec:	4815      	ldr	r0, [pc, #84]	@ (8001b44 <handleReadCoils+0xcc>)
 8001aee:	f009 faf5 	bl	800b0dc <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <handleReadCoils+0xd0>)
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <handleReadCoils+0xcc>)
 8001af8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <handleReadCoils+0xc8>)
 8001afc:	785a      	ldrb	r2, [r3, #1]
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <handleReadCoils+0xcc>)
 8001b00:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001b02:	89bb      	ldrh	r3, [r7, #12]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	89ba      	ldrh	r2, [r7, #12]
 8001b0c:	f002 0207 	and.w	r2, r2, #7
 8001b10:	b292      	uxth	r2, r2
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2201      	movne	r2, #1
 8001b18:	2200      	moveq	r2, #0
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <handleReadCoils+0xcc>)
 8001b22:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <handleReadCoils+0xcc>)
 8001b26:	789b      	ldrb	r3, [r3, #2]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4905      	ldr	r1, [pc, #20]	@ (8001b44 <handleReadCoils+0xcc>)
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fe47 	bl	80017c4 <sendModBusRequest>
	return 1;
 8001b36:	2301      	movs	r3, #1

}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000088 	.word	0x20000088
 8001b44:	200000c8 	.word	0x200000c8
 8001b48:	20000000 	.word	0x20000000

08001b4c <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001b56:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <handleReadDiscreteInputs+0xd0>)
 8001b58:	789b      	ldrb	r3, [r3, #2]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <handleReadDiscreteInputs+0xd0>)
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <handleReadDiscreteInputs+0xd0>)
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <handleReadDiscreteInputs+0xd0>)
 8001b78:	795b      	ldrb	r3, [r3, #5]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001b82:	89bb      	ldrh	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <handleReadDiscreteInputs+0x44>
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b8e:	d905      	bls.n	8001b9c <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001b90:	2103      	movs	r1, #3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8ca 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e03a      	b.n	8001c12 <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	89bb      	ldrh	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bac:	d905      	bls.n	8001bba <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001bae:	2102      	movs	r1, #2
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8bb 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e02b      	b.n	8001c12 <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 8001bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001bc2:	f009 fa8b 	bl	800b0dc <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <handleReadDiscreteInputs+0xd8>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001bcc:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <handleReadDiscreteInputs+0xd0>)
 8001bd0:	785a      	ldrb	r2, [r3, #1]
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001bd4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001bd6:	89bb      	ldrh	r3, [r7, #12]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	89ba      	ldrh	r2, [r7, #12]
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	b292      	uxth	r2, r2
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2201      	movne	r2, #1
 8001bec:	2200      	moveq	r2, #0
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001bf6:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	3303      	adds	r3, #3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	4905      	ldr	r1, [pc, #20]	@ (8001c20 <handleReadDiscreteInputs+0xd4>)
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fdda 	bl	80017c4 <sendModBusRequest>
	return 1;
 8001c10:	2301      	movs	r3, #1

}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000088 	.word	0x20000088
 8001c20:	200000c8 	.word	0x200000c8
 8001c24:	20000000 	.word	0x20000000

08001c28 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c34:	789b      	ldrb	r3, [r3, #2]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c3e:	78db      	ldrb	r3, [r3, #3]
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001c48:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	4b33      	ldr	r3, [pc, #204]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c54:	795b      	ldrb	r3, [r3, #5]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <handleWriteMulyipleHandlingRegister+0x42>
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c68:	d905      	bls.n	8001c76 <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f85d 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e050      	b.n	8001d18 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001c76:	8afa      	ldrh	r2, [r7, #22]
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001c82:	893b      	ldrh	r3, [r7, #8]
 8001c84:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c86:	d905      	bls.n	8001c94 <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001c88:	2102      	movs	r1, #2
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f84e 	bl	8001d2c <sendModbusException>
		return MODBUS_ERROR;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e041      	b.n	8001d18 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001c94:	2307      	movs	r3, #7
 8001c96:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e01a      	b.n	8001cd4 <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	613a      	str	r2, [r7, #16]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	6139      	str	r1, [r7, #16]
 8001cb4:	491a      	ldr	r1, [pc, #104]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b219      	sxth	r1, r3
 8001cbe:	8afb      	ldrh	r3, [r7, #22]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	82fa      	strh	r2, [r7, #22]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b28a      	uxth	r2, r1
 8001ccc:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbe0      	blt.n	8001c9e <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001ce6:	785a      	ldrb	r2, [r3, #1]
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cea:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cee:	789a      	ldrb	r2, [r3, #2]
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cf2:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cf6:	78da      	ldrb	r2, [r3, #3]
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cfa:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cfe:	791a      	ldrb	r2, [r3, #4]
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d02:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001d06:	795a      	ldrb	r2, [r3, #5]
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d0a:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	4906      	ldr	r1, [pc, #24]	@ (8001d28 <handleWriteMulyipleHandlingRegister+0x100>)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fd57 	bl	80017c4 <sendModBusRequest>
	return 1;   // success
 8001d16:	2301      	movs	r3, #1

}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000088 	.word	0x20000088
 8001d24:	20000000 	.word	0x20000000
 8001d28:	200000c8 	.word	0x200000c8

08001d2c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <sendModbusException+0x3c>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <sendModbusException+0x40>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <sendModbusException+0x3c>)
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <sendModbusException+0x40>)
 8001d4c:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001d4e:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <sendModbusException+0x40>)
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001d54:	2203      	movs	r2, #3
 8001d56:	4905      	ldr	r1, [pc, #20]	@ (8001d6c <sendModbusException+0x40>)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fd33 	bl	80017c4 <sendModBusRequest>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000088 	.word	0x20000088
 8001d6c:	200000c8 	.word	0x200000c8

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	210f      	movs	r1, #15
 8001daa:	f06f 0001 	mvn.w	r0, #1
 8001dae:	f000 ff4b 	bl	8002c48 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	2005      	movs	r0, #5
 8001db8:	f000 ff46 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001dbc:	2005      	movs	r0, #5
 8001dbe:	f000 ff5f 	bl	8002c80 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <HAL_ADC_MspInit+0x74>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d123      	bne.n	8001e3a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_ADC_MspInit+0x78>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e22:	231f      	movs	r3, #31
 8001e24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e26:	2303      	movs	r3, #3
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <HAL_ADC_MspInit+0x7c>)
 8001e36:	f001 fc2b 	bl	8003690 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	@ (8001f04 <HAL_SPI_MspInit+0xb4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d143      	bne.n	8001efa <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e72:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_SPI_MspInit+0xb8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <HAL_SPI_MspInit+0xbc>)
 8001ed6:	f001 fbdb 	bl	8003690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001eda:	2330      	movs	r3, #48	@ 0x30
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eea:	2305      	movs	r3, #5
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <HAL_SPI_MspInit+0xc0>)
 8001ef6:	f001 fbcb 	bl	8003690 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	@ 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013000 	.word	0x40013000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xdc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10c      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f4e:	e04a      	b.n	8001fe6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f58:	d145      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480e      	ldr	r0, [pc, #56]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fc0:	f001 fb66 	bl	8003690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4806      	ldr	r0, [pc, #24]	@ (8001ffc <HAL_TIM_Base_MspInit+0xe8>)
 8001fe2:	f001 fb55 	bl	8003690 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	@ 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020000 	.word	0x40020000

08002000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a20      	ldr	r2, [pc, #128]	@ (80020a0 <HAL_TIM_MspPostInit+0xa0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d139      	bne.n	8002096 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a1f      	ldr	r2, [pc, #124]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002052:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002064:	2301      	movs	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002070:	f001 fb0e 	bl	8003690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002074:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4806      	ldr	r0, [pc, #24]	@ (80020ac <HAL_TIM_MspPostInit+0xac>)
 8002092:	f001 fafd 	bl	8003690 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	@ 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0aa      	sub	sp, #168	@ 0xa8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f009 f803 	bl	800b0dc <memset>
  if(huart->Instance==USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a54      	ldr	r2, [pc, #336]	@ (800222c <HAL_UART_MspInit+0x17c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	f040 80a0 	bne.w	8002222 <HAL_UART_MspInit+0x172>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020e2:	2340      	movs	r3, #64	@ 0x40
 80020e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020e6:	2300      	movs	r3, #0
 80020e8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fafa 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020fa:	f7ff fb17 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <HAL_UART_MspInit+0x180>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	4a4b      	ldr	r2, [pc, #300]	@ (8002230 <HAL_UART_MspInit+0x180>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6453      	str	r3, [r2, #68]	@ 0x44
 800210a:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <HAL_UART_MspInit+0x180>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <HAL_UART_MspInit+0x180>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a45      	ldr	r2, [pc, #276]	@ (8002230 <HAL_UART_MspInit+0x180>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <HAL_UART_MspInit+0x180>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212e:	23c0      	movs	r3, #192	@ 0xc0
 8002130:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002146:	2307      	movs	r3, #7
 8002148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002150:	4619      	mov	r1, r3
 8002152:	4838      	ldr	r0, [pc, #224]	@ (8002234 <HAL_UART_MspInit+0x184>)
 8002154:	f001 fa9c 	bl	8003690 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002158:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <HAL_UART_MspInit+0x188>)
 800215a:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_UART_MspInit+0x18c>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800215e:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002160:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002164:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216c:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_UART_MspInit+0x188>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002172:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002174:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002178:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_UART_MspInit+0x188>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002186:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_UART_MspInit+0x188>)
 800218e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002192:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002194:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_UART_MspInit+0x188>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800219a:	4827      	ldr	r0, [pc, #156]	@ (8002238 <HAL_UART_MspInit+0x188>)
 800219c:	f000 fe04 	bl	8002da8 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80021a6:	f7ff fac1 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_UART_MspInit+0x188>)
 80021ae:	675a      	str	r2, [r3, #116]	@ 0x74
 80021b0:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <HAL_UART_MspInit+0x188>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021b8:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <HAL_UART_MspInit+0x194>)
 80021ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80021bc:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021e4:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f0:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021f6:	4812      	ldr	r0, [pc, #72]	@ (8002240 <HAL_UART_MspInit+0x190>)
 80021f8:	f000 fdd6 	bl	8002da8 <HAL_DMA_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002202:	f7ff fa93 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <HAL_UART_MspInit+0x190>)
 800220a:	671a      	str	r2, [r3, #112]	@ 0x70
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <HAL_UART_MspInit+0x190>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2105      	movs	r1, #5
 8002216:	2025      	movs	r0, #37	@ 0x25
 8002218:	f000 fd16 	bl	8002c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800221c:	2025      	movs	r0, #37	@ 0x25
 800221e:	f000 fd2f 	bl	8002c80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	37a8      	adds	r7, #168	@ 0xa8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40011000 	.word	0x40011000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400
 8002238:	200003ec 	.word	0x200003ec
 800223c:	40026440 	.word	0x40026440
 8002240:	2000044c 	.word	0x2000044c
 8002244:	400264b8 	.word	0x400264b8

08002248 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <HAL_UART_MspDeInit+0x48>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d116      	bne.n	8002288 <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_UART_MspDeInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <HAL_UART_MspDeInit+0x4c>)
 8002260:	f023 0310 	bic.w	r3, r3, #16
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8002266:	21c0      	movs	r1, #192	@ 0xc0
 8002268:	480b      	ldr	r0, [pc, #44]	@ (8002298 <HAL_UART_MspDeInit+0x50>)
 800226a:	f001 fbad 	bl	80039c8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fe46 	bl	8002f04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fe41 	bl	8002f04 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002282:	2025      	movs	r0, #37	@ 0x25
 8002284:	f000 fd0a 	bl	8002c9c <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40011000 	.word	0x40011000
 8002294:	40023800 	.word	0x40023800
 8002298:	40020400 	.word	0x40020400

0800229c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	@ 0x38
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_InitTick+0xe0>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	4a32      	ldr	r2, [pc, #200]	@ (800237c <HAL_InitTick+0xe0>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b8:	4b30      	ldr	r3, [pc, #192]	@ (800237c <HAL_InitTick+0xe0>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c4:	f107 0210 	add.w	r2, r7, #16
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 f9d8 	bl	8004684 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022de:	f002 f9a9 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80022e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80022e4:	e004      	b.n	80022f0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022e6:	f002 f9a5 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80022ea:	4603      	mov	r3, r0
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f2:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <HAL_InitTick+0xe4>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	3b01      	subs	r3, #1
 80022fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <HAL_InitTick+0xe8>)
 8002300:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <HAL_InitTick+0xec>)
 8002302:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_InitTick+0xe8>)
 8002306:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800230a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800230c:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_InitTick+0xe8>)
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002310:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <HAL_InitTick+0xe8>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <HAL_InitTick+0xe8>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_InitTick+0xe8>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002324:	4817      	ldr	r0, [pc, #92]	@ (8002384 <HAL_InitTick+0xe8>)
 8002326:	f002 fdd4 	bl	8004ed2 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11b      	bne.n	8002370 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002338:	4812      	ldr	r0, [pc, #72]	@ (8002384 <HAL_InitTick+0xe8>)
 800233a:	f002 fe21 	bl	8004f80 <HAL_TIM_Base_Start_IT>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800234c:	202d      	movs	r0, #45	@ 0x2d
 800234e:	f000 fc97 	bl	8002c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d808      	bhi.n	800236a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	202d      	movs	r0, #45	@ 0x2d
 800235e:	f000 fc73 	bl	8002c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_InitTick+0xf0>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e002      	b.n	8002370 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002370:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002374:	4618      	mov	r0, r3
 8002376:	3738      	adds	r7, #56	@ 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	431bde83 	.word	0x431bde83
 8002384:	200004b4 	.word	0x200004b4
 8002388:	40002000 	.word	0x40002000
 800238c:	2000000c 	.word	0x2000000c

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <NMI_Handler+0x4>

08002398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <MemManage_Handler+0x4>

080023a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 80023d8:	2001      	movs	r0, #1
 80023da:	f001 fc23 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f001 fc1c 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 80023f4:	2004      	movs	r0, #4
 80023f6:	f001 fc15 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <USART1_IRQHandler+0x10>)
 8002406:	f004 fe67 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000364 	.word	0x20000364

08002414 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800241a:	f003 f9b7 	bl	800578c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200004b4 	.word	0x200004b4

08002428 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <DMA2_Stream2_IRQHandler+0x10>)
 800242e:	f000 feb9 	bl	80031a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200003ec 	.word	0x200003ec

0800243c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <DMA2_Stream7_IRQHandler+0x10>)
 8002442:	f000 feaf 	bl	80031a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000044c 	.word	0x2000044c

08002450 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002478:	f7ff ffea 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	@ (80024c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f008 fe81 	bl	800b1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7fe fa1d 	bl	80008e4 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024b8:	0800b37c 	.word	0x0800b37c
  ldr r2, =_sbss
 80024bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024c0:	20005024 	.word	0x20005024

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>

080024c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 fbb1 	bl	8002c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d0:	200f      	movs	r0, #15
 80024d2:	f7ff fee3 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d6:	f7ff fc4b 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_IncTick+0x20>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_IncTick+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <HAL_IncTick+0x24>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000010 	.word	0x20000010
 8002504:	20000500 	.word	0x20000500

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000500 	.word	0x20000500

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffde 	bl	8002508 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000010 	.word	0x20000010

08002568 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e031      	b.n	80025e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fc22 	bl	8001dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <HAL_ADC_Init+0x84>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f970 	bl	800289c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	ffffeefd 	.word	0xffffeefd

080025f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1c>
 8002608:	2302      	movs	r3, #2
 800260a:	e136      	b.n	800287a <HAL_ADC_ConfigChannel+0x28a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d93a      	bls.n	8002692 <HAL_ADC_ConfigChannel+0xa2>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002624:	d035      	beq.n	8002692 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	3b1e      	subs	r3, #30
 800263c:	2207      	movs	r2, #7
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8d      	ldr	r2, [pc, #564]	@ (8002888 <HAL_ADC_ConfigChannel+0x298>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	061a      	lsls	r2, r3, #24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800266a:	e035      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	4603      	mov	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4403      	add	r3, r0
 8002684:	3b1e      	subs	r3, #30
 8002686:	409a      	lsls	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002690:	e022      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	2207      	movs	r2, #7
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43da      	mvns	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	400a      	ands	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6919      	ldr	r1, [r3, #16]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4403      	add	r3, r0
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b06      	cmp	r3, #6
 80026de:	d824      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b05      	subs	r3, #5
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b05      	subs	r3, #5
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	635a      	str	r2, [r3, #52]	@ 0x34
 8002728:	e04c      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d824      	bhi.n	800277c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b23      	subs	r3, #35	@ 0x23
 8002744:	221f      	movs	r2, #31
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b23      	subs	r3, #35	@ 0x23
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30
 800277a:	e023      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b41      	subs	r3, #65	@ 0x41
 800278e:	221f      	movs	r2, #31
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43da      	mvns	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	400a      	ands	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b41      	subs	r3, #65	@ 0x41
 80027b8:	fa00 f203 	lsl.w	r2, r0, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a30      	ldr	r2, [pc, #192]	@ (800288c <HAL_ADC_ConfigChannel+0x29c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1f4>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027d6:	d105      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 80027de:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_ADC_ConfigChannel+0x29c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10f      	bne.n	800280e <HAL_ADC_ConfigChannel+0x21e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d10b      	bne.n	800280e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027f6:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a25      	ldr	r2, [pc, #148]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002800:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002802:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 8002808:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800280c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_ADC_ConfigChannel+0x29c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d12b      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x280>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_ADC_ConfigChannel+0x298>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <HAL_ADC_ConfigChannel+0x23a>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b11      	cmp	r3, #17
 8002828:	d122      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800282a:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 8002830:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002834:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002836:	4b16      	ldr	r3, [pc, #88]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a15      	ldr	r2, [pc, #84]	@ (8002890 <HAL_ADC_ConfigChannel+0x2a0>)
 800283c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002840:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_ADC_ConfigChannel+0x298>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d111      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_ADC_ConfigChannel+0x2a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a11      	ldr	r2, [pc, #68]	@ (8002898 <HAL_ADC_ConfigChannel+0x2a8>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9a      	lsrs	r2, r3, #18
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3b01      	subs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f9      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	10000012 	.word	0x10000012
 800288c:	40012000 	.word	0x40012000
 8002890:	40012300 	.word	0x40012300
 8002894:	20000008 	.word	0x20000008
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028a4:	4b78      	ldr	r3, [pc, #480]	@ (8002a88 <ADC_Init+0x1ec>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a77      	ldr	r2, [pc, #476]	@ (8002a88 <ADC_Init+0x1ec>)
 80028aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80028ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028b0:	4b75      	ldr	r3, [pc, #468]	@ (8002a88 <ADC_Init+0x1ec>)
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4973      	ldr	r1, [pc, #460]	@ (8002a88 <ADC_Init+0x1ec>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	4a58      	ldr	r2, [pc, #352]	@ (8002a8c <ADC_Init+0x1f0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800293e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e00f      	b.n	8002996 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0202 	bic.w	r2, r2, #2
 80029a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	3b01      	subs	r3, #1
 80029f0:	035a      	lsls	r2, r3, #13
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	e007      	b.n	8002a0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	051a      	lsls	r2, r3, #20
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a4e:	025a      	lsls	r2, r3, #9
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	029a      	lsls	r2, r3, #10
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012300 	.word	0x40012300
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	05fa0000 	.word	0x05fa0000

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db12      	blt.n	8002b68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	490a      	ldr	r1, [pc, #40]	@ (8002b74 <__NVIC_DisableIRQ+0x44>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	3320      	adds	r3, #32
 8002b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b5c:	f3bf 8f4f 	dsb	sy
}
 8002b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b62:	f3bf 8f6f 	isb	sy
}
 8002b66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	@ (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	@ 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff28 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5a:	f7ff ff3d 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff ffb1 	bl	8002bcc <NVIC_EncodePriority>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff80 	bl	8002b78 <__NVIC_SetPriority>
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff30 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff40 	bl	8002b30 <__NVIC_DisableIRQ>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cbc:	f3bf 8f5f 	dmb	sy
}
 8002cc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <HAL_MPU_Disable+0x28>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	4a06      	ldr	r2, [pc, #24]	@ (8002ce0 <HAL_MPU_Disable+0x28>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cce:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_MPU_Disable+0x2c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00
 8002ce4:	e000ed90 	.word	0xe000ed90

08002ce8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d20 <HAL_MPU_Enable+0x38>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <HAL_MPU_Enable+0x3c>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <HAL_MPU_Enable+0x3c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d06:	f3bf 8f4f 	dsb	sy
}
 8002d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d0c:	f3bf 8f6f 	isb	sy
}
 8002d10:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed90 	.word	0xe000ed90
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	785a      	ldrb	r2, [r3, #1]
 8002d34:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_MPU_ConfigRegion+0x7c>)
 8002d36:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_MPU_ConfigRegion+0x7c>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_MPU_ConfigRegion+0x7c>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <HAL_MPU_ConfigRegion+0x7c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7b1b      	ldrb	r3, [r3, #12]
 8002d50:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7adb      	ldrb	r3, [r3, #11]
 8002d56:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7a9b      	ldrb	r3, [r3, #10]
 8002d5e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7b5b      	ldrb	r3, [r3, #13]
 8002d66:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7b9b      	ldrb	r3, [r3, #14]
 8002d6e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7bdb      	ldrb	r3, [r3, #15]
 8002d76:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a5b      	ldrb	r3, [r3, #9]
 8002d7e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7a1b      	ldrb	r3, [r3, #8]
 8002d86:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d88:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d92:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d94:	6113      	str	r3, [r2, #16]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed90 	.word	0xe000ed90

08002da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff fba8 	bl	8002508 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e099      	b.n	8002ef8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de4:	e00f      	b.n	8002e06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de6:	f7ff fb8f 	bl	8002508 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d908      	bls.n	8002e06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e078      	b.n	8002ef8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e8      	bne.n	8002de6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <HAL_DMA_Init+0x158>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d107      	bne.n	8002e70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d117      	bne.n	8002eca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb73 	bl	8003598 <DMA_CheckFifoParam>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e016      	b.n	8002ef8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fb2a 	bl	800352c <DMA_CalcBaseAndBitshift>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	223f      	movs	r2, #63	@ 0x3f
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	e010803f 	.word	0xe010803f

08002f04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e050      	b.n	8002fb8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e048      	b.n	8002fb8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2221      	movs	r2, #33	@ 0x21
 8002f64:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fae0 	bl	800352c <DMA_CalcBaseAndBitshift>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	223f      	movs	r2, #63	@ 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x26>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e048      	b.n	8003078 <HAL_DMA_Start_IT+0xb8>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d137      	bne.n	800306a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa5e 	bl	80034d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	223f      	movs	r2, #63	@ 0x3f
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0216 	orr.w	r2, r2, #22
 800302e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800303e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e005      	b.n	8003076 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800308e:	f7ff fa3b 	bl	8002508 <HAL_GetTick>
 8003092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d008      	beq.n	80030b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e052      	b.n	8003158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0216 	bic.w	r2, r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_DMA_Abort+0x62>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0208 	bic.w	r2, r2, #8
 80030f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003102:	e013      	b.n	800312c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003104:	f7ff fa00 	bl	8002508 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b05      	cmp	r3, #5
 8003110:	d90c      	bls.n	800312c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e015      	b.n	8003158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e4      	bne.n	8003104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	223f      	movs	r2, #63	@ 0x3f
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e00c      	b.n	8003198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2205      	movs	r2, #5
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80031b0:	4b8e      	ldr	r3, [pc, #568]	@ (80033ec <HAL_DMA_IRQHandler+0x248>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a8e      	ldr	r2, [pc, #568]	@ (80033f0 <HAL_DMA_IRQHandler+0x24c>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	2208      	movs	r2, #8
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01a      	beq.n	8003210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0204 	bic.w	r2, r2, #4
 80031f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	2208      	movs	r2, #8
 80031fe:	409a      	lsls	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	2201      	movs	r2, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003232:	2201      	movs	r2, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	2204      	movs	r2, #4
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d012      	beq.n	800327c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	2204      	movs	r2, #4
 800326a:	409a      	lsls	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	2210      	movs	r2, #16
 8003282:	409a      	lsls	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d043      	beq.n	8003314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d03c      	beq.n	8003314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	2210      	movs	r2, #16
 80032a0:	409a      	lsls	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d018      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d024      	beq.n	8003314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	e01f      	b.n	8003314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
 80032e4:	e016      	b.n	8003314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0208 	bic.w	r2, r2, #8
 8003302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	2220      	movs	r2, #32
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 808f 	beq.w	8003444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8087 	beq.w	8003444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	2220      	movs	r2, #32
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b05      	cmp	r3, #5
 800334c:	d136      	bne.n	80033bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0216 	bic.w	r2, r2, #22
 800335c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800336c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <HAL_DMA_IRQHandler+0x1da>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0208 	bic.w	r2, r2, #8
 800338c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	223f      	movs	r2, #63	@ 0x3f
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d07e      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
        }
        return;
 80033ba:	e079      	b.n	80034b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01d      	beq.n	8003406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d031      	beq.n	8003444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
 80033e8:	e02c      	b.n	8003444 <HAL_DMA_IRQHandler+0x2a0>
 80033ea:	bf00      	nop
 80033ec:	20000008 	.word	0x20000008
 80033f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d023      	beq.n	8003444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e01e      	b.n	8003444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0210 	bic.w	r2, r2, #16
 8003422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003448:	2b00      	cmp	r3, #0
 800344a:	d032      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d022      	beq.n	800349e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2205      	movs	r2, #5
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3301      	adds	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d307      	bcc.n	800348c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f2      	bne.n	8003470 <HAL_DMA_IRQHandler+0x2cc>
 800348a:	e000      	b.n	800348e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800348c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	e000      	b.n	80034b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034b0:	bf00      	nop
    }
  }
}
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b40      	cmp	r3, #64	@ 0x40
 80034fc:	d108      	bne.n	8003510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800350e:	e007      	b.n	8003520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3b10      	subs	r3, #16
 800353c:	4a13      	ldr	r2, [pc, #76]	@ (800358c <DMA_CalcBaseAndBitshift+0x60>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <DMA_CalcBaseAndBitshift+0x64>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d908      	bls.n	800356c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <DMA_CalcBaseAndBitshift+0x68>)
 8003562:	4013      	ands	r3, r2
 8003564:	1d1a      	adds	r2, r3, #4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
 800356a:	e006      	b.n	800357a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <DMA_CalcBaseAndBitshift+0x68>)
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	aaaaaaab 	.word	0xaaaaaaab
 8003590:	0800b364 	.word	0x0800b364
 8003594:	fffffc00 	.word	0xfffffc00

08003598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11f      	bne.n	80035f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d856      	bhi.n	8003666 <DMA_CheckFifoParam+0xce>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <DMA_CheckFifoParam+0x28>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035e3 	.word	0x080035e3
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	08003667 	.word	0x08003667
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d046      	beq.n	800366a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e043      	b.n	800366a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035ea:	d140      	bne.n	800366e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e03d      	b.n	800366e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	d121      	bne.n	8003640 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d837      	bhi.n	8003672 <DMA_CheckFifoParam+0xda>
 8003602:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <DMA_CheckFifoParam+0x70>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003619 	.word	0x08003619
 800360c:	0800361f 	.word	0x0800361f
 8003610:	08003619 	.word	0x08003619
 8003614:	08003631 	.word	0x08003631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e030      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d025      	beq.n	8003676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362e:	e022      	b.n	8003676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003638:	d11f      	bne.n	800367a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800363e:	e01c      	b.n	800367a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d903      	bls.n	800364e <DMA_CheckFifoParam+0xb6>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d003      	beq.n	8003654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800364c:	e018      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      break;
 8003652:	e015      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e00b      	b.n	800367e <DMA_CheckFifoParam+0xe6>
      break;
 8003666:	bf00      	nop
 8003668:	e00a      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e008      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e006      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
 8003674:	e004      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;   
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
    }
  } 
  
  return status; 
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	@ 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e169      	b.n	8003984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f040 8158 	bne.w	800397e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d005      	beq.n	80036e6 <HAL_GPIO_Init+0x56>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d130      	bne.n	8003748 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 0201 	and.w	r2, r3, #1
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b03      	cmp	r3, #3
 8003752:	d017      	beq.n	8003784 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d123      	bne.n	80037d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	08da      	lsrs	r2, r3, #3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3208      	adds	r2, #8
 8003798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80b2 	beq.w	800397e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	4b60      	ldr	r3, [pc, #384]	@ (800399c <HAL_GPIO_Init+0x30c>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	4a5f      	ldr	r2, [pc, #380]	@ (800399c <HAL_GPIO_Init+0x30c>)
 8003820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003824:	6453      	str	r3, [r2, #68]	@ 0x44
 8003826:	4b5d      	ldr	r3, [pc, #372]	@ (800399c <HAL_GPIO_Init+0x30c>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003832:	4a5b      	ldr	r2, [pc, #364]	@ (80039a0 <HAL_GPIO_Init+0x310>)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a52      	ldr	r2, [pc, #328]	@ (80039a4 <HAL_GPIO_Init+0x314>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_Init+0x226>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a51      	ldr	r2, [pc, #324]	@ (80039a8 <HAL_GPIO_Init+0x318>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x222>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a50      	ldr	r2, [pc, #320]	@ (80039ac <HAL_GPIO_Init+0x31c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x21e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4f      	ldr	r2, [pc, #316]	@ (80039b0 <HAL_GPIO_Init+0x320>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x21a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4e      	ldr	r2, [pc, #312]	@ (80039b4 <HAL_GPIO_Init+0x324>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x216>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <HAL_GPIO_Init+0x328>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x212>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4c      	ldr	r2, [pc, #304]	@ (80039bc <HAL_GPIO_Init+0x32c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x20e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4b      	ldr	r2, [pc, #300]	@ (80039c0 <HAL_GPIO_Init+0x330>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x20a>
 8003896:	2307      	movs	r3, #7
 8003898:	e00e      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 800389a:	2308      	movs	r3, #8
 800389c:	e00c      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 800389e:	2306      	movs	r3, #6
 80038a0:	e00a      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038a2:	2305      	movs	r3, #5
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038b6:	2300      	movs	r3, #0
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038c8:	4935      	ldr	r1, [pc, #212]	@ (80039a0 <HAL_GPIO_Init+0x310>)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fa:	4a32      	ldr	r2, [pc, #200]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394e:	4a1d      	ldr	r2, [pc, #116]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003978:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	f67f ae92 	bls.w	80036b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3724      	adds	r7, #36	@ 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40013800 	.word	0x40013800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40021400 	.word	0x40021400
 80039bc:	40021800 	.word	0x40021800
 80039c0:	40021c00 	.word	0x40021c00
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e0cd      	b.n	8003b80 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f040 80bd 	bne.w	8003b7a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003a00:	4a65      	ldr	r2, [pc, #404]	@ (8003b98 <HAL_GPIO_DeInit+0x1d0>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a5d      	ldr	r2, [pc, #372]	@ (8003b9c <HAL_GPIO_DeInit+0x1d4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02b      	beq.n	8003a82 <HAL_GPIO_DeInit+0xba>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba0 <HAL_GPIO_DeInit+0x1d8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d025      	beq.n	8003a7e <HAL_GPIO_DeInit+0xb6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba4 <HAL_GPIO_DeInit+0x1dc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01f      	beq.n	8003a7a <HAL_GPIO_DeInit+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba8 <HAL_GPIO_DeInit+0x1e0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_GPIO_DeInit+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a59      	ldr	r2, [pc, #356]	@ (8003bac <HAL_GPIO_DeInit+0x1e4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_GPIO_DeInit+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	@ (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_GPIO_DeInit+0xa6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a57      	ldr	r2, [pc, #348]	@ (8003bb4 <HAL_GPIO_DeInit+0x1ec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_DeInit+0xa2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a56      	ldr	r2, [pc, #344]	@ (8003bb8 <HAL_GPIO_DeInit+0x1f0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_GPIO_DeInit+0x9e>
 8003a62:	2307      	movs	r3, #7
 8003a64:	e00e      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a66:	2308      	movs	r3, #8
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_DeInit+0xbc>
 8003a82:	2300      	movs	r3, #0
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d132      	bne.n	8003afa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a94:	4b49      	ldr	r3, [pc, #292]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4947      	ldr	r1, [pc, #284]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003aa2:	4b46      	ldr	r3, [pc, #280]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	4944      	ldr	r1, [pc, #272]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ab0:	4b42      	ldr	r3, [pc, #264]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	4940      	ldr	r1, [pc, #256]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003abe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	493d      	ldr	r1, [pc, #244]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003adc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <HAL_GPIO_DeInit+0x1d0>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	43da      	mvns	r2, r3
 8003aec:	482a      	ldr	r0, [pc, #168]	@ (8003b98 <HAL_GPIO_DeInit+0x1d0>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	400a      	ands	r2, r1
 8003af4:	3302      	adds	r3, #2
 8003af6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2103      	movs	r1, #3
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	08d2      	lsrs	r2, r2, #3
 8003b30:	4019      	ands	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2103      	movs	r1, #3
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	2101      	movs	r1, #1
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	401a      	ands	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f af2e 	bls.w	80039e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40021400 	.word	0x40021400
 8003bb4:	40021800 	.word	0x40021800
 8003bb8:	40021c00 	.word	0x40021c00
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fb84 	bl	8001350 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40013c00 	.word	0x40013c00

08003c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <HAL_PWREx_EnableOverDrive+0x98>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <HAL_PWREx_EnableOverDrive+0x98>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_PWREx_EnableOverDrive+0x98>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c76:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c82:	f7fe fc41 	bl	8002508 <HAL_GetTick>
 8003c86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c88:	e009      	b.n	8003c9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c8a:	f7fe fc3d 	bl	8002508 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c98:	d901      	bls.n	8003c9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e022      	b.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c9e:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003caa:	d1ee      	bne.n	8003c8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cac:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb8:	f7fe fc26 	bl	8002508 <HAL_GetTick>
 8003cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cbe:	e009      	b.n	8003cd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cc0:	f7fe fc22 	bl	8002508 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cce:	d901      	bls.n	8003cd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e007      	b.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40007000 	.word	0x40007000

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e291      	b.n	800422e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8087 	beq.w	8003e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d18:	4b96      	ldr	r3, [pc, #600]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d00c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d24:	4b93      	ldr	r3, [pc, #588]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d112      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62>
 8003d30:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d3c:	d10b      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x130>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d168      	bne.n	8003e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e26b      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x7a>
 8003d60:	4b84      	ldr	r3, [pc, #528]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a83      	ldr	r2, [pc, #524]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e02e      	b.n	8003dcc <HAL_RCC_OscConfig+0xd8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x9c>
 8003d76:	4b7f      	ldr	r3, [pc, #508]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b7c      	ldr	r3, [pc, #496]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7b      	ldr	r2, [pc, #492]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xd8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0xc0>
 8003d9a:	4b76      	ldr	r3, [pc, #472]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a75      	ldr	r2, [pc, #468]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b73      	ldr	r3, [pc, #460]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a72      	ldr	r2, [pc, #456]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xd8>
 8003db4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fb98 	bl	8002508 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fb94 	bl	8002508 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	@ 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e21f      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b61      	ldr	r3, [pc, #388]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe8>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fb84 	bl	8002508 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fb80 	bl	8002508 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e20b      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	4b57      	ldr	r3, [pc, #348]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x110>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d069      	beq.n	8003f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e32:	4b50      	ldr	r3, [pc, #320]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x190>
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b47      	ldr	r3, [pc, #284]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x17a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1df      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	493d      	ldr	r1, [pc, #244]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e040      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a38      	ldr	r2, [pc, #224]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fb36 	bl	8002508 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea0:	f7fe fb32 	bl	8002508 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1bd      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4929      	ldr	r1, [pc, #164]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
 8003ed2:	e018      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed4:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fb12 	bl	8002508 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fb0e 	bl	8002508 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e199      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d038      	beq.n	8003f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d019      	beq.n	8003f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b16      	ldr	r3, [pc, #88]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	4a15      	ldr	r2, [pc, #84]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe faef 	bl	8002508 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe faeb 	bl	8002508 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e176      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x23a>
 8003f4c:	e01a      	b.n	8003f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	4a08      	ldr	r2, [pc, #32]	@ (8003f74 <HAL_RCC_OscConfig+0x280>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fe fad5 	bl	8002508 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fe fad1 	bl	8002508 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d903      	bls.n	8003f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e15c      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
 8003f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b91      	ldr	r3, [pc, #580]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a4 	beq.w	80040da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b8b      	ldr	r3, [pc, #556]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10d      	bne.n	8003fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	4b88      	ldr	r3, [pc, #544]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	4a87      	ldr	r2, [pc, #540]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003faa:	4b85      	ldr	r3, [pc, #532]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fba:	4b82      	ldr	r3, [pc, #520]	@ (80041c4 <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80041c4 <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7e      	ldr	r2, [pc, #504]	@ (80041c4 <HAL_RCC_OscConfig+0x4d0>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fa99 	bl	8002508 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fda:	f7fe fa95 	bl	8002508 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	@ 0x64
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e120      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fec:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x31a>
 8004000:	4b6f      	ldr	r3, [pc, #444]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a6e      	ldr	r2, [pc, #440]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	e02d      	b.n	800406a <HAL_RCC_OscConfig+0x376>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x33c>
 8004016:	4b6a      	ldr	r3, [pc, #424]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a69      	ldr	r2, [pc, #420]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
 8004022:	4b67      	ldr	r3, [pc, #412]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a66      	ldr	r2, [pc, #408]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70
 800402e:	e01c      	b.n	800406a <HAL_RCC_OscConfig+0x376>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d10c      	bne.n	8004052 <HAL_RCC_OscConfig+0x35e>
 8004038:	4b61      	ldr	r3, [pc, #388]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403c:	4a60      	ldr	r2, [pc, #384]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	@ 0x70
 8004044:	4b5e      	ldr	r3, [pc, #376]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a5d      	ldr	r2, [pc, #372]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	e00b      	b.n	800406a <HAL_RCC_OscConfig+0x376>
 8004052:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	4a5a      	ldr	r2, [pc, #360]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	@ 0x70
 800405e:	4b58      	ldr	r3, [pc, #352]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a57      	ldr	r2, [pc, #348]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fe fa49 	bl	8002508 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fe fa45 	bl	8002508 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0ce      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b4b      	ldr	r3, [pc, #300]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCC_OscConfig+0x386>
 800409c:	e014      	b.n	80040c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fe fa33 	bl	8002508 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe fa2f 	bl	8002508 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	4b40      	ldr	r3, [pc, #256]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ee      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b3c      	ldr	r3, [pc, #240]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	4a3b      	ldr	r2, [pc, #236]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a4 	beq.w	800422c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e4:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d06b      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d149      	bne.n	800418c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fa00 	bl	8002508 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe f9fc 	bl	8002508 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e087      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	019b      	lsls	r3, r3, #6
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	4313      	orrs	r3, r2
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004156:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe f9d0 	bl	8002508 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe f9cc 	bl	8002508 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e057      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x478>
 800418a:	e04f      	b.n	800422c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0b      	ldr	r2, [pc, #44]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fe f9b6 	bl	8002508 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe f9b2 	bl	8002508 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e03d      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4ac>
 80041be:	e035      	b.n	800422c <HAL_RCC_OscConfig+0x538>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x544>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d028      	beq.n	8004228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d121      	bne.n	8004228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d11a      	bne.n	8004228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004200:	4293      	cmp	r3, r2
 8004202:	d111      	bne.n	8004228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	3b01      	subs	r3, #1
 8004212:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d0      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	4965      	ldr	r1, [pc, #404]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0b8      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800429c:	4b59      	ldr	r3, [pc, #356]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b4:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a52      	ldr	r2, [pc, #328]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c0:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	494d      	ldr	r1, [pc, #308]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d040      	beq.n	8004360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d115      	bne.n	800431e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e073      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3d      	ldr	r3, [pc, #244]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4936      	ldr	r1, [pc, #216]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fe f8ea 	bl	8002508 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fe f8e6 	bl	8002508 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e053      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d210      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020f 	bic.w	r2, r3, #15
 8004376:	4922      	ldr	r1, [pc, #136]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e032      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4916      	ldr	r1, [pc, #88]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	490e      	ldr	r1, [pc, #56]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ce:	f000 f821 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490a      	ldr	r1, [pc, #40]	@ (8004408 <HAL_RCC_ClockConfig+0x1cc>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	fa22 f303 	lsr.w	r3, r2, r3
 80043e6:	4a09      	ldr	r2, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1d0>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCC_ClockConfig+0x1d4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd ff54 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023c00 	.word	0x40023c00
 8004404:	40023800 	.word	0x40023800
 8004408:	0800b34c 	.word	0x0800b34c
 800440c:	20000008 	.word	0x20000008
 8004410:	2000000c 	.word	0x2000000c

08004414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b094      	sub	sp, #80	@ 0x50
 800441a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004420:	2300      	movs	r3, #0
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	2300      	movs	r3, #0
 8004426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800442c:	4b79      	ldr	r3, [pc, #484]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d00d      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x40>
 8004438:	2b08      	cmp	r3, #8
 800443a:	f200 80e1 	bhi.w	8004600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x34>
 8004442:	2b04      	cmp	r3, #4
 8004444:	d003      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x3a>
 8004446:	e0db      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b73      	ldr	r3, [pc, #460]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x204>)
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800444c:	e0db      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444e:	4b72      	ldr	r3, [pc, #456]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x204>)
 8004450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004452:	e0d8      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004454:	4b6f      	ldr	r3, [pc, #444]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800445e:	4b6d      	ldr	r3, [pc, #436]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d063      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b6a      	ldr	r3, [pc, #424]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	2200      	movs	r2, #0
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004474:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
 800447e:	2300      	movs	r3, #0
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
 8004482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004486:	4622      	mov	r2, r4
 8004488:	462b      	mov	r3, r5
 800448a:	f04f 0000 	mov.w	r0, #0
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	0159      	lsls	r1, r3, #5
 8004494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004498:	0150      	lsls	r0, r2, #5
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4621      	mov	r1, r4
 80044a0:	1a51      	subs	r1, r2, r1
 80044a2:	6139      	str	r1, [r7, #16]
 80044a4:	4629      	mov	r1, r5
 80044a6:	eb63 0301 	sbc.w	r3, r3, r1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b8:	4659      	mov	r1, fp
 80044ba:	018b      	lsls	r3, r1, #6
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c2:	4651      	mov	r1, sl
 80044c4:	018a      	lsls	r2, r1, #6
 80044c6:	4651      	mov	r1, sl
 80044c8:	ebb2 0801 	subs.w	r8, r2, r1
 80044cc:	4659      	mov	r1, fp
 80044ce:	eb63 0901 	sbc.w	r9, r3, r1
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e6:	4690      	mov	r8, r2
 80044e8:	4699      	mov	r9, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	eb18 0303 	adds.w	r3, r8, r3
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	462b      	mov	r3, r5
 80044f4:	eb49 0303 	adc.w	r3, r9, r3
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004506:	4629      	mov	r1, r5
 8004508:	028b      	lsls	r3, r1, #10
 800450a:	4621      	mov	r1, r4
 800450c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004510:	4621      	mov	r1, r4
 8004512:	028a      	lsls	r2, r1, #10
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451a:	2200      	movs	r2, #0
 800451c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004524:	f7fb fe7c 	bl	8000220 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004530:	e058      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004532:	4b38      	ldr	r3, [pc, #224]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	2200      	movs	r2, #0
 800453a:	4618      	mov	r0, r3
 800453c:	4611      	mov	r1, r2
 800453e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
 8004548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	f04f 0000 	mov.w	r0, #0
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	0159      	lsls	r1, r3, #5
 800455a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800455e:	0150      	lsls	r0, r2, #5
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4641      	mov	r1, r8
 8004566:	ebb2 0a01 	subs.w	sl, r2, r1
 800456a:	4649      	mov	r1, r9
 800456c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800457c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004584:	ebb2 040a 	subs.w	r4, r2, sl
 8004588:	eb63 050b 	sbc.w	r5, r3, fp
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	00eb      	lsls	r3, r5, #3
 8004596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459a:	00e2      	lsls	r2, r4, #3
 800459c:	4614      	mov	r4, r2
 800459e:	461d      	mov	r5, r3
 80045a0:	4643      	mov	r3, r8
 80045a2:	18e3      	adds	r3, r4, r3
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	464b      	mov	r3, r9
 80045a8:	eb45 0303 	adc.w	r3, r5, r3
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ba:	4629      	mov	r1, r5
 80045bc:	028b      	lsls	r3, r1, #10
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c4:	4621      	mov	r1, r4
 80045c6:	028a      	lsls	r2, r1, #10
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	2200      	movs	r2, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	61fa      	str	r2, [r7, #28]
 80045d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d8:	f7fb fe22 	bl	8000220 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	3301      	adds	r3, #1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045fe:	e002      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x204>)
 8004602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004608:	4618      	mov	r0, r3
 800460a:	3750      	adds	r7, #80	@ 0x50
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	00f42400 	.word	0x00f42400

0800461c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000008 	.word	0x20000008

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a9b      	lsrs	r3, r3, #10
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	@ (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	0800b35c 	.word	0x0800b35c

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffdc 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	@ (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	0800b35c 	.word	0x0800b35c

08004684 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	220f      	movs	r2, #15
 8004692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046c6:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <HAL_RCC_GetClockConfig+0x60>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40023c00 	.word	0x40023c00

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800470c:	4b65      	ldr	r3, [pc, #404]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a64      	ldr	r2, [pc, #400]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004712:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	4b62      	ldr	r3, [pc, #392]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	4960      	ldr	r1, [pc, #384]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800472e:	2301      	movs	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800473e:	4b59      	ldr	r3, [pc, #356]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004744:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474c:	4955      	ldr	r1, [pc, #340]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800476a:	2301      	movs	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d017      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800477a:	4b4a      	ldr	r3, [pc, #296]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	4946      	ldr	r1, [pc, #280]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004798:	d101      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 808b 	beq.w	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b8:	4b3a      	ldr	r3, [pc, #232]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	4a39      	ldr	r2, [pc, #228]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80047c4:	4b37      	ldr	r3, [pc, #220]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047d0:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a34      	ldr	r2, [pc, #208]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047dc:	f7fd fe94 	bl	8002508 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e4:	f7fd fe90 	bl	8002508 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	@ 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e2bc      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047f6:	4b2c      	ldr	r3, [pc, #176]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004802:	4b28      	ldr	r3, [pc, #160]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d035      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d02e      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004820:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004828:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800482a:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004834:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800483c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004840:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004842:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004848:	4b16      	ldr	r3, [pc, #88]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d114      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd fe58 	bl	8002508 <HAL_GetTick>
 8004858:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fd fe54 	bl	8002508 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e27e      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ee      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800488a:	d111      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800489a:	400b      	ands	r3, r1
 800489c:	4901      	ldr	r1, [pc, #4]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
 80048a2:	e00b      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40007000 	.word	0x40007000
 80048ac:	0ffffcff 	.word	0x0ffffcff
 80048b0:	4ba4      	ldr	r3, [pc, #656]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4aa3      	ldr	r2, [pc, #652]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048ba:	6093      	str	r3, [r2, #8]
 80048bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c8:	499e      	ldr	r1, [pc, #632]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048da:	4b9a      	ldr	r3, [pc, #616]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048e0:	4a98      	ldr	r2, [pc, #608]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048ea:	4b96      	ldr	r3, [pc, #600]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	4993      	ldr	r1, [pc, #588]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004908:	4b8e      	ldr	r3, [pc, #568]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004916:	498b      	ldr	r1, [pc, #556]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492a:	4b86      	ldr	r3, [pc, #536]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	4982      	ldr	r1, [pc, #520]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800494c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800495a:	497a      	ldr	r1, [pc, #488]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496e:	4b75      	ldr	r3, [pc, #468]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	f023 0203 	bic.w	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	4971      	ldr	r1, [pc, #452]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004990:	4b6c      	ldr	r3, [pc, #432]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	f023 020c 	bic.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	4969      	ldr	r1, [pc, #420]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049b2:	4b64      	ldr	r3, [pc, #400]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	4960      	ldr	r1, [pc, #384]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	4958      	ldr	r1, [pc, #352]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049f6:	4b53      	ldr	r3, [pc, #332]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a04:	494f      	ldr	r1, [pc, #316]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a18:	4b4a      	ldr	r3, [pc, #296]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a26:	4947      	ldr	r1, [pc, #284]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a3a:	4b42      	ldr	r3, [pc, #264]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	493e      	ldr	r1, [pc, #248]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a5c:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	4936      	ldr	r1, [pc, #216]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a7e:	4b31      	ldr	r3, [pc, #196]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8c:	492d      	ldr	r1, [pc, #180]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aae:	4b25      	ldr	r3, [pc, #148]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004abc:	4921      	ldr	r1, [pc, #132]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ade:	4919      	ldr	r1, [pc, #100]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004af2:	4b14      	ldr	r3, [pc, #80]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b00:	4910      	ldr	r1, [pc, #64]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d006      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 809d 	beq.w	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a08      	ldr	r2, [pc, #32]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd fcee 	bl	8002508 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b30:	f7fd fcea 	bl	8002508 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d904      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e116      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b48:	4b8b      	ldr	r3, [pc, #556]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ed      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d113      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b68:	4b83      	ldr	r3, [pc, #524]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6e:	0e1b      	lsrs	r3, r3, #24
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	019a      	lsls	r2, r3, #6
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	071b      	lsls	r3, r3, #28
 8004b88:	497b      	ldr	r1, [pc, #492]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d024      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bba:	d11f      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc2:	0f1b      	lsrs	r3, r3, #28
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	019a      	lsls	r2, r3, #6
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	071b      	lsls	r3, r3, #28
 8004bdc:	4966      	ldr	r1, [pc, #408]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004be4:	4b64      	ldr	r3, [pc, #400]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bea:	f023 021f 	bic.w	r2, r3, #31
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4960      	ldr	r1, [pc, #384]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	019a      	lsls	r2, r3, #6
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	4956      	ldr	r1, [pc, #344]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c24:	4b54      	ldr	r3, [pc, #336]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a53      	ldr	r2, [pc, #332]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fc6a 	bl	8002508 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c38:	f7fd fc66 	bl	8002508 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	@ 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e092      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 8088 	bne.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c5e:	4b46      	ldr	r3, [pc, #280]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a45      	ldr	r2, [pc, #276]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fd fc4d 	bl	8002508 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c72:	f7fd fc49 	bl	8002508 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	@ 0x64
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e075      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c84:	4b3c      	ldr	r3, [pc, #240]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c90:	d0ef      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d024      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d120      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cba:	4b2f      	ldr	r3, [pc, #188]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	019a      	lsls	r2, r3, #6
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	4927      	ldr	r1, [pc, #156]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ce2:	4b25      	ldr	r3, [pc, #148]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ce8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4920      	ldr	r1, [pc, #128]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d018      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d10:	d113      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d12:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	019a      	lsls	r2, r3, #6
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	4911      	ldr	r1, [pc, #68]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fd fbdf 	bl	8002508 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d4e:	f7fd fbdb 	bl	8002508 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	@ 0x64
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e007      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d6c:	d1ef      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e09d      	b.n	8004eca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9e:	d009      	beq.n	8004db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
 8004da6:	e005      	b.n	8004db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd f83e 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004df4:	d902      	bls.n	8004dfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e002      	b.n	8004e02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e0a:	d007      	beq.n	8004e1c <HAL_SPI_Init+0xa0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 0204 	and.w	r2, r3, #4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e049      	b.n	8004f78 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fd f80b 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 ffe5 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e054      	b.n	8005042 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	@ (8005054 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800505c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8005060 <HAL_TIM_Base_Start_IT+0xe0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8005068 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d115      	bne.n	800502c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4b19      	ldr	r3, [pc, #100]	@ (800506c <HAL_TIM_Base_Start_IT+0xec>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d015      	beq.n	800503e <HAL_TIM_Base_Start_IT+0xbe>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d011      	beq.n	800503e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	e008      	b.n	800503e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e000      	b.n	8005040 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800
 800506c:	00010007 	.word	0x00010007

08005070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e049      	b.n	8005116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f841 	bl	800511e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 ff16 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start+0x24>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e03c      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b04      	cmp	r3, #4
 800515c:	d109      	bne.n	8005172 <HAL_TIM_PWM_Start+0x3e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e02f      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d109      	bne.n	800518c <HAL_TIM_PWM_Start+0x58>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e022      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d109      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x72>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e015      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x8c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e008      	b.n	80051d2 <HAL_TIM_PWM_Start+0x9e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e092      	b.n	8005300 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xb6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e8:	e023      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xc6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f8:	e01b      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xd6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	e013      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xe6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005218:	e00b      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b10      	cmp	r3, #16
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0xf6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005228:	e003      	b.n	8005232 <HAL_TIM_PWM_Start+0xfe>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fb1e 	bl	800687c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a30      	ldr	r2, [pc, #192]	@ (8005308 <HAL_TIM_PWM_Start+0x1d4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_PWM_Start+0x120>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2f      	ldr	r2, [pc, #188]	@ (800530c <HAL_TIM_PWM_Start+0x1d8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_TIM_PWM_Start+0x124>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_TIM_PWM_Start+0x126>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a25      	ldr	r2, [pc, #148]	@ (8005308 <HAL_TIM_PWM_Start+0x1d4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005280:	d01d      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a22      	ldr	r2, [pc, #136]	@ (8005310 <HAL_TIM_PWM_Start+0x1dc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a20      	ldr	r2, [pc, #128]	@ (8005314 <HAL_TIM_PWM_Start+0x1e0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1f      	ldr	r2, [pc, #124]	@ (8005318 <HAL_TIM_PWM_Start+0x1e4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a19      	ldr	r2, [pc, #100]	@ (800530c <HAL_TIM_PWM_Start+0x1d8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <HAL_TIM_PWM_Start+0x1e8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIM_PWM_Start+0x18a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <HAL_TIM_PWM_Start+0x1ec>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d115      	bne.n	80052ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <HAL_TIM_PWM_Start+0x1f0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d015      	beq.n	80052fc <HAL_TIM_PWM_Start+0x1c8>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d6:	d011      	beq.n	80052fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	e008      	b.n	80052fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40010000 	.word	0x40010000
 800530c:	40010400 	.word	0x40010400
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40001800 	.word	0x40001800
 8005324:	00010007 	.word	0x00010007

08005328 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fa9e 	bl	800687c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a36      	ldr	r2, [pc, #216]	@ (8005420 <HAL_TIM_PWM_Stop+0xf8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x2c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a35      	ldr	r2, [pc, #212]	@ (8005424 <HAL_TIM_PWM_Stop+0xfc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_TIM_PWM_Stop+0x30>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_TIM_PWM_Stop+0x32>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_TIM_PWM_Stop+0x66>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	f240 4344 	movw	r3, #1092	@ 0x444
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_TIM_PWM_Stop+0x66>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <HAL_TIM_PWM_Stop+0x96>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <HAL_TIM_PWM_Stop+0x96>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Stop+0xa6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	e023      	b.n	8005416 <HAL_TIM_PWM_Stop+0xee>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Stop+0xb6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	e01b      	b.n	8005416 <HAL_TIM_PWM_Stop+0xee>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Stop+0xc6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ec:	e013      	b.n	8005416 <HAL_TIM_PWM_Stop+0xee>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Stop+0xd6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_PWM_Stop+0xee>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Stop+0xe6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800540c:	e003      	b.n	8005416 <HAL_TIM_PWM_Stop+0xee>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e049      	b.n	80054ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f841 	bl	80054d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 fd3a 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_TIM_IC_Start_IT+0x1e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e023      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x66>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d104      	bne.n	800551a <HAL_TIM_IC_Start_IT+0x2e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e01b      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x66>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d104      	bne.n	800552a <HAL_TIM_IC_Start_IT+0x3e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e013      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x66>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d104      	bne.n	800553a <HAL_TIM_IC_Start_IT+0x4e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005536:	b2db      	uxtb	r3, r3
 8005538:	e00b      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x66>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b10      	cmp	r3, #16
 800553e:	d104      	bne.n	800554a <HAL_TIM_IC_Start_IT+0x5e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e003      	b.n	8005552 <HAL_TIM_IC_Start_IT+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005550:	b2db      	uxtb	r3, r3
 8005552:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <HAL_TIM_IC_Start_IT+0x78>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e013      	b.n	800558c <HAL_TIM_IC_Start_IT+0xa0>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d104      	bne.n	8005574 <HAL_TIM_IC_Start_IT+0x88>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e00b      	b.n	800558c <HAL_TIM_IC_Start_IT+0xa0>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b08      	cmp	r3, #8
 8005578:	d104      	bne.n	8005584 <HAL_TIM_IC_Start_IT+0x98>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e003      	b.n	800558c <HAL_TIM_IC_Start_IT+0xa0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800558a:	b2db      	uxtb	r3, r3
 800558c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800558e:	7bbb      	ldrb	r3, [r7, #14]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d102      	bne.n	800559a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005594:	7b7b      	ldrb	r3, [r7, #13]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0e2      	b.n	8005764 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_IT+0xc2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ac:	e023      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x10a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_IT+0xd2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055bc:	e01b      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x10a>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0xe2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055cc:	e013      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x10a>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_IT+0xf2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x10a>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0x102>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055ec:	e003      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0x10a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Start_IT+0x11a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005604:	e013      	b.n	800562e <HAL_TIM_IC_Start_IT+0x142>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d104      	bne.n	8005616 <HAL_TIM_IC_Start_IT+0x12a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005614:	e00b      	b.n	800562e <HAL_TIM_IC_Start_IT+0x142>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d104      	bne.n	8005626 <HAL_TIM_IC_Start_IT+0x13a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005624:	e003      	b.n	800562e <HAL_TIM_IC_Start_IT+0x142>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d841      	bhi.n	80056b8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <HAL_TIM_IC_Start_IT+0x150>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005671 	.word	0x08005671
 8005640:	080056b9 	.word	0x080056b9
 8005644:	080056b9 	.word	0x080056b9
 8005648:	080056b9 	.word	0x080056b9
 800564c:	08005683 	.word	0x08005683
 8005650:	080056b9 	.word	0x080056b9
 8005654:	080056b9 	.word	0x080056b9
 8005658:	080056b9 	.word	0x080056b9
 800565c:	08005695 	.word	0x08005695
 8005660:	080056b9 	.word	0x080056b9
 8005664:	080056b9 	.word	0x080056b9
 8005668:	080056b9 	.word	0x080056b9
 800566c:	080056a7 	.word	0x080056a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0202 	orr.w	r2, r2, #2
 800567e:	60da      	str	r2, [r3, #12]
      break;
 8005680:	e01d      	b.n	80056be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	60da      	str	r2, [r3, #12]
      break;
 8005692:	e014      	b.n	80056be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	60da      	str	r2, [r3, #12]
      break;
 80056a4:	e00b      	b.n	80056be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0210 	orr.w	r2, r2, #16
 80056b4:	60da      	str	r2, [r3, #12]
      break;
 80056b6:	e002      	b.n	80056be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      break;
 80056bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d14e      	bne.n	8005762 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 f8d5 	bl	800687c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a25      	ldr	r2, [pc, #148]	@ (800576c <HAL_TIM_IC_Start_IT+0x280>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d01d      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <HAL_TIM_IC_Start_IT+0x284>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <HAL_TIM_IC_Start_IT+0x288>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005778 <HAL_TIM_IC_Start_IT+0x28c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1c      	ldr	r2, [pc, #112]	@ (800577c <HAL_TIM_IC_Start_IT+0x290>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1b      	ldr	r2, [pc, #108]	@ (8005780 <HAL_TIM_IC_Start_IT+0x294>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x236>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	@ (8005784 <HAL_TIM_IC_Start_IT+0x298>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d115      	bne.n	800574e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	4b17      	ldr	r3, [pc, #92]	@ (8005788 <HAL_TIM_IC_Start_IT+0x29c>)
 800572a:	4013      	ands	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d015      	beq.n	8005760 <HAL_TIM_IC_Start_IT+0x274>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573a:	d011      	beq.n	8005760 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	e008      	b.n	8005760 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e000      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005760:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800
 8005788:	00010007 	.word	0x00010007

0800578c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb64 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb56 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb67 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0204 	mvn.w	r2, #4
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fb3e 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb30 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb41 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0208 	mvn.w	r2, #8
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fb18 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb0a 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb1b 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0210 	mvn.w	r2, #16
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2208      	movs	r2, #8
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 faf2 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fae4 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 faf5 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0201 	mvn.w	r2, #1
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fb ff08 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fa07 	bl	8006d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f9ff 	bl	8006d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 faaf 	bl	8005ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0220 	mvn.w	r2, #32
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f9c7 	bl	8006d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e088      	b.n	8005aca <HAL_TIM_IC_ConfigChannel+0x130>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11b      	bne.n	80059fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059d6:	f000 fd8d 	bl	80064f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 020c 	bic.w	r2, r2, #12
 80059e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6999      	ldr	r1, [r3, #24]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
 80059fc:	e060      	b.n	8005ac0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11c      	bne.n	8005a3e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a14:	f000 fe11 	bl	800663a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	619a      	str	r2, [r3, #24]
 8005a3c:	e040      	b.n	8005ac0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a54:	f000 fe5e 	bl	8006714 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 020c 	bic.w	r2, r2, #12
 8005a66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69d9      	ldr	r1, [r3, #28]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	61da      	str	r2, [r3, #28]
 8005a7a:	e021      	b.n	8005ac0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d11c      	bne.n	8005abc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a92:	f000 fe7b 	bl	800678c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005aa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	021a      	lsls	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
 8005aba:	e001      	b.n	8005ac0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e0ff      	b.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b14      	cmp	r3, #20
 8005afe:	f200 80f0 	bhi.w	8005ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b02:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ce3 	.word	0x08005ce3
 8005b10:	08005ce3 	.word	0x08005ce3
 8005b14:	08005ce3 	.word	0x08005ce3
 8005b18:	08005b9d 	.word	0x08005b9d
 8005b1c:	08005ce3 	.word	0x08005ce3
 8005b20:	08005ce3 	.word	0x08005ce3
 8005b24:	08005ce3 	.word	0x08005ce3
 8005b28:	08005bdf 	.word	0x08005bdf
 8005b2c:	08005ce3 	.word	0x08005ce3
 8005b30:	08005ce3 	.word	0x08005ce3
 8005b34:	08005ce3 	.word	0x08005ce3
 8005b38:	08005c1f 	.word	0x08005c1f
 8005b3c:	08005ce3 	.word	0x08005ce3
 8005b40:	08005ce3 	.word	0x08005ce3
 8005b44:	08005ce3 	.word	0x08005ce3
 8005b48:	08005c61 	.word	0x08005c61
 8005b4c:	08005ce3 	.word	0x08005ce3
 8005b50:	08005ce3 	.word	0x08005ce3
 8005b54:	08005ce3 	.word	0x08005ce3
 8005b58:	08005ca1 	.word	0x08005ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fa68 	bl	8006038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	619a      	str	r2, [r3, #24]
      break;
 8005b9a:	e0a5      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 faba 	bl	800611c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
      break;
 8005bdc:	e084      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fb11 	bl	800620c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
      break;
 8005c1c:	e064      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb67 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	61da      	str	r2, [r3, #28]
      break;
 8005c5e:	e043      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fb9e 	bl	80063a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0204 	bic.w	r2, r2, #4
 8005c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c9e:	e023      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fbd0 	bl	800644c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ce0:	e002      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop

08005cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_ConfigClockSource+0x1c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e0b4      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x186>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4b56      	ldr	r3, [pc, #344]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x190>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d50:	d03e      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d56:	f200 8087 	bhi.w	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5e:	f000 8086 	beq.w	8005e6e <HAL_TIM_ConfigClockSource+0x172>
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d66:	d87f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b70      	cmp	r3, #112	@ 0x70
 8005d6a:	d01a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d6c:	2b70      	cmp	r3, #112	@ 0x70
 8005d6e:	d87b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b60      	cmp	r3, #96	@ 0x60
 8005d72:	d050      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x11a>
 8005d74:	2b60      	cmp	r3, #96	@ 0x60
 8005d76:	d877      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b50      	cmp	r3, #80	@ 0x50
 8005d7a:	d03c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d7c:	2b50      	cmp	r3, #80	@ 0x50
 8005d7e:	d873      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d058      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x13a>
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d86f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b30      	cmp	r3, #48	@ 0x30
 8005d8a:	d064      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d8c:	2b30      	cmp	r3, #48	@ 0x30
 8005d8e:	d86b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d060      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d867      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d05c      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d05a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	e062      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005db2:	f000 fd43 	bl	800683c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	609a      	str	r2, [r3, #8]
      break;
 8005dce:	e04f      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005de0:	f000 fd2c 	bl	800683c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005df2:	609a      	str	r2, [r3, #8]
      break;
 8005df4:	e03c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 fbea 	bl	80065dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2150      	movs	r1, #80	@ 0x50
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fcf9 	bl	8006806 <TIM_ITRx_SetConfig>
      break;
 8005e14:	e02c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fc46 	bl	80066b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2160      	movs	r1, #96	@ 0x60
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fce9 	bl	8006806 <TIM_ITRx_SetConfig>
      break;
 8005e34:	e01c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fbca 	bl	80065dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fcd9 	bl	8006806 <TIM_ITRx_SetConfig>
      break;
 8005e54:	e00c      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f000 fcd0 	bl	8006806 <TIM_ITRx_SetConfig>
      break;
 8005e66:	e003      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e000      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	fffeff88 	.word	0xfffeff88

08005e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a46      	ldr	r2, [pc, #280]	@ (800600c <TIM_Base_SetConfig+0x12c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efe:	d00f      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a43      	ldr	r2, [pc, #268]	@ (8006010 <TIM_Base_SetConfig+0x130>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a42      	ldr	r2, [pc, #264]	@ (8006014 <TIM_Base_SetConfig+0x134>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a41      	ldr	r2, [pc, #260]	@ (8006018 <TIM_Base_SetConfig+0x138>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a40      	ldr	r2, [pc, #256]	@ (800601c <TIM_Base_SetConfig+0x13c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a35      	ldr	r2, [pc, #212]	@ (800600c <TIM_Base_SetConfig+0x12c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d02b      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f40:	d027      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a32      	ldr	r2, [pc, #200]	@ (8006010 <TIM_Base_SetConfig+0x130>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d023      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a31      	ldr	r2, [pc, #196]	@ (8006014 <TIM_Base_SetConfig+0x134>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01f      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a30      	ldr	r2, [pc, #192]	@ (8006018 <TIM_Base_SetConfig+0x138>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01b      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800601c <TIM_Base_SetConfig+0x13c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d017      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2e      	ldr	r2, [pc, #184]	@ (8006020 <TIM_Base_SetConfig+0x140>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006024 <TIM_Base_SetConfig+0x144>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2c      	ldr	r2, [pc, #176]	@ (8006028 <TIM_Base_SetConfig+0x148>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800602c <TIM_Base_SetConfig+0x14c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	@ (8006030 <TIM_Base_SetConfig+0x150>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a29      	ldr	r2, [pc, #164]	@ (8006034 <TIM_Base_SetConfig+0x154>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a10      	ldr	r2, [pc, #64]	@ (800600c <TIM_Base_SetConfig+0x12c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_Base_SetConfig+0xf8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	@ (800601c <TIM_Base_SetConfig+0x13c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d103      	bne.n	8005fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	611a      	str	r2, [r3, #16]
  }
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800
 800602c:	40001800 	.word	0x40001800
 8006030:	40001c00 	.word	0x40001c00
 8006034:	40002000 	.word	0x40002000

08006038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f023 0201 	bic.w	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4b2b      	ldr	r3, [pc, #172]	@ (8006110 <TIM_OC1_SetConfig+0xd8>)
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 0302 	bic.w	r3, r3, #2
 8006080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a21      	ldr	r2, [pc, #132]	@ (8006114 <TIM_OC1_SetConfig+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC1_SetConfig+0x64>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a20      	ldr	r2, [pc, #128]	@ (8006118 <TIM_OC1_SetConfig+0xe0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d10c      	bne.n	80060b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0308 	bic.w	r3, r3, #8
 80060a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0304 	bic.w	r3, r3, #4
 80060b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a16      	ldr	r2, [pc, #88]	@ (8006114 <TIM_OC1_SetConfig+0xdc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC1_SetConfig+0x8e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a15      	ldr	r2, [pc, #84]	@ (8006118 <TIM_OC1_SetConfig+0xe0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d111      	bne.n	80060ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	fffeff8f 	.word	0xfffeff8f
 8006114:	40010000 	.word	0x40010000
 8006118:	40010400 	.word	0x40010400

0800611c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0210 	bic.w	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4b2e      	ldr	r3, [pc, #184]	@ (8006200 <TIM_OC2_SetConfig+0xe4>)
 8006148:	4013      	ands	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0320 	bic.w	r3, r3, #32
 8006166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a23      	ldr	r2, [pc, #140]	@ (8006204 <TIM_OC2_SetConfig+0xe8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC2_SetConfig+0x68>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a22      	ldr	r2, [pc, #136]	@ (8006208 <TIM_OC2_SetConfig+0xec>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d10d      	bne.n	80061a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800618a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800619e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <TIM_OC2_SetConfig+0xe8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC2_SetConfig+0x94>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a17      	ldr	r2, [pc, #92]	@ (8006208 <TIM_OC2_SetConfig+0xec>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d113      	bne.n	80061d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	feff8fff 	.word	0xfeff8fff
 8006204:	40010000 	.word	0x40010000
 8006208:	40010400 	.word	0x40010400

0800620c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <TIM_OC3_SetConfig+0xe0>)
 8006238:	4013      	ands	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a22      	ldr	r2, [pc, #136]	@ (80062f0 <TIM_OC3_SetConfig+0xe4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0x66>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <TIM_OC3_SetConfig+0xe8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10d      	bne.n	800628e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <TIM_OC3_SetConfig+0xe4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC3_SetConfig+0x92>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC3_SetConfig+0xe8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d113      	bne.n	80062c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	fffeff8f 	.word	0xfffeff8f
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4b1e      	ldr	r3, [pc, #120]	@ (800639c <TIM_OC4_SetConfig+0xa4>)
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a13      	ldr	r2, [pc, #76]	@ (80063a0 <TIM_OC4_SetConfig+0xa8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_OC4_SetConfig+0x68>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a12      	ldr	r2, [pc, #72]	@ (80063a4 <TIM_OC4_SetConfig+0xac>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d109      	bne.n	8006374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	feff8fff 	.word	0xfeff8fff
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006440 <TIM_OC5_SetConfig+0x98>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a12      	ldr	r2, [pc, #72]	@ (8006444 <TIM_OC5_SetConfig+0x9c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC5_SetConfig+0x5e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <TIM_OC5_SetConfig+0xa0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d109      	bne.n	800641a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800640c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b1c      	ldr	r3, [pc, #112]	@ (80064e8 <TIM_OC6_SetConfig+0x9c>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800648e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a13      	ldr	r2, [pc, #76]	@ (80064ec <TIM_OC6_SetConfig+0xa0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC6_SetConfig+0x60>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a12      	ldr	r2, [pc, #72]	@ (80064f0 <TIM_OC6_SetConfig+0xa4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d109      	bne.n	80064c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	feff8fff 	.word	0xfeff8fff
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400

080064f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f023 0201 	bic.w	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a28      	ldr	r2, [pc, #160]	@ (80065c0 <TIM_TI1_SetConfig+0xcc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01b      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006528:	d017      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a25      	ldr	r2, [pc, #148]	@ (80065c4 <TIM_TI1_SetConfig+0xd0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a24      	ldr	r2, [pc, #144]	@ (80065c8 <TIM_TI1_SetConfig+0xd4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00f      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a23      	ldr	r2, [pc, #140]	@ (80065cc <TIM_TI1_SetConfig+0xd8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00b      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a22      	ldr	r2, [pc, #136]	@ (80065d0 <TIM_TI1_SetConfig+0xdc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a21      	ldr	r2, [pc, #132]	@ (80065d4 <TIM_TI1_SetConfig+0xe0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_TI1_SetConfig+0x66>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a20      	ldr	r2, [pc, #128]	@ (80065d8 <TIM_TI1_SetConfig+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <TIM_TI1_SetConfig+0x6a>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <TIM_TI1_SetConfig+0x6c>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e003      	b.n	800657e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	b2db      	uxtb	r3, r3
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f003 030a 	and.w	r3, r3, #10
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40001800 	.word	0x40001800

080065dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 030a 	bic.w	r3, r3, #10
 8006618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800663a:	b480      	push	{r7}
 800663c:	b087      	sub	sp, #28
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0210 	bic.w	r2, r3, #16
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	031b      	lsls	r3, r3, #12
 800667e:	b29b      	uxth	r3, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	621a      	str	r2, [r3, #32]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	031b      	lsls	r3, r3, #12
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f023 0303 	bic.w	r3, r3, #3
 8006740:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	b2db      	uxtb	r3, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006764:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80067de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	031b      	lsls	r3, r3, #12
 80067e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	f043 0307 	orr.w	r3, r3, #7
 8006828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	431a      	orrs	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	2201      	movs	r2, #1
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	43db      	mvns	r3, r3
 800689e:	401a      	ands	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_TIMEx_PWMN_Start+0x24>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e022      	b.n	8006932 <HAL_TIMEx_PWMN_Start+0x6a>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d109      	bne.n	8006906 <HAL_TIMEx_PWMN_Start+0x3e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e015      	b.n	8006932 <HAL_TIMEx_PWMN_Start+0x6a>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d109      	bne.n	8006920 <HAL_TIMEx_PWMN_Start+0x58>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e008      	b.n	8006932 <HAL_TIMEx_PWMN_Start+0x6a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e073      	b.n	8006a22 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIMEx_PWMN_Start+0x82>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006948:	e013      	b.n	8006972 <HAL_TIMEx_PWMN_Start+0xaa>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIMEx_PWMN_Start+0x92>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006958:	e00b      	b.n	8006972 <HAL_TIMEx_PWMN_Start+0xaa>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIMEx_PWMN_Start+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006968:	e003      	b.n	8006972 <HAL_TIMEx_PWMN_Start+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f9ee 	bl	8006d5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800698e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a25      	ldr	r2, [pc, #148]	@ (8006a2c <HAL_TIMEx_PWMN_Start+0x164>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d022      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d01d      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a21      	ldr	r2, [pc, #132]	@ (8006a30 <HAL_TIMEx_PWMN_Start+0x168>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d018      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a20      	ldr	r2, [pc, #128]	@ (8006a34 <HAL_TIMEx_PWMN_Start+0x16c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006a38 <HAL_TIMEx_PWMN_Start+0x170>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a3c <HAL_TIMEx_PWMN_Start+0x174>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <HAL_TIMEx_PWMN_Start+0x178>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIMEx_PWMN_Start+0x118>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1a      	ldr	r2, [pc, #104]	@ (8006a44 <HAL_TIMEx_PWMN_Start+0x17c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d115      	bne.n	8006a0c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <HAL_TIMEx_PWMN_Start+0x180>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b06      	cmp	r3, #6
 80069f0:	d015      	beq.n	8006a1e <HAL_TIMEx_PWMN_Start+0x156>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f8:	d011      	beq.n	8006a1e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	e008      	b.n	8006a1e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e000      	b.n	8006a20 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40001800 	.word	0x40001800
 8006a48:	00010007 	.word	0x00010007

08006a4c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f97c 	bl	8006d5c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a1a      	ldr	r2, [r3, #32]
 8006a6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10f      	bne.n	8006ac4 <HAL_TIMEx_PWMN_Stop+0x78>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	f240 4344 	movw	r3, #1092	@ 0x444
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIMEx_PWMN_Stop+0x78>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0201 	bic.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <HAL_TIMEx_PWMN_Stop+0x88>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad2:	e013      	b.n	8006afc <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d104      	bne.n	8006ae4 <HAL_TIMEx_PWMN_Stop+0x98>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ae2:	e00b      	b.n	8006afc <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d104      	bne.n	8006af4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006af2:	e003      	b.n	8006afc <HAL_TIMEx_PWMN_Stop+0xb0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e06d      	b.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10c      	bne.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40001800 	.word	0x40001800

08006c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e065      	b.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a16      	ldr	r2, [pc, #88]	@ (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a14      	ldr	r2, [pc, #80]	@ (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d115      	bne.n	8006cfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400

08006d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	2204      	movs	r2, #4
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	401a      	ands	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	fa01 f303 	lsl.w	r3, r1, r3
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e040      	b.n	8006e3a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fb f971 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2224      	movs	r2, #36	@ 0x24
 8006dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fed1 	bl	8007b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc6a 	bl	80076cc <UART_SetConfig>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e01b      	b.n	8006e3a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 ff50 	bl	8007cd8 <UART_CheckIdleState>
 8006e38:	4603      	mov	r3, r0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e02f      	b.n	8006eb4 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2224      	movs	r2, #36	@ 0x24
 8006e58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fb f9e0 	bl	8002248 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d165      	bne.n	8006f9e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_UART_Transmit_DMA+0x22>
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e05e      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2221      	movs	r2, #33	@ 0x21
 8006f04:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d027      	beq.n	8006f5e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f12:	4a25      	ldr	r2, [pc, #148]	@ (8006fa8 <HAL_UART_Transmit_DMA+0xec>)
 8006f14:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	4a24      	ldr	r2, [pc, #144]	@ (8006fac <HAL_UART_Transmit_DMA+0xf0>)
 8006f1c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	4a23      	ldr	r2, [pc, #140]	@ (8006fb0 <HAL_UART_Transmit_DMA+0xf4>)
 8006f24:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f36:	4619      	mov	r1, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3328      	adds	r3, #40	@ 0x28
 8006f3e:	461a      	mov	r2, r3
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	f7fc f83d 	bl	8002fc0 <HAL_DMA_Start_IT>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d008      	beq.n	8006f5e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e020      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	613b      	str	r3, [r7, #16]
   return(result);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f86:	623a      	str	r2, [r7, #32]
 8006f88:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	69f9      	ldr	r1, [r7, #28]
 8006f8c:	6a3a      	ldr	r2, [r7, #32]
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	@ 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	080080b5 	.word	0x080080b5
 8006fac:	0800814b 	.word	0x0800814b
 8006fb0:	080082cd 	.word	0x080082cd

08006fb4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b090      	sub	sp, #64	@ 0x40
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd4:	2b80      	cmp	r3, #128	@ 0x80
 8006fd6:	d139      	bne.n	800704c <HAL_UART_DMAStop+0x98>
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fda:	2b21      	cmp	r3, #33	@ 0x21
 8006fdc:	d136      	bne.n	800704c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	2b00      	cmp	r3, #0
 8007018:	d015      	beq.n	8007046 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701e:	4618      	mov	r0, r3
 8007020:	f7fc f82e 	bl	8003080 <HAL_DMA_Abort>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702e:	4618      	mov	r0, r3
 8007030:	f7fc fa42 	bl	80034b8 <HAL_DMA_GetError>
 8007034:	4603      	mov	r3, r0
 8007036:	2b20      	cmp	r3, #32
 8007038:	d105      	bne.n	8007046 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2210      	movs	r2, #16
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e044      	b.n	80070d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 ffaa 	bl	8007fa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b40      	cmp	r3, #64	@ 0x40
 8007058:	d139      	bne.n	80070ce <HAL_UART_DMAStop+0x11a>
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	2b22      	cmp	r3, #34	@ 0x22
 800705e:	d136      	bne.n	80070ce <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007080:	61ba      	str	r2, [r7, #24]
 8007082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6979      	ldr	r1, [r7, #20]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	613b      	str	r3, [r7, #16]
   return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fb ffed 	bl	8003080 <HAL_DMA_Abort>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fc fa01 	bl	80034b8 <HAL_DMA_GetError>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d105      	bne.n	80070c8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2210      	movs	r2, #16
 80070c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e003      	b.n	80070d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 ff8f 	bl	8007fec <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3740      	adds	r7, #64	@ 0x40
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b0ba      	sub	sp, #232	@ 0xe8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007102:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007106:	4013      	ands	r3, r2
 8007108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800710c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d115      	bne.n	8007140 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8297 	beq.w	8007664 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
      }
      return;
 800713e:	e291      	b.n	8007664 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8117 	beq.w	8007378 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800715a:	4b85      	ldr	r3, [pc, #532]	@ (8007370 <HAL_UART_IRQHandler+0x298>)
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 810a 	beq.w	8007378 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <HAL_UART_IRQHandler+0xbc>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2201      	movs	r2, #1
 8007182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800718a:	f043 0201 	orr.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <HAL_UART_IRQHandler+0xec>
 80071a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2202      	movs	r2, #2
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ba:	f043 0204 	orr.w	r2, r3, #4
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <HAL_UART_IRQHandler+0x11c>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2204      	movs	r2, #4
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ea:	f043 0202 	orr.w	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d017      	beq.n	8007230 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800720c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007210:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2208      	movs	r2, #8
 800721e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007226:	f043 0208 	orr.w	r2, r3, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_UART_IRQHandler+0x18a>
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00c      	beq.n	8007262 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007258:	f043 0220 	orr.w	r2, r3, #32
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 81fd 	beq.w	8007668 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800726e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800727a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800729c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072aa:	2b40      	cmp	r3, #64	@ 0x40
 80072ac:	d005      	beq.n	80072ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04f      	beq.n	800735a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fe96 	bl	8007fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	d141      	bne.n	8007352 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1d9      	bne.n	80072ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800731e:	2b00      	cmp	r3, #0
 8007320:	d013      	beq.n	800734a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007326:	4a13      	ldr	r2, [pc, #76]	@ (8007374 <HAL_UART_IRQHandler+0x29c>)
 8007328:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	4618      	mov	r0, r3
 8007330:	f7fb ff16 	bl	8003160 <HAL_DMA_Abort_IT>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	e00f      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9b4 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	e00b      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9b0 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	e007      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9ac 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007368:	e17e      	b.n	8007668 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736a:	bf00      	nop
    return;
 800736c:	e17c      	b.n	8007668 <HAL_UART_IRQHandler+0x590>
 800736e:	bf00      	nop
 8007370:	04000120 	.word	0x04000120
 8007374:	0800834b 	.word	0x0800834b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 814c 	bne.w	800761a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8145 	beq.w	800761a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 813e 	beq.w	800761a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2210      	movs	r2, #16
 80073a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	f040 80b6 	bne.w	8007522 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8150 	beq.w	800766c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073d6:	429a      	cmp	r2, r3
 80073d8:	f080 8148 	bcs.w	800766c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f0:	f000 8086 	beq.w	8007500 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800740c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800741e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007422:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800742a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1da      	bne.n	80073f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800744e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007462:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007466:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800746a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e1      	bne.n	800743e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800748a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800748c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800749e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d0:	f023 0310 	bic.w	r3, r3, #16
 80074d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e4      	bne.n	80074c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fb fdc0 	bl	8003080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007512:	b29b      	uxth	r3, r3
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7f9 feca 	bl	80012b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007520:	e0a4      	b.n	800766c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800752e:	b29b      	uxth	r3, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8096 	beq.w	8007670 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8091 	beq.w	8007670 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800755c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007562:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e4      	bne.n	800754e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	623b      	str	r3, [r7, #32]
   return(result);
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80075aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	69b9      	ldr	r1, [r7, #24]
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e4      	bne.n	80075d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800760c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7f9 fe4e 	bl	80012b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007618:	e02a      	b.n	8007670 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00e      	beq.n	8007644 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01c      	beq.n	8007674 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
    }
    return;
 8007642:	e017      	b.n	8007674 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_UART_IRQHandler+0x59e>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fe8a 	bl	8008376 <UART_EndTransmit_IT>
    return;
 8007662:	e008      	b.n	8007676 <HAL_UART_IRQHandler+0x59e>
      return;
 8007664:	bf00      	nop
 8007666:	e006      	b.n	8007676 <HAL_UART_IRQHandler+0x59e>
    return;
 8007668:	bf00      	nop
 800766a:	e004      	b.n	8007676 <HAL_UART_IRQHandler+0x59e>
      return;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <HAL_UART_IRQHandler+0x59e>
      return;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <HAL_UART_IRQHandler+0x59e>
    return;
 8007674:	bf00      	nop
  }

}
 8007676:	37e8      	adds	r7, #232	@ 0xe8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4ba6      	ldr	r3, [pc, #664]	@ (8007990 <UART_SetConfig+0x2c4>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	6979      	ldr	r1, [r7, #20]
 8007700:	430b      	orrs	r3, r1
 8007702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	430a      	orrs	r2, r1
 800773c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a94      	ldr	r2, [pc, #592]	@ (8007994 <UART_SetConfig+0x2c8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d120      	bne.n	800778a <UART_SetConfig+0xbe>
 8007748:	4b93      	ldr	r3, [pc, #588]	@ (8007998 <UART_SetConfig+0x2cc>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b03      	cmp	r3, #3
 8007754:	d816      	bhi.n	8007784 <UART_SetConfig+0xb8>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <UART_SetConfig+0x90>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	0800776d 	.word	0x0800776d
 8007760:	08007779 	.word	0x08007779
 8007764:	08007773 	.word	0x08007773
 8007768:	0800777f 	.word	0x0800777f
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e150      	b.n	8007a14 <UART_SetConfig+0x348>
 8007772:	2302      	movs	r3, #2
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e14d      	b.n	8007a14 <UART_SetConfig+0x348>
 8007778:	2304      	movs	r3, #4
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e14a      	b.n	8007a14 <UART_SetConfig+0x348>
 800777e:	2308      	movs	r3, #8
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e147      	b.n	8007a14 <UART_SetConfig+0x348>
 8007784:	2310      	movs	r3, #16
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e144      	b.n	8007a14 <UART_SetConfig+0x348>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a83      	ldr	r2, [pc, #524]	@ (800799c <UART_SetConfig+0x2d0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d132      	bne.n	80077fa <UART_SetConfig+0x12e>
 8007794:	4b80      	ldr	r3, [pc, #512]	@ (8007998 <UART_SetConfig+0x2cc>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779a:	f003 030c 	and.w	r3, r3, #12
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d828      	bhi.n	80077f4 <UART_SetConfig+0x128>
 80077a2:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <UART_SetConfig+0xdc>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077dd 	.word	0x080077dd
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	080077f5 	.word	0x080077f5
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077e9 	.word	0x080077e9
 80077bc:	080077f5 	.word	0x080077f5
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	080077e3 	.word	0x080077e3
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	080077ef 	.word	0x080077ef
 80077dc:	2300      	movs	r3, #0
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e118      	b.n	8007a14 <UART_SetConfig+0x348>
 80077e2:	2302      	movs	r3, #2
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e115      	b.n	8007a14 <UART_SetConfig+0x348>
 80077e8:	2304      	movs	r3, #4
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e112      	b.n	8007a14 <UART_SetConfig+0x348>
 80077ee:	2308      	movs	r3, #8
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e10f      	b.n	8007a14 <UART_SetConfig+0x348>
 80077f4:	2310      	movs	r3, #16
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e10c      	b.n	8007a14 <UART_SetConfig+0x348>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a68      	ldr	r2, [pc, #416]	@ (80079a0 <UART_SetConfig+0x2d4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d120      	bne.n	8007846 <UART_SetConfig+0x17a>
 8007804:	4b64      	ldr	r3, [pc, #400]	@ (8007998 <UART_SetConfig+0x2cc>)
 8007806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800780e:	2b30      	cmp	r3, #48	@ 0x30
 8007810:	d013      	beq.n	800783a <UART_SetConfig+0x16e>
 8007812:	2b30      	cmp	r3, #48	@ 0x30
 8007814:	d814      	bhi.n	8007840 <UART_SetConfig+0x174>
 8007816:	2b20      	cmp	r3, #32
 8007818:	d009      	beq.n	800782e <UART_SetConfig+0x162>
 800781a:	2b20      	cmp	r3, #32
 800781c:	d810      	bhi.n	8007840 <UART_SetConfig+0x174>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <UART_SetConfig+0x15c>
 8007822:	2b10      	cmp	r3, #16
 8007824:	d006      	beq.n	8007834 <UART_SetConfig+0x168>
 8007826:	e00b      	b.n	8007840 <UART_SetConfig+0x174>
 8007828:	2300      	movs	r3, #0
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e0f2      	b.n	8007a14 <UART_SetConfig+0x348>
 800782e:	2302      	movs	r3, #2
 8007830:	77fb      	strb	r3, [r7, #31]
 8007832:	e0ef      	b.n	8007a14 <UART_SetConfig+0x348>
 8007834:	2304      	movs	r3, #4
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e0ec      	b.n	8007a14 <UART_SetConfig+0x348>
 800783a:	2308      	movs	r3, #8
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e0e9      	b.n	8007a14 <UART_SetConfig+0x348>
 8007840:	2310      	movs	r3, #16
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e0e6      	b.n	8007a14 <UART_SetConfig+0x348>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a56      	ldr	r2, [pc, #344]	@ (80079a4 <UART_SetConfig+0x2d8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d120      	bne.n	8007892 <UART_SetConfig+0x1c6>
 8007850:	4b51      	ldr	r3, [pc, #324]	@ (8007998 <UART_SetConfig+0x2cc>)
 8007852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800785a:	2bc0      	cmp	r3, #192	@ 0xc0
 800785c:	d013      	beq.n	8007886 <UART_SetConfig+0x1ba>
 800785e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007860:	d814      	bhi.n	800788c <UART_SetConfig+0x1c0>
 8007862:	2b80      	cmp	r3, #128	@ 0x80
 8007864:	d009      	beq.n	800787a <UART_SetConfig+0x1ae>
 8007866:	2b80      	cmp	r3, #128	@ 0x80
 8007868:	d810      	bhi.n	800788c <UART_SetConfig+0x1c0>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <UART_SetConfig+0x1a8>
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d006      	beq.n	8007880 <UART_SetConfig+0x1b4>
 8007872:	e00b      	b.n	800788c <UART_SetConfig+0x1c0>
 8007874:	2300      	movs	r3, #0
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e0cc      	b.n	8007a14 <UART_SetConfig+0x348>
 800787a:	2302      	movs	r3, #2
 800787c:	77fb      	strb	r3, [r7, #31]
 800787e:	e0c9      	b.n	8007a14 <UART_SetConfig+0x348>
 8007880:	2304      	movs	r3, #4
 8007882:	77fb      	strb	r3, [r7, #31]
 8007884:	e0c6      	b.n	8007a14 <UART_SetConfig+0x348>
 8007886:	2308      	movs	r3, #8
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e0c3      	b.n	8007a14 <UART_SetConfig+0x348>
 800788c:	2310      	movs	r3, #16
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e0c0      	b.n	8007a14 <UART_SetConfig+0x348>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a44      	ldr	r2, [pc, #272]	@ (80079a8 <UART_SetConfig+0x2dc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d125      	bne.n	80078e8 <UART_SetConfig+0x21c>
 800789c:	4b3e      	ldr	r3, [pc, #248]	@ (8007998 <UART_SetConfig+0x2cc>)
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078aa:	d017      	beq.n	80078dc <UART_SetConfig+0x210>
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b0:	d817      	bhi.n	80078e2 <UART_SetConfig+0x216>
 80078b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b6:	d00b      	beq.n	80078d0 <UART_SetConfig+0x204>
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078bc:	d811      	bhi.n	80078e2 <UART_SetConfig+0x216>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <UART_SetConfig+0x1fe>
 80078c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c6:	d006      	beq.n	80078d6 <UART_SetConfig+0x20a>
 80078c8:	e00b      	b.n	80078e2 <UART_SetConfig+0x216>
 80078ca:	2300      	movs	r3, #0
 80078cc:	77fb      	strb	r3, [r7, #31]
 80078ce:	e0a1      	b.n	8007a14 <UART_SetConfig+0x348>
 80078d0:	2302      	movs	r3, #2
 80078d2:	77fb      	strb	r3, [r7, #31]
 80078d4:	e09e      	b.n	8007a14 <UART_SetConfig+0x348>
 80078d6:	2304      	movs	r3, #4
 80078d8:	77fb      	strb	r3, [r7, #31]
 80078da:	e09b      	b.n	8007a14 <UART_SetConfig+0x348>
 80078dc:	2308      	movs	r3, #8
 80078de:	77fb      	strb	r3, [r7, #31]
 80078e0:	e098      	b.n	8007a14 <UART_SetConfig+0x348>
 80078e2:	2310      	movs	r3, #16
 80078e4:	77fb      	strb	r3, [r7, #31]
 80078e6:	e095      	b.n	8007a14 <UART_SetConfig+0x348>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a2f      	ldr	r2, [pc, #188]	@ (80079ac <UART_SetConfig+0x2e0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d125      	bne.n	800793e <UART_SetConfig+0x272>
 80078f2:	4b29      	ldr	r3, [pc, #164]	@ (8007998 <UART_SetConfig+0x2cc>)
 80078f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007900:	d017      	beq.n	8007932 <UART_SetConfig+0x266>
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007906:	d817      	bhi.n	8007938 <UART_SetConfig+0x26c>
 8007908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800790c:	d00b      	beq.n	8007926 <UART_SetConfig+0x25a>
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007912:	d811      	bhi.n	8007938 <UART_SetConfig+0x26c>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <UART_SetConfig+0x254>
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791c:	d006      	beq.n	800792c <UART_SetConfig+0x260>
 800791e:	e00b      	b.n	8007938 <UART_SetConfig+0x26c>
 8007920:	2301      	movs	r3, #1
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e076      	b.n	8007a14 <UART_SetConfig+0x348>
 8007926:	2302      	movs	r3, #2
 8007928:	77fb      	strb	r3, [r7, #31]
 800792a:	e073      	b.n	8007a14 <UART_SetConfig+0x348>
 800792c:	2304      	movs	r3, #4
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e070      	b.n	8007a14 <UART_SetConfig+0x348>
 8007932:	2308      	movs	r3, #8
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e06d      	b.n	8007a14 <UART_SetConfig+0x348>
 8007938:	2310      	movs	r3, #16
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e06a      	b.n	8007a14 <UART_SetConfig+0x348>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1b      	ldr	r2, [pc, #108]	@ (80079b0 <UART_SetConfig+0x2e4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d138      	bne.n	80079ba <UART_SetConfig+0x2ee>
 8007948:	4b13      	ldr	r3, [pc, #76]	@ (8007998 <UART_SetConfig+0x2cc>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007956:	d017      	beq.n	8007988 <UART_SetConfig+0x2bc>
 8007958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800795c:	d82a      	bhi.n	80079b4 <UART_SetConfig+0x2e8>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007962:	d00b      	beq.n	800797c <UART_SetConfig+0x2b0>
 8007964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007968:	d824      	bhi.n	80079b4 <UART_SetConfig+0x2e8>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <UART_SetConfig+0x2aa>
 800796e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007972:	d006      	beq.n	8007982 <UART_SetConfig+0x2b6>
 8007974:	e01e      	b.n	80079b4 <UART_SetConfig+0x2e8>
 8007976:	2300      	movs	r3, #0
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e04b      	b.n	8007a14 <UART_SetConfig+0x348>
 800797c:	2302      	movs	r3, #2
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e048      	b.n	8007a14 <UART_SetConfig+0x348>
 8007982:	2304      	movs	r3, #4
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e045      	b.n	8007a14 <UART_SetConfig+0x348>
 8007988:	2308      	movs	r3, #8
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e042      	b.n	8007a14 <UART_SetConfig+0x348>
 800798e:	bf00      	nop
 8007990:	efff69f3 	.word	0xefff69f3
 8007994:	40011000 	.word	0x40011000
 8007998:	40023800 	.word	0x40023800
 800799c:	40004400 	.word	0x40004400
 80079a0:	40004800 	.word	0x40004800
 80079a4:	40004c00 	.word	0x40004c00
 80079a8:	40005000 	.word	0x40005000
 80079ac:	40011400 	.word	0x40011400
 80079b0:	40007800 	.word	0x40007800
 80079b4:	2310      	movs	r3, #16
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e02c      	b.n	8007a14 <UART_SetConfig+0x348>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a72      	ldr	r2, [pc, #456]	@ (8007b88 <UART_SetConfig+0x4bc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d125      	bne.n	8007a10 <UART_SetConfig+0x344>
 80079c4:	4b71      	ldr	r3, [pc, #452]	@ (8007b8c <UART_SetConfig+0x4c0>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80079ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80079d2:	d017      	beq.n	8007a04 <UART_SetConfig+0x338>
 80079d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80079d8:	d817      	bhi.n	8007a0a <UART_SetConfig+0x33e>
 80079da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079de:	d00b      	beq.n	80079f8 <UART_SetConfig+0x32c>
 80079e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e4:	d811      	bhi.n	8007a0a <UART_SetConfig+0x33e>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <UART_SetConfig+0x326>
 80079ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ee:	d006      	beq.n	80079fe <UART_SetConfig+0x332>
 80079f0:	e00b      	b.n	8007a0a <UART_SetConfig+0x33e>
 80079f2:	2300      	movs	r3, #0
 80079f4:	77fb      	strb	r3, [r7, #31]
 80079f6:	e00d      	b.n	8007a14 <UART_SetConfig+0x348>
 80079f8:	2302      	movs	r3, #2
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e00a      	b.n	8007a14 <UART_SetConfig+0x348>
 80079fe:	2304      	movs	r3, #4
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e007      	b.n	8007a14 <UART_SetConfig+0x348>
 8007a04:	2308      	movs	r3, #8
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e004      	b.n	8007a14 <UART_SetConfig+0x348>
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e001      	b.n	8007a14 <UART_SetConfig+0x348>
 8007a10:	2310      	movs	r3, #16
 8007a12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a1c:	d15b      	bne.n	8007ad6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007a1e:	7ffb      	ldrb	r3, [r7, #31]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d828      	bhi.n	8007a76 <UART_SetConfig+0x3aa>
 8007a24:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <UART_SetConfig+0x360>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a77 	.word	0x08007a77
 8007a3c:	08007a67 	.word	0x08007a67
 8007a40:	08007a77 	.word	0x08007a77
 8007a44:	08007a77 	.word	0x08007a77
 8007a48:	08007a77 	.word	0x08007a77
 8007a4c:	08007a6f 	.word	0x08007a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a50:	f7fc fdf0 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8007a54:	61b8      	str	r0, [r7, #24]
        break;
 8007a56:	e013      	b.n	8007a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a58:	f7fc fe00 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8007a5c:	61b8      	str	r0, [r7, #24]
        break;
 8007a5e:	e00f      	b.n	8007a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a60:	4b4b      	ldr	r3, [pc, #300]	@ (8007b90 <UART_SetConfig+0x4c4>)
 8007a62:	61bb      	str	r3, [r7, #24]
        break;
 8007a64:	e00c      	b.n	8007a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a66:	f7fc fcd5 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8007a6a:	61b8      	str	r0, [r7, #24]
        break;
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a72:	61bb      	str	r3, [r7, #24]
        break;
 8007a74:	e004      	b.n	8007a80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8007a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d074      	beq.n	8007b70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	005a      	lsls	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	441a      	add	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b0f      	cmp	r3, #15
 8007aa0:	d916      	bls.n	8007ad0 <UART_SetConfig+0x404>
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa8:	d212      	bcs.n	8007ad0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f023 030f 	bic.w	r3, r3, #15
 8007ab2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	89fa      	ldrh	r2, [r7, #14]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e04f      	b.n	8007b70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	77bb      	strb	r3, [r7, #30]
 8007ad4:	e04c      	b.n	8007b70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d828      	bhi.n	8007b2e <UART_SetConfig+0x462>
 8007adc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x418>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	08007b2f 	.word	0x08007b2f
 8007af4:	08007b1f 	.word	0x08007b1f
 8007af8:	08007b2f 	.word	0x08007b2f
 8007afc:	08007b2f 	.word	0x08007b2f
 8007b00:	08007b2f 	.word	0x08007b2f
 8007b04:	08007b27 	.word	0x08007b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fc fd94 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61b8      	str	r0, [r7, #24]
        break;
 8007b0e:	e013      	b.n	8007b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b10:	f7fc fda4 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8007b14:	61b8      	str	r0, [r7, #24]
        break;
 8007b16:	e00f      	b.n	8007b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b1d      	ldr	r3, [pc, #116]	@ (8007b90 <UART_SetConfig+0x4c4>)
 8007b1a:	61bb      	str	r3, [r7, #24]
        break;
 8007b1c:	e00c      	b.n	8007b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1e:	f7fc fc79 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8007b22:	61b8      	str	r0, [r7, #24]
        break;
 8007b24:	e008      	b.n	8007b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2a:	61bb      	str	r3, [r7, #24]
        break;
 8007b2c:	e004      	b.n	8007b38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	77bb      	strb	r3, [r7, #30]
        break;
 8007b36:	bf00      	nop
    }

    if (pclk != 0U)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d018      	beq.n	8007b70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	085a      	lsrs	r2, r3, #1
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	441a      	add	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b0f      	cmp	r3, #15
 8007b56:	d909      	bls.n	8007b6c <UART_SetConfig+0x4a0>
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b5e:	d205      	bcs.n	8007b6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	e001      	b.n	8007b70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40007c00 	.word	0x40007c00
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	00f42400 	.word	0x00f42400

08007b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01a      	beq.n	8007caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c92:	d10a      	bne.n	8007caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]
  }
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08c      	sub	sp, #48	@ 0x30
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ce8:	f7fa fc0e 	bl	8002508 <HAL_GetTick>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d12e      	bne.n	8007d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	2200      	movs	r2, #0
 8007d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f83b 	bl	8007d86 <UART_WaitOnFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d021      	beq.n	8007d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	617b      	str	r3, [r7, #20]
   return(result);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e011      	b.n	8007d7e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	@ 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	603b      	str	r3, [r7, #0]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d96:	e04f      	b.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d04b      	beq.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da0:	f7fa fbb2 	bl	8002508 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d302      	bcc.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e04e      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d037      	beq.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b80      	cmp	r3, #128	@ 0x80
 8007dcc:	d034      	beq.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d031      	beq.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d110      	bne.n	8007e04 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2208      	movs	r2, #8
 8007de8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f8fe 	bl	8007fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2208      	movs	r2, #8
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e029      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e12:	d111      	bne.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f8e4 	bl	8007fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e00f      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d0a0      	beq.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b096      	sub	sp, #88	@ 0x58
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2222      	movs	r2, #34	@ 0x22
 8007e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d028      	beq.n	8007ee6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e98:	4a3e      	ldr	r2, [pc, #248]	@ (8007f94 <UART_Start_Receive_DMA+0x134>)
 8007e9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8007f98 <UART_Start_Receive_DMA+0x138>)
 8007ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8007f9c <UART_Start_Receive_DMA+0x13c>)
 8007eaa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3324      	adds	r3, #36	@ 0x24
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	f7fb f87a 	bl	8002fc0 <HAL_DMA_Start_IT>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2210      	movs	r2, #16
 8007ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e051      	b.n	8007f8a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f40:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	613b      	str	r3, [r7, #16]
   return(result);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f74:	623a      	str	r2, [r7, #32]
 8007f76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e5      	bne.n	8007f54 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3758      	adds	r7, #88	@ 0x58
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	08008167 	.word	0x08008167
 8007f98:	0800828f 	.word	0x0800828f
 8007f9c:	080082cd 	.word	0x080082cd

08007fa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	@ 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007fe0:	bf00      	nop
 8007fe2:	3724      	adds	r7, #36	@ 0x24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b095      	sub	sp, #84	@ 0x54
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008012:	643b      	str	r3, [r7, #64]	@ 0x40
 8008014:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	61fb      	str	r3, [r7, #28]
   return(result);
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800804c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e5      	bne.n	8008026 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800805e:	2b01      	cmp	r3, #1
 8008060:	d118      	bne.n	8008094 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 0310 	bic.w	r3, r3, #16
 8008076:	647b      	str	r3, [r7, #68]	@ 0x44
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	6979      	ldr	r1, [r7, #20]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	613b      	str	r3, [r7, #16]
   return(result);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e6      	bne.n	8008062 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080a8:	bf00      	nop
 80080aa:	3754      	adds	r7, #84	@ 0x54
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b090      	sub	sp, #64	@ 0x40
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d037      	beq.n	800813c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80080cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	623b      	str	r3, [r7, #32]
   return(result);
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80080f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e5      	bne.n	80080d4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	60fb      	str	r3, [r7, #12]
   return(result);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811c:	637b      	str	r3, [r7, #52]	@ 0x34
 800811e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	69b9      	ldr	r1, [r7, #24]
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	617b      	str	r3, [r7, #20]
   return(result);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e6      	bne.n	8008108 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800813a:	e002      	b.n	8008142 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800813c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800813e:	f7f9 f87f 	bl	8001240 <HAL_UART_TxCpltCallback>
}
 8008142:	bf00      	nop
 8008144:	3740      	adds	r7, #64	@ 0x40
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008156:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff fa8f 	bl	800767c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b09c      	sub	sp, #112	@ 0x70
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800817c:	d071      	beq.n	8008262 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800817e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008180:	2200      	movs	r2, #0
 8008182:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800819a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800819c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80081d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80081d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80081da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e5      	bne.n	80081b8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3308      	adds	r3, #8
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	623b      	str	r3, [r7, #32]
   return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008202:	663b      	str	r3, [r7, #96]	@ 0x60
 8008204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800820c:	633a      	str	r2, [r7, #48]	@ 0x30
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e5      	bne.n	80081ec <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008222:	2220      	movs	r2, #32
 8008224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800822a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800822c:	2b01      	cmp	r3, #1
 800822e:	d118      	bne.n	8008262 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	60fb      	str	r3, [r7, #12]
   return(result);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f023 0310 	bic.w	r3, r3, #16
 8008244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	69b9      	ldr	r1, [r7, #24]
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	617b      	str	r3, [r7, #20]
   return(result);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e6      	bne.n	8008230 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008264:	2200      	movs	r2, #0
 8008266:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800826a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800826c:	2b01      	cmp	r3, #1
 800826e:	d107      	bne.n	8008280 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008272:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008276:	4619      	mov	r1, r3
 8008278:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800827a:	f7f9 f81b 	bl	80012b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800827e:	e002      	b.n	8008286 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008280:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008282:	f7ff fa05 	bl	8007690 <HAL_UART_RxCpltCallback>
}
 8008286:	bf00      	nop
 8008288:	3770      	adds	r7, #112	@ 0x70
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d109      	bne.n	80082be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4619      	mov	r1, r3
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f7f8 fffc 	bl	80012b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082bc:	e002      	b.n	80082c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff f9f0 	bl	80076a4 <HAL_UART_RxHalfCpltCallback>
}
 80082c4:	bf00      	nop
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f2:	2b80      	cmp	r3, #128	@ 0x80
 80082f4:	d109      	bne.n	800830a <UART_DMAError+0x3e>
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b21      	cmp	r3, #33	@ 0x21
 80082fa:	d106      	bne.n	800830a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008304:	6978      	ldr	r0, [r7, #20]
 8008306:	f7ff fe4b 	bl	8007fa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008314:	2b40      	cmp	r3, #64	@ 0x40
 8008316:	d109      	bne.n	800832c <UART_DMAError+0x60>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b22      	cmp	r3, #34	@ 0x22
 800831c:	d106      	bne.n	800832c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2200      	movs	r2, #0
 8008322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008326:	6978      	ldr	r0, [r7, #20]
 8008328:	f7ff fe60 	bl	8007fec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008332:	f043 0210 	orr.w	r2, r3, #16
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800833c:	6978      	ldr	r0, [r7, #20]
 800833e:	f7ff f9bb 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008342:	bf00      	nop
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff f9a5 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b088      	sub	sp, #32
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	60bb      	str	r3, [r7, #8]
   return(result);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6979      	ldr	r1, [r7, #20]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	613b      	str	r3, [r7, #16]
   return(result);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7f8 ff3f 	bl	8001240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c2:	bf00      	nop
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b08c      	sub	sp, #48	@ 0x30
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d142      	bne.n	8008468 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e03b      	b.n	800846a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	461a      	mov	r2, r3
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff fd2b 	bl	8007e60 <UART_Start_Receive_DMA>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008410:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008414:	2b00      	cmp	r3, #0
 8008416:	d124      	bne.n	8008462 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11d      	bne.n	800845c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2210      	movs	r2, #16
 8008426:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	617b      	str	r3, [r7, #20]
   return(result);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f043 0310 	orr.w	r3, r3, #16
 800843c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	627b      	str	r3, [r7, #36]	@ 0x24
 8008448:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6a39      	ldr	r1, [r7, #32]
 800844c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	61fb      	str	r3, [r7, #28]
   return(result);
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e6      	bne.n	8008428 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800845a:	e002      	b.n	8008462 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008466:	e000      	b.n	800846a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008468:	2302      	movs	r3, #2
  }
}
 800846a:	4618      	mov	r0, r3
 800846c:	3730      	adds	r7, #48	@ 0x30
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008486:	f3ef 8305 	mrs	r3, IPSR
 800848a:	60bb      	str	r3, [r7, #8]
  return(result);
 800848c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10f      	bne.n	80084b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008492:	f3ef 8310 	mrs	r3, PRIMASK
 8008496:	607b      	str	r3, [r7, #4]
  return(result);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d105      	bne.n	80084aa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800849e:	f3ef 8311 	mrs	r3, BASEPRI
 80084a2:	603b      	str	r3, [r7, #0]
  return(result);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <osKernelInitialize+0x3a>
 80084aa:	4b0e      	ldr	r3, [pc, #56]	@ (80084e4 <osKernelInitialize+0x64>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d103      	bne.n	80084ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80084b2:	f06f 0305 	mvn.w	r3, #5
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	e00c      	b.n	80084d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084ba:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <osKernelInitialize+0x64>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d105      	bne.n	80084ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084c2:	4b08      	ldr	r3, [pc, #32]	@ (80084e4 <osKernelInitialize+0x64>)
 80084c4:	2201      	movs	r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e002      	b.n	80084d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80084ce:	f04f 33ff 	mov.w	r3, #4294967295
 80084d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000504 	.word	0x20000504

080084e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80084f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10f      	bne.n	800851a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084fa:	f3ef 8310 	mrs	r3, PRIMASK
 80084fe:	607b      	str	r3, [r7, #4]
  return(result);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008506:	f3ef 8311 	mrs	r3, BASEPRI
 800850a:	603b      	str	r3, [r7, #0]
  return(result);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <osKernelStart+0x3a>
 8008512:	4b0f      	ldr	r3, [pc, #60]	@ (8008550 <osKernelStart+0x68>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <osKernelStart+0x3a>
    stat = osErrorISR;
 800851a:	f06f 0305 	mvn.w	r3, #5
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e010      	b.n	8008544 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008522:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <osKernelStart+0x68>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d109      	bne.n	800853e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800852a:	f7ff ffa2 	bl	8008472 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800852e:	4b08      	ldr	r3, [pc, #32]	@ (8008550 <osKernelStart+0x68>)
 8008530:	2202      	movs	r2, #2
 8008532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008534:	f001 f8e2 	bl	80096fc <vTaskStartScheduler>
      stat = osOK;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e002      	b.n	8008544 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000504 	.word	0x20000504

08008554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b090      	sub	sp, #64	@ 0x40
 8008558:	af04      	add	r7, sp, #16
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008564:	f3ef 8305 	mrs	r3, IPSR
 8008568:	61fb      	str	r3, [r7, #28]
  return(result);
 800856a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 808f 	bne.w	8008690 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008572:	f3ef 8310 	mrs	r3, PRIMASK
 8008576:	61bb      	str	r3, [r7, #24]
  return(result);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800857e:	f3ef 8311 	mrs	r3, BASEPRI
 8008582:	617b      	str	r3, [r7, #20]
  return(result);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <osThreadNew+0x3e>
 800858a:	4b44      	ldr	r3, [pc, #272]	@ (800869c <osThreadNew+0x148>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d07e      	beq.n	8008690 <osThreadNew+0x13c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d07b      	beq.n	8008690 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008598:	2380      	movs	r3, #128	@ 0x80
 800859a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800859c:	2318      	movs	r3, #24
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80085a4:	f04f 33ff 	mov.w	r3, #4294967295
 80085a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d045      	beq.n	800863c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <osThreadNew+0x6a>
        name = attr->name;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d008      	beq.n	80085e4 <osThreadNew+0x90>
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	2b38      	cmp	r3, #56	@ 0x38
 80085d6:	d805      	bhi.n	80085e4 <osThreadNew+0x90>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <osThreadNew+0x94>
        return (NULL);
 80085e4:	2300      	movs	r3, #0
 80085e6:	e054      	b.n	8008692 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	089b      	lsrs	r3, r3, #2
 80085f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00e      	beq.n	800861e <osThreadNew+0xca>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2ba7      	cmp	r3, #167	@ 0xa7
 8008606:	d90a      	bls.n	800861e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800860c:	2b00      	cmp	r3, #0
 800860e:	d006      	beq.n	800861e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <osThreadNew+0xca>
        mem = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	623b      	str	r3, [r7, #32]
 800861c:	e010      	b.n	8008640 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <osThreadNew+0xec>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d108      	bne.n	8008640 <osThreadNew+0xec>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <osThreadNew+0xec>
          mem = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	623b      	str	r3, [r7, #32]
 800863a:	e001      	b.n	8008640 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d110      	bne.n	8008668 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800864e:	9202      	str	r2, [sp, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fe4f 	bl	8009300 <xTaskCreateStatic>
 8008662:	4603      	mov	r3, r0
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	e013      	b.n	8008690 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d110      	bne.n	8008690 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	b29a      	uxth	r2, r3
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fea3 	bl	80093cc <xTaskCreate>
 8008686:	4603      	mov	r3, r0
 8008688:	2b01      	cmp	r3, #1
 800868a:	d001      	beq.n	8008690 <osThreadNew+0x13c>
          hTask = NULL;
 800868c:	2300      	movs	r3, #0
 800868e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008690:	693b      	ldr	r3, [r7, #16]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3730      	adds	r7, #48	@ 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000504 	.word	0x20000504

080086a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a8:	f3ef 8305 	mrs	r3, IPSR
 80086ac:	613b      	str	r3, [r7, #16]
  return(result);
 80086ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10f      	bne.n	80086d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b4:	f3ef 8310 	mrs	r3, PRIMASK
 80086b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d105      	bne.n	80086cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086c0:	f3ef 8311 	mrs	r3, BASEPRI
 80086c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d007      	beq.n	80086dc <osDelay+0x3c>
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <osDelay+0x58>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d103      	bne.n	80086dc <osDelay+0x3c>
    stat = osErrorISR;
 80086d4:	f06f 0305 	mvn.w	r3, #5
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	e007      	b.n	80086ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 ffd0 	bl	800968c <vTaskDelay>
    }
  }

  return (stat);
 80086ec:	697b      	ldr	r3, [r7, #20]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000504 	.word	0x20000504

080086fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4a07      	ldr	r2, [pc, #28]	@ (8008728 <vApplicationGetIdleTaskMemory+0x2c>)
 800870c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	4a06      	ldr	r2, [pc, #24]	@ (800872c <vApplicationGetIdleTaskMemory+0x30>)
 8008712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2280      	movs	r2, #128	@ 0x80
 8008718:	601a      	str	r2, [r3, #0]
}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000508 	.word	0x20000508
 800872c:	200005b0 	.word	0x200005b0

08008730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a07      	ldr	r2, [pc, #28]	@ (800875c <vApplicationGetTimerTaskMemory+0x2c>)
 8008740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4a06      	ldr	r2, [pc, #24]	@ (8008760 <vApplicationGetTimerTaskMemory+0x30>)
 8008746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800874e:	601a      	str	r2, [r3, #0]
}
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	200007b0 	.word	0x200007b0
 8008760:	20000858 	.word	0x20000858

08008764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f103 0208 	add.w	r2, r3, #8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f04f 32ff 	mov.w	r2, #4294967295
 800877c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f103 0208 	add.w	r2, r3, #8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f103 0208 	add.w	r2, r3, #8
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087be:	b480      	push	{r7}
 80087c0:	b085      	sub	sp, #20
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d103      	bne.n	8008826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e00c      	b.n	8008840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3308      	adds	r3, #8
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e002      	b.n	8008834 <vListInsert+0x2e>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	429a      	cmp	r2, r3
 800883e:	d2f6      	bcs.n	800882e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6892      	ldr	r2, [r2, #8]
 800888e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6852      	ldr	r2, [r2, #4]
 8008898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d103      	bne.n	80088ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	1e5a      	subs	r2, r3, #1
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80088fc:	f002 f8d6 	bl	800aaac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008908:	68f9      	ldr	r1, [r7, #12]
 800890a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	441a      	add	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	3b01      	subs	r3, #1
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008932:	fb01 f303 	mul.w	r3, r1, r3
 8008936:	441a      	add	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	22ff      	movs	r2, #255	@ 0xff
 8008940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	22ff      	movs	r2, #255	@ 0xff
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d114      	bne.n	800897c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d01a      	beq.n	8008990 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3310      	adds	r3, #16
 800895e:	4618      	mov	r0, r3
 8008960:	f001 f978 	bl	8009c54 <xTaskRemoveFromEventList>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d012      	beq.n	8008990 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800896a:	4b0d      	ldr	r3, [pc, #52]	@ (80089a0 <xQueueGenericReset+0xd4>)
 800896c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	e009      	b.n	8008990 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3310      	adds	r3, #16
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff feef 	bl	8008764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3324      	adds	r3, #36	@ 0x24
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff feea 	bl	8008764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008990:	f002 f8c2 	bl	800ab18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008994:	2301      	movs	r3, #1
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08e      	sub	sp, #56	@ 0x38
 80089a8:	af02      	add	r7, sp, #8
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10d      	bne.n	80089d4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	b672      	cpsid	i
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	b662      	cpsie	i
 80089cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089de:	b672      	cpsid	i
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	b662      	cpsie	i
 80089ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <xQueueGenericCreateStatic+0x5e>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <xQueueGenericCreateStatic+0x62>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <xQueueGenericCreateStatic+0x64>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10d      	bne.n	8008a28 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	b672      	cpsid	i
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	b662      	cpsie	i
 8008a20:	623b      	str	r3, [r7, #32]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <xQueueGenericCreateStatic+0x90>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <xQueueGenericCreateStatic+0x94>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <xQueueGenericCreateStatic+0x96>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	b672      	cpsid	i
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	b662      	cpsie	i
 8008a52:	61fb      	str	r3, [r7, #28]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a5a:	2350      	movs	r3, #80	@ 0x50
 8008a5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b50      	cmp	r3, #80	@ 0x50
 8008a62:	d00d      	beq.n	8008a80 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	b672      	cpsid	i
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	b662      	cpsie	i
 8008a78:	61bb      	str	r3, [r7, #24]
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00d      	beq.n	8008aa8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	68b9      	ldr	r1, [r7, #8]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f805 	bl	8008ab2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	@ 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e002      	b.n	8008ad4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	69b8      	ldr	r0, [r7, #24]
 8008ae4:	f7ff fef2 	bl	80088cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	@ 0x38
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10d      	bne.n	8008b30 <xQueueGenericSend+0x38>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <xQueueGenericSend+0x46>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <xQueueGenericSend+0x4a>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueGenericSend+0x4c>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <xQueueGenericSend+0x6c>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d103      	bne.n	8008b72 <xQueueGenericSend+0x7a>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d101      	bne.n	8008b76 <xQueueGenericSend+0x7e>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <xQueueGenericSend+0x80>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <xQueueGenericSend+0xa0>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	b672      	cpsid	i
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	b662      	cpsie	i
 8008b90:	623b      	str	r3, [r7, #32]
}
 8008b92:	bf00      	nop
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b98:	f001 fa2a 	bl	8009ff0 <xTaskGetSchedulerState>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <xQueueGenericSend+0xb0>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <xQueueGenericSend+0xb4>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <xQueueGenericSend+0xb6>
 8008bac:	2300      	movs	r3, #0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10d      	bne.n	8008bce <xQueueGenericSend+0xd6>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	b672      	cpsid	i
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	b662      	cpsie	i
 8008bc6:	61fb      	str	r3, [r7, #28]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bce:	f001 ff6d 	bl	800aaac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <xQueueGenericSend+0xec>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d129      	bne.n	8008c38 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bea:	f000 fa1b 	bl	8009024 <prvCopyDataToQueue>
 8008bee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	3324      	adds	r3, #36	@ 0x24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 f829 	bl	8009c54 <xTaskRemoveFromEventList>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d013      	beq.n	8008c30 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c08:	4b3f      	ldr	r3, [pc, #252]	@ (8008d08 <xQueueGenericSend+0x210>)
 8008c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	e00a      	b.n	8008c30 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c20:	4b39      	ldr	r3, [pc, #228]	@ (8008d08 <xQueueGenericSend+0x210>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c30:	f001 ff72 	bl	800ab18 <vPortExitCritical>
				return pdPASS;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e063      	b.n	8008d00 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d103      	bne.n	8008c46 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c3e:	f001 ff6b 	bl	800ab18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	e05c      	b.n	8008d00 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f865 	bl	8009d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5a:	f001 ff5d 	bl	800ab18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c5e:	f000 fdc1 	bl	80097e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c62:	f001 ff23 	bl	800aaac <vPortEnterCritical>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d103      	bne.n	8008c7c <xQueueGenericSend+0x184>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c88:	d103      	bne.n	8008c92 <xQueueGenericSend+0x19a>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c92:	f001 ff41 	bl	800ab18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c96:	1d3a      	adds	r2, r7, #4
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 f854 	bl	8009d4c <xTaskCheckForTimeOut>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d124      	bne.n	8008cf4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cac:	f000 fab2 	bl	8009214 <prvIsQueueFull>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	3310      	adds	r3, #16
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ff72 	bl	8009ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cc6:	f000 fa3d 	bl	8009144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cca:	f000 fd99 	bl	8009800 <xTaskResumeAll>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f47f af7c 	bne.w	8008bce <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d08 <xQueueGenericSend+0x210>)
 8008cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	e772      	b.n	8008bce <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cea:	f000 fa2b 	bl	8009144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cee:	f000 fd87 	bl	8009800 <xTaskResumeAll>
 8008cf2:	e76c      	b.n	8008bce <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cf6:	f000 fa25 	bl	8009144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfa:	f000 fd81 	bl	8009800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3738      	adds	r7, #56	@ 0x38
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08e      	sub	sp, #56	@ 0x38
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10d      	bne.n	8008d40 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d103      	bne.n	8008d4e <xQueueGenericSendFromISR+0x42>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <xQueueGenericSendFromISR+0x46>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueGenericSendFromISR+0x48>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	623b      	str	r3, [r7, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d103      	bne.n	8008d82 <xQueueGenericSendFromISR+0x76>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <xQueueGenericSendFromISR+0x7a>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <xQueueGenericSendFromISR+0x7c>
 8008d86:	2300      	movs	r3, #0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10d      	bne.n	8008da8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	b672      	cpsid	i
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	b662      	cpsie	i
 8008da0:	61fb      	str	r3, [r7, #28]
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008da8:	f001 ff68 	bl	800ac7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dac:	f3ef 8211 	mrs	r2, BASEPRI
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	b672      	cpsid	i
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	b662      	cpsie	i
 8008dc4:	61ba      	str	r2, [r7, #24]
 8008dc6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d302      	bcc.n	8008dde <xQueueGenericSendFromISR+0xd2>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d12c      	bne.n	8008e38 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	68b9      	ldr	r1, [r7, #8]
 8008dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dee:	f000 f919 	bl	8009024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008df2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d112      	bne.n	8008e22 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d016      	beq.n	8008e32 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	3324      	adds	r3, #36	@ 0x24
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 ff23 	bl	8009c54 <xTaskRemoveFromEventList>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e007      	b.n	8008e32 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	3301      	adds	r3, #1
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	b25a      	sxtb	r2, r3
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e32:	2301      	movs	r3, #1
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008e36:	e001      	b.n	8008e3c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3738      	adds	r7, #56	@ 0x38
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08c      	sub	sp, #48	@ 0x30
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <xQueueReceive+0x36>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	b672      	cpsid	i
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	b662      	cpsie	i
 8008e82:	623b      	str	r3, [r7, #32]
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <xQueueReceive+0x44>
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <xQueueReceive+0x48>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <xQueueReceive+0x4a>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <xQueueReceive+0x6a>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	b672      	cpsid	i
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	b662      	cpsie	i
 8008eb6:	61fb      	str	r3, [r7, #28]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ebe:	f001 f897 	bl	8009ff0 <xTaskGetSchedulerState>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <xQueueReceive+0x7a>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <xQueueReceive+0x7e>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <xQueueReceive+0x80>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10d      	bne.n	8008ef4 <xQueueReceive+0xa0>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	61bb      	str	r3, [r7, #24]
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ef4:	f001 fdda 	bl	800aaac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01f      	beq.n	8008f44 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f08:	f000 f8f6 	bl	80090f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	1e5a      	subs	r2, r3, #1
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00f      	beq.n	8008f3c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1e:	3310      	adds	r3, #16
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fe97 	bl	8009c54 <xTaskRemoveFromEventList>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8009020 <xQueueReceive+0x1cc>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f3c:	f001 fdec 	bl	800ab18 <vPortExitCritical>
				return pdPASS;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e069      	b.n	8009018 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d103      	bne.n	8008f52 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f4a:	f001 fde5 	bl	800ab18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e062      	b.n	8009018 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f58:	f107 0310 	add.w	r3, r7, #16
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fedf 	bl	8009d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f66:	f001 fdd7 	bl	800ab18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f6a:	f000 fc3b 	bl	80097e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f6e:	f001 fd9d 	bl	800aaac <vPortEnterCritical>
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7e:	d103      	bne.n	8008f88 <xQueueReceive+0x134>
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d103      	bne.n	8008f9e <xQueueReceive+0x14a>
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f9e:	f001 fdbb 	bl	800ab18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fa2:	1d3a      	adds	r2, r7, #4
 8008fa4:	f107 0310 	add.w	r3, r7, #16
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fece 	bl	8009d4c <xTaskCheckForTimeOut>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d123      	bne.n	8008ffe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb8:	f000 f916 	bl	80091e8 <prvIsQueueEmpty>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d017      	beq.n	8008ff2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	3324      	adds	r3, #36	@ 0x24
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fdec 	bl	8009ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd2:	f000 f8b7 	bl	8009144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fd6:	f000 fc13 	bl	8009800 <xTaskResumeAll>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d189      	bne.n	8008ef4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <xQueueReceive+0x1cc>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	e780      	b.n	8008ef4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff4:	f000 f8a6 	bl	8009144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ff8:	f000 fc02 	bl	8009800 <xTaskResumeAll>
 8008ffc:	e77a      	b.n	8008ef4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009000:	f000 f8a0 	bl	8009144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009004:	f000 fbfc 	bl	8009800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800900a:	f000 f8ed 	bl	80091e8 <prvIsQueueEmpty>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	f43f af6f 	beq.w	8008ef4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009016:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009018:	4618      	mov	r0, r3
 800901a:	3730      	adds	r7, #48	@ 0x30
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10d      	bne.n	800905e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d14d      	bne.n	80090e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ffec 	bl	800a02c <xTaskPriorityDisinherit>
 8009054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	e043      	b.n	80090e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d119      	bne.n	8009098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6858      	ldr	r0, [r3, #4]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906c:	461a      	mov	r2, r3
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	f002 f8c0 	bl	800b1f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	d32b      	bcc.n	80090e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	e026      	b.n	80090e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68d8      	ldr	r0, [r3, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a0:	461a      	mov	r2, r3
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	f002 f8a6 	bl	800b1f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b0:	425b      	negs	r3, r3
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d207      	bcs.n	80090d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090cc:	425b      	negs	r3, r3
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d105      	bne.n	80090e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090ee:	697b      	ldr	r3, [r7, #20]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d018      	beq.n	800913c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009112:	441a      	add	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	429a      	cmp	r2, r3
 8009122:	d303      	bcc.n	800912c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009134:	461a      	mov	r2, r3
 8009136:	6838      	ldr	r0, [r7, #0]
 8009138:	f002 f85c 	bl	800b1f4 <memcpy>
	}
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800914c:	f001 fcae 	bl	800aaac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009158:	e011      	b.n	800917e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d012      	beq.n	8009188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3324      	adds	r3, #36	@ 0x24
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fd74 	bl	8009c54 <xTaskRemoveFromEventList>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009172:	f000 fe53 	bl	8009e1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	3b01      	subs	r3, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dce9      	bgt.n	800915a <prvUnlockQueue+0x16>
 8009186:	e000      	b.n	800918a <prvUnlockQueue+0x46>
					break;
 8009188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	22ff      	movs	r2, #255	@ 0xff
 800918e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009192:	f001 fcc1 	bl	800ab18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009196:	f001 fc89 	bl	800aaac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091a2:	e011      	b.n	80091c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d012      	beq.n	80091d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3310      	adds	r3, #16
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fd4f 	bl	8009c54 <xTaskRemoveFromEventList>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091bc:	f000 fe2e 	bl	8009e1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dce9      	bgt.n	80091a4 <prvUnlockQueue+0x60>
 80091d0:	e000      	b.n	80091d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	22ff      	movs	r2, #255	@ 0xff
 80091d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80091dc:	f001 fc9c 	bl	800ab18 <vPortExitCritical>
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091f0:	f001 fc5c 	bl	800aaac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e001      	b.n	8009206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009206:	f001 fc87 	bl	800ab18 <vPortExitCritical>

	return xReturn;
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800921c:	f001 fc46 	bl	800aaac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009228:	429a      	cmp	r2, r3
 800922a:	d102      	bne.n	8009232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	e001      	b.n	8009236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009236:	f001 fc6f 	bl	800ab18 <vPortExitCritical>

	return xReturn;
 800923a:	68fb      	ldr	r3, [r7, #12]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e014      	b.n	800927e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009254:	4a0f      	ldr	r2, [pc, #60]	@ (8009294 <vQueueAddToRegistry+0x50>)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009260:	490c      	ldr	r1, [pc, #48]	@ (8009294 <vQueueAddToRegistry+0x50>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800926a:	4a0a      	ldr	r2, [pc, #40]	@ (8009294 <vQueueAddToRegistry+0x50>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009276:	e006      	b.n	8009286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b07      	cmp	r3, #7
 8009282:	d9e7      	bls.n	8009254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000c58 	.word	0x20000c58

08009298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092a8:	f001 fc00 	bl	800aaac <vPortEnterCritical>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <vQueueWaitForMessageRestricted+0x2a>
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092c8:	b25b      	sxtb	r3, r3
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <vQueueWaitForMessageRestricted+0x40>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092d8:	f001 fc1e 	bl	800ab18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3324      	adds	r3, #36	@ 0x24
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fc83 	bl	8009bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092f2:	6978      	ldr	r0, [r7, #20]
 80092f4:	f7ff ff26 	bl	8009144 <prvUnlockQueue>
	}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08e      	sub	sp, #56	@ 0x38
 8009304:	af04      	add	r7, sp, #16
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10d      	bne.n	8009330 <xTaskCreateStatic+0x30>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	623b      	str	r3, [r7, #32]
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10d      	bne.n	8009352 <xTaskCreateStatic+0x52>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	b672      	cpsid	i
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	b662      	cpsie	i
 800934a:	61fb      	str	r3, [r7, #28]
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	e7fd      	b.n	800934e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009352:	23a8      	movs	r3, #168	@ 0xa8
 8009354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2ba8      	cmp	r3, #168	@ 0xa8
 800935a:	d00d      	beq.n	8009378 <xTaskCreateStatic+0x78>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	b672      	cpsid	i
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	b662      	cpsie	i
 8009370:	61bb      	str	r3, [r7, #24]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009378:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01e      	beq.n	80093be <xTaskCreateStatic+0xbe>
 8009380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01b      	beq.n	80093be <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009388:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800938e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	2202      	movs	r2, #2
 8009394:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f851 	bl	8009458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093b8:	f000 f8f8 	bl	80095ac <prvAddNewTaskToReadyList>
 80093bc:	e001      	b.n	80093c2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093c2:	697b      	ldr	r3, [r7, #20]
	}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	@ 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08c      	sub	sp, #48	@ 0x30
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fc91 	bl	800ad08 <pvPortMalloc>
 80093e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00e      	beq.n	800940c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093ee:	20a8      	movs	r0, #168	@ 0xa8
 80093f0:	f001 fc8a 	bl	800ad08 <pvPortMalloc>
 80093f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	631a      	str	r2, [r3, #48]	@ 0x30
 8009402:	e005      	b.n	8009410 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f001 fd4d 	bl	800aea4 <vPortFree>
 800940a:	e001      	b.n	8009410 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d017      	beq.n	8009446 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800941e:	88fa      	ldrh	r2, [r7, #6]
 8009420:	2300      	movs	r3, #0
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	9302      	str	r3, [sp, #8]
 8009428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f80f 	bl	8009458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800943a:	69f8      	ldr	r0, [r7, #28]
 800943c:	f000 f8b6 	bl	80095ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009440:	2301      	movs	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	e002      	b.n	800944c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800944c:	69bb      	ldr	r3, [r7, #24]
	}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	461a      	mov	r2, r3
 8009470:	21a5      	movs	r1, #165	@ 0xa5
 8009472:	f001 fe33 	bl	800b0dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009480:	440b      	add	r3, r1
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f023 0307 	bic.w	r3, r3, #7
 800948e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00d      	beq.n	80094b6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	b672      	cpsid	i
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	b662      	cpsie	i
 80094ae:	617b      	str	r3, [r7, #20]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01f      	beq.n	80094fc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e012      	b.n	80094e8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	7819      	ldrb	r1, [r3, #0]
 80094ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	3334      	adds	r3, #52	@ 0x34
 80094d2:	460a      	mov	r2, r1
 80094d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	4413      	add	r3, r2
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	3301      	adds	r3, #1
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	d9e9      	bls.n	80094c2 <prvInitialiseNewTask+0x6a>
 80094ee:	e000      	b.n	80094f2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80094f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094fa:	e003      	b.n	8009504 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	2b37      	cmp	r3, #55	@ 0x37
 8009508:	d901      	bls.n	800950e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800950a:	2337      	movs	r3, #55	@ 0x37
 800950c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009512:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009518:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	2200      	movs	r2, #0
 800951e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff f93d 	bl	80087a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	3318      	adds	r3, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff f938 	bl	80087a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009538:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009548:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	2200      	movs	r2, #0
 800954e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2200      	movs	r2, #0
 8009556:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	3354      	adds	r3, #84	@ 0x54
 800955e:	224c      	movs	r2, #76	@ 0x4c
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fdba 	bl	800b0dc <memset>
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	4a0d      	ldr	r2, [pc, #52]	@ (80095a0 <prvInitialiseNewTask+0x148>)
 800956c:	659a      	str	r2, [r3, #88]	@ 0x58
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	4a0c      	ldr	r2, [pc, #48]	@ (80095a4 <prvInitialiseNewTask+0x14c>)
 8009572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	4a0c      	ldr	r2, [pc, #48]	@ (80095a8 <prvInitialiseNewTask+0x150>)
 8009578:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	68f9      	ldr	r1, [r7, #12]
 800957e:	69b8      	ldr	r0, [r7, #24]
 8009580:	f001 f984 	bl	800a88c <pxPortInitialiseStack>
 8009584:	4602      	mov	r2, r0
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009596:	bf00      	nop
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20004ee4 	.word	0x20004ee4
 80095a4:	20004f4c 	.word	0x20004f4c
 80095a8:	20004fb4 	.word	0x20004fb4

080095ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095b4:	f001 fa7a 	bl	800aaac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095b8:	4b2d      	ldr	r3, [pc, #180]	@ (8009670 <prvAddNewTaskToReadyList+0xc4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	4a2c      	ldr	r2, [pc, #176]	@ (8009670 <prvAddNewTaskToReadyList+0xc4>)
 80095c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009674 <prvAddNewTaskToReadyList+0xc8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d109      	bne.n	80095de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009674 <prvAddNewTaskToReadyList+0xc8>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095d0:	4b27      	ldr	r3, [pc, #156]	@ (8009670 <prvAddNewTaskToReadyList+0xc4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d110      	bne.n	80095fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095d8:	f000 fc44 	bl	8009e64 <prvInitialiseTaskLists>
 80095dc:	e00d      	b.n	80095fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095de:	4b26      	ldr	r3, [pc, #152]	@ (8009678 <prvAddNewTaskToReadyList+0xcc>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d109      	bne.n	80095fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095e6:	4b23      	ldr	r3, [pc, #140]	@ (8009674 <prvAddNewTaskToReadyList+0xc8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d802      	bhi.n	80095fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009674 <prvAddNewTaskToReadyList+0xc8>)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095fa:	4b20      	ldr	r3, [pc, #128]	@ (800967c <prvAddNewTaskToReadyList+0xd0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3301      	adds	r3, #1
 8009600:	4a1e      	ldr	r2, [pc, #120]	@ (800967c <prvAddNewTaskToReadyList+0xd0>)
 8009602:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009604:	4b1d      	ldr	r3, [pc, #116]	@ (800967c <prvAddNewTaskToReadyList+0xd0>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4b1b      	ldr	r3, [pc, #108]	@ (8009680 <prvAddNewTaskToReadyList+0xd4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d903      	bls.n	8009620 <prvAddNewTaskToReadyList+0x74>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a18      	ldr	r2, [pc, #96]	@ (8009680 <prvAddNewTaskToReadyList+0xd4>)
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <prvAddNewTaskToReadyList+0xd8>)
 800962e:	441a      	add	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3304      	adds	r3, #4
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7ff f8c1 	bl	80087be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800963c:	f001 fa6c 	bl	800ab18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009640:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <prvAddNewTaskToReadyList+0xcc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009648:	4b0a      	ldr	r3, [pc, #40]	@ (8009674 <prvAddNewTaskToReadyList+0xc8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009652:	429a      	cmp	r2, r3
 8009654:	d207      	bcs.n	8009666 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009656:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <prvAddNewTaskToReadyList+0xdc>)
 8009658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2000116c 	.word	0x2000116c
 8009674:	20000c98 	.word	0x20000c98
 8009678:	20001178 	.word	0x20001178
 800967c:	20001188 	.word	0x20001188
 8009680:	20001174 	.word	0x20001174
 8009684:	20000c9c 	.word	0x20000c9c
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01a      	beq.n	80096d4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800969e:	4b15      	ldr	r3, [pc, #84]	@ (80096f4 <vTaskDelay+0x68>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <vTaskDelay+0x36>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	b672      	cpsid	i
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	b662      	cpsie	i
 80096ba:	60bb      	str	r3, [r7, #8]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80096c2:	f000 f88f 	bl	80097e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096c6:	2100      	movs	r1, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fd23 	bl	800a114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096ce:	f000 f897 	bl	8009800 <xTaskResumeAll>
 80096d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d107      	bne.n	80096ea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80096da:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <vTaskDelay+0x6c>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20001194 	.word	0x20001194
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	@ 0x28
 8009700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800970a:	463a      	mov	r2, r7
 800970c:	1d39      	adds	r1, r7, #4
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fff2 	bl	80086fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	9202      	str	r2, [sp, #8]
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	2300      	movs	r3, #0
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	460a      	mov	r2, r1
 800972a:	4926      	ldr	r1, [pc, #152]	@ (80097c4 <vTaskStartScheduler+0xc8>)
 800972c:	4826      	ldr	r0, [pc, #152]	@ (80097c8 <vTaskStartScheduler+0xcc>)
 800972e:	f7ff fde7 	bl	8009300 <xTaskCreateStatic>
 8009732:	4603      	mov	r3, r0
 8009734:	4a25      	ldr	r2, [pc, #148]	@ (80097cc <vTaskStartScheduler+0xd0>)
 8009736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009738:	4b24      	ldr	r3, [pc, #144]	@ (80097cc <vTaskStartScheduler+0xd0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009740:	2301      	movs	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e001      	b.n	800974a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d102      	bne.n	8009756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009750:	f000 fd34 	bl	800a1bc <xTimerCreateTimerTask>
 8009754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d11d      	bne.n	8009798 <vTaskStartScheduler+0x9c>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	b672      	cpsid	i
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	b662      	cpsie	i
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009774:	4b16      	ldr	r3, [pc, #88]	@ (80097d0 <vTaskStartScheduler+0xd4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3354      	adds	r3, #84	@ 0x54
 800977a:	4a16      	ldr	r2, [pc, #88]	@ (80097d4 <vTaskStartScheduler+0xd8>)
 800977c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800977e:	4b16      	ldr	r3, [pc, #88]	@ (80097d8 <vTaskStartScheduler+0xdc>)
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009786:	4b15      	ldr	r3, [pc, #84]	@ (80097dc <vTaskStartScheduler+0xe0>)
 8009788:	2201      	movs	r2, #1
 800978a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800978c:	4b14      	ldr	r3, [pc, #80]	@ (80097e0 <vTaskStartScheduler+0xe4>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009792:	f001 f90d 	bl	800a9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009796:	e011      	b.n	80097bc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d10d      	bne.n	80097bc <vTaskStartScheduler+0xc0>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	b672      	cpsid	i
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	b662      	cpsie	i
 80097b4:	60fb      	str	r3, [r7, #12]
}
 80097b6:	bf00      	nop
 80097b8:	bf00      	nop
 80097ba:	e7fd      	b.n	80097b8 <vTaskStartScheduler+0xbc>
}
 80097bc:	bf00      	nop
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	0800b2ec 	.word	0x0800b2ec
 80097c8:	08009e35 	.word	0x08009e35
 80097cc:	20001190 	.word	0x20001190
 80097d0:	20000c98 	.word	0x20000c98
 80097d4:	20000018 	.word	0x20000018
 80097d8:	2000118c 	.word	0x2000118c
 80097dc:	20001178 	.word	0x20001178
 80097e0:	20001170 	.word	0x20001170

080097e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097e8:	4b04      	ldr	r3, [pc, #16]	@ (80097fc <vTaskSuspendAll+0x18>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	4a03      	ldr	r2, [pc, #12]	@ (80097fc <vTaskSuspendAll+0x18>)
 80097f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097f2:	bf00      	nop
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20001194 	.word	0x20001194

08009800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800980a:	2300      	movs	r3, #0
 800980c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800980e:	4b43      	ldr	r3, [pc, #268]	@ (800991c <xTaskResumeAll+0x11c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10d      	bne.n	8009832 <xTaskResumeAll+0x32>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	b672      	cpsid	i
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	b662      	cpsie	i
 800982a:	603b      	str	r3, [r7, #0]
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009832:	f001 f93b 	bl	800aaac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009836:	4b39      	ldr	r3, [pc, #228]	@ (800991c <xTaskResumeAll+0x11c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	4a37      	ldr	r2, [pc, #220]	@ (800991c <xTaskResumeAll+0x11c>)
 800983e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009840:	4b36      	ldr	r3, [pc, #216]	@ (800991c <xTaskResumeAll+0x11c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d162      	bne.n	800990e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009848:	4b35      	ldr	r3, [pc, #212]	@ (8009920 <xTaskResumeAll+0x120>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d05e      	beq.n	800990e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009850:	e02f      	b.n	80098b2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009852:	4b34      	ldr	r3, [pc, #208]	@ (8009924 <xTaskResumeAll+0x124>)
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3318      	adds	r3, #24
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff f80a 	bl	8008878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff f805 	bl	8008878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009872:	4b2d      	ldr	r3, [pc, #180]	@ (8009928 <xTaskResumeAll+0x128>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d903      	bls.n	8009882 <xTaskResumeAll+0x82>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	4a2a      	ldr	r2, [pc, #168]	@ (8009928 <xTaskResumeAll+0x128>)
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a27      	ldr	r2, [pc, #156]	@ (800992c <xTaskResumeAll+0x12c>)
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe ff90 	bl	80087be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a2:	4b23      	ldr	r3, [pc, #140]	@ (8009930 <xTaskResumeAll+0x130>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80098ac:	4b21      	ldr	r3, [pc, #132]	@ (8009934 <xTaskResumeAll+0x134>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009924 <xTaskResumeAll+0x124>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cb      	bne.n	8009852 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098c0:	f000 fb76 	bl	8009fb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009938 <xTaskResumeAll+0x138>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098d0:	f000 f846 	bl	8009960 <xTaskIncrementTick>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80098da:	4b16      	ldr	r3, [pc, #88]	@ (8009934 <xTaskResumeAll+0x134>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f1      	bne.n	80098d0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80098ec:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <xTaskResumeAll+0x138>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <xTaskResumeAll+0x134>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098fe:	4b0f      	ldr	r3, [pc, #60]	@ (800993c <xTaskResumeAll+0x13c>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f001 f903 	bl	800ab18 <vPortExitCritical>

	return xAlreadyYielded;
 8009912:	68bb      	ldr	r3, [r7, #8]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20001194 	.word	0x20001194
 8009920:	2000116c 	.word	0x2000116c
 8009924:	2000112c 	.word	0x2000112c
 8009928:	20001174 	.word	0x20001174
 800992c:	20000c9c 	.word	0x20000c9c
 8009930:	20000c98 	.word	0x20000c98
 8009934:	20001180 	.word	0x20001180
 8009938:	2000117c 	.word	0x2000117c
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009946:	4b05      	ldr	r3, [pc, #20]	@ (800995c <xTaskGetTickCount+0x1c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800994c:	687b      	ldr	r3, [r7, #4]
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20001170 	.word	0x20001170

08009960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800996a:	4b50      	ldr	r3, [pc, #320]	@ (8009aac <xTaskIncrementTick+0x14c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 808c 	bne.w	8009a8c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009974:	4b4e      	ldr	r3, [pc, #312]	@ (8009ab0 <xTaskIncrementTick+0x150>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800997c:	4a4c      	ldr	r2, [pc, #304]	@ (8009ab0 <xTaskIncrementTick+0x150>)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d123      	bne.n	80099d0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009988:	4b4a      	ldr	r3, [pc, #296]	@ (8009ab4 <xTaskIncrementTick+0x154>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00d      	beq.n	80099ae <xTaskIncrementTick+0x4e>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009996:	b672      	cpsid	i
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	b662      	cpsie	i
 80099a6:	603b      	str	r3, [r7, #0]
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	e7fd      	b.n	80099aa <xTaskIncrementTick+0x4a>
 80099ae:	4b41      	ldr	r3, [pc, #260]	@ (8009ab4 <xTaskIncrementTick+0x154>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	4b40      	ldr	r3, [pc, #256]	@ (8009ab8 <xTaskIncrementTick+0x158>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ab4 <xTaskIncrementTick+0x154>)
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	4a3e      	ldr	r2, [pc, #248]	@ (8009ab8 <xTaskIncrementTick+0x158>)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	4b3e      	ldr	r3, [pc, #248]	@ (8009abc <xTaskIncrementTick+0x15c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	4a3c      	ldr	r2, [pc, #240]	@ (8009abc <xTaskIncrementTick+0x15c>)
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	f000 faf0 	bl	8009fb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099d0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac0 <xTaskIncrementTick+0x160>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d349      	bcc.n	8009a6e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099da:	4b36      	ldr	r3, [pc, #216]	@ (8009ab4 <xTaskIncrementTick+0x154>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e4:	4b36      	ldr	r3, [pc, #216]	@ (8009ac0 <xTaskIncrementTick+0x160>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	601a      	str	r2, [r3, #0]
					break;
 80099ec:	e03f      	b.n	8009a6e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ee:	4b31      	ldr	r3, [pc, #196]	@ (8009ab4 <xTaskIncrementTick+0x154>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d203      	bcs.n	8009a0e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a06:	4a2e      	ldr	r2, [pc, #184]	@ (8009ac0 <xTaskIncrementTick+0x160>)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a0c:	e02f      	b.n	8009a6e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe ff30 	bl	8008878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3318      	adds	r3, #24
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe ff27 	bl	8008878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2e:	4b25      	ldr	r3, [pc, #148]	@ (8009ac4 <xTaskIncrementTick+0x164>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d903      	bls.n	8009a3e <xTaskIncrementTick+0xde>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	4a22      	ldr	r2, [pc, #136]	@ (8009ac4 <xTaskIncrementTick+0x164>)
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac8 <xTaskIncrementTick+0x168>)
 8009a4c:	441a      	add	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7fe feb2 	bl	80087be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009acc <xTaskIncrementTick+0x16c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d3b8      	bcc.n	80099da <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6c:	e7b5      	b.n	80099da <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a6e:	4b17      	ldr	r3, [pc, #92]	@ (8009acc <xTaskIncrementTick+0x16c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a74:	4914      	ldr	r1, [pc, #80]	@ (8009ac8 <xTaskIncrementTick+0x168>)
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d907      	bls.n	8009a96 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009a86:	2301      	movs	r3, #1
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e004      	b.n	8009a96 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ad0 <xTaskIncrementTick+0x170>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	4a0f      	ldr	r2, [pc, #60]	@ (8009ad0 <xTaskIncrementTick+0x170>)
 8009a94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad4 <xTaskIncrementTick+0x174>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009aa2:	697b      	ldr	r3, [r7, #20]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20001194 	.word	0x20001194
 8009ab0:	20001170 	.word	0x20001170
 8009ab4:	20001124 	.word	0x20001124
 8009ab8:	20001128 	.word	0x20001128
 8009abc:	20001184 	.word	0x20001184
 8009ac0:	2000118c 	.word	0x2000118c
 8009ac4:	20001174 	.word	0x20001174
 8009ac8:	20000c9c 	.word	0x20000c9c
 8009acc:	20000c98 	.word	0x20000c98
 8009ad0:	2000117c 	.word	0x2000117c
 8009ad4:	20001180 	.word	0x20001180

08009ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ade:	4b2c      	ldr	r3, [pc, #176]	@ (8009b90 <vTaskSwitchContext+0xb8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8009b94 <vTaskSwitchContext+0xbc>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aec:	e049      	b.n	8009b82 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8009aee:	4b29      	ldr	r3, [pc, #164]	@ (8009b94 <vTaskSwitchContext+0xbc>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af4:	4b28      	ldr	r3, [pc, #160]	@ (8009b98 <vTaskSwitchContext+0xc0>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e013      	b.n	8009b24 <vTaskSwitchContext+0x4c>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10d      	bne.n	8009b1e <vTaskSwitchContext+0x46>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	607b      	str	r3, [r7, #4]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <vTaskSwitchContext+0x42>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	491d      	ldr	r1, [pc, #116]	@ (8009b9c <vTaskSwitchContext+0xc4>)
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0e1      	beq.n	8009afc <vTaskSwitchContext+0x24>
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4a16      	ldr	r2, [pc, #88]	@ (8009b9c <vTaskSwitchContext+0xc4>)
 8009b44:	4413      	add	r3, r2
 8009b46:	60bb      	str	r3, [r7, #8]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d104      	bne.n	8009b68 <vTaskSwitchContext+0x90>
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	605a      	str	r2, [r3, #4]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ba0 <vTaskSwitchContext+0xc8>)
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	4a09      	ldr	r2, [pc, #36]	@ (8009b98 <vTaskSwitchContext+0xc0>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b78:	4b09      	ldr	r3, [pc, #36]	@ (8009ba0 <vTaskSwitchContext+0xc8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3354      	adds	r3, #84	@ 0x54
 8009b7e:	4a09      	ldr	r2, [pc, #36]	@ (8009ba4 <vTaskSwitchContext+0xcc>)
 8009b80:	6013      	str	r3, [r2, #0]
}
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20001194 	.word	0x20001194
 8009b94:	20001180 	.word	0x20001180
 8009b98:	20001174 	.word	0x20001174
 8009b9c:	20000c9c 	.word	0x20000c9c
 8009ba0:	20000c98 	.word	0x20000c98
 8009ba4:	20000018 	.word	0x20000018

08009ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	b672      	cpsid	i
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	b662      	cpsie	i
 8009bcc:	60fb      	str	r3, [r7, #12]
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <vTaskPlaceOnEventList+0x4c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fe fe12 	bl	8008806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009be2:	2101      	movs	r1, #1
 8009be4:	6838      	ldr	r0, [r7, #0]
 8009be6:	f000 fa95 	bl	800a114 <prvAddCurrentTaskToDelayedList>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000c98 	.word	0x20000c98

08009bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10d      	bne.n	8009c26 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0e:	b672      	cpsid	i
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	b662      	cpsie	i
 8009c1e:	617b      	str	r3, [r7, #20]
}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	e7fd      	b.n	8009c22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c26:	4b0a      	ldr	r3, [pc, #40]	@ (8009c50 <vTaskPlaceOnEventListRestricted+0x58>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3318      	adds	r3, #24
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7fe fdc5 	bl	80087be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	68b8      	ldr	r0, [r7, #8]
 8009c44:	f000 fa66 	bl	800a114 <prvAddCurrentTaskToDelayedList>
	}
 8009c48:	bf00      	nop
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000c98 	.word	0x20000c98

08009c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10d      	bne.n	8009c86 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	60fb      	str	r3, [r7, #12]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3318      	adds	r3, #24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fdf4 	bl	8008878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c90:	4b1d      	ldr	r3, [pc, #116]	@ (8009d08 <xTaskRemoveFromEventList+0xb4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11d      	bne.n	8009cd4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fdeb 	bl	8008878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca6:	4b19      	ldr	r3, [pc, #100]	@ (8009d0c <xTaskRemoveFromEventList+0xb8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d903      	bls.n	8009cb6 <xTaskRemoveFromEventList+0x62>
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	4a16      	ldr	r2, [pc, #88]	@ (8009d0c <xTaskRemoveFromEventList+0xb8>)
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4a13      	ldr	r2, [pc, #76]	@ (8009d10 <xTaskRemoveFromEventList+0xbc>)
 8009cc4:	441a      	add	r2, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7fe fd76 	bl	80087be <vListInsertEnd>
 8009cd2:	e005      	b.n	8009ce0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	3318      	adds	r3, #24
 8009cd8:	4619      	mov	r1, r3
 8009cda:	480e      	ldr	r0, [pc, #56]	@ (8009d14 <xTaskRemoveFromEventList+0xc0>)
 8009cdc:	f7fe fd6f 	bl	80087be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d18 <xTaskRemoveFromEventList+0xc4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d905      	bls.n	8009cfa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <xTaskRemoveFromEventList+0xc8>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	e001      	b.n	8009cfe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cfe:	697b      	ldr	r3, [r7, #20]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20001194 	.word	0x20001194
 8009d0c:	20001174 	.word	0x20001174
 8009d10:	20000c9c 	.word	0x20000c9c
 8009d14:	2000112c 	.word	0x2000112c
 8009d18:	20000c98 	.word	0x20000c98
 8009d1c:	20001180 	.word	0x20001180

08009d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d28:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <vTaskInternalSetTimeOutState+0x24>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d30:	4b05      	ldr	r3, [pc, #20]	@ (8009d48 <vTaskInternalSetTimeOutState+0x28>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	605a      	str	r2, [r3, #4]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	20001184 	.word	0x20001184
 8009d48:	20001170 	.word	0x20001170

08009d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10d      	bne.n	8009d78 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	613b      	str	r3, [r7, #16]
}
 8009d72:	bf00      	nop
 8009d74:	bf00      	nop
 8009d76:	e7fd      	b.n	8009d74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10d      	bne.n	8009d9a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	b672      	cpsid	i
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	b662      	cpsie	i
 8009d92:	60fb      	str	r3, [r7, #12]
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	e7fd      	b.n	8009d96 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009d9a:	f000 fe87 	bl	800aaac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <xTaskCheckForTimeOut+0xc8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d102      	bne.n	8009dbe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	e023      	b.n	8009e06 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4b15      	ldr	r3, [pc, #84]	@ (8009e18 <xTaskCheckForTimeOut+0xcc>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d007      	beq.n	8009dda <xTaskCheckForTimeOut+0x8e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d302      	bcc.n	8009dda <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	61fb      	str	r3, [r7, #28]
 8009dd8:	e015      	b.n	8009e06 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d20b      	bcs.n	8009dfc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	1ad2      	subs	r2, r2, r3
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff ff95 	bl	8009d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	e004      	b.n	8009e06 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e06:	f000 fe87 	bl	800ab18 <vPortExitCritical>

	return xReturn;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3720      	adds	r7, #32
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20001170 	.word	0x20001170
 8009e18:	20001184 	.word	0x20001184

08009e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e20:	4b03      	ldr	r3, [pc, #12]	@ (8009e30 <vTaskMissedYield+0x14>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
}
 8009e26:	bf00      	nop
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20001180 	.word	0x20001180

08009e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e3c:	f000 f852 	bl	8009ee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e40:	4b06      	ldr	r3, [pc, #24]	@ (8009e5c <prvIdleTask+0x28>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d9f9      	bls.n	8009e3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e48:	4b05      	ldr	r3, [pc, #20]	@ (8009e60 <prvIdleTask+0x2c>)
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e58:	e7f0      	b.n	8009e3c <prvIdleTask+0x8>
 8009e5a:	bf00      	nop
 8009e5c:	20000c9c 	.word	0x20000c9c
 8009e60:	e000ed04 	.word	0xe000ed04

08009e64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	607b      	str	r3, [r7, #4]
 8009e6e:	e00c      	b.n	8009e8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4a12      	ldr	r2, [pc, #72]	@ (8009ec4 <prvInitialiseTaskLists+0x60>)
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fc70 	bl	8008764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3301      	adds	r3, #1
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b37      	cmp	r3, #55	@ 0x37
 8009e8e:	d9ef      	bls.n	8009e70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e90:	480d      	ldr	r0, [pc, #52]	@ (8009ec8 <prvInitialiseTaskLists+0x64>)
 8009e92:	f7fe fc67 	bl	8008764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e96:	480d      	ldr	r0, [pc, #52]	@ (8009ecc <prvInitialiseTaskLists+0x68>)
 8009e98:	f7fe fc64 	bl	8008764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e9c:	480c      	ldr	r0, [pc, #48]	@ (8009ed0 <prvInitialiseTaskLists+0x6c>)
 8009e9e:	f7fe fc61 	bl	8008764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ea2:	480c      	ldr	r0, [pc, #48]	@ (8009ed4 <prvInitialiseTaskLists+0x70>)
 8009ea4:	f7fe fc5e 	bl	8008764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ea8:	480b      	ldr	r0, [pc, #44]	@ (8009ed8 <prvInitialiseTaskLists+0x74>)
 8009eaa:	f7fe fc5b 	bl	8008764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eae:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <prvInitialiseTaskLists+0x78>)
 8009eb0:	4a05      	ldr	r2, [pc, #20]	@ (8009ec8 <prvInitialiseTaskLists+0x64>)
 8009eb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee0 <prvInitialiseTaskLists+0x7c>)
 8009eb6:	4a05      	ldr	r2, [pc, #20]	@ (8009ecc <prvInitialiseTaskLists+0x68>)
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000c9c 	.word	0x20000c9c
 8009ec8:	200010fc 	.word	0x200010fc
 8009ecc:	20001110 	.word	0x20001110
 8009ed0:	2000112c 	.word	0x2000112c
 8009ed4:	20001140 	.word	0x20001140
 8009ed8:	20001158 	.word	0x20001158
 8009edc:	20001124 	.word	0x20001124
 8009ee0:	20001128 	.word	0x20001128

08009ee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eea:	e019      	b.n	8009f20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009eec:	f000 fdde 	bl	800aaac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef0:	4b10      	ldr	r3, [pc, #64]	@ (8009f34 <prvCheckTasksWaitingTermination+0x50>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fcbb 	bl	8008878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f02:	4b0d      	ldr	r3, [pc, #52]	@ (8009f38 <prvCheckTasksWaitingTermination+0x54>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	4a0b      	ldr	r2, [pc, #44]	@ (8009f38 <prvCheckTasksWaitingTermination+0x54>)
 8009f0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f3c <prvCheckTasksWaitingTermination+0x58>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	4a0a      	ldr	r2, [pc, #40]	@ (8009f3c <prvCheckTasksWaitingTermination+0x58>)
 8009f14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f16:	f000 fdff 	bl	800ab18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f810 	bl	8009f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <prvCheckTasksWaitingTermination+0x58>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e1      	bne.n	8009eec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20001140 	.word	0x20001140
 8009f38:	2000116c 	.word	0x2000116c
 8009f3c:	20001154 	.word	0x20001154

08009f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3354      	adds	r3, #84	@ 0x54
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f8cd 	bl	800b0ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d108      	bne.n	8009f6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 ff9f 	bl	800aea4 <vPortFree>
				vPortFree( pxTCB );
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 ff9c 	bl	800aea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f6c:	e01b      	b.n	8009fa6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d103      	bne.n	8009f80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 ff93 	bl	800aea4 <vPortFree>
	}
 8009f7e:	e012      	b.n	8009fa6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d00d      	beq.n	8009fa6 <prvDeleteTCB+0x66>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	b672      	cpsid	i
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	b662      	cpsie	i
 8009f9e:	60fb      	str	r3, [r7, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <prvDeleteTCB+0x62>
	}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <prvResetNextTaskUnblockTime+0x38>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fec <prvResetNextTaskUnblockTime+0x3c>)
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fc8:	e008      	b.n	8009fdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fca:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <prvResetNextTaskUnblockTime+0x38>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	4a04      	ldr	r2, [pc, #16]	@ (8009fec <prvResetNextTaskUnblockTime+0x3c>)
 8009fda:	6013      	str	r3, [r2, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	20001124 	.word	0x20001124
 8009fec:	2000118c 	.word	0x2000118c

08009ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	@ (800a024 <xTaskGetSchedulerState+0x34>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ffe:	2301      	movs	r3, #1
 800a000:	607b      	str	r3, [r7, #4]
 800a002:	e008      	b.n	800a016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a004:	4b08      	ldr	r3, [pc, #32]	@ (800a028 <xTaskGetSchedulerState+0x38>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a00c:	2302      	movs	r3, #2
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	e001      	b.n	800a016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a012:	2300      	movs	r3, #0
 800a014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a016:	687b      	ldr	r3, [r7, #4]
	}
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	20001178 	.word	0x20001178
 800a028:	20001194 	.word	0x20001194

0800a02c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d05c      	beq.n	800a0fc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a042:	4b31      	ldr	r3, [pc, #196]	@ (800a108 <xTaskPriorityDisinherit+0xdc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d00d      	beq.n	800a068 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	b672      	cpsid	i
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	b662      	cpsie	i
 800a060:	60fb      	str	r3, [r7, #12]
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10d      	bne.n	800a08c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	b672      	cpsid	i
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	b662      	cpsie	i
 800a084:	60bb      	str	r3, [r7, #8]
}
 800a086:	bf00      	nop
 800a088:	bf00      	nop
 800a08a:	e7fd      	b.n	800a088 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d02c      	beq.n	800a0fc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d128      	bne.n	800a0fc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fbe2 	bl	8008878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a10c <xTaskPriorityDisinherit+0xe0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <xTaskPriorityDisinherit+0xb0>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a10c <xTaskPriorityDisinherit+0xe0>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4a09      	ldr	r2, [pc, #36]	@ (800a110 <xTaskPriorityDisinherit+0xe4>)
 800a0ea:	441a      	add	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe fb63 	bl	80087be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0fc:	697b      	ldr	r3, [r7, #20]
	}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000c98 	.word	0x20000c98
 800a10c:	20001174 	.word	0x20001174
 800a110:	20000c9c 	.word	0x20000c9c

0800a114 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11e:	4b21      	ldr	r3, [pc, #132]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a124:	4b20      	ldr	r3, [pc, #128]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3304      	adds	r3, #4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fba4 	bl	8008878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d10a      	bne.n	800a14e <prvAddCurrentTaskToDelayedList+0x3a>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4819      	ldr	r0, [pc, #100]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a148:	f7fe fb39 	bl	80087be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a14c:	e026      	b.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a156:	4b14      	ldr	r3, [pc, #80]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	429a      	cmp	r2, r3
 800a164:	d209      	bcs.n	800a17a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a166:	4b12      	ldr	r3, [pc, #72]	@ (800a1b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3304      	adds	r3, #4
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f7fe fb47 	bl	8008806 <vListInsert>
}
 800a178:	e010      	b.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a17a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3304      	adds	r3, #4
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f7fe fb3d 	bl	8008806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	429a      	cmp	r2, r3
 800a194:	d202      	bcs.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a196:	4a08      	ldr	r2, [pc, #32]	@ (800a1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6013      	str	r3, [r2, #0]
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20001170 	.word	0x20001170
 800a1a8:	20000c98 	.word	0x20000c98
 800a1ac:	20001158 	.word	0x20001158
 800a1b0:	20001128 	.word	0x20001128
 800a1b4:	20001124 	.word	0x20001124
 800a1b8:	2000118c 	.word	0x2000118c

0800a1bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	@ 0x28
 800a1c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1c6:	f000 fb21 	bl	800a80c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a244 <xTimerCreateTimerTask+0x88>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d021      	beq.n	800a216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1da:	1d3a      	adds	r2, r7, #4
 800a1dc:	f107 0108 	add.w	r1, r7, #8
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe faa3 	bl	8008730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	9202      	str	r2, [sp, #8]
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	4912      	ldr	r1, [pc, #72]	@ (800a248 <xTimerCreateTimerTask+0x8c>)
 800a1fe:	4813      	ldr	r0, [pc, #76]	@ (800a24c <xTimerCreateTimerTask+0x90>)
 800a200:	f7ff f87e 	bl	8009300 <xTaskCreateStatic>
 800a204:	4603      	mov	r3, r0
 800a206:	4a12      	ldr	r2, [pc, #72]	@ (800a250 <xTimerCreateTimerTask+0x94>)
 800a208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a20a:	4b11      	ldr	r3, [pc, #68]	@ (800a250 <xTimerCreateTimerTask+0x94>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a212:	2301      	movs	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10d      	bne.n	800a238 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a220:	b672      	cpsid	i
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	b662      	cpsie	i
 800a230:	613b      	str	r3, [r7, #16]
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	e7fd      	b.n	800a234 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a238:	697b      	ldr	r3, [r7, #20]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	200011c8 	.word	0x200011c8
 800a248:	0800b2f4 	.word	0x0800b2f4
 800a24c:	0800a395 	.word	0x0800a395
 800a250:	200011cc 	.word	0x200011cc

0800a254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	@ 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10d      	bne.n	800a288 <xTimerGenericCommand+0x34>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a270:	b672      	cpsid	i
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	b662      	cpsie	i
 800a280:	623b      	str	r3, [r7, #32]
}
 800a282:	bf00      	nop
 800a284:	bf00      	nop
 800a286:	e7fd      	b.n	800a284 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a288:	4b19      	ldr	r3, [pc, #100]	@ (800a2f0 <xTimerGenericCommand+0x9c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02a      	beq.n	800a2e6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	dc18      	bgt.n	800a2d4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a2a2:	f7ff fea5 	bl	8009ff0 <xTaskGetSchedulerState>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d109      	bne.n	800a2c0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2ac:	4b10      	ldr	r3, [pc, #64]	@ (800a2f0 <xTimerGenericCommand+0x9c>)
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	f107 0110 	add.w	r1, r7, #16
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2b8:	f7fe fc1e 	bl	8008af8 <xQueueGenericSend>
 800a2bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2be:	e012      	b.n	800a2e6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f0 <xTimerGenericCommand+0x9c>)
 800a2c2:	6818      	ldr	r0, [r3, #0]
 800a2c4:	f107 0110 	add.w	r1, r7, #16
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f7fe fc14 	bl	8008af8 <xQueueGenericSend>
 800a2d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2d2:	e008      	b.n	800a2e6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2d4:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <xTimerGenericCommand+0x9c>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	f107 0110 	add.w	r1, r7, #16
 800a2dc:	2300      	movs	r3, #0
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	f7fe fd14 	bl	8008d0c <xQueueGenericSendFromISR>
 800a2e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	200011c8 	.word	0x200011c8

0800a2f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af02      	add	r7, sp, #8
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fe:	4b24      	ldr	r3, [pc, #144]	@ (800a390 <prvProcessExpiredTimer+0x9c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	3304      	adds	r3, #4
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fab3 	bl	8008878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d025      	beq.n	800a36c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	18d1      	adds	r1, r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	6978      	ldr	r0, [r7, #20]
 800a32e:	f000 f8d7 	bl	800a4e0 <prvInsertTimerInActiveList>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d022      	beq.n	800a37e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a338:	2300      	movs	r3, #0
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	2300      	movs	r3, #0
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	2100      	movs	r1, #0
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f7ff ff86 	bl	800a254 <xTimerGenericCommand>
 800a348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d116      	bne.n	800a37e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	b672      	cpsid	i
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	b662      	cpsie	i
 800a364:	60fb      	str	r3, [r7, #12]
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	e7fd      	b.n	800a368 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a372:	f023 0301 	bic.w	r3, r3, #1
 800a376:	b2da      	uxtb	r2, r3
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	4798      	blx	r3
}
 800a386:	bf00      	nop
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	200011c0 	.word	0x200011c0

0800a394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a39c:	f107 0308 	add.w	r3, r7, #8
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f859 	bl	800a458 <prvGetNextExpireTime>
 800a3a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f805 	bl	800a3bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3b2:	f000 f8d7 	bl	800a564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3b6:	bf00      	nop
 800a3b8:	e7f0      	b.n	800a39c <prvTimerTask+0x8>
	...

0800a3bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3c6:	f7ff fa0d 	bl	80097e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ca:	f107 0308 	add.w	r3, r7, #8
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 f866 	bl	800a4a0 <prvSampleTimeNow>
 800a3d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d130      	bne.n	800a43e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <prvProcessTimerOrBlockTask+0x3c>
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d806      	bhi.n	800a3f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3ea:	f7ff fa09 	bl	8009800 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ff7f 	bl	800a2f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3f6:	e024      	b.n	800a442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d008      	beq.n	800a410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3fe:	4b13      	ldr	r3, [pc, #76]	@ (800a44c <prvProcessTimerOrBlockTask+0x90>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <prvProcessTimerOrBlockTask+0x50>
 800a408:	2301      	movs	r3, #1
 800a40a:	e000      	b.n	800a40e <prvProcessTimerOrBlockTask+0x52>
 800a40c:	2300      	movs	r3, #0
 800a40e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a410:	4b0f      	ldr	r3, [pc, #60]	@ (800a450 <prvProcessTimerOrBlockTask+0x94>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4619      	mov	r1, r3
 800a41e:	f7fe ff3b 	bl	8009298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a422:	f7ff f9ed 	bl	8009800 <xTaskResumeAll>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a42c:	4b09      	ldr	r3, [pc, #36]	@ (800a454 <prvProcessTimerOrBlockTask+0x98>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
}
 800a43c:	e001      	b.n	800a442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a43e:	f7ff f9df 	bl	8009800 <xTaskResumeAll>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200011c4 	.word	0x200011c4
 800a450:	200011c8 	.word	0x200011c8
 800a454:	e000ed04 	.word	0xe000ed04

0800a458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a460:	4b0e      	ldr	r3, [pc, #56]	@ (800a49c <prvGetNextExpireTime+0x44>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <prvGetNextExpireTime+0x16>
 800a46a:	2201      	movs	r2, #1
 800a46c:	e000      	b.n	800a470 <prvGetNextExpireTime+0x18>
 800a46e:	2200      	movs	r2, #0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d105      	bne.n	800a488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a47c:	4b07      	ldr	r3, [pc, #28]	@ (800a49c <prvGetNextExpireTime+0x44>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e001      	b.n	800a48c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a48c:	68fb      	ldr	r3, [r7, #12]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	200011c0 	.word	0x200011c0

0800a4a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4a8:	f7ff fa4a 	bl	8009940 <xTaskGetTickCount>
 800a4ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a4ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a4dc <prvSampleTimeNow+0x3c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d205      	bcs.n	800a4c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4b8:	f000 f940 	bl	800a73c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e002      	b.n	800a4ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ca:	4a04      	ldr	r2, [pc, #16]	@ (800a4dc <prvSampleTimeNow+0x3c>)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	200011d0 	.word	0x200011d0

0800a4e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	429a      	cmp	r2, r3
 800a504:	d812      	bhi.n	800a52c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	d302      	bcc.n	800a51a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e01b      	b.n	800a552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a51a:	4b10      	ldr	r3, [pc, #64]	@ (800a55c <prvInsertTimerInActiveList+0x7c>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fe f96e 	bl	8008806 <vListInsert>
 800a52a:	e012      	b.n	800a552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d206      	bcs.n	800a542 <prvInsertTimerInActiveList+0x62>
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e007      	b.n	800a552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a542:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <prvInsertTimerInActiveList+0x80>)
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3304      	adds	r3, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7fe f95a 	bl	8008806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a552:	697b      	ldr	r3, [r7, #20]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	200011c4 	.word	0x200011c4
 800a560:	200011c0 	.word	0x200011c0

0800a564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08e      	sub	sp, #56	@ 0x38
 800a568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a56a:	e0d4      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	da1b      	bge.n	800a5aa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a572:	1d3b      	adds	r3, r7, #4
 800a574:	3304      	adds	r3, #4
 800a576:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10d      	bne.n	800a59a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	b672      	cpsid	i
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	b662      	cpsie	i
 800a592:	61fb      	str	r3, [r7, #28]
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	e7fd      	b.n	800a596 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5a0:	6850      	ldr	r0, [r2, #4]
 800a5a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5a4:	6892      	ldr	r2, [r2, #8]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f2c0 80b2 	blt.w	800a716 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe f958 	bl	8008878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff ff68 	bl	800a4a0 <prvSampleTimeNow>
 800a5d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	f200 809b 	bhi.w	800a710 <prvProcessReceivedCommands+0x1ac>
 800a5da:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <prvProcessReceivedCommands+0x7c>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	0800a683 	.word	0x0800a683
 800a5f0:	0800a697 	.word	0x0800a697
 800a5f4:	0800a6e7 	.word	0x0800a6e7
 800a5f8:	0800a609 	.word	0x0800a609
 800a5fc:	0800a609 	.word	0x0800a609
 800a600:	0800a683 	.word	0x0800a683
 800a604:	0800a697 	.word	0x0800a697
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a60e:	f043 0301 	orr.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	18d1      	adds	r1, r2, r3
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a628:	f7ff ff5a 	bl	800a4e0 <prvInsertTimerInActiveList>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d070      	beq.n	800a714 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b00      	cmp	r3, #0
 800a646:	d065      	beq.n	800a714 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	441a      	add	r2, r3
 800a650:	2300      	movs	r3, #0
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	2300      	movs	r3, #0
 800a656:	2100      	movs	r1, #0
 800a658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a65a:	f7ff fdfb 	bl	800a254 <xTimerGenericCommand>
 800a65e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d156      	bne.n	800a714 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	b672      	cpsid	i
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	b662      	cpsie	i
 800a67a:	61bb      	str	r3, [r7, #24]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a694:	e03f      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a69c:	f043 0301 	orr.w	r3, r3, #1
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10d      	bne.n	800a6d2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	b672      	cpsid	i
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	b662      	cpsie	i
 800a6ca:	617b      	str	r3, [r7, #20]
}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	e7fd      	b.n	800a6ce <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	18d1      	adds	r1, r2, r3
 800a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6e0:	f7ff fefe 	bl	800a4e0 <prvInsertTimerInActiveList>
					break;
 800a6e4:	e017      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a6f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f6:	f000 fbd5 	bl	800aea4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6fa:	e00c      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a702:	f023 0301 	bic.w	r3, r3, #1
 800a706:	b2da      	uxtb	r2, r3
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a70e:	e002      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a710:	bf00      	nop
 800a712:	e000      	b.n	800a716 <prvProcessReceivedCommands+0x1b2>
					break;
 800a714:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a716:	4b08      	ldr	r3, [pc, #32]	@ (800a738 <prvProcessReceivedCommands+0x1d4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	1d39      	adds	r1, r7, #4
 800a71c:	2200      	movs	r2, #0
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fb98 	bl	8008e54 <xQueueReceive>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	f47f af20 	bne.w	800a56c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	3730      	adds	r7, #48	@ 0x30
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200011c8 	.word	0x200011c8

0800a73c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a742:	e04b      	b.n	800a7dc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a744:	4b2f      	ldr	r3, [pc, #188]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a74e:	4b2d      	ldr	r3, [pc, #180]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3304      	adds	r3, #4
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe f88b 	bl	8008878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d031      	beq.n	800a7dc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	4413      	add	r3, r2
 800a780:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	429a      	cmp	r2, r3
 800a788:	d90e      	bls.n	800a7a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a796:	4b1b      	ldr	r3, [pc, #108]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe f830 	bl	8008806 <vListInsert>
 800a7a6:	e019      	b.n	800a7dc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff fd4e 	bl	800a254 <xTimerGenericCommand>
 800a7b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10d      	bne.n	800a7dc <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c4:	b672      	cpsid	i
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	b662      	cpsie	i
 800a7d4:	603b      	str	r3, [r7, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
 800a7da:	e7fd      	b.n	800a7d8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7dc:	4b09      	ldr	r3, [pc, #36]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1ae      	bne.n	800a744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7e6:	4b07      	ldr	r3, [pc, #28]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7ec:	4b06      	ldr	r3, [pc, #24]	@ (800a808 <prvSwitchTimerLists+0xcc>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a04      	ldr	r2, [pc, #16]	@ (800a804 <prvSwitchTimerLists+0xc8>)
 800a7f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7f4:	4a04      	ldr	r2, [pc, #16]	@ (800a808 <prvSwitchTimerLists+0xcc>)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	6013      	str	r3, [r2, #0]
}
 800a7fa:	bf00      	nop
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	200011c0 	.word	0x200011c0
 800a808:	200011c4 	.word	0x200011c4

0800a80c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a812:	f000 f94b 	bl	800aaac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a816:	4b15      	ldr	r3, [pc, #84]	@ (800a86c <prvCheckForValidListAndQueue+0x60>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d120      	bne.n	800a860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a81e:	4814      	ldr	r0, [pc, #80]	@ (800a870 <prvCheckForValidListAndQueue+0x64>)
 800a820:	f7fd ffa0 	bl	8008764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a824:	4813      	ldr	r0, [pc, #76]	@ (800a874 <prvCheckForValidListAndQueue+0x68>)
 800a826:	f7fd ff9d 	bl	8008764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a82a:	4b13      	ldr	r3, [pc, #76]	@ (800a878 <prvCheckForValidListAndQueue+0x6c>)
 800a82c:	4a10      	ldr	r2, [pc, #64]	@ (800a870 <prvCheckForValidListAndQueue+0x64>)
 800a82e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a830:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <prvCheckForValidListAndQueue+0x70>)
 800a832:	4a10      	ldr	r2, [pc, #64]	@ (800a874 <prvCheckForValidListAndQueue+0x68>)
 800a834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a836:	2300      	movs	r3, #0
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4b11      	ldr	r3, [pc, #68]	@ (800a880 <prvCheckForValidListAndQueue+0x74>)
 800a83c:	4a11      	ldr	r2, [pc, #68]	@ (800a884 <prvCheckForValidListAndQueue+0x78>)
 800a83e:	2110      	movs	r1, #16
 800a840:	200a      	movs	r0, #10
 800a842:	f7fe f8af 	bl	80089a4 <xQueueGenericCreateStatic>
 800a846:	4603      	mov	r3, r0
 800a848:	4a08      	ldr	r2, [pc, #32]	@ (800a86c <prvCheckForValidListAndQueue+0x60>)
 800a84a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <prvCheckForValidListAndQueue+0x60>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a854:	4b05      	ldr	r3, [pc, #20]	@ (800a86c <prvCheckForValidListAndQueue+0x60>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	490b      	ldr	r1, [pc, #44]	@ (800a888 <prvCheckForValidListAndQueue+0x7c>)
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fcf2 	bl	8009244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a860:	f000 f95a 	bl	800ab18 <vPortExitCritical>
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200011c8 	.word	0x200011c8
 800a870:	20001198 	.word	0x20001198
 800a874:	200011ac 	.word	0x200011ac
 800a878:	200011c0 	.word	0x200011c0
 800a87c:	200011c4 	.word	0x200011c4
 800a880:	20001274 	.word	0x20001274
 800a884:	200011d4 	.word	0x200011d4
 800a888:	0800b2fc 	.word	0x0800b2fc

0800a88c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3b04      	subs	r3, #4
 800a89c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3b04      	subs	r3, #4
 800a8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f023 0201 	bic.w	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3b04      	subs	r3, #4
 800a8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8bc:	4a0c      	ldr	r2, [pc, #48]	@ (800a8f0 <pxPortInitialiseStack+0x64>)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3b14      	subs	r3, #20
 800a8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f06f 0202 	mvn.w	r2, #2
 800a8da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3b20      	subs	r3, #32
 800a8e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	0800a8f5 	.word	0x0800a8f5

0800a8f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8fe:	4b15      	ldr	r3, [pc, #84]	@ (800a954 <prvTaskExitError+0x60>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d00d      	beq.n	800a924 <prvTaskExitError+0x30>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	b672      	cpsid	i
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	b662      	cpsie	i
 800a91c:	60fb      	str	r3, [r7, #12]
}
 800a91e:	bf00      	nop
 800a920:	bf00      	nop
 800a922:	e7fd      	b.n	800a920 <prvTaskExitError+0x2c>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a928:	b672      	cpsid	i
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	b662      	cpsie	i
 800a938:	60bb      	str	r3, [r7, #8]
}
 800a93a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a93c:	bf00      	nop
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0fc      	beq.n	800a93e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000014 	.word	0x20000014
	...

0800a960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a960:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <pxCurrentTCBConst2>)
 800a962:	6819      	ldr	r1, [r3, #0]
 800a964:	6808      	ldr	r0, [r1, #0]
 800a966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96a:	f380 8809 	msr	PSP, r0
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f04f 0000 	mov.w	r0, #0
 800a976:	f380 8811 	msr	BASEPRI, r0
 800a97a:	4770      	bx	lr
 800a97c:	f3af 8000 	nop.w

0800a980 <pxCurrentTCBConst2>:
 800a980:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop

0800a988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a988:	4808      	ldr	r0, [pc, #32]	@ (800a9ac <prvPortStartFirstTask+0x24>)
 800a98a:	6800      	ldr	r0, [r0, #0]
 800a98c:	6800      	ldr	r0, [r0, #0]
 800a98e:	f380 8808 	msr	MSP, r0
 800a992:	f04f 0000 	mov.w	r0, #0
 800a996:	f380 8814 	msr	CONTROL, r0
 800a99a:	b662      	cpsie	i
 800a99c:	b661      	cpsie	f
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	df00      	svc	0
 800a9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9aa:	bf00      	nop
 800a9ac:	e000ed08 	.word	0xe000ed08

0800a9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9b6:	4b37      	ldr	r3, [pc, #220]	@ (800aa94 <xPortStartScheduler+0xe4>)
 800a9b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	22ff      	movs	r2, #255	@ 0xff
 800a9c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b2f      	ldr	r3, [pc, #188]	@ (800aa98 <xPortStartScheduler+0xe8>)
 800a9dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9de:	4b2f      	ldr	r3, [pc, #188]	@ (800aa9c <xPortStartScheduler+0xec>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e4:	e009      	b.n	800a9fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a9e6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa9c <xPortStartScheduler+0xec>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a2b      	ldr	r2, [pc, #172]	@ (800aa9c <xPortStartScheduler+0xec>)
 800a9ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa02:	2b80      	cmp	r3, #128	@ 0x80
 800aa04:	d0ef      	beq.n	800a9e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa06:	4b25      	ldr	r3, [pc, #148]	@ (800aa9c <xPortStartScheduler+0xec>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f1c3 0307 	rsb	r3, r3, #7
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d00d      	beq.n	800aa2e <xPortStartScheduler+0x7e>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa16:	b672      	cpsid	i
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	b662      	cpsie	i
 800aa26:	60bb      	str	r3, [r7, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	e7fd      	b.n	800aa2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa9c <xPortStartScheduler+0xec>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	4a19      	ldr	r2, [pc, #100]	@ (800aa9c <xPortStartScheduler+0xec>)
 800aa36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa38:	4b18      	ldr	r3, [pc, #96]	@ (800aa9c <xPortStartScheduler+0xec>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa40:	4a16      	ldr	r2, [pc, #88]	@ (800aa9c <xPortStartScheduler+0xec>)
 800aa42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa4c:	4b14      	ldr	r3, [pc, #80]	@ (800aaa0 <xPortStartScheduler+0xf0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a13      	ldr	r2, [pc, #76]	@ (800aaa0 <xPortStartScheduler+0xf0>)
 800aa52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <xPortStartScheduler+0xf0>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a10      	ldr	r2, [pc, #64]	@ (800aaa0 <xPortStartScheduler+0xf0>)
 800aa5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa64:	f000 f8dc 	bl	800ac20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa68:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <xPortStartScheduler+0xf4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa6e:	f000 f8fb 	bl	800ac68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa72:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa8 <xPortStartScheduler+0xf8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa8 <xPortStartScheduler+0xf8>)
 800aa78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa7e:	f7ff ff83 	bl	800a988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa82:	f7ff f829 	bl	8009ad8 <vTaskSwitchContext>
	prvTaskExitError();
 800aa86:	f7ff ff35 	bl	800a8f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	e000e400 	.word	0xe000e400
 800aa98:	200012c4 	.word	0x200012c4
 800aa9c:	200012c8 	.word	0x200012c8
 800aaa0:	e000ed20 	.word	0xe000ed20
 800aaa4:	20000014 	.word	0x20000014
 800aaa8:	e000ef34 	.word	0xe000ef34

0800aaac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	b672      	cpsid	i
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	b662      	cpsie	i
 800aac6:	607b      	str	r3, [r7, #4]
}
 800aac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aaca:	4b11      	ldr	r3, [pc, #68]	@ (800ab10 <vPortEnterCritical+0x64>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3301      	adds	r3, #1
 800aad0:	4a0f      	ldr	r2, [pc, #60]	@ (800ab10 <vPortEnterCritical+0x64>)
 800aad2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aad4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab10 <vPortEnterCritical+0x64>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d112      	bne.n	800ab02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aadc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <vPortEnterCritical+0x68>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <vPortEnterCritical+0x56>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	b672      	cpsid	i
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	b662      	cpsie	i
 800aafa:	603b      	str	r3, [r7, #0]
}
 800aafc:	bf00      	nop
 800aafe:	bf00      	nop
 800ab00:	e7fd      	b.n	800aafe <vPortEnterCritical+0x52>
	}
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	20000014 	.word	0x20000014
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab1e:	4b13      	ldr	r3, [pc, #76]	@ (800ab6c <vPortExitCritical+0x54>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10d      	bne.n	800ab42 <vPortExitCritical+0x2a>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	b672      	cpsid	i
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	b662      	cpsie	i
 800ab3a:	607b      	str	r3, [r7, #4]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ab42:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <vPortExitCritical+0x54>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <vPortExitCritical+0x54>)
 800ab4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vPortExitCritical+0x54>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d105      	bne.n	800ab60 <vPortExitCritical+0x48>
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f383 8811 	msr	BASEPRI, r3
}
 800ab5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	20000014 	.word	0x20000014

0800ab70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab70:	f3ef 8009 	mrs	r0, PSP
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4b15      	ldr	r3, [pc, #84]	@ (800abd0 <pxCurrentTCBConst>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f01e 0f10 	tst.w	lr, #16
 800ab80:	bf08      	it	eq
 800ab82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab94:	b672      	cpsid	i
 800ab96:	f380 8811 	msr	BASEPRI, r0
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	b662      	cpsie	i
 800aba4:	f7fe ff98 	bl	8009ad8 <vTaskSwitchContext>
 800aba8:	f04f 0000 	mov.w	r0, #0
 800abac:	f380 8811 	msr	BASEPRI, r0
 800abb0:	bc09      	pop	{r0, r3}
 800abb2:	6819      	ldr	r1, [r3, #0]
 800abb4:	6808      	ldr	r0, [r1, #0]
 800abb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abba:	f01e 0f10 	tst.w	lr, #16
 800abbe:	bf08      	it	eq
 800abc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abc4:	f380 8809 	msr	PSP, r0
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop

0800abd0 <pxCurrentTCBConst>:
 800abd0:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	b672      	cpsid	i
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	b662      	cpsie	i
 800abf2:	607b      	str	r3, [r7, #4]
}
 800abf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abf6:	f7fe feb3 	bl	8009960 <xTaskIncrementTick>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac00:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <SysTick_Handler+0x44>)
 800ac02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	f383 8811 	msr	BASEPRI, r3
}
 800ac12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	e000ed04 	.word	0xe000ed04

0800ac20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac24:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <vPortSetupTimerInterrupt+0x34>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac58 <vPortSetupTimerInterrupt+0x38>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac30:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <vPortSetupTimerInterrupt+0x3c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a0a      	ldr	r2, [pc, #40]	@ (800ac60 <vPortSetupTimerInterrupt+0x40>)
 800ac36:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3a:	099b      	lsrs	r3, r3, #6
 800ac3c:	4a09      	ldr	r2, [pc, #36]	@ (800ac64 <vPortSetupTimerInterrupt+0x44>)
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac42:	4b04      	ldr	r3, [pc, #16]	@ (800ac54 <vPortSetupTimerInterrupt+0x34>)
 800ac44:	2207      	movs	r2, #7
 800ac46:	601a      	str	r2, [r3, #0]
}
 800ac48:	bf00      	nop
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	e000e010 	.word	0xe000e010
 800ac58:	e000e018 	.word	0xe000e018
 800ac5c:	20000008 	.word	0x20000008
 800ac60:	10624dd3 	.word	0x10624dd3
 800ac64:	e000e014 	.word	0xe000e014

0800ac68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac78 <vPortEnableVFP+0x10>
 800ac6c:	6801      	ldr	r1, [r0, #0]
 800ac6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac72:	6001      	str	r1, [r0, #0]
 800ac74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac76:	bf00      	nop
 800ac78:	e000ed88 	.word	0xe000ed88

0800ac7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac82:	f3ef 8305 	mrs	r3, IPSR
 800ac86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b0f      	cmp	r3, #15
 800ac8c:	d917      	bls.n	800acbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac8e:	4a1a      	ldr	r2, [pc, #104]	@ (800acf8 <vPortValidateInterruptPriority+0x7c>)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac98:	4b18      	ldr	r3, [pc, #96]	@ (800acfc <vPortValidateInterruptPriority+0x80>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	7afa      	ldrb	r2, [r7, #11]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d20d      	bcs.n	800acbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	b672      	cpsid	i
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	b662      	cpsie	i
 800acb6:	607b      	str	r3, [r7, #4]
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	e7fd      	b.n	800acba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acbe:	4b10      	ldr	r3, [pc, #64]	@ (800ad00 <vPortValidateInterruptPriority+0x84>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <vPortValidateInterruptPriority+0x88>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d90d      	bls.n	800acea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd2:	b672      	cpsid	i
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	b662      	cpsie	i
 800ace2:	603b      	str	r3, [r7, #0]
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <vPortValidateInterruptPriority+0x6a>
	}
 800acea:	bf00      	nop
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	e000e3f0 	.word	0xe000e3f0
 800acfc:	200012c4 	.word	0x200012c4
 800ad00:	e000ed0c 	.word	0xe000ed0c
 800ad04:	200012c8 	.word	0x200012c8

0800ad08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	@ 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad14:	f7fe fd66 	bl	80097e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad18:	4b5d      	ldr	r3, [pc, #372]	@ (800ae90 <pvPortMalloc+0x188>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad20:	f000 f920 	bl	800af64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad24:	4b5b      	ldr	r3, [pc, #364]	@ (800ae94 <pvPortMalloc+0x18c>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f040 8094 	bne.w	800ae5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d020      	beq.n	800ad7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ad38:	2208      	movs	r2, #8
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d017      	beq.n	800ad7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	3308      	adds	r3, #8
 800ad52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00d      	beq.n	800ad7a <pvPortMalloc+0x72>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	b672      	cpsid	i
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	b662      	cpsie	i
 800ad72:	617b      	str	r3, [r7, #20]
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	e7fd      	b.n	800ad76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d06c      	beq.n	800ae5a <pvPortMalloc+0x152>
 800ad80:	4b45      	ldr	r3, [pc, #276]	@ (800ae98 <pvPortMalloc+0x190>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d867      	bhi.n	800ae5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad8a:	4b44      	ldr	r3, [pc, #272]	@ (800ae9c <pvPortMalloc+0x194>)
 800ad8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad8e:	4b43      	ldr	r3, [pc, #268]	@ (800ae9c <pvPortMalloc+0x194>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad94:	e004      	b.n	800ada0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d903      	bls.n	800adb2 <pvPortMalloc+0xaa>
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f1      	bne.n	800ad96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adb2:	4b37      	ldr	r3, [pc, #220]	@ (800ae90 <pvPortMalloc+0x188>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb8:	429a      	cmp	r2, r3
 800adba:	d04e      	beq.n	800ae5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2208      	movs	r2, #8
 800adc2:	4413      	add	r3, r2
 800adc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	2308      	movs	r3, #8
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	429a      	cmp	r2, r3
 800addc:	d922      	bls.n	800ae24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00d      	beq.n	800ae0c <pvPortMalloc+0x104>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	b672      	cpsid	i
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	b662      	cpsie	i
 800ae04:	613b      	str	r3, [r7, #16]
}
 800ae06:	bf00      	nop
 800ae08:	bf00      	nop
 800ae0a:	e7fd      	b.n	800ae08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae1e:	69b8      	ldr	r0, [r7, #24]
 800ae20:	f000 f902 	bl	800b028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae24:	4b1c      	ldr	r3, [pc, #112]	@ (800ae98 <pvPortMalloc+0x190>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	4a1a      	ldr	r2, [pc, #104]	@ (800ae98 <pvPortMalloc+0x190>)
 800ae30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae32:	4b19      	ldr	r3, [pc, #100]	@ (800ae98 <pvPortMalloc+0x190>)
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	4b1a      	ldr	r3, [pc, #104]	@ (800aea0 <pvPortMalloc+0x198>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d203      	bcs.n	800ae46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae3e:	4b16      	ldr	r3, [pc, #88]	@ (800ae98 <pvPortMalloc+0x190>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a17      	ldr	r2, [pc, #92]	@ (800aea0 <pvPortMalloc+0x198>)
 800ae44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	4b12      	ldr	r3, [pc, #72]	@ (800ae94 <pvPortMalloc+0x18c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae5a:	f7fe fcd1 	bl	8009800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f003 0307 	and.w	r3, r3, #7
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00d      	beq.n	800ae84 <pvPortMalloc+0x17c>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6c:	b672      	cpsid	i
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	b662      	cpsie	i
 800ae7c:	60fb      	str	r3, [r7, #12]
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	e7fd      	b.n	800ae80 <pvPortMalloc+0x178>
	return pvReturn;
 800ae84:	69fb      	ldr	r3, [r7, #28]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3728      	adds	r7, #40	@ 0x28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20004ed4 	.word	0x20004ed4
 800ae94:	20004ee0 	.word	0x20004ee0
 800ae98:	20004ed8 	.word	0x20004ed8
 800ae9c:	20004ecc 	.word	0x20004ecc
 800aea0:	20004edc 	.word	0x20004edc

0800aea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d04e      	beq.n	800af54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	425b      	negs	r3, r3
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4413      	add	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	4b24      	ldr	r3, [pc, #144]	@ (800af5c <vPortFree+0xb8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4013      	ands	r3, r2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10d      	bne.n	800aeee <vPortFree+0x4a>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	60fb      	str	r3, [r7, #12]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <vPortFree+0x6e>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	b672      	cpsid	i
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	b662      	cpsie	i
 800af0a:	60bb      	str	r3, [r7, #8]
}
 800af0c:	bf00      	nop
 800af0e:	bf00      	nop
 800af10:	e7fd      	b.n	800af0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	4b11      	ldr	r3, [pc, #68]	@ (800af5c <vPortFree+0xb8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4013      	ands	r3, r2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d019      	beq.n	800af54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d115      	bne.n	800af54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	4b0b      	ldr	r3, [pc, #44]	@ (800af5c <vPortFree+0xb8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	43db      	mvns	r3, r3
 800af32:	401a      	ands	r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af38:	f7fe fc54 	bl	80097e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	4b07      	ldr	r3, [pc, #28]	@ (800af60 <vPortFree+0xbc>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4413      	add	r3, r2
 800af46:	4a06      	ldr	r2, [pc, #24]	@ (800af60 <vPortFree+0xbc>)
 800af48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af4a:	6938      	ldr	r0, [r7, #16]
 800af4c:	f000 f86c 	bl	800b028 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af50:	f7fe fc56 	bl	8009800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af54:	bf00      	nop
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20004ee0 	.word	0x20004ee0
 800af60:	20004ed8 	.word	0x20004ed8

0800af64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af70:	4b27      	ldr	r3, [pc, #156]	@ (800b010 <prvHeapInit+0xac>)
 800af72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00c      	beq.n	800af98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3307      	adds	r3, #7
 800af82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0307 	bic.w	r3, r3, #7
 800af8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	4a1f      	ldr	r2, [pc, #124]	@ (800b010 <prvHeapInit+0xac>)
 800af94:	4413      	add	r3, r2
 800af96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af9c:	4a1d      	ldr	r2, [pc, #116]	@ (800b014 <prvHeapInit+0xb0>)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afa2:	4b1c      	ldr	r3, [pc, #112]	@ (800b014 <prvHeapInit+0xb0>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	4413      	add	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afb0:	2208      	movs	r2, #8
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0307 	bic.w	r3, r3, #7
 800afbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a15      	ldr	r2, [pc, #84]	@ (800b018 <prvHeapInit+0xb4>)
 800afc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afc6:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <prvHeapInit+0xb4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2200      	movs	r2, #0
 800afcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afce:	4b12      	ldr	r3, [pc, #72]	@ (800b018 <prvHeapInit+0xb4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afe4:	4b0c      	ldr	r3, [pc, #48]	@ (800b018 <prvHeapInit+0xb4>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4a0a      	ldr	r2, [pc, #40]	@ (800b01c <prvHeapInit+0xb8>)
 800aff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4a09      	ldr	r2, [pc, #36]	@ (800b020 <prvHeapInit+0xbc>)
 800affa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800affc:	4b09      	ldr	r3, [pc, #36]	@ (800b024 <prvHeapInit+0xc0>)
 800affe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b002:	601a      	str	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	200012cc 	.word	0x200012cc
 800b014:	20004ecc 	.word	0x20004ecc
 800b018:	20004ed4 	.word	0x20004ed4
 800b01c:	20004edc 	.word	0x20004edc
 800b020:	20004ed8 	.word	0x20004ed8
 800b024:	20004ee0 	.word	0x20004ee0

0800b028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b030:	4b28      	ldr	r3, [pc, #160]	@ (800b0d4 <prvInsertBlockIntoFreeList+0xac>)
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e002      	b.n	800b03c <prvInsertBlockIntoFreeList+0x14>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	429a      	cmp	r2, r3
 800b044:	d8f7      	bhi.n	800b036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	4413      	add	r3, r2
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d108      	bne.n	800b06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	441a      	add	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	441a      	add	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d118      	bne.n	800b0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	4b15      	ldr	r3, [pc, #84]	@ (800b0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d00d      	beq.n	800b0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	441a      	add	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e008      	b.n	800b0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e003      	b.n	800b0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d002      	beq.n	800b0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	20004ecc 	.word	0x20004ecc
 800b0d8:	20004ed4 	.word	0x20004ed4

0800b0dc <memset>:
 800b0dc:	4402      	add	r2, r0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d100      	bne.n	800b0e6 <memset+0xa>
 800b0e4:	4770      	bx	lr
 800b0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ea:	e7f9      	b.n	800b0e0 <memset+0x4>

0800b0ec <_reclaim_reent>:
 800b0ec:	4b2d      	ldr	r3, [pc, #180]	@ (800b1a4 <_reclaim_reent+0xb8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4283      	cmp	r3, r0
 800b0f2:	b570      	push	{r4, r5, r6, lr}
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	d053      	beq.n	800b1a0 <_reclaim_reent+0xb4>
 800b0f8:	69c3      	ldr	r3, [r0, #28]
 800b0fa:	b31b      	cbz	r3, 800b144 <_reclaim_reent+0x58>
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	b163      	cbz	r3, 800b11a <_reclaim_reent+0x2e>
 800b100:	2500      	movs	r5, #0
 800b102:	69e3      	ldr	r3, [r4, #28]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	5959      	ldr	r1, [r3, r5]
 800b108:	b9b1      	cbnz	r1, 800b138 <_reclaim_reent+0x4c>
 800b10a:	3504      	adds	r5, #4
 800b10c:	2d80      	cmp	r5, #128	@ 0x80
 800b10e:	d1f8      	bne.n	800b102 <_reclaim_reent+0x16>
 800b110:	69e3      	ldr	r3, [r4, #28]
 800b112:	4620      	mov	r0, r4
 800b114:	68d9      	ldr	r1, [r3, #12]
 800b116:	f000 f87b 	bl	800b210 <_free_r>
 800b11a:	69e3      	ldr	r3, [r4, #28]
 800b11c:	6819      	ldr	r1, [r3, #0]
 800b11e:	b111      	cbz	r1, 800b126 <_reclaim_reent+0x3a>
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f875 	bl	800b210 <_free_r>
 800b126:	69e3      	ldr	r3, [r4, #28]
 800b128:	689d      	ldr	r5, [r3, #8]
 800b12a:	b15d      	cbz	r5, 800b144 <_reclaim_reent+0x58>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4620      	mov	r0, r4
 800b130:	682d      	ldr	r5, [r5, #0]
 800b132:	f000 f86d 	bl	800b210 <_free_r>
 800b136:	e7f8      	b.n	800b12a <_reclaim_reent+0x3e>
 800b138:	680e      	ldr	r6, [r1, #0]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 f868 	bl	800b210 <_free_r>
 800b140:	4631      	mov	r1, r6
 800b142:	e7e1      	b.n	800b108 <_reclaim_reent+0x1c>
 800b144:	6961      	ldr	r1, [r4, #20]
 800b146:	b111      	cbz	r1, 800b14e <_reclaim_reent+0x62>
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 f861 	bl	800b210 <_free_r>
 800b14e:	69e1      	ldr	r1, [r4, #28]
 800b150:	b111      	cbz	r1, 800b158 <_reclaim_reent+0x6c>
 800b152:	4620      	mov	r0, r4
 800b154:	f000 f85c 	bl	800b210 <_free_r>
 800b158:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b15a:	b111      	cbz	r1, 800b162 <_reclaim_reent+0x76>
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 f857 	bl	800b210 <_free_r>
 800b162:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b164:	b111      	cbz	r1, 800b16c <_reclaim_reent+0x80>
 800b166:	4620      	mov	r0, r4
 800b168:	f000 f852 	bl	800b210 <_free_r>
 800b16c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b16e:	b111      	cbz	r1, 800b176 <_reclaim_reent+0x8a>
 800b170:	4620      	mov	r0, r4
 800b172:	f000 f84d 	bl	800b210 <_free_r>
 800b176:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b178:	b111      	cbz	r1, 800b180 <_reclaim_reent+0x94>
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 f848 	bl	800b210 <_free_r>
 800b180:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b182:	b111      	cbz	r1, 800b18a <_reclaim_reent+0x9e>
 800b184:	4620      	mov	r0, r4
 800b186:	f000 f843 	bl	800b210 <_free_r>
 800b18a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b18c:	b111      	cbz	r1, 800b194 <_reclaim_reent+0xa8>
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 f83e 	bl	800b210 <_free_r>
 800b194:	6a23      	ldr	r3, [r4, #32]
 800b196:	b11b      	cbz	r3, 800b1a0 <_reclaim_reent+0xb4>
 800b198:	4620      	mov	r0, r4
 800b19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b19e:	4718      	bx	r3
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000018 	.word	0x20000018

0800b1a8 <__libc_init_array>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b1e0 <__libc_init_array+0x38>)
 800b1ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b1e4 <__libc_init_array+0x3c>)
 800b1ae:	1b64      	subs	r4, r4, r5
 800b1b0:	10a4      	asrs	r4, r4, #2
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	d109      	bne.n	800b1cc <__libc_init_array+0x24>
 800b1b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b1e8 <__libc_init_array+0x40>)
 800b1ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b1ec <__libc_init_array+0x44>)
 800b1bc:	f000 f87e 	bl	800b2bc <_init>
 800b1c0:	1b64      	subs	r4, r4, r5
 800b1c2:	10a4      	asrs	r4, r4, #2
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	42a6      	cmp	r6, r4
 800b1c8:	d105      	bne.n	800b1d6 <__libc_init_array+0x2e>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d0:	4798      	blx	r3
 800b1d2:	3601      	adds	r6, #1
 800b1d4:	e7ee      	b.n	800b1b4 <__libc_init_array+0xc>
 800b1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1da:	4798      	blx	r3
 800b1dc:	3601      	adds	r6, #1
 800b1de:	e7f2      	b.n	800b1c6 <__libc_init_array+0x1e>
 800b1e0:	0800b374 	.word	0x0800b374
 800b1e4:	0800b374 	.word	0x0800b374
 800b1e8:	0800b374 	.word	0x0800b374
 800b1ec:	0800b378 	.word	0x0800b378

0800b1f0 <__retarget_lock_acquire_recursive>:
 800b1f0:	4770      	bx	lr

0800b1f2 <__retarget_lock_release_recursive>:
 800b1f2:	4770      	bx	lr

0800b1f4 <memcpy>:
 800b1f4:	440a      	add	r2, r1
 800b1f6:	4291      	cmp	r1, r2
 800b1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1fc:	d100      	bne.n	800b200 <memcpy+0xc>
 800b1fe:	4770      	bx	lr
 800b200:	b510      	push	{r4, lr}
 800b202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20a:	4291      	cmp	r1, r2
 800b20c:	d1f9      	bne.n	800b202 <memcpy+0xe>
 800b20e:	bd10      	pop	{r4, pc}

0800b210 <_free_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4605      	mov	r5, r0
 800b214:	2900      	cmp	r1, #0
 800b216:	d041      	beq.n	800b29c <_free_r+0x8c>
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f0c      	subs	r4, r1, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb8      	it	lt
 800b222:	18e4      	addlt	r4, r4, r3
 800b224:	f000 f83e 	bl	800b2a4 <__malloc_lock>
 800b228:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a0 <_free_r+0x90>)
 800b22a:	6813      	ldr	r3, [r2, #0]
 800b22c:	b933      	cbnz	r3, 800b23c <_free_r+0x2c>
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	6014      	str	r4, [r2, #0]
 800b232:	4628      	mov	r0, r5
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b238:	f000 b83a 	b.w	800b2b0 <__malloc_unlock>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d908      	bls.n	800b252 <_free_r+0x42>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	1821      	adds	r1, r4, r0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf01      	itttt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	1809      	addeq	r1, r1, r0
 800b24e:	6021      	streq	r1, [r4, #0]
 800b250:	e7ed      	b.n	800b22e <_free_r+0x1e>
 800b252:	461a      	mov	r2, r3
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	b10b      	cbz	r3, 800b25c <_free_r+0x4c>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d9fa      	bls.n	800b252 <_free_r+0x42>
 800b25c:	6811      	ldr	r1, [r2, #0]
 800b25e:	1850      	adds	r0, r2, r1
 800b260:	42a0      	cmp	r0, r4
 800b262:	d10b      	bne.n	800b27c <_free_r+0x6c>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	4401      	add	r1, r0
 800b268:	1850      	adds	r0, r2, r1
 800b26a:	4283      	cmp	r3, r0
 800b26c:	6011      	str	r1, [r2, #0]
 800b26e:	d1e0      	bne.n	800b232 <_free_r+0x22>
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	6053      	str	r3, [r2, #4]
 800b276:	4408      	add	r0, r1
 800b278:	6010      	str	r0, [r2, #0]
 800b27a:	e7da      	b.n	800b232 <_free_r+0x22>
 800b27c:	d902      	bls.n	800b284 <_free_r+0x74>
 800b27e:	230c      	movs	r3, #12
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	e7d6      	b.n	800b232 <_free_r+0x22>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	1821      	adds	r1, r4, r0
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf04      	itt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	bf04      	itt	eq
 800b294:	1809      	addeq	r1, r1, r0
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	6054      	str	r4, [r2, #4]
 800b29a:	e7ca      	b.n	800b232 <_free_r+0x22>
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	20005020 	.word	0x20005020

0800b2a4 <__malloc_lock>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	@ (800b2ac <__malloc_lock+0x8>)
 800b2a6:	f7ff bfa3 	b.w	800b1f0 <__retarget_lock_acquire_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	2000501c 	.word	0x2000501c

0800b2b0 <__malloc_unlock>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	@ (800b2b8 <__malloc_unlock+0x8>)
 800b2b2:	f7ff bf9e 	b.w	800b1f2 <__retarget_lock_release_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	2000501c 	.word	0x2000501c

0800b2bc <_init>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	bf00      	nop
 800b2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c2:	bc08      	pop	{r3}
 800b2c4:	469e      	mov	lr, r3
 800b2c6:	4770      	bx	lr

0800b2c8 <_fini>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	bf00      	nop
 800b2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ce:	bc08      	pop	{r3}
 800b2d0:	469e      	mov	lr, r3
 800b2d2:	4770      	bx	lr
