
BLDC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b284  0800b284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b31c  0800b31c  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b31c  0800b31c  0000c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b324  0800b324  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b324  0800b324  0000c324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b328  0800b328  0000c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b32c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fbc  20000068  0800b394  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005024  0800b394  0000e024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219d0  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ca  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00034b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b6f  00000000  00000000  00035f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207b9  00000000  00000000  0005ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee0ce  00000000  00000000  0007c251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a31f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eac  00000000  00000000  0016a364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00171210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b26c 	.word	0x0800b26c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b26c 	.word	0x0800b26c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <SWITCH>:
 *  Created on: Jun 20, 2024
 *      Author: chipi
 */
#include "BLDC.h"

uint8_t SWITCH( bool coils[]){
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b25a      	sxtb	r2, r3
 8000564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000568:	4313      	orrs	r3, r2
 800056a:	b25b      	sxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	b25b      	sxtb	r3, r3
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000584:	4313      	orrs	r3, r2
 8000586:	b25b      	sxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3302      	adds	r3, #2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b25b      	sxtb	r3, r3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	b25a      	sxtb	r2, r3
 800059c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	73fb      	strb	r3, [r7, #15]
return connector;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <Phaze_A_ON>:

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);}
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <Phaze_A_ON+0x18>)
 80005bc:	f006 fa22 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 80005c0:	2100      	movs	r1, #0
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <Phaze_A_ON+0x18>)
 80005c4:	f004 fd92 	bl	80050ec <HAL_TIM_PWM_Start>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200002cc 	.word	0x200002cc

080005d0 <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005d8:	f004 fe82 	bl	80052e0 <HAL_TIM_PWM_Stop>
 80005dc:	2100      	movs	r1, #0
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <Phaze_A_OFF+0x18>)
 80005e0:	f006 f94e 	bl	8006880 <HAL_TIMEx_PWMN_Start>
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002cc 	.word	0x200002cc

080005ec <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);}
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005f4:	f004 fe74 	bl	80052e0 <HAL_TIM_PWM_Stop>
 80005f8:	2100      	movs	r1, #0
 80005fa:	4802      	ldr	r0, [pc, #8]	@ (8000604 <Phaze_A_ZZ+0x18>)
 80005fc:	f006 fa02 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002cc 	.word	0x200002cc

08000608 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);}
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
 800060c:	2104      	movs	r1, #4
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <Phaze_B_ON+0x18>)
 8000610:	f006 f9f8 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 8000614:	2104      	movs	r1, #4
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <Phaze_B_ON+0x18>)
 8000618:	f004 fd68 	bl	80050ec <HAL_TIM_PWM_Start>
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200002cc 	.word	0x200002cc

08000624 <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); }
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <Phaze_B_OFF+0x18>)
 800062c:	f004 fe58 	bl	80052e0 <HAL_TIM_PWM_Stop>
 8000630:	2104      	movs	r1, #4
 8000632:	4802      	ldr	r0, [pc, #8]	@ (800063c <Phaze_B_OFF+0x18>)
 8000634:	f006 f924 	bl	8006880 <HAL_TIMEx_PWMN_Start>
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002cc 	.word	0x200002cc

08000640 <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
 8000644:	2104      	movs	r1, #4
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000648:	f004 fe4a 	bl	80052e0 <HAL_TIM_PWM_Stop>
 800064c:	2104      	movs	r1, #4
 800064e:	4802      	ldr	r0, [pc, #8]	@ (8000658 <Phaze_B_ZZ+0x18>)
 8000650:	f006 f9d8 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200002cc 	.word	0x200002cc

0800065c <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  }
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	2108      	movs	r1, #8
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <Phaze_C_ON+0x18>)
 8000664:	f006 f9ce 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 8000668:	2108      	movs	r1, #8
 800066a:	4802      	ldr	r0, [pc, #8]	@ (8000674 <Phaze_C_ON+0x18>)
 800066c:	f004 fd3e 	bl	80050ec <HAL_TIM_PWM_Start>
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200002cc 	.word	0x200002cc

08000678 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);}
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000680:	f004 fe2e 	bl	80052e0 <HAL_TIM_PWM_Stop>
 8000684:	2108      	movs	r1, #8
 8000686:	4802      	ldr	r0, [pc, #8]	@ (8000690 <Phaze_C_OFF+0x18>)
 8000688:	f006 f8fa 	bl	8006880 <HAL_TIMEx_PWMN_Start>
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002cc 	.word	0x200002cc

08000694 <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);}
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <Phaze_C_ZZ+0x18>)
 800069c:	f004 fe20 	bl	80052e0 <HAL_TIM_PWM_Stop>
 80006a0:	2108      	movs	r1, #8
 80006a2:	4802      	ldr	r0, [pc, #8]	@ (80006ac <Phaze_C_ZZ+0x18>)
 80006a4:	f006 f9ae 	bl	8006a04 <HAL_TIMEx_PWMN_Stop>
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200002cc 	.word	0x200002cc

080006b0 <BLDC_MotorCommutation>:


void BLDC_MotorCommutation(uint8_t halls  ){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]

	 switch (halls) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d84b      	bhi.n	8000758 <BLDC_MotorCommutation+0xa8>
 80006c0:	a201      	add	r2, pc, #4	@ (adr r2, 80006c8 <BLDC_MotorCommutation+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	0800074b 	.word	0x0800074b
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f7 	.word	0x080006f7
 80006d4:	08000705 	.word	0x08000705
 80006d8:	08000713 	.word	0x08000713
 80006dc:	08000721 	.word	0x08000721
 80006e0:	0800072f 	.word	0x0800072f
 80006e4:	0800073d 	.word	0x0800073d

	case 1:

    Phaze_A_ON();
 80006e8:	f7ff ff64 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_ZZ();
 80006ec:	f7ff ffa8 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_OFF();
 80006f0:	f7ff ffc2 	bl	8000678 <Phaze_C_OFF>

	break;
 80006f4:	e031      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 2:

    Phaze_A_OFF();
 80006f6:	f7ff ff6b 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ON();
 80006fa:	f7ff ff85 	bl	8000608 <Phaze_B_ON>
    Phaze_C_ZZ();
 80006fe:	f7ff ffc9 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000702:	e02a      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 3:

	Phaze_A_ZZ();
 8000704:	f7ff ff72 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ON();
 8000708:	f7ff ff7e 	bl	8000608 <Phaze_B_ON>
	Phaze_C_OFF();
 800070c:	f7ff ffb4 	bl	8000678 <Phaze_C_OFF>

	break;
 8000710:	e023      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 4:

	Phaze_A_ZZ();
 8000712:	f7ff ff6b 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_OFF();
 8000716:	f7ff ff85 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ON();
 800071a:	f7ff ff9f 	bl	800065c <Phaze_C_ON>


	break;
 800071e:	e01c      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 5:

	Phaze_A_ON();
 8000720:	f7ff ff48 	bl	80005b4 <Phaze_A_ON>
	Phaze_B_OFF();
 8000724:	f7ff ff7e 	bl	8000624 <Phaze_B_OFF>
	Phaze_C_ZZ();
 8000728:	f7ff ffb4 	bl	8000694 <Phaze_C_ZZ>

	break;
 800072c:	e015      	b.n	800075a <BLDC_MotorCommutation+0xaa>
	case 6:

	Phaze_A_OFF();
 800072e:	f7ff ff4f 	bl	80005d0 <Phaze_A_OFF>
	Phaze_B_ZZ();
 8000732:	f7ff ff85 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ON();
 8000736:	f7ff ff91 	bl	800065c <Phaze_C_ON>

	break;
 800073a:	e00e      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 7:

	Phaze_A_ZZ();
 800073c:	f7ff ff56 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 8000740:	f7ff ff7e 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000744:	f7ff ffa6 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000748:	e007      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	case 0:

	Phaze_A_ZZ();
 800074a:	f7ff ff4f 	bl	80005ec <Phaze_A_ZZ>
	Phaze_B_ZZ();
 800074e:	f7ff ff77 	bl	8000640 <Phaze_B_ZZ>
	Phaze_C_ZZ();
 8000752:	f7ff ff9f 	bl	8000694 <Phaze_C_ZZ>

	break;
 8000756:	e000      	b.n	800075a <BLDC_MotorCommutation+0xaa>

	default:
	break;}
 8000758:	bf00      	nop

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop

08000764 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b55      	ldr	r3, [pc, #340]	@ (80008cc <Registers_handler+0x168>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d021      	beq.n	80007c2 <Registers_handler+0x5e>
 800077e:	2300      	movs	r3, #0
 8000780:	82fb      	strh	r3, [r7, #22]
 8000782:	e007      	b.n	8000794 <Registers_handler+0x30>
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	3301      	adds	r3, #1
 8000792:	82fb      	strh	r3, [r7, #22]
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	2b3f      	cmp	r3, #63	@ 0x3f
 8000798:	d9f4      	bls.n	8000784 <Registers_handler+0x20>
	     RX_2;
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a0:	484b      	ldr	r0, [pc, #300]	@ (80008d0 <Registers_handler+0x16c>)
 80007a2:	f003 fa01 	bl	8003ba8 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	484a      	ldr	r0, [pc, #296]	@ (80008d4 <Registers_handler+0x170>)
 80007ac:	f007 fde9 	bl	8008382 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007b0:	4b49      	ldr	r3, [pc, #292]	@ (80008d8 <Registers_handler+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <Registers_handler+0x174>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0208 	bic.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
		return;}
 80007c0:	e081      	b.n	80008c6 <Registers_handler+0x162>


	if (Size < 4) {
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d805      	bhi.n	80007d4 <Registers_handler+0x70>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80007c8:	2202      	movs	r2, #2
 80007ca:	2103      	movs	r1, #3
 80007cc:	4841      	ldr	r0, [pc, #260]	@ (80008d4 <Registers_handler+0x170>)
 80007ce:	f001 f80d 	bl	80017ec <sendError>

	        return;
 80007d2:	e078      	b.n	80008c6 <Registers_handler+0x162>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	3b02      	subs	r3, #2
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3b02      	subs	r3, #2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 ff75 	bl	80016f0 <calcCRC16ModBus>
 8000806:	4603      	mov	r3, r0
 8000808:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 800080a:	8aba      	ldrh	r2, [r7, #20]
 800080c:	8a7b      	ldrh	r3, [r7, #18]
 800080e:	429a      	cmp	r2, r3
 8000810:	d005      	beq.n	800081e <Registers_handler+0xba>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 8000812:	2203      	movs	r2, #3
 8000814:	2103      	movs	r1, #3
 8000816:	482f      	ldr	r0, [pc, #188]	@ (80008d4 <Registers_handler+0x170>)
 8000818:	f000 ffe8 	bl	80017ec <sendError>

	        return;
 800081c:	e053      	b.n	80008c6 <Registers_handler+0x162>
	    }


                       uint8_t opCode = rxFrame[1];
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000824:	7c7b      	ldrb	r3, [r7, #17]
 8000826:	3b01      	subs	r3, #1
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d845      	bhi.n	80008b8 <Registers_handler+0x154>
 800082c:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <Registers_handler+0xd0>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000875 	.word	0x08000875
 8000838:	08000883 	.word	0x08000883
 800083c:	08000891 	.word	0x08000891
 8000840:	0800089b 	.word	0x0800089b
 8000844:	080008b9 	.word	0x080008b9
 8000848:	080008a5 	.word	0x080008a5
 800084c:	080008b9 	.word	0x080008b9
 8000850:	080008b9 	.word	0x080008b9
 8000854:	080008b9 	.word	0x080008b9
 8000858:	080008b9 	.word	0x080008b9
 800085c:	080008b9 	.word	0x080008b9
 8000860:	080008b9 	.word	0x080008b9
 8000864:	080008b9 	.word	0x080008b9
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008b9 	.word	0x080008b9
 8000870:	080008af 	.word	0x080008af
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <Registers_handler+0x178>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4816      	ldr	r0, [pc, #88]	@ (80008d4 <Registers_handler+0x170>)
 800087c:	f001 f8d8 	bl	8001a30 <handleReadCoils>
				  			   break;
 8000880:	e021      	b.n	80008c6 <Registers_handler+0x162>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <Registers_handler+0x17c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <Registers_handler+0x170>)
 800088a:	f001 f93b 	bl	8001b04 <handleReadDiscreteInputs>
							   break;
 800088e:	e01a      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <Registers_handler+0x170>)
 8000894:	f000 ffda 	bl	800184c <handleReadHoldingRegs>
				  			   break;
 8000898:	e015      	b.n	80008c6 <Registers_handler+0x162>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <Registers_handler+0x170>)
 800089e:	f001 f84d 	bl	800193c <handleReadInputRegs>

				  			   break;
 80008a2:	e010      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <Registers_handler+0x170>)
 80008a8:	f001 f99a 	bl	8001be0 <handleWriteMulyipleHandlingRegister>

                               break;
 80008ac:	e00b      	b.n	80008c6 <Registers_handler+0x162>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <Registers_handler+0x170>)
 80008b2:	f001 f995 	bl	8001be0 <handleWriteMulyipleHandlingRegister>

                               break;
 80008b6:	e006      	b.n	80008c6 <Registers_handler+0x162>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80008b8:	7c7b      	ldrb	r3, [r7, #17]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <Registers_handler+0x170>)
 80008c0:	f000 ff94 	bl	80017ec <sendError>
				  			   break;
 80008c4:	bf00      	nop
				  			     }



                          }
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20000364 	.word	0x20000364
 80008d8:	200003ec 	.word	0x200003ec
 80008dc:	20000209 	.word	0x20000209
 80008e0:	20000208 	.word	0x20000208

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008e8:	f000 febe 	bl	8001668 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f001 fdc7 	bl	800247e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f8ee 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 fb9c 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f8:	f000 fb74 	bl	8000fe4 <MX_DMA_Init>
  MX_TIM1_Init();
 80008fc:	f000 f9e4 	bl	8000cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000900:	f000 faa8 	bl	8000e54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fb3e 	bl	8000f84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000908:	f000 f94e 	bl	8000ba8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800090c:	f000 f99e 	bl	8000c4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TX_2;
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000916:	4861      	ldr	r0, [pc, #388]	@ (8000a9c <main+0x1b8>)
 8000918:	f003 f946 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_1_ON ;
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	485f      	ldr	r0, [pc, #380]	@ (8000aa0 <main+0x1bc>)
 8000922:	f003 f941 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_2_ON ;
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	485d      	ldr	r0, [pc, #372]	@ (8000aa0 <main+0x1bc>)
 800092c:	f003 f93c 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_3_ON ;
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	@ 0x40
 8000934:	485a      	ldr	r0, [pc, #360]	@ (8000aa0 <main+0x1bc>)
 8000936:	f003 f937 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_4_ON ;
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	4858      	ldr	r0, [pc, #352]	@ (8000aa0 <main+0x1bc>)
 8000940:	f003 f932 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_5_ON ;
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094a:	4855      	ldr	r0, [pc, #340]	@ (8000aa0 <main+0x1bc>)
 800094c:	f003 f92c 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_6_ON ;
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	4852      	ldr	r0, [pc, #328]	@ (8000aa0 <main+0x1bc>)
 8000958:	f003 f926 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_7_ON ;
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000962:	484f      	ldr	r0, [pc, #316]	@ (8000aa0 <main+0x1bc>)
 8000964:	f003 f920 	bl	8003ba8 <HAL_GPIO_WritePin>
  LED_8_ON ;
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096e:	484c      	ldr	r0, [pc, #304]	@ (8000aa0 <main+0x1bc>)
 8000970:	f003 f91a 	bl	8003ba8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000978:	f001 fdae 	bl	80024d8 <HAL_Delay>
  DRIVE_1_ON;
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4847      	ldr	r0, [pc, #284]	@ (8000aa0 <main+0x1bc>)
 8000982:	f003 f911 	bl	8003ba8 <HAL_GPIO_WritePin>
  DRIVE_2_ON;
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <main+0x1bc>)
 800098c:	f003 f90c 	bl	8003ba8 <HAL_GPIO_WritePin>
  DRIVE_3_ON;
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	4842      	ldr	r0, [pc, #264]	@ (8000aa0 <main+0x1bc>)
 8000996:	f003 f907 	bl	8003ba8 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800099a:	2240      	movs	r2, #64	@ 0x40
 800099c:	4941      	ldr	r1, [pc, #260]	@ (8000aa4 <main+0x1c0>)
 800099e:	4842      	ldr	r0, [pc, #264]	@ (8000aa8 <main+0x1c4>)
 80009a0:	f007 fcef 	bl	8008382 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80009a4:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <main+0x1c8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b40      	ldr	r3, [pc, #256]	@ (8000aac <main+0x1c8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 0208 	bic.w	r2, r2, #8
 80009b2:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim2);
 80009b4:	483e      	ldr	r0, [pc, #248]	@ (8000ab0 <main+0x1cc>)
 80009b6:	f004 fabf 	bl	8004f38 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	483c      	ldr	r0, [pc, #240]	@ (8000ab0 <main+0x1cc>)
 80009be:	f004 fd71 	bl	80054a4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	483a      	ldr	r0, [pc, #232]	@ (8000ab0 <main+0x1cc>)
 80009c6:	f004 fd6d 	bl	80054a4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80009ca:	2108      	movs	r1, #8
 80009cc:	4838      	ldr	r0, [pc, #224]	@ (8000ab0 <main+0x1cc>)
 80009ce:	f004 fd69 	bl	80054a4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80009d2:	210c      	movs	r1, #12
 80009d4:	4836      	ldr	r0, [pc, #216]	@ (8000ab0 <main+0x1cc>)
 80009d6:	f004 fd65 	bl	80054a4 <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	4835      	ldr	r0, [pc, #212]	@ (8000ab4 <main+0x1d0>)
 80009de:	f004 fb85 	bl	80050ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <main+0x1d0>)
 80009e6:	f005 ff4b 	bl	8006880 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ea:	2104      	movs	r1, #4
 80009ec:	4831      	ldr	r0, [pc, #196]	@ (8000ab4 <main+0x1d0>)
 80009ee:	f004 fb7d 	bl	80050ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009f2:	2104      	movs	r1, #4
 80009f4:	482f      	ldr	r0, [pc, #188]	@ (8000ab4 <main+0x1d0>)
 80009f6:	f005 ff43 	bl	8006880 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009fa:	2108      	movs	r1, #8
 80009fc:	482d      	ldr	r0, [pc, #180]	@ (8000ab4 <main+0x1d0>)
 80009fe:	f004 fb75 	bl	80050ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000a02:	2108      	movs	r1, #8
 8000a04:	482b      	ldr	r0, [pc, #172]	@ (8000ab4 <main+0x1d0>)
 8000a06:	f005 ff3b 	bl	8006880 <HAL_TIMEx_PWMN_Start>

    LED_1_OFF ;
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <main+0x1bc>)
 8000a10:	f003 f8ca 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_2_OFF ;
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4821      	ldr	r0, [pc, #132]	@ (8000aa0 <main+0x1bc>)
 8000a1a:	f003 f8c5 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_3_OFF ;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <main+0x1bc>)
 8000a24:	f003 f8c0 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_4_OFF ;
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2180      	movs	r1, #128	@ 0x80
 8000a2c:	481c      	ldr	r0, [pc, #112]	@ (8000aa0 <main+0x1bc>)
 8000a2e:	f003 f8bb 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_5_OFF ;
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a38:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <main+0x1bc>)
 8000a3a:	f003 f8b5 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_6_OFF ;
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a44:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <main+0x1bc>)
 8000a46:	f003 f8af 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_7_OFF ;
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <main+0x1bc>)
 8000a52:	f003 f8a9 	bl	8003ba8 <HAL_GPIO_WritePin>
    LED_8_OFF ;
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <main+0x1bc>)
 8000a5e:	f003 f8a3 	bl	8003ba8 <HAL_GPIO_WritePin>
    RX_2;
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <main+0x1b8>)
 8000a6a:	f003 f89d 	bl	8003ba8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a6e:	f007 fce3 	bl	8008438 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <main+0x1d4>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4811      	ldr	r0, [pc, #68]	@ (8000abc <main+0x1d8>)
 8000a78:	f007 fd48 	bl	800850c <osThreadNew>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <main+0x1dc>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* creation of ModBusData */
  ModBusDataHandle = osThreadNew(StartTask02, NULL, &ModBusData_attributes);
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <main+0x1e0>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <main+0x1e4>)
 8000a88:	f007 fd40 	bl	800850c <osThreadNew>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <main+0x1e8>)
 8000a90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a92:	f007 fd05 	bl	80084a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <main+0x1b2>
 8000a9a:	bf00      	nop
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	20000364 	.word	0x20000364
 8000aac:	200003ec 	.word	0x200003ec
 8000ab0:	20000318 	.word	0x20000318
 8000ab4:	200002cc 	.word	0x200002cc
 8000ab8:	0800b2b4 	.word	0x0800b2b4
 8000abc:	08001475 	.word	0x08001475
 8000ac0:	200004ac 	.word	0x200004ac
 8000ac4:	0800b2d8 	.word	0x0800b2d8
 8000ac8:	0800148d 	.word	0x0800148d
 8000acc:	200004b0 	.word	0x200004b0

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	@ 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	@ 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00a fad4 	bl	800b08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a29      	ldr	r2, [pc, #164]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <SystemClock_Config+0xd0>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <SystemClock_Config+0xd4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b3c:	23d8      	movs	r3, #216	@ 0xd8
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f8ad 	bl	8003cac <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b58:	f000 fdc4 	bl	80016e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b5c:	f003 f856 	bl	8003c0c <HAL_PWREx_EnableOverDrive>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b66:	f000 fdbd 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2107      	movs	r1, #7
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fb33 	bl	80041f4 <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b94:	f000 fda6 	bl	80016e4 <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3750      	adds	r7, #80	@ 0x50
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0xa0>)
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c0a:	f001 fc89 	bl	8002520 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 fd66 	bl	80016e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_ADC1_Init+0x98>)
 8000c2a:	f001 fcbd 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c34:	f000 fd56 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000220 	.word	0x20000220
 8000c44:	40012000 	.word	0x40012000
 8000c48:	0f000001 	.word	0x0f000001

08000c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <MX_SPI1_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_SPI1_Init+0x74>)
 8000cac:	f004 f842 	bl	8004d34 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 fd15 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000268 	.word	0x20000268
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09a      	sub	sp, #104	@ 0x68
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	222c      	movs	r2, #44	@ 0x2c
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a f9c2 	bl	800b08c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d08:	4b50      	ldr	r3, [pc, #320]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d0a:	4a51      	ldr	r2, [pc, #324]	@ (8000e50 <MX_TIM1_Init+0x188>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b4d      	ldr	r3, [pc, #308]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b4a      	ldr	r3, [pc, #296]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d28:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b47      	ldr	r3, [pc, #284]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4845      	ldr	r0, [pc, #276]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d36:	f004 f8a8 	bl	8004e8a <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 fcd0 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483e      	ldr	r0, [pc, #248]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d52:	f004 ffaf 	bl	8005cb4 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d5c:	f000 fcc2 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d60:	483a      	ldr	r0, [pc, #232]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d62:	f004 f961 	bl	8005028 <HAL_TIM_PWM_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d6c:	f000 fcba 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4832      	ldr	r0, [pc, #200]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000d84:	f005 fe9c 	bl	8006ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d8e:	f000 fca9 	bl	80016e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	@ 0x60
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000da4:	2304      	movs	r3, #4
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4824      	ldr	r0, [pc, #144]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dba:	f004 fe67 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000dc4:	f000 fc8e 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dcc:	2204      	movs	r2, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dd2:	f004 fe5b 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000ddc:	f000 fc82 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de4:	2208      	movs	r2, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000dea:	f004 fe4f 	bl	8005a8c <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000df4:	f000 fc76 	bl	80016e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000e04:	23ff      	movs	r3, #255	@ 0xff
 8000e06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000e2e:	f005 fed5 	bl	8006bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000e38:	f000 fc54 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM1_Init+0x184>)
 8000e3e:	f001 f8bb 	bl	8001fb8 <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3768      	adds	r7, #104	@ 0x68
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002cc 	.word	0x200002cc
 8000e50:	40010000 	.word	0x40010000

08000e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e94:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	4835      	ldr	r0, [pc, #212]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000eaa:	f003 ffee 	bl	8004e8a <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f000 fc16 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482e      	ldr	r0, [pc, #184]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ec6:	f004 fef5 	bl	8005cb4 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f000 fc08 	bl	80016e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ed4:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ed6:	f004 fa83 	bl	80053e0 <HAL_TIM_IC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f000 fc00 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4823      	ldr	r0, [pc, #140]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000ef4:	f005 fde4 	bl	8006ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000efe:	f000 fbf1 	bl	80016e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4819      	ldr	r0, [pc, #100]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f1a:	f004 fd1a 	bl	8005952 <HAL_TIM_IC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f24:	f000 fbde 	bl	80016e4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f34:	f004 fd0d 	bl	8005952 <HAL_TIM_IC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f000 fbd1 	bl	80016e4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f4e:	f004 fd00 	bl	8005952 <HAL_TIM_IC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000f58:	f000 fbc4 	bl	80016e4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	220c      	movs	r2, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM2_Init+0x12c>)
 8000f68:	f004 fcf3 	bl	8005952 <HAL_TIM_IC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000f72:	f000 fbb7 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	@ 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000318 	.word	0x20000318

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	@ (8000fe0 <MX_USART1_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc8:	f005 fec9 	bl	8006d5e <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 fb87 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000364 	.word	0x20000364
 8000fe0:	40011000 	.word	0x40011000

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_DMA_Init+0x48>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	203a      	movs	r0, #58	@ 0x3a
 8001008:	f001 fdfa 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800100c:	203a      	movs	r0, #58	@ 0x3a
 800100e:	f001 fe13 	bl	8002c38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2046      	movs	r0, #70	@ 0x46
 8001018:	f001 fdf2 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800101c:	2046      	movs	r0, #70	@ 0x46
 800101e:	f001 fe0b 	bl	8002c38 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a40      	ldr	r2, [pc, #256]	@ (800114c <MX_GPIO_Init+0x11c>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a3a      	ldr	r2, [pc, #232]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <MX_GPIO_Init+0x11c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b35      	ldr	r3, [pc, #212]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a34      	ldr	r2, [pc, #208]	@ (800114c <MX_GPIO_Init+0x11c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a2e      	ldr	r2, [pc, #184]	@ (800114c <MX_GPIO_Init+0x11c>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <MX_GPIO_Init+0x11c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 80010a6:	2200      	movs	r2, #0
 80010a8:	f640 71df 	movw	r1, #4063	@ 0xfdf
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <MX_GPIO_Init+0x120>)
 80010ae:	f002 fd7b 	bl	8003ba8 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 80010b8:	4826      	ldr	r0, [pc, #152]	@ (8001154 <MX_GPIO_Init+0x124>)
 80010ba:	f002 fd75 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Port_1_Pin Port_2_Pin Port_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin LED_5_Pin
                           LED_6_Pin LED_7_Pin LED_8_Pin */
  GPIO_InitStruct.Pin = Port_1_Pin|Port_2_Pin|Port_3_Pin|LED_1_Pin
 80010be:	f640 73df 	movw	r3, #4063	@ 0xfdf
 80010c2:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin|LED_5_Pin
                          |LED_6_Pin|LED_7_Pin|LED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	481e      	ldr	r0, [pc, #120]	@ (8001150 <MX_GPIO_Init+0x120>)
 80010d8:	f002 fab6 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80010dc:	2307      	movs	r3, #7
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_GPIO_Init+0x124>)
 80010f2:	f002 faa9 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_3_Pin DIRECT_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin|DIRECT_Pin|CS_1_Pin;
 80010f6:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_GPIO_Init+0x124>)
 8001110:	f002 fa9a 	bl	8003648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2105      	movs	r1, #5
 8001118:	2006      	movs	r0, #6
 800111a:	f001 fd71 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800111e:	2006      	movs	r0, #6
 8001120:	f001 fd8a 	bl	8002c38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2105      	movs	r1, #5
 8001128:	2007      	movs	r0, #7
 800112a:	f001 fd69 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800112e:	2007      	movs	r0, #7
 8001130:	f001 fd82 	bl	8002c38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2105      	movs	r1, #5
 8001138:	2008      	movs	r0, #8
 800113a:	f001 fd61 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800113e:	2008      	movs	r0, #8
 8001140:	f001 fd7a 	bl	8002c38 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020400 	.word	0x40020400

08001158 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */


uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001166:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <Reset_USART1>:



void Reset_USART1(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
  //  LED_1_ON;

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8001184:	4825      	ldr	r0, [pc, #148]	@ (800121c <Reset_USART1+0x9c>)
 8001186:	f005 fef1 	bl	8006f6c <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <Reset_USART1+0xa0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <Reset_USART1+0x18>
        HAL_DMA_Abort(&hdma_usart1_rx);
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <Reset_USART1+0xa0>)
 8001194:	f001 ff50 	bl	8003038 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <Reset_USART1+0xa4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <Reset_USART1+0x26>
        HAL_DMA_Abort(&hdma_usart1_tx);
 80011a0:	4820      	ldr	r0, [pc, #128]	@ (8001224 <Reset_USART1+0xa4>)
 80011a2:	f001 ff49 	bl	8003038 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <Reset_USART1+0x9c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <Reset_USART1+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011b4:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <Reset_USART1+0x9c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2208      	movs	r2, #8
 80011bc:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <Reset_USART1+0x9c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2202      	movs	r2, #2
 80011c4:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <Reset_USART1+0xa8>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	4a17      	ldr	r2, [pc, #92]	@ (8001228 <Reset_USART1+0xa8>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_Delay(1); // Задержка для завершения сброса
 80011d2:	2001      	movs	r0, #1
 80011d4:	f001 f980 	bl	80024d8 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <Reset_USART1+0xa8>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <Reset_USART1+0xa8>)
 80011de:	f023 0310 	bic.w	r3, r3, #16
 80011e2:	6253      	str	r3, [r2, #36]	@ 0x24

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <Reset_USART1+0x9c>)
 80011e6:	f005 fe08 	bl	8006dfa <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80011ea:	f7ff fecb 	bl	8000f84 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80011ee:	f7ff fef9 	bl	8000fe4 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80011f2:	2240      	movs	r2, #64	@ 0x40
 80011f4:	490d      	ldr	r1, [pc, #52]	@ (800122c <Reset_USART1+0xac>)
 80011f6:	4809      	ldr	r0, [pc, #36]	@ (800121c <Reset_USART1+0x9c>)
 80011f8:	f007 f8c3 	bl	8008382 <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <Reset_USART1+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <Reset_USART1+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0208 	bic.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 800120c:	f001 f958 	bl	80024c0 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <Reset_USART1+0xb0>)
 8001214:	6013      	str	r3, [r2, #0]


}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000364 	.word	0x20000364
 8001220:	200003ec 	.word	0x200003ec
 8001224:	2000044c 	.word	0x2000044c
 8001228:	40023800 	.word	0x40023800
 800122c:	20000088 	.word	0x20000088
 8001230:	20000084 	.word	0x20000084

08001234 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]


	    RX_2;
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001242:	4810      	ldr	r0, [pc, #64]	@ (8001284 <HAL_UART_TxCpltCallback+0x50>)
 8001244:	f002 fcb0 	bl	8003ba8 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001248:	f001 f93a 	bl	80024c0 <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_UART_TxCpltCallback+0x54>)
 8001250:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8001252:	2240      	movs	r2, #64	@ 0x40
 8001254:	490d      	ldr	r1, [pc, #52]	@ (800128c <HAL_UART_TxCpltCallback+0x58>)
 8001256:	480e      	ldr	r0, [pc, #56]	@ (8001290 <HAL_UART_TxCpltCallback+0x5c>)
 8001258:	f007 f893 	bl	8008382 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <HAL_UART_TxCpltCallback+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_UART_TxCpltCallback+0x5c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0210 	orr.w	r2, r2, #16
 800126a:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_UART_TxCpltCallback+0x60>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_UART_TxCpltCallback+0x60>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0208 	bic.w	r2, r2, #8
 800127a:	601a      	str	r2, [r3, #0]

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020400 	.word	0x40020400
 8001288:	20000084 	.word	0x20000084
 800128c:	20000088 	.word	0x20000088
 8001290:	20000364 	.word	0x20000364
 8001294:	200003ec 	.word	0x200003ec

08001298 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d115      	bne.n	80012da <HAL_UARTEx_RxEventCallback+0x42>
	{

		lastActivityTime = HAL_GetTick();
 80012ae:	f001 f907 	bl	80024c0 <HAL_GetTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_UARTEx_RxEventCallback+0x50>)
 80012b6:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x54>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x54>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0210 	bic.w	r2, r2, #16
 80012c6:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x58>)
 80012ca:	f001 feb5 	bl	8003038 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x5c>)
 80012d2:	4909      	ldr	r1, [pc, #36]	@ (80012f8 <HAL_UARTEx_RxEventCallback+0x60>)
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <HAL_UARTEx_RxEventCallback+0x64>)
 80012d6:	f7ff fa45 	bl	8000764 <Registers_handler>

	}
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011000 	.word	0x40011000
 80012e8:	20000084 	.word	0x20000084
 80012ec:	20000364 	.word	0x20000364
 80012f0:	200003ec 	.word	0x200003ec
 80012f4:	200001e8 	.word	0x200001e8
 80012f8:	200001c8 	.word	0x200001c8
 80012fc:	20000088 	.word	0x20000088

08001300 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001304:	f001 f8dc 	bl	80024c0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <Check_USART1_Timeout+0x2c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001314:	d307      	bcc.n	8001326 <Check_USART1_Timeout+0x26>
     {
         Reset_USART1();
 8001316:	f7ff ff33 	bl	8001180 <Reset_USART1>
         RX_2;
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <Check_USART1_Timeout+0x30>)
 8001322:	f002 fc41 	bl	8003ba8 <HAL_GPIO_WritePin>
     }
 }
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000084 	.word	0x20000084
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == HALL_A_Pin) // Прерывание по PB0
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d12c      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x6a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 8001344:	2101      	movs	r1, #1
 8001346:	4848      	ldr	r0, [pc, #288]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 8001348:	f002 fc16 	bl	8003b78 <HAL_GPIO_ReadPin>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10f      	bne.n	8001372 <HAL_GPIO_EXTI_Callback+0x3e>
        {
            LED_1_ON;
 8001352:	2201      	movs	r2, #1
 8001354:	2108      	movs	r1, #8
 8001356:	4845      	ldr	r0, [pc, #276]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 8001358:	f002 fc26 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 0;
 800135c:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001362:	4843      	ldr	r0, [pc, #268]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001364:	f7ff f8f2 	bl	800054c <SWITCH>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f9a0 	bl	80006b0 <BLDC_MotorCommutation>
 8001370:	e015      	b.n	800139e <HAL_GPIO_EXTI_Callback+0x6a>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin))
 8001372:	2101      	movs	r1, #1
 8001374:	483c      	ldr	r0, [pc, #240]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 8001376:	f002 fbff 	bl	8003b78 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10e      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x6a>
        {
            LED_1_OFF;
 8001380:	2200      	movs	r2, #0
 8001382:	2108      	movs	r1, #8
 8001384:	4839      	ldr	r0, [pc, #228]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 8001386:	f002 fc0f 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[0] = 1;
 800138a:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001390:	4837      	ldr	r0, [pc, #220]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001392:	f7ff f8db 	bl	800054c <SWITCH>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f989 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_B_Pin) // Прерывание по PB1
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d12c      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0xca>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 80013a4:	2102      	movs	r1, #2
 80013a6:	4830      	ldr	r0, [pc, #192]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 80013a8:	f002 fbe6 	bl	8003b78 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10f      	bne.n	80013d2 <HAL_GPIO_EXTI_Callback+0x9e>
        {
            LED_2_ON;
 80013b2:	2201      	movs	r2, #1
 80013b4:	2110      	movs	r1, #16
 80013b6:	482d      	ldr	r0, [pc, #180]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 80013b8:	f002 fbf6 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 0;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013c2:	482b      	ldr	r0, [pc, #172]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013c4:	f7ff f8c2 	bl	800054c <SWITCH>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f970 	bl	80006b0 <BLDC_MotorCommutation>
 80013d0:	e015      	b.n	80013fe <HAL_GPIO_EXTI_Callback+0xca>
        }
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin))
 80013d2:	2102      	movs	r1, #2
 80013d4:	4824      	ldr	r0, [pc, #144]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 80013d6:	f002 fbcf 	bl	8003b78 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10e      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0xca>
        {
            LED_2_OFF;
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4821      	ldr	r0, [pc, #132]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 80013e6:	f002 fbdf 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[1] = 1;
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80013f0:	481f      	ldr	r0, [pc, #124]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 80013f2:	f7ff f8ab 	bl	800054c <SWITCH>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f959 	bl	80006b0 <BLDC_MotorCommutation>
        }
    }

    if(GPIO_Pin == HALL_C_Pin) // Прерывание по PB2
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d12c      	bne.n	800145e <HAL_GPIO_EXTI_Callback+0x12a>
    {
        if (GPIO_PIN_SET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 8001404:	2104      	movs	r1, #4
 8001406:	4818      	ldr	r0, [pc, #96]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 8001408:	f002 fbb6 	bl	8003b78 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10f      	bne.n	8001432 <HAL_GPIO_EXTI_Callback+0xfe>
        {
            LED_3_ON;
 8001412:	2201      	movs	r2, #1
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4815      	ldr	r0, [pc, #84]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 8001418:	f002 fbc6 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 0;
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001422:	4813      	ldr	r0, [pc, #76]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001424:	f7ff f892 	bl	800054c <SWITCH>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f940 	bl	80006b0 <BLDC_MotorCommutation>
            LED_3_OFF;
            BLDC_STATE[2] = 1;
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
        }
    }
}
 8001430:	e015      	b.n	800145e <HAL_GPIO_EXTI_Callback+0x12a>
        else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin))
 8001432:	2104      	movs	r1, #4
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x134>)
 8001436:	f002 fb9f 	bl	8003b78 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10e      	bne.n	800145e <HAL_GPIO_EXTI_Callback+0x12a>
            LED_3_OFF;
 8001440:	2200      	movs	r2, #0
 8001442:	2140      	movs	r1, #64	@ 0x40
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_GPIO_EXTI_Callback+0x138>)
 8001446:	f002 fbaf 	bl	8003ba8 <HAL_GPIO_WritePin>
            BLDC_STATE[2] = 1;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 800144c:	2201      	movs	r2, #1
 800144e:	709a      	strb	r2, [r3, #2]
            BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001450:	4807      	ldr	r0, [pc, #28]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001452:	f7ff f87b 	bl	800054c <SWITCH>
 8001456:	4603      	mov	r3, r0
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f929 	bl	80006b0 <BLDC_MotorCommutation>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	20000218 	.word	0x20000218

08001474 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Check_USART1_Timeout(); // Добавьте эту строку
 800147c:	f7ff ff40 	bl	8001300 <Check_USART1_Timeout>
	      osDelay(2000); // Проверяем каждые 100 мс (можно настроить)
 8001480:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001484:	f007 f8e8 	bl	8008658 <osDelay>
	  Check_USART1_Timeout(); // Добавьте эту строку
 8001488:	bf00      	nop
 800148a:	e7f7      	b.n	800147c <StartDefaultTask+0x8>

0800148c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if(auto_mode==0){
 8001494:	4b67      	ldr	r3, [pc, #412]	@ (8001634 <StartTask02+0x1a8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d021      	beq.n	80014e6 <StartTask02+0x5a>

	         pwm=rcv_data_reg[0];
 80014a2:	4b65      	ldr	r3, [pc, #404]	@ (8001638 <StartTask02+0x1ac>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b64      	ldr	r3, [pc, #400]	@ (800163c <StartTask02+0x1b0>)
 80014aa:	601a      	str	r2, [r3, #0]
	         if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 80014ac:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <StartTask02+0x1b4>)
 80014ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b0:	4b62      	ldr	r3, [pc, #392]	@ (800163c <StartTask02+0x1b0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d803      	bhi.n	80014c0 <StartTask02+0x34>
 80014b8:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <StartTask02+0x1b4>)
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	4a5f      	ldr	r2, [pc, #380]	@ (800163c <StartTask02+0x1b0>)
 80014be:	6013      	str	r3, [r2, #0]
	         if(pwm<=0){pwm=0;}
 80014c0:	4b5e      	ldr	r3, [pc, #376]	@ (800163c <StartTask02+0x1b0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <StartTask02+0x42>
 80014c8:	4b5c      	ldr	r3, [pc, #368]	@ (800163c <StartTask02+0x1b0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

	         TIM1->CCR1=pwm;
 80014ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <StartTask02+0x1b4>)
 80014d0:	4b5a      	ldr	r3, [pc, #360]	@ (800163c <StartTask02+0x1b0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6353      	str	r3, [r2, #52]	@ 0x34
	         TIM1->CCR2=pwm;
 80014d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001640 <StartTask02+0x1b4>)
 80014d8:	4b58      	ldr	r3, [pc, #352]	@ (800163c <StartTask02+0x1b0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6393      	str	r3, [r2, #56]	@ 0x38
	         TIM1->CCR3=pwm;
 80014de:	4a58      	ldr	r2, [pc, #352]	@ (8001640 <StartTask02+0x1b4>)
 80014e0:	4b56      	ldr	r3, [pc, #344]	@ (800163c <StartTask02+0x1b0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	63d3      	str	r3, [r2, #60]	@ 0x3c

		  }

		  if(auto_mode==1){
 80014e6:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <StartTask02+0x1a8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d030      	beq.n	8001550 <StartTask02+0xc4>

			  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 80014ee:	f000 ffe7 	bl	80024c0 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a53      	ldr	r2, [pc, #332]	@ (8001644 <StartTask02+0x1b8>)
 80014f6:	8812      	ldrh	r2, [r2, #0]
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014fe:	d327      	bcc.n	8001550 <StartTask02+0xc4>
	           pwm=pwm+5;
 8001500:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <StartTask02+0x1b0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3305      	adds	r3, #5
 8001506:	4a4d      	ldr	r2, [pc, #308]	@ (800163c <StartTask02+0x1b0>)
 8001508:	6013      	str	r3, [r2, #0]
	           if(pwm>=TIM1->ARR){pwm=TIM1->ARR;}
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <StartTask02+0x1b4>)
 800150c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150e:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <StartTask02+0x1b0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d803      	bhi.n	800151e <StartTask02+0x92>
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <StartTask02+0x1b4>)
 8001518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151a:	4a48      	ldr	r2, [pc, #288]	@ (800163c <StartTask02+0x1b0>)
 800151c:	6013      	str	r3, [r2, #0]
	           if(pwm<=0){pwm=0;}
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <StartTask02+0x1b0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <StartTask02+0xa0>
 8001526:	4b45      	ldr	r3, [pc, #276]	@ (800163c <StartTask02+0x1b0>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

	           TIM1->CCR1=pwm;
 800152c:	4a44      	ldr	r2, [pc, #272]	@ (8001640 <StartTask02+0x1b4>)
 800152e:	4b43      	ldr	r3, [pc, #268]	@ (800163c <StartTask02+0x1b0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6353      	str	r3, [r2, #52]	@ 0x34
	           TIM1->CCR2=pwm;
 8001534:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <StartTask02+0x1b4>)
 8001536:	4b41      	ldr	r3, [pc, #260]	@ (800163c <StartTask02+0x1b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6393      	str	r3, [r2, #56]	@ 0x38
	           TIM1->CCR3=pwm;
 800153c:	4a40      	ldr	r2, [pc, #256]	@ (8001640 <StartTask02+0x1b4>)
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <StartTask02+0x1b0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	63d3      	str	r3, [r2, #60]	@ 0x3c


			  auto_mode_timer=HAL_GetTick();}
 8001544:	f000 ffbc 	bl	80024c0 <HAL_GetTick>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <StartTask02+0x1b8>)
 800154e:	801a      	strh	r2, [r3, #0]
		  }


	TIM1->CCR1=rcv_data_reg[0];
 8001550:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <StartTask02+0x1ac>)
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <StartTask02+0x1b4>)
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2=rcv_data_reg[1];
 8001558:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <StartTask02+0x1ac>)
 800155a:	885a      	ldrh	r2, [r3, #2]
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <StartTask02+0x1b4>)
 800155e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3=rcv_data_reg[2];
 8001560:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <StartTask02+0x1ac>)
 8001562:	889a      	ldrh	r2, [r3, #4]
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <StartTask02+0x1b4>)
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->ARR= rcv_data_reg[4];
 8001568:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <StartTask02+0x1ac>)
 800156a:	891a      	ldrh	r2, [r3, #8]
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <StartTask02+0x1b4>)
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
	data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 8001570:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <StartTask02+0x1bc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4832      	ldr	r0, [pc, #200]	@ (8001640 <StartTask02+0x1b4>)
 8001578:	f7ff fdee 	bl	8001158 <calculateTimerFrequency>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b32      	ldr	r3, [pc, #200]	@ (800164c <StartTask02+0x1c0>)
 8001582:	801a      	strh	r2, [r3, #0]
	data_reg[2]=rpm;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <StartTask02+0x1c4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b30      	ldr	r3, [pc, #192]	@ (800164c <StartTask02+0x1c0>)
 800158c:	809a      	strh	r2, [r3, #4]
    osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f007 f862 	bl	8008658 <osDelay>


    coil_1= (rcv_data_reg[7]>>1)&0x01;
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <StartTask02+0x1ac>)
 8001596:	89db      	ldrh	r3, [r3, #14]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <StartTask02+0x1c8>)
 80015ac:	701a      	strb	r2, [r3, #0]
    coil_2= (rcv_data_reg[7]>>2)&0x01;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <StartTask02+0x1ac>)
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <StartTask02+0x1cc>)
 80015c6:	701a      	strb	r2, [r3, #0]
    coil_3= (rcv_data_reg[7]>>3)&0x01;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <StartTask02+0x1ac>)
 80015ca:	89db      	ldrh	r3, [r3, #14]
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <StartTask02+0x1d0>)
 80015e0:	701a      	strb	r2, [r3, #0]
    coil_4= (rcv_data_reg[7]>>4)&0x01;
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <StartTask02+0x1ac>)
 80015e4:	89db      	ldrh	r3, [r3, #14]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <StartTask02+0x1d4>)
 80015fa:	701a      	strb	r2, [r3, #0]
 auto_mode= (rcv_data_reg[7]>>5)&0x01;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <StartTask02+0x1ac>)
 80015fe:	89db      	ldrh	r3, [r3, #14]
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b29b      	uxth	r3, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <StartTask02+0x1a8>)
 8001614:	701a      	strb	r2, [r3, #0]
    pwr_on= (rcv_data_reg[7]>>6)&0x01;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <StartTask02+0x1ac>)
 8001618:	89db      	ldrh	r3, [r3, #14]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	b29b      	uxth	r3, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <StartTask02+0x1d8>)
 800162e:	701a      	strb	r2, [r3, #0]
	  if(auto_mode==0){
 8001630:	e730      	b.n	8001494 <StartTask02+0x8>
 8001632:	bf00      	nop
 8001634:	2000021b 	.word	0x2000021b
 8001638:	200001e8 	.word	0x200001e8
 800163c:	2000020c 	.word	0x2000020c
 8001640:	40010000 	.word	0x40010000
 8001644:	2000020a 	.word	0x2000020a
 8001648:	20000004 	.word	0x20000004
 800164c:	200001c8 	.word	0x200001c8
 8001650:	20000210 	.word	0x20000210
 8001654:	20000214 	.word	0x20000214
 8001658:	20000215 	.word	0x20000215
 800165c:	20000216 	.word	0x20000216
 8001660:	20000217 	.word	0x20000217
 8001664:	2000021c 	.word	0x2000021c

08001668 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800167a:	f001 faf9 	bl	8002c70 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001682:	2300      	movs	r3, #0
 8001684:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800168a:	231f      	movs	r3, #31
 800168c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800168e:	2387      	movs	r3, #135	@ 0x87
 8001690:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001692:	2300      	movs	r3, #0
 8001694:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001696:	2300      	movs	r3, #0
 8001698:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800169a:	2301      	movs	r3, #1
 800169c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fb17 	bl	8002ce0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016b2:	2004      	movs	r0, #4
 80016b4:	f001 faf4 	bl	8002ca0 <HAL_MPU_Enable>

}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80016d2:	f000 fee1 	bl	8002498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40002000 	.word	0x40002000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80016fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001700:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	74fb      	strb	r3, [r7, #19]
 8001706:	e022      	b.n	800174e <calcCRC16ModBus+0x5e>
		temp = temp ^ buffer[i];
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4053      	eors	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001718:	2301      	movs	r3, #1
 800171a:	74bb      	strb	r3, [r7, #18]
 800171c:	e011      	b.n	8001742 <calcCRC16ModBus+0x52>
			flag = temp & 0x0001;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	617b      	str	r3, [r7, #20]
			if (flag)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <calcCRC16ModBus+0x4c>
				temp ^= 0xA001;
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001738:	4053      	eors	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800173c:	7cbb      	ldrb	r3, [r7, #18]
 800173e:	3301      	adds	r3, #1
 8001740:	74bb      	strb	r3, [r7, #18]
 8001742:	7cbb      	ldrb	r3, [r7, #18]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d9ea      	bls.n	800171e <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	3301      	adds	r3, #1
 800174c:	74fb      	strb	r3, [r7, #19]
 800174e:	7cfa      	ldrb	r2, [r7, #19]
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3d8      	bcc.n	8001708 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	b29b      	uxth	r3, r3
 800176a:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	b29b      	uxth	r3, r3

}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4619      	mov	r1, r3
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f7ff ffae 	bl	80016f0 <calcCRC16ModBus>
 8001794:	4603      	mov	r3, r0
 8001796:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	3301      	adds	r3, #1
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	8afa      	ldrh	r2, [r7, #22]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80017a6:	8afb      	ldrh	r3, [r7, #22]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	b299      	uxth	r1, r3
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]

    TX_2;
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017bc:	480a      	ldr	r0, [pc, #40]	@ (80017e8 <sendModBusRequest+0x6c>)
 80017be:	f002 f9f3 	bl	8003ba8 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3302      	adds	r3, #2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f005 fb50 	bl	8006e74 <HAL_UART_Transmit_DMA>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <sendModBusRequest+0x62>

    //	LED_1_OFF;

	        Error_Handler();
 80017da:	f7ff ff83 	bl	80016e4 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020400 	.word	0x40020400

080017ec <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
 80017f8:	4613      	mov	r3, r2
 80017fa:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <sendError+0x5c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001808:	b2db      	uxtb	r3, r3
 800180a:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2103      	movs	r1, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff6a 	bl	80016f0 <calcCRC16ModBus>
 800181c:	4603      	mov	r3, r0
 800181e:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	2205      	movs	r2, #5
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff9f 	bl	800177c <sendModBusRequest>

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <handleReadHoldingRegs+0xe4>)
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	b21b      	sxth	r3, r3
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b21a      	sxth	r2, r3
 8001860:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <handleReadHoldingRegs+0xe4>)
 8001862:	78db      	ldrb	r3, [r3, #3]
 8001864:	b21b      	sxth	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b21b      	sxth	r3, r3
 800186a:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <handleReadHoldingRegs+0xe4>)
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b21b      	sxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <handleReadHoldingRegs+0xe4>)
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21b      	sxth	r3, r3
 8001880:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 8001882:	8afa      	ldrh	r2, [r7, #22]
 8001884:	897b      	ldrh	r3, [r7, #10]
 8001886:	4413      	add	r3, r2
 8001888:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	2b7d      	cmp	r3, #125	@ 0x7d
 800188e:	d905      	bls.n	800189c <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001890:	2103      	movs	r1, #3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa26 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001898:	2300      	movs	r3, #0
 800189a:	e045      	b.n	8001928 <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800189c:	893b      	ldrh	r3, [r7, #8]
 800189e:	2b3c      	cmp	r3, #60	@ 0x3c
 80018a0:	d905      	bls.n	80018ae <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80018a2:	2102      	movs	r1, #2
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fa1d 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e03c      	b.n	8001928 <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <handleReadHoldingRegs+0xe8>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <handleReadHoldingRegs+0xec>)
 80018b4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80018b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <handleReadHoldingRegs+0xe4>)
 80018b8:	785a      	ldrb	r2, [r3, #1]
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <handleReadHoldingRegs+0xec>)
 80018bc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80018be:	897b      	ldrh	r3, [r7, #10]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <handleReadHoldingRegs+0xec>)
 80018c8:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80018ca:	2303      	movs	r3, #3
 80018cc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e01d      	b.n	8001910 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b299      	uxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	613a      	str	r2, [r7, #16]
 80018e8:	b2c9      	uxtb	r1, r1
 80018ea:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <handleReadHoldingRegs+0xec>)
 80018ec:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80018ee:	8afb      	ldrh	r3, [r7, #22]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	8819      	ldrh	r1, [r3, #0]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	613a      	str	r2, [r7, #16]
 80018fe:	b2c9      	uxtb	r1, r1
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <handleReadHoldingRegs+0xec>)
 8001902:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	897b      	ldrh	r3, [r7, #10]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbdd      	blt.n	80018d4 <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4906      	ldr	r1, [pc, #24]	@ (8001938 <handleReadHoldingRegs+0xec>)
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff2b 	bl	800177c <sendModBusRequest>
	return 1;
 8001926:	2301      	movs	r3, #1

}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000088 	.word	0x20000088
 8001934:	20000000 	.word	0x20000000
 8001938:	200000c8 	.word	0x200000c8

0800193c <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <handleReadInputRegs+0xe8>)
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	b21b      	sxth	r3, r3
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21a      	sxth	r2, r3
 8001950:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <handleReadInputRegs+0xe8>)
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	b21b      	sxth	r3, r3
 8001956:	4313      	orrs	r3, r2
 8001958:	b21b      	sxth	r3, r3
 800195a:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800195c:	4b31      	ldr	r3, [pc, #196]	@ (8001a24 <handleReadInputRegs+0xe8>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	b21b      	sxth	r3, r3
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <handleReadInputRegs+0xe8>)
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21b      	sxth	r3, r3
 8001970:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001972:	8afa      	ldrh	r2, [r7, #22]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	4413      	add	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	2b7d      	cmp	r3, #125	@ 0x7d
 8001982:	d905      	bls.n	8001990 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001984:	2103      	movs	r1, #3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f9ac 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 800198c:	2300      	movs	r3, #0
 800198e:	e045      	b.n	8001a1c <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001990:	893b      	ldrh	r3, [r7, #8]
 8001992:	2b3c      	cmp	r3, #60	@ 0x3c
 8001994:	d905      	bls.n	80019a2 <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001996:	2102      	movs	r1, #2
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f9a3 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 800199e:	2300      	movs	r3, #0
 80019a0:	e03c      	b.n	8001a1c <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <handleReadInputRegs+0xec>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <handleReadInputRegs+0xf0>)
 80019a8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80019aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <handleReadInputRegs+0xe8>)
 80019ac:	785a      	ldrb	r2, [r3, #1]
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <handleReadInputRegs+0xf0>)
 80019b0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <handleReadInputRegs+0xf0>)
 80019bc:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80019be:	2303      	movs	r3, #3
 80019c0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e01d      	b.n	8001a04 <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b299      	uxth	r1, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	613a      	str	r2, [r7, #16]
 80019dc:	b2c9      	uxtb	r1, r1
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <handleReadInputRegs+0xf0>)
 80019e0:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80019e2:	8afb      	ldrh	r3, [r7, #22]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	8819      	ldrh	r1, [r3, #0]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	613a      	str	r2, [r7, #16]
 80019f2:	b2c9      	uxtb	r1, r1
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <handleReadInputRegs+0xf0>)
 80019f6:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	3301      	adds	r3, #1
 80019fc:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	897b      	ldrh	r3, [r7, #10]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbdd      	blt.n	80019c8 <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4906      	ldr	r1, [pc, #24]	@ (8001a2c <handleReadInputRegs+0xf0>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff feb1 	bl	800177c <sendModBusRequest>
	return 1;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000088 	.word	0x20000088
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	200000c8 	.word	0x200000c8

08001a30 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <handleReadCoils+0xc8>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <handleReadCoils+0xc8>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <handleReadCoils+0xc8>)
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <handleReadCoils+0xc8>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <handleReadCoils+0x44>
 8001a6c:	89bb      	ldrh	r3, [r7, #12]
 8001a6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a72:	d905      	bls.n	8001a80 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001a74:	2103      	movs	r1, #3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f934 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e037      	b.n	8001af0 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001a80:	89fa      	ldrh	r2, [r7, #14]
 8001a82:	89bb      	ldrh	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a90:	d905      	bls.n	8001a9e <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001a92:	2102      	movs	r1, #2
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f925 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e028      	b.n	8001af0 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4815      	ldr	r0, [pc, #84]	@ (8001afc <handleReadCoils+0xcc>)
 8001aa6:	f009 faf1 	bl	800b08c <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <handleReadCoils+0xd0>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <handleReadCoils+0xcc>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <handleReadCoils+0xc8>)
 8001ab4:	785a      	ldrb	r2, [r3, #1]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <handleReadCoils+0xcc>)
 8001ab8:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001aba:	89bb      	ldrh	r3, [r7, #12]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	89ba      	ldrh	r2, [r7, #12]
 8001ac4:	f002 0207 	and.w	r2, r2, #7
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2201      	movne	r2, #1
 8001ad0:	2200      	moveq	r2, #0
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <handleReadCoils+0xcc>)
 8001ada:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <handleReadCoils+0xcc>)
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4905      	ldr	r1, [pc, #20]	@ (8001afc <handleReadCoils+0xcc>)
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fe47 	bl	800177c <sendModBusRequest>
	return 1;
 8001aee:	2301      	movs	r3, #1

}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000088 	.word	0x20000088
 8001afc:	200000c8 	.word	0x200000c8
 8001b00:	20000000 	.word	0x20000000

08001b04 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <handleReadDiscreteInputs+0xd0>)
 8001b10:	789b      	ldrb	r3, [r3, #2]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <handleReadDiscreteInputs+0xd0>)
 8001b1a:	78db      	ldrb	r3, [r3, #3]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001b24:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <handleReadDiscreteInputs+0xd0>)
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <handleReadDiscreteInputs+0xd0>)
 8001b30:	795b      	ldrb	r3, [r3, #5]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <handleReadDiscreteInputs+0x44>
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b46:	d905      	bls.n	8001b54 <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001b48:	2103      	movs	r1, #3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8ca 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e03a      	b.n	8001bca <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001b54:	89fa      	ldrh	r2, [r7, #14]
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001b60:	897b      	ldrh	r3, [r7, #10]
 8001b62:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b64:	d905      	bls.n	8001b72 <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001b66:	2102      	movs	r1, #2
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8bb 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e02b      	b.n	8001bca <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 8001b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b76:	2100      	movs	r1, #0
 8001b78:	4817      	ldr	r0, [pc, #92]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001b7a:	f009 fa87 	bl	800b08c <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <handleReadDiscreteInputs+0xd8>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001b84:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <handleReadDiscreteInputs+0xd0>)
 8001b88:	785a      	ldrb	r2, [r3, #1]
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001b8c:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	89ba      	ldrh	r2, [r7, #12]
 8001b98:	f002 0207 	and.w	r2, r2, #7
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2201      	movne	r2, #1
 8001ba4:	2200      	moveq	r2, #0
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001bae:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001bb8:	789b      	ldrb	r3, [r3, #2]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4905      	ldr	r1, [pc, #20]	@ (8001bd8 <handleReadDiscreteInputs+0xd4>)
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fdda 	bl	800177c <sendModBusRequest>
	return 1;
 8001bc8:	2301      	movs	r3, #1

}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000088 	.word	0x20000088
 8001bd8:	200000c8 	.word	0x200000c8
 8001bdc:	20000000 	.word	0x20000000

08001be0 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001bf6:	78db      	ldrb	r3, [r3, #3]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001c00:	4b35      	ldr	r3, [pc, #212]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c0c:	795b      	ldrb	r3, [r3, #5]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <handleWriteMulyipleHandlingRegister+0x42>
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c20:	d905      	bls.n	8001c2e <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001c22:	2103      	movs	r1, #3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f85d 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e050      	b.n	8001cd0 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001c2e:	8afa      	ldrh	r2, [r7, #22]
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	4413      	add	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001c3a:	893b      	ldrh	r3, [r7, #8]
 8001c3c:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c3e:	d905      	bls.n	8001c4c <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001c40:	2102      	movs	r1, #2
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f84e 	bl	8001ce4 <sendModbusException>
		return MODBUS_ERROR;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e041      	b.n	8001cd0 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e01a      	b.n	8001c8c <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	613a      	str	r2, [r7, #16]
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1c59      	adds	r1, r3, #1
 8001c6a:	6139      	str	r1, [r7, #16]
 8001c6c:	491a      	ldr	r1, [pc, #104]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b219      	sxth	r1, r3
 8001c76:	8afb      	ldrh	r3, [r7, #22]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	82fa      	strh	r2, [r7, #22]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b28a      	uxth	r2, r1
 8001c84:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbe0      	blt.n	8001c56 <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <handleWriteMulyipleHandlingRegister+0xfc>)
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001c9a:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001c9e:	785a      	ldrb	r2, [r3, #1]
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001ca2:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001ca6:	789a      	ldrb	r2, [r3, #2]
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001caa:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cae:	78da      	ldrb	r2, [r3, #3]
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cb2:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cb6:	791a      	ldrb	r2, [r3, #4]
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cba:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001cbe:	795a      	ldrb	r2, [r3, #5]
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cc2:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	4906      	ldr	r1, [pc, #24]	@ (8001ce0 <handleWriteMulyipleHandlingRegister+0x100>)
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fd57 	bl	800177c <sendModBusRequest>
	return 1;   // success
 8001cce:	2301      	movs	r3, #1

}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000088 	.word	0x20000088
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	200000c8 	.word	0x200000c8

08001ce4 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <sendModbusException+0x3c>)
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <sendModbusException+0x40>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <sendModbusException+0x3c>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <sendModbusException+0x40>)
 8001d04:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001d06:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <sendModbusException+0x40>)
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4905      	ldr	r1, [pc, #20]	@ (8001d24 <sendModbusException+0x40>)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fd33 	bl	800177c <sendModBusRequest>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000088 	.word	0x20000088
 8001d24:	200000c8 	.word	0x200000c8

08001d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	210f      	movs	r1, #15
 8001d62:	f06f 0001 	mvn.w	r0, #1
 8001d66:	f000 ff4b 	bl	8002c00 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	2005      	movs	r0, #5
 8001d70:	f000 ff46 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d74:	2005      	movs	r0, #5
 8001d76:	f000 ff5f 	bl	8002c38 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <HAL_ADC_MspInit+0x74>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d123      	bne.n	8001df2 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_ADC_MspInit+0x78>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dda:	231f      	movs	r3, #31
 8001ddc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <HAL_ADC_MspInit+0x7c>)
 8001dee:	f001 fc2b 	bl	8003648 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	@ 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <HAL_SPI_MspInit+0xb4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d143      	bne.n	8001eb2 <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <HAL_SPI_MspInit+0xb8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e72:	2320      	movs	r3, #32
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e82:	2305      	movs	r3, #5
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <HAL_SPI_MspInit+0xbc>)
 8001e8e:	f001 fbdb 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e92:	2330      	movs	r3, #48	@ 0x30
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <HAL_SPI_MspInit+0xc0>)
 8001eae:	f001 fbcb 	bl	8003648 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40013000 	.word	0x40013000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	@ 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xdc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10c      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eee:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b2c      	ldr	r3, [pc, #176]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f06:	e04a      	b.n	8001f9e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f10:	d145      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	4a25      	ldr	r2, [pc, #148]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1e:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_TIM_Base_MspInit+0xe0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	480e      	ldr	r0, [pc, #56]	@ (8001fb0 <HAL_TIM_Base_MspInit+0xe4>)
 8001f78:	f001 fb66 	bl	8003648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4806      	ldr	r0, [pc, #24]	@ (8001fb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001f9a:	f001 fb55 	bl	8003648 <HAL_GPIO_Init>
}
 8001f9e:	bf00      	nop
 8001fa0:	3730      	adds	r7, #48	@ 0x30
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	@ (8002058 <HAL_TIM_MspPostInit+0xa0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d139      	bne.n	800204e <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <HAL_TIM_MspPostInit+0xa4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800200a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	480e      	ldr	r0, [pc, #56]	@ (8002060 <HAL_TIM_MspPostInit+0xa8>)
 8002028:	f001 fb0e 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800202c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800203e:	2301      	movs	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4806      	ldr	r0, [pc, #24]	@ (8002064 <HAL_TIM_MspPostInit+0xac>)
 800204a:	f001 fafd 	bl	8003648 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	@ 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0aa      	sub	sp, #168	@ 0xa8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f008 ffff 	bl	800b08c <memset>
  if(huart->Instance==USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a54      	ldr	r2, [pc, #336]	@ (80021e4 <HAL_UART_MspInit+0x17c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f040 80a0 	bne.w	80021da <HAL_UART_MspInit+0x172>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800209a:	2340      	movs	r3, #64	@ 0x40
 800209c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800209e:	2300      	movs	r3, #0
 80020a0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fafa 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020b2:	f7ff fb17 	bl	80016e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b6:	4b4c      	ldr	r3, [pc, #304]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a4b      	ldr	r2, [pc, #300]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b46      	ldr	r3, [pc, #280]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a45      	ldr	r2, [pc, #276]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b43      	ldr	r3, [pc, #268]	@ (80021e8 <HAL_UART_MspInit+0x180>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e6:	23c0      	movs	r3, #192	@ 0xc0
 80020e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020fe:	2307      	movs	r3, #7
 8002100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002108:	4619      	mov	r1, r3
 800210a:	4838      	ldr	r0, [pc, #224]	@ (80021ec <HAL_UART_MspInit+0x184>)
 800210c:	f001 fa9c 	bl	8003648 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002110:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002112:	4a38      	ldr	r2, [pc, #224]	@ (80021f4 <HAL_UART_MspInit+0x18c>)
 8002114:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002116:	4b36      	ldr	r3, [pc, #216]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002118:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800211c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211e:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002124:	4b32      	ldr	r3, [pc, #200]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800212a:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 800212c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002130:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800213e:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002146:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800214a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800214c:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002152:	4827      	ldr	r0, [pc, #156]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002154:	f000 fe04 	bl	8002d60 <HAL_DMA_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800215e:	f7ff fac1 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a22      	ldr	r2, [pc, #136]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 8002166:	675a      	str	r2, [r3, #116]	@ 0x74
 8002168:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_UART_MspInit+0x188>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800216e:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 8002170:	4a22      	ldr	r2, [pc, #136]	@ (80021fc <HAL_UART_MspInit+0x194>)
 8002172:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 8002176:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800217a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 800218a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800218e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ae:	4812      	ldr	r0, [pc, #72]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 80021b0:	f000 fdd6 	bl	8002d60 <HAL_DMA_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80021ba:	f7ff fa93 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 80021c2:	671a      	str	r2, [r3, #112]	@ 0x70
 80021c4:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <HAL_UART_MspInit+0x190>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	2025      	movs	r0, #37	@ 0x25
 80021d0:	f000 fd16 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021d4:	2025      	movs	r0, #37	@ 0x25
 80021d6:	f000 fd2f 	bl	8002c38 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80021da:	bf00      	nop
 80021dc:	37a8      	adds	r7, #168	@ 0xa8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	200003ec 	.word	0x200003ec
 80021f4:	40026440 	.word	0x40026440
 80021f8:	2000044c 	.word	0x2000044c
 80021fc:	400264b8 	.word	0x400264b8

08002200 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0e      	ldr	r2, [pc, #56]	@ (8002248 <HAL_UART_MspDeInit+0x48>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d116      	bne.n	8002240 <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_UART_MspDeInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_UART_MspDeInit+0x4c>)
 8002218:	f023 0310 	bic.w	r3, r3, #16
 800221c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800221e:	21c0      	movs	r1, #192	@ 0xc0
 8002220:	480b      	ldr	r0, [pc, #44]	@ (8002250 <HAL_UART_MspDeInit+0x50>)
 8002222:	f001 fbad 	bl	8003980 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fe46 	bl	8002ebc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fe41 	bl	8002ebc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800223a:	2025      	movs	r0, #37	@ 0x25
 800223c:	f000 fd0a 	bl	8002c54 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40011000 	.word	0x40011000
 800224c:	40023800 	.word	0x40023800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	@ 0x38
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <HAL_InitTick+0xe0>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	4a32      	ldr	r2, [pc, #200]	@ (8002334 <HAL_InitTick+0xe0>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_InitTick+0xe0>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800227c:	f107 0210 	add.w	r2, r7, #16
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f9d8 	bl	800463c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002296:	f002 f9a9 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 800229a:	6378      	str	r0, [r7, #52]	@ 0x34
 800229c:	e004      	b.n	80022a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800229e:	f002 f9a5 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 80022a2:	4603      	mov	r3, r0
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022aa:	4a23      	ldr	r2, [pc, #140]	@ (8002338 <HAL_InitTick+0xe4>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	3b01      	subs	r3, #1
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_InitTick+0xe8>)
 80022b8:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_InitTick+0xec>)
 80022ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <HAL_InitTick+0xe8>)
 80022be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022c2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_InitTick+0xe8>)
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <HAL_InitTick+0xe8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_InitTick+0xe8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_InitTick+0xe8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80022dc:	4817      	ldr	r0, [pc, #92]	@ (800233c <HAL_InitTick+0xe8>)
 80022de:	f002 fdd4 	bl	8004e8a <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11b      	bne.n	8002328 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80022f0:	4812      	ldr	r0, [pc, #72]	@ (800233c <HAL_InitTick+0xe8>)
 80022f2:	f002 fe21 	bl	8004f38 <HAL_TIM_Base_Start_IT>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002300:	2b00      	cmp	r3, #0
 8002302:	d111      	bne.n	8002328 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002304:	202d      	movs	r0, #45	@ 0x2d
 8002306:	f000 fc97 	bl	8002c38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d808      	bhi.n	8002322 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	202d      	movs	r0, #45	@ 0x2d
 8002316:	f000 fc73 	bl	8002c00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_InitTick+0xf0>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e002      	b.n	8002328 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800232c:	4618      	mov	r0, r3
 800232e:	3738      	adds	r7, #56	@ 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	431bde83 	.word	0x431bde83
 800233c:	200004b4 	.word	0x200004b4
 8002340:	40002000 	.word	0x40002000
 8002344:	2000000c 	.word	0x2000000c

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <NMI_Handler+0x4>

08002350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <MemManage_Handler+0x4>

08002360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <UsageFault_Handler+0x4>

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 8002390:	2001      	movs	r0, #1
 8002392:	f001 fc23 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}

0800239a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 800239e:	2002      	movs	r0, #2
 80023a0:	f001 fc1c 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 80023ac:	2004      	movs	r0, #4
 80023ae:	f001 fc15 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <USART1_IRQHandler+0x10>)
 80023be:	f004 fe67 	bl	8007090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000364 	.word	0x20000364

080023cc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80023d2:	f003 f9b7 	bl	8005744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200004b4 	.word	0x200004b4

080023e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <DMA2_Stream2_IRQHandler+0x10>)
 80023e6:	f000 feb9 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200003ec 	.word	0x200003ec

080023f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA2_Stream7_IRQHandler+0x10>)
 80023fa:	f000 feaf 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000044c 	.word	0x2000044c

08002408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002430:	f7ff ffea 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	@ (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	@ (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	@ (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245a:	f008 fe7d 	bl	800b158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7fe fa41 	bl	80008e4 <main>
  bx  lr    
 8002462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002470:	0800b32c 	.word	0x0800b32c
  ldr r2, =_sbss
 8002474:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002478:	20005024 	.word	0x20005024

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>

0800247e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002482:	2003      	movs	r0, #3
 8002484:	f000 fbb1 	bl	8002bea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002488:	200f      	movs	r0, #15
 800248a:	f7ff fee3 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248e:	f7ff fc4b 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_IncTick+0x20>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_IncTick+0x24>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	@ (80024bc <HAL_IncTick+0x24>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000010 	.word	0x20000010
 80024bc:	20000500 	.word	0x20000500

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_GetTick+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000500 	.word	0x20000500

080024d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff ffee 	bl	80024c0 <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d005      	beq.n	80024fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_Delay+0x44>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024fe:	bf00      	nop
 8002500:	f7ff ffde 	bl	80024c0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8f7      	bhi.n	8002500 <HAL_Delay+0x28>
  {
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000010 	.word	0x20000010

08002520 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e031      	b.n	800259a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fc22 	bl	8001d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <HAL_ADC_Init+0x84>)
 8002564:	4013      	ands	r3, r2
 8002566:	f043 0202 	orr.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f970 	bl	8002854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40
 800258a:	e001      	b.n	8002590 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	ffffeefd 	.word	0xffffeefd

080025a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e136      	b.n	8002832 <HAL_ADC_ConfigChannel+0x28a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	d93a      	bls.n	800264a <HAL_ADC_ConfigChannel+0xa2>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025dc:	d035      	beq.n	800264a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	2207      	movs	r2, #7
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8d      	ldr	r2, [pc, #564]	@ (8002840 <HAL_ADC_ConfigChannel+0x298>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68d9      	ldr	r1, [r3, #12]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002622:	e035      	b.n	8002690 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	4603      	mov	r3, r0
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4403      	add	r3, r0
 800263c:	3b1e      	subs	r3, #30
 800263e:	409a      	lsls	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002648:	e022      	b.n	8002690 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6919      	ldr	r1, [r3, #16]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	2207      	movs	r2, #7
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43da      	mvns	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	400a      	ands	r2, r1
 800266c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6919      	ldr	r1, [r3, #16]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	4603      	mov	r3, r0
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4403      	add	r3, r0
 8002686:	409a      	lsls	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d824      	bhi.n	80026e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b05      	subs	r3, #5
 80026aa:	221f      	movs	r2, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b05      	subs	r3, #5
 80026d4:	fa00 f203 	lsl.w	r2, r0, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	@ 0x34
 80026e0:	e04c      	b.n	800277c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d824      	bhi.n	8002734 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b23      	subs	r3, #35	@ 0x23
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b23      	subs	r3, #35	@ 0x23
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
 8002732:	e023      	b.n	800277c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b41      	subs	r3, #65	@ 0x41
 8002746:	221f      	movs	r2, #31
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43da      	mvns	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	400a      	ands	r2, r1
 8002754:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b41      	subs	r3, #65	@ 0x41
 8002770:	fa00 f203 	lsl.w	r2, r0, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a30      	ldr	r2, [pc, #192]	@ (8002844 <HAL_ADC_ConfigChannel+0x29c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10a      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1f4>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 8002796:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800279a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a28      	ldr	r2, [pc, #160]	@ (8002844 <HAL_ADC_ConfigChannel+0x29c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10f      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x21e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b12      	cmp	r3, #18
 80027ac:	d10b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027ae:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a25      	ldr	r2, [pc, #148]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_ADC_ConfigChannel+0x29c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d12b      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x280>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_ADC_ConfigChannel+0x298>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x23a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b11      	cmp	r3, #17
 80027e0:	d122      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027e2:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027ee:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_ADC_ConfigChannel+0x298>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d111      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_ADC_ConfigChannel+0x2a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <HAL_ADC_ConfigChannel+0x2a8>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9a      	lsrs	r2, r3, #18
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800281a:	e002      	b.n	8002822 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3b01      	subs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	10000012 	.word	0x10000012
 8002844:	40012000 	.word	0x40012000
 8002848:	40012300 	.word	0x40012300
 800284c:	20000008 	.word	0x20000008
 8002850:	431bde83 	.word	0x431bde83

08002854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800285c:	4b78      	ldr	r3, [pc, #480]	@ (8002a40 <ADC_Init+0x1ec>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a77      	ldr	r2, [pc, #476]	@ (8002a40 <ADC_Init+0x1ec>)
 8002862:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002866:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002868:	4b75      	ldr	r3, [pc, #468]	@ (8002a40 <ADC_Init+0x1ec>)
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4973      	ldr	r1, [pc, #460]	@ (8002a40 <ADC_Init+0x1ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <ADC_Init+0x1f0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e00f      	b.n	800294e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800293c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0202 	bic.w	r2, r2, #2
 800295c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	005a      	lsls	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800298a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800299a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	3b01      	subs	r3, #1
 80029a8:	035a      	lsls	r2, r3, #13
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	e007      	b.n	80029c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	3b01      	subs	r3, #1
 80029e0:	051a      	lsls	r2, r3, #20
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a06:	025a      	lsls	r2, r3, #9
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	029a      	lsls	r2, r3, #10
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012300 	.word	0x40012300
 8002a44:	0f000001 	.word	0x0f000001

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x40>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x40>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00
 8002a8c:	05fa0000 	.word	0x05fa0000

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	@ (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db12      	blt.n	8002b20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	490a      	ldr	r1, [pc, #40]	@ (8002b2c <__NVIC_DisableIRQ+0x44>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	3320      	adds	r3, #32
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b14:	f3bf 8f4f 	dsb	sy
}
 8002b18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b1a:	f3bf 8f6f 	isb	sy
}
 8002b1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	@ (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff28 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c12:	f7ff ff3d 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f7ff ffb1 	bl	8002b84 <NVIC_EncodePriority>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff80 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff30 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff40 	bl	8002ae8 <__NVIC_DisableIRQ>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c74:	f3bf 8f5f 	dmb	sy
}
 8002c78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_MPU_Disable+0x28>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	4a06      	ldr	r2, [pc, #24]	@ (8002c98 <HAL_MPU_Disable+0x28>)
 8002c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c84:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_MPU_Disable+0x2c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00
 8002c9c:	e000ed90 	.word	0xe000ed90

08002ca0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd8 <HAL_MPU_Enable+0x38>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_MPU_Enable+0x3c>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_MPU_Enable+0x3c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cbe:	f3bf 8f4f 	dsb	sy
}
 8002cc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cc4:	f3bf 8f6f 	isb	sy
}
 8002cc8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed90 	.word	0xe000ed90
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	785a      	ldrb	r2, [r3, #1]
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_MPU_ConfigRegion+0x7c>)
 8002cee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_MPU_ConfigRegion+0x7c>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	@ (8002d5c <HAL_MPU_ConfigRegion+0x7c>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002cfc:	4a17      	ldr	r2, [pc, #92]	@ (8002d5c <HAL_MPU_ConfigRegion+0x7c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7b1b      	ldrb	r3, [r3, #12]
 8002d08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7adb      	ldrb	r3, [r3, #11]
 8002d0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7a9b      	ldrb	r3, [r3, #10]
 8002d16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7b5b      	ldrb	r3, [r3, #13]
 8002d1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7b9b      	ldrb	r3, [r3, #14]
 8002d26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7bdb      	ldrb	r3, [r3, #15]
 8002d2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7a5b      	ldrb	r3, [r3, #9]
 8002d36:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d40:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d48:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d4a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d4c:	6113      	str	r3, [r2, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed90 	.word	0xe000ed90

08002d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fba8 	bl	80024c0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e099      	b.n	8002eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9c:	e00f      	b.n	8002dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9e:	f7ff fb8f 	bl	80024c0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d908      	bls.n	8002dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e078      	b.n	8002eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e8      	bne.n	8002d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <HAL_DMA_Init+0x158>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	4313      	orrs	r3, r2
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d117      	bne.n	8002e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb73 	bl	8003550 <DMA_CheckFifoParam>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2240      	movs	r2, #64	@ 0x40
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e016      	b.n	8002eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fb2a 	bl	80034e4 <DMA_CalcBaseAndBitshift>
 8002e90:	4603      	mov	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	223f      	movs	r2, #63	@ 0x3f
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	e010803f 	.word	0xe010803f

08002ebc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e050      	b.n	8002f70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	e048      	b.n	8002f70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2221      	movs	r2, #33	@ 0x21
 8002f1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fae0 	bl	80034e4 <DMA_CalcBaseAndBitshift>
 8002f24:	4603      	mov	r3, r0
 8002f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	223f      	movs	r2, #63	@ 0x3f
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Start_IT+0x26>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e048      	b.n	8003030 <HAL_DMA_Start_IT+0xb8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d137      	bne.n	8003022 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa5e 	bl	8003488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	223f      	movs	r2, #63	@ 0x3f
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0216 	orr.w	r2, r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ff6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0208 	orr.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e005      	b.n	800302e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003046:	f7ff fa3b 	bl	80024c0 <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d008      	beq.n	800306a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2280      	movs	r2, #128	@ 0x80
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e052      	b.n	8003110 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0216 	bic.w	r2, r2, #22
 8003078:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003088:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_DMA_Abort+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0208 	bic.w	r2, r2, #8
 80030a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ba:	e013      	b.n	80030e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030bc:	f7ff fa00 	bl	80024c0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d90c      	bls.n	80030e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2203      	movs	r2, #3
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e015      	b.n	8003110 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e4      	bne.n	80030bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	223f      	movs	r2, #63	@ 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d004      	beq.n	8003136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2280      	movs	r2, #128	@ 0x80
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00c      	b.n	8003150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2205      	movs	r2, #5
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003168:	4b8e      	ldr	r3, [pc, #568]	@ (80033a4 <HAL_DMA_IRQHandler+0x248>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a8e      	ldr	r2, [pc, #568]	@ (80033a8 <HAL_DMA_IRQHandler+0x24c>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a9b      	lsrs	r3, r3, #10
 8003174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	2208      	movs	r2, #8
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01a      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	2208      	movs	r2, #8
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	2204      	movs	r2, #4
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2204      	movs	r2, #4
 8003222:	409a      	lsls	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	2210      	movs	r2, #16
 800323a:	409a      	lsls	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d043      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d03c      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	2210      	movs	r2, #16
 8003258:	409a      	lsls	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d018      	beq.n	800329e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	e01f      	b.n	80032cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e016      	b.n	80032cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0208 	bic.w	r2, r2, #8
 80032ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2220      	movs	r2, #32
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 808f 	beq.w	80033fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8087 	beq.w	80033fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	2220      	movs	r2, #32
 80032f4:	409a      	lsls	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b05      	cmp	r3, #5
 8003304:	d136      	bne.n	8003374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0216 	bic.w	r2, r2, #22
 8003314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_DMA_IRQHandler+0x1da>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0208 	bic.w	r2, r2, #8
 8003344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	223f      	movs	r2, #63	@ 0x3f
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003366:	2b00      	cmp	r3, #0
 8003368:	d07e      	beq.n	8003468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
        }
        return;
 8003372:	e079      	b.n	8003468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01d      	beq.n	80033be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	2b00      	cmp	r3, #0
 8003396:	d031      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
 80033a0:	e02c      	b.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
 80033a2:	bf00      	nop
 80033a4:	20000008 	.word	0x20000008
 80033a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e01e      	b.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0210 	bic.w	r2, r2, #16
 80033da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d032      	beq.n	800346a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d022      	beq.n	8003456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2205      	movs	r2, #5
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	3301      	adds	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	d307      	bcc.n	8003444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f2      	bne.n	8003428 <HAL_DMA_IRQHandler+0x2cc>
 8003442:	e000      	b.n	8003446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003444:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e000      	b.n	800346a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003468:	bf00      	nop
    }
  }
}
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b40      	cmp	r3, #64	@ 0x40
 80034b4:	d108      	bne.n	80034c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034c6:	e007      	b.n	80034d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	3b10      	subs	r3, #16
 80034f4:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <DMA_CalcBaseAndBitshift+0x60>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <DMA_CalcBaseAndBitshift+0x64>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d908      	bls.n	8003524 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <DMA_CalcBaseAndBitshift+0x68>)
 800351a:	4013      	ands	r3, r2
 800351c:	1d1a      	adds	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	@ 0x58
 8003522:	e006      	b.n	8003532 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <DMA_CalcBaseAndBitshift+0x68>)
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	aaaaaaab 	.word	0xaaaaaaab
 8003548:	0800b314 	.word	0x0800b314
 800354c:	fffffc00 	.word	0xfffffc00

08003550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11f      	bne.n	80035aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d856      	bhi.n	800361e <DMA_CheckFifoParam+0xce>
 8003570:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <DMA_CheckFifoParam+0x28>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	08003589 	.word	0x08003589
 800357c:	0800359b 	.word	0x0800359b
 8003580:	08003589 	.word	0x08003589
 8003584:	0800361f 	.word	0x0800361f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d046      	beq.n	8003622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003598:	e043      	b.n	8003622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a2:	d140      	bne.n	8003626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e03d      	b.n	8003626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b2:	d121      	bne.n	80035f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d837      	bhi.n	800362a <DMA_CheckFifoParam+0xda>
 80035ba:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <DMA_CheckFifoParam+0x70>)
 80035bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035d7 	.word	0x080035d7
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	080035e9 	.word	0x080035e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e030      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d025      	beq.n	800362e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e6:	e022      	b.n	800362e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035f6:	e01c      	b.n	8003632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d903      	bls.n	8003606 <DMA_CheckFifoParam+0xb6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003604:	e018      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      break;
 800360a:	e015      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e00b      	b.n	8003636 <DMA_CheckFifoParam+0xe6>
      break;
 800361e:	bf00      	nop
 8003620:	e00a      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e008      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e006      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e004      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;   
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
    }
  } 
  
  return status; 
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	@ 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e169      	b.n	800393c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8158 	bne.w	8003936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d005      	beq.n	800369e <HAL_GPIO_Init+0x56>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d130      	bne.n	8003700 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 0201 	and.w	r2, r3, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d017      	beq.n	800373c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d123      	bne.n	8003790 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	220f      	movs	r2, #15
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	08da      	lsrs	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3208      	adds	r2, #8
 800378a:	69b9      	ldr	r1, [r7, #24]
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80b2 	beq.w	8003936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	4b60      	ldr	r3, [pc, #384]	@ (8003954 <HAL_GPIO_Init+0x30c>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003954 <HAL_GPIO_Init+0x30c>)
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037de:	4b5d      	ldr	r3, [pc, #372]	@ (8003954 <HAL_GPIO_Init+0x30c>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003958 <HAL_GPIO_Init+0x310>)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a52      	ldr	r2, [pc, #328]	@ (800395c <HAL_GPIO_Init+0x314>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02b      	beq.n	800386e <HAL_GPIO_Init+0x226>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a51      	ldr	r2, [pc, #324]	@ (8003960 <HAL_GPIO_Init+0x318>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d025      	beq.n	800386a <HAL_GPIO_Init+0x222>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a50      	ldr	r2, [pc, #320]	@ (8003964 <HAL_GPIO_Init+0x31c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <HAL_GPIO_Init+0x21e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4f      	ldr	r2, [pc, #316]	@ (8003968 <HAL_GPIO_Init+0x320>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x21a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4e      	ldr	r2, [pc, #312]	@ (800396c <HAL_GPIO_Init+0x324>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x216>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4d      	ldr	r2, [pc, #308]	@ (8003970 <HAL_GPIO_Init+0x328>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x212>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4c      	ldr	r2, [pc, #304]	@ (8003974 <HAL_GPIO_Init+0x32c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x20e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4b      	ldr	r2, [pc, #300]	@ (8003978 <HAL_GPIO_Init+0x330>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x20a>
 800384e:	2307      	movs	r3, #7
 8003850:	e00e      	b.n	8003870 <HAL_GPIO_Init+0x228>
 8003852:	2308      	movs	r3, #8
 8003854:	e00c      	b.n	8003870 <HAL_GPIO_Init+0x228>
 8003856:	2306      	movs	r3, #6
 8003858:	e00a      	b.n	8003870 <HAL_GPIO_Init+0x228>
 800385a:	2305      	movs	r3, #5
 800385c:	e008      	b.n	8003870 <HAL_GPIO_Init+0x228>
 800385e:	2304      	movs	r3, #4
 8003860:	e006      	b.n	8003870 <HAL_GPIO_Init+0x228>
 8003862:	2303      	movs	r3, #3
 8003864:	e004      	b.n	8003870 <HAL_GPIO_Init+0x228>
 8003866:	2302      	movs	r3, #2
 8003868:	e002      	b.n	8003870 <HAL_GPIO_Init+0x228>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_GPIO_Init+0x228>
 800386e:	2300      	movs	r3, #0
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f002 0203 	and.w	r2, r2, #3
 8003876:	0092      	lsls	r2, r2, #2
 8003878:	4093      	lsls	r3, r2
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003880:	4935      	ldr	r1, [pc, #212]	@ (8003958 <HAL_GPIO_Init+0x310>)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	3302      	adds	r3, #2
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388e:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <HAL_GPIO_Init+0x334>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038b2:	4a32      	ldr	r2, [pc, #200]	@ (800397c <HAL_GPIO_Init+0x334>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b8:	4b30      	ldr	r3, [pc, #192]	@ (800397c <HAL_GPIO_Init+0x334>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <HAL_GPIO_Init+0x334>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e2:	4b26      	ldr	r3, [pc, #152]	@ (800397c <HAL_GPIO_Init+0x334>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003906:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_GPIO_Init+0x334>)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_GPIO_Init+0x334>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003930:	4a12      	ldr	r2, [pc, #72]	@ (800397c <HAL_GPIO_Init+0x334>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	f67f ae92 	bls.w	8003668 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3724      	adds	r7, #36	@ 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	40013800 	.word	0x40013800
 800395c:	40020000 	.word	0x40020000
 8003960:	40020400 	.word	0x40020400
 8003964:	40020800 	.word	0x40020800
 8003968:	40020c00 	.word	0x40020c00
 800396c:	40021000 	.word	0x40021000
 8003970:	40021400 	.word	0x40021400
 8003974:	40021800 	.word	0x40021800
 8003978:	40021c00 	.word	0x40021c00
 800397c:	40013c00 	.word	0x40013c00

08003980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e0cd      	b.n	8003b38 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800399c:	2201      	movs	r2, #1
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f040 80bd 	bne.w	8003b32 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80039b8:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_GPIO_DeInit+0x1d0>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b54 <HAL_GPIO_DeInit+0x1d4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <HAL_GPIO_DeInit+0xba>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003b58 <HAL_GPIO_DeInit+0x1d8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d025      	beq.n	8003a36 <HAL_GPIO_DeInit+0xb6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a5b      	ldr	r2, [pc, #364]	@ (8003b5c <HAL_GPIO_DeInit+0x1dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <HAL_GPIO_DeInit+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003b60 <HAL_GPIO_DeInit+0x1e0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_DeInit+0xae>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a59      	ldr	r2, [pc, #356]	@ (8003b64 <HAL_GPIO_DeInit+0x1e4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_DeInit+0xaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a58      	ldr	r2, [pc, #352]	@ (8003b68 <HAL_GPIO_DeInit+0x1e8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_DeInit+0xa6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	@ (8003b6c <HAL_GPIO_DeInit+0x1ec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_DeInit+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a56      	ldr	r2, [pc, #344]	@ (8003b70 <HAL_GPIO_DeInit+0x1f0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_DeInit+0x9e>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e00e      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	e00c      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e00a      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a26:	2305      	movs	r3, #5
 8003a28:	e008      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e006      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e004      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e002      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_GPIO_DeInit+0xbc>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	f002 0203 	and.w	r2, r2, #3
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	4093      	lsls	r3, r2
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d132      	bne.n	8003ab2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a4c:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4947      	ldr	r1, [pc, #284]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a5a:	4b46      	ldr	r3, [pc, #280]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	4944      	ldr	r1, [pc, #272]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a68:	4b42      	ldr	r3, [pc, #264]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	4940      	ldr	r1, [pc, #256]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a76:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	493d      	ldr	r1, [pc, #244]	@ (8003b74 <HAL_GPIO_DeInit+0x1f4>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <HAL_GPIO_DeInit+0x1d0>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	482a      	ldr	r0, [pc, #168]	@ (8003b50 <HAL_GPIO_DeInit+0x1d0>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	400a      	ands	r2, r1
 8003aac:	3302      	adds	r3, #2
 8003aae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2103      	movs	r1, #3
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	08d2      	lsrs	r2, r2, #3
 8003ae8:	4019      	ands	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2103      	movs	r1, #3
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2103      	movs	r1, #3
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	f67f af2e 	bls.w	800399c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e001      	b.n	8003b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003be6:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd fb9a 	bl	8001334 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40013c00 	.word	0x40013c00

08003c0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c22:	4b20      	ldr	r3, [pc, #128]	@ (8003ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c3a:	f7fe fc41 	bl	80024c0 <HAL_GetTick>
 8003c3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c40:	e009      	b.n	8003c56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c42:	f7fe fc3d 	bl	80024c0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c50:	d901      	bls.n	8003c56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e022      	b.n	8003c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c62:	d1ee      	bne.n	8003c42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c64:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7fe fc26 	bl	80024c0 <HAL_GetTick>
 8003c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c76:	e009      	b.n	8003c8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c78:	f7fe fc22 	bl	80024c0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c86:	d901      	bls.n	8003c8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e007      	b.n	8003c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c98:	d1ee      	bne.n	8003c78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e291      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8087 	beq.w	8003dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd0:	4b96      	ldr	r3, [pc, #600]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d00c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cdc:	4b93      	ldr	r3, [pc, #588]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d112      	bne.n	8003d0e <HAL_RCC_OscConfig+0x62>
 8003ce8:	4b90      	ldr	r3, [pc, #576]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf4:	d10b      	bne.n	8003d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x130>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d168      	bne.n	8003ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e26b      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x7a>
 8003d18:	4b84      	ldr	r3, [pc, #528]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a83      	ldr	r2, [pc, #524]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	e02e      	b.n	8003d84 <HAL_RCC_OscConfig+0xd8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x9c>
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7e      	ldr	r2, [pc, #504]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e01d      	b.n	8003d84 <HAL_RCC_OscConfig+0xd8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0xc0>
 8003d52:	4b76      	ldr	r3, [pc, #472]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a75      	ldr	r2, [pc, #468]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b73      	ldr	r3, [pc, #460]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a72      	ldr	r2, [pc, #456]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0xd8>
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a6e      	ldr	r2, [pc, #440]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b6c      	ldr	r3, [pc, #432]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fb98 	bl	80024c0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe fb94 	bl	80024c0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e21f      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b61      	ldr	r3, [pc, #388]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe8>
 8003db2:	e014      	b.n	8003dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe fb84 	bl	80024c0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fb80 	bl	80024c0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e20b      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	4b57      	ldr	r3, [pc, #348]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x110>
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d069      	beq.n	8003ebe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dea:	4b50      	ldr	r3, [pc, #320]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b4d      	ldr	r3, [pc, #308]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x190>
 8003e02:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x17a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1df      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	493d      	ldr	r1, [pc, #244]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e040      	b.n	8003ebe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b39      	ldr	r3, [pc, #228]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a38      	ldr	r2, [pc, #224]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fe fb36 	bl	80024c0 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fe fb32 	bl	80024c0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1bd      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4929      	ldr	r1, [pc, #164]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
 8003e8a:	e018      	b.n	8003ebe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8c:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fb12 	bl	80024c0 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea0:	f7fe fb0e 	bl	80024c0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e199      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d038      	beq.n	8003f3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d019      	beq.n	8003f06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed2:	4b16      	ldr	r3, [pc, #88]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fe faef 	bl	80024c0 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe faeb 	bl	80024c0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e176      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x23a>
 8003f04:	e01a      	b.n	8003f3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0a:	4a08      	ldr	r2, [pc, #32]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe fad5 	bl	80024c0 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fe fad1 	bl	80024c0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d903      	bls.n	8003f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e15c      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
 8003f2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	4b91      	ldr	r3, [pc, #580]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a4 	beq.w	8004092 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b8b      	ldr	r3, [pc, #556]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	4b88      	ldr	r3, [pc, #544]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	4a87      	ldr	r2, [pc, #540]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f62:	4b85      	ldr	r3, [pc, #532]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f72:	4b82      	ldr	r3, [pc, #520]	@ (800417c <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800417c <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7e      	ldr	r2, [pc, #504]	@ (800417c <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fa99 	bl	80024c0 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fe fa95 	bl	80024c0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	@ 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e120      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	4b75      	ldr	r3, [pc, #468]	@ (800417c <HAL_RCC_OscConfig+0x4d0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x31a>
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc4:	e02d      	b.n	8004022 <HAL_RCC_OscConfig+0x376>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x33c>
 8003fce:	4b6a      	ldr	r3, [pc, #424]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a69      	ldr	r2, [pc, #420]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fda:	4b67      	ldr	r3, [pc, #412]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	4a66      	ldr	r2, [pc, #408]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe6:	e01c      	b.n	8004022 <HAL_RCC_OscConfig+0x376>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_OscConfig+0x35e>
 8003ff0:	4b61      	ldr	r3, [pc, #388]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff4:	4a60      	ldr	r2, [pc, #384]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004000:	4a5d      	ldr	r2, [pc, #372]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	@ 0x70
 8004008:	e00b      	b.n	8004022 <HAL_RCC_OscConfig+0x376>
 800400a:	4b5b      	ldr	r3, [pc, #364]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a5a      	ldr	r2, [pc, #360]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
 8004016:	4b58      	ldr	r3, [pc, #352]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a57      	ldr	r2, [pc, #348]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fa49 	bl	80024c0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fe fa45 	bl	80024c0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0ce      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b4b      	ldr	r3, [pc, #300]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCC_OscConfig+0x386>
 8004054:	e014      	b.n	8004080 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe fa33 	bl	80024c0 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fa2f 	bl	80024c0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0b8      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	4b40      	ldr	r3, [pc, #256]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ee      	bne.n	800405e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b3c      	ldr	r3, [pc, #240]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	4a3b      	ldr	r2, [pc, #236]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80a4 	beq.w	80041e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d06b      	beq.n	8004180 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d149      	bne.n	8004144 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b31      	ldr	r3, [pc, #196]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe fa00 	bl	80024c0 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fe f9fc 	bl	80024c0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e087      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b28      	ldr	r3, [pc, #160]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	4313      	orrs	r3, r2
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800410e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b19      	ldr	r3, [pc, #100]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a18      	ldr	r2, [pc, #96]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe f9d0 	bl	80024c0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe f9cc 	bl	80024c0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e057      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x478>
 8004142:	e04f      	b.n	80041e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0b      	ldr	r2, [pc, #44]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe f9b6 	bl	80024c0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe f9b2 	bl	80024c0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e03d      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x4ac>
 8004176:	e035      	b.n	80041e4 <HAL_RCC_OscConfig+0x538>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_RCC_OscConfig+0x544>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d028      	beq.n	80041e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d121      	bne.n	80041e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d11a      	bne.n	80041e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	3b01      	subs	r3, #1
 80041ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800

080041f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0d0      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 020f 	bic.w	r2, r3, #15
 8004222:	4965      	ldr	r1, [pc, #404]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b8      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a58      	ldr	r2, [pc, #352]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800425e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800426c:	4b53      	ldr	r3, [pc, #332]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a52      	ldr	r2, [pc, #328]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004276:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	494d      	ldr	r1, [pc, #308]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d040      	beq.n	8004318 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e073      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4936      	ldr	r1, [pc, #216]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fe f8ea 	bl	80024c0 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe f8e6 	bl	80024c0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e053      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d210      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 020f 	bic.w	r2, r3, #15
 800432e:	4922      	ldr	r1, [pc, #136]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e032      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4916      	ldr	r1, [pc, #88]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004386:	f000 f821 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1d0>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1d4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd ff54 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023c00 	.word	0x40023c00
 80043bc:	40023800 	.word	0x40023800
 80043c0:	0800b2fc 	.word	0x0800b2fc
 80043c4:	20000008 	.word	0x20000008
 80043c8:	2000000c 	.word	0x2000000c

080043cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b094      	sub	sp, #80	@ 0x50
 80043d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d8:	2300      	movs	r3, #0
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	2300      	movs	r3, #0
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e4:	4b79      	ldr	r3, [pc, #484]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d00d      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x40>
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	f200 80e1 	bhi.w	80045b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x34>
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x3a>
 80043fe:	e0db      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004400:	4b73      	ldr	r3, [pc, #460]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004404:	e0db      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004406:	4b72      	ldr	r3, [pc, #456]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800440a:	e0d8      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800440c:	4b6f      	ldr	r3, [pc, #444]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004414:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004416:	4b6d      	ldr	r3, [pc, #436]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d063      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004422:	4b6a      	ldr	r3, [pc, #424]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	2200      	movs	r2, #0
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	633b      	str	r3, [r7, #48]	@ 0x30
 8004436:	2300      	movs	r3, #0
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
 800443a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800443e:	4622      	mov	r2, r4
 8004440:	462b      	mov	r3, r5
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	0159      	lsls	r1, r3, #5
 800444c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004450:	0150      	lsls	r0, r2, #5
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4621      	mov	r1, r4
 8004458:	1a51      	subs	r1, r2, r1
 800445a:	6139      	str	r1, [r7, #16]
 800445c:	4629      	mov	r1, r5
 800445e:	eb63 0301 	sbc.w	r3, r3, r1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004470:	4659      	mov	r1, fp
 8004472:	018b      	lsls	r3, r1, #6
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800447a:	4651      	mov	r1, sl
 800447c:	018a      	lsls	r2, r1, #6
 800447e:	4651      	mov	r1, sl
 8004480:	ebb2 0801 	subs.w	r8, r2, r1
 8004484:	4659      	mov	r1, fp
 8004486:	eb63 0901 	sbc.w	r9, r3, r1
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800449e:	4690      	mov	r8, r2
 80044a0:	4699      	mov	r9, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	eb18 0303 	adds.w	r3, r8, r3
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	462b      	mov	r3, r5
 80044ac:	eb49 0303 	adc.w	r3, r9, r3
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044d2:	2200      	movs	r2, #0
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044dc:	f7fb fea0 	bl	8000220 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e8:	e058      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ea:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	2200      	movs	r2, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	4611      	mov	r1, r2
 80044f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0159      	lsls	r1, r3, #5
 8004512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004516:	0150      	lsls	r0, r2, #5
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4641      	mov	r1, r8
 800451e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004522:	4649      	mov	r1, r9
 8004524:	eb63 0b01 	sbc.w	fp, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800453c:	ebb2 040a 	subs.w	r4, r2, sl
 8004540:	eb63 050b 	sbc.w	r5, r3, fp
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	464b      	mov	r3, r9
 8004560:	eb45 0303 	adc.w	r3, r5, r3
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004572:	4629      	mov	r1, r5
 8004574:	028b      	lsls	r3, r1, #10
 8004576:	4621      	mov	r1, r4
 8004578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800457c:	4621      	mov	r1, r4
 800457e:	028a      	lsls	r2, r1, #10
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004586:	2200      	movs	r2, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004590:	f7fb fe46 	bl	8000220 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4613      	mov	r3, r2
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	3301      	adds	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3750      	adds	r7, #80	@ 0x50
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b03      	ldr	r3, [pc, #12]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000008 	.word	0x20000008

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff0 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	0800b30c 	.word	0x0800b30c

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffdc 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0b5b      	lsrs	r3, r3, #13
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	0800b30c 	.word	0x0800b30c

0800463c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	220f      	movs	r2, #15
 800464a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800464c:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004670:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800467e:	4b07      	ldr	r3, [pc, #28]	@ (800469c <HAL_RCC_GetClockConfig+0x60>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 020f 	and.w	r2, r3, #15
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40023c00 	.word	0x40023c00

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046c4:	4b65      	ldr	r3, [pc, #404]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a64      	ldr	r2, [pc, #400]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	4b62      	ldr	r3, [pc, #392]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	4960      	ldr	r1, [pc, #384]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d017      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f6:	4b59      	ldr	r3, [pc, #356]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004704:	4955      	ldr	r1, [pc, #340]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004714:	d101      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004732:	4b4a      	ldr	r3, [pc, #296]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004738:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	4946      	ldr	r1, [pc, #280]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 808b 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	4a39      	ldr	r2, [pc, #228]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	@ 0x40
 800477c:	4b37      	ldr	r3, [pc, #220]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a34      	ldr	r2, [pc, #208]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fd fe94 	bl	80024c0 <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fd fe90 	bl	80024c0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e2bc      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ba:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d035      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d02e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d8:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047fa:	4a18      	ldr	r2, [pc, #96]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004800:	4b16      	ldr	r3, [pc, #88]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d114      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fd fe58 	bl	80024c0 <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fd fe54 	bl	80024c0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e27e      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004842:	d111      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004844:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004852:	400b      	ands	r3, r1
 8004854:	4901      	ldr	r1, [pc, #4]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	e00b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	0ffffcff 	.word	0x0ffffcff
 8004868:	4ba4      	ldr	r3, [pc, #656]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4aa3      	ldr	r2, [pc, #652]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800486e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004872:	6093      	str	r3, [r2, #8]
 8004874:	4ba1      	ldr	r3, [pc, #644]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004876:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	499e      	ldr	r1, [pc, #632]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004882:	4313      	orrs	r3, r2
 8004884:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004892:	4b9a      	ldr	r3, [pc, #616]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004898:	4a98      	ldr	r2, [pc, #608]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048a2:	4b96      	ldr	r3, [pc, #600]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	4993      	ldr	r1, [pc, #588]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c0:	4b8e      	ldr	r3, [pc, #568]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ce:	498b      	ldr	r1, [pc, #556]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e2:	4b86      	ldr	r3, [pc, #536]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f0:	4982      	ldr	r1, [pc, #520]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004904:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004912:	497a      	ldr	r1, [pc, #488]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004926:	4b75      	ldr	r3, [pc, #468]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f023 0203 	bic.w	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	4971      	ldr	r1, [pc, #452]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004948:	4b6c      	ldr	r3, [pc, #432]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f023 020c 	bic.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	4969      	ldr	r1, [pc, #420]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800496a:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	4960      	ldr	r1, [pc, #384]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800498c:	4b5b      	ldr	r3, [pc, #364]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499a:	4958      	ldr	r1, [pc, #352]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ae:	4b53      	ldr	r3, [pc, #332]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	494f      	ldr	r1, [pc, #316]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049d0:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049de:	4947      	ldr	r1, [pc, #284]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049f2:	4b42      	ldr	r3, [pc, #264]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	493e      	ldr	r1, [pc, #248]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	4936      	ldr	r1, [pc, #216]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d011      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a36:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a44:	492d      	ldr	r1, [pc, #180]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a74:	4921      	ldr	r1, [pc, #132]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a88:	4b1c      	ldr	r3, [pc, #112]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a96:	4919      	ldr	r1, [pc, #100]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ab8:	4910      	ldr	r1, [pc, #64]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d006      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 809d 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd fcee 	bl	80024c0 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ae8:	f7fd fcea 	bl	80024c0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d904      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e116      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b00:	4b8b      	ldr	r3, [pc, #556]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ed      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d017      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d113      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b20:	4b83      	ldr	r3, [pc, #524]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	019a      	lsls	r2, r3, #6
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	071b      	lsls	r3, r3, #28
 8004b40:	497b      	ldr	r1, [pc, #492]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b72:	d11f      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b74:	4b6e      	ldr	r3, [pc, #440]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b7a:	0f1b      	lsrs	r3, r3, #28
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	019a      	lsls	r2, r3, #6
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	071b      	lsls	r3, r3, #28
 8004b94:	4966      	ldr	r1, [pc, #408]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b9c:	4b64      	ldr	r3, [pc, #400]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba2:	f023 021f 	bic.w	r2, r3, #31
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	4960      	ldr	r1, [pc, #384]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	019a      	lsls	r2, r3, #6
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	071b      	lsls	r3, r3, #28
 8004bd4:	4956      	ldr	r1, [pc, #344]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bdc:	4b54      	ldr	r3, [pc, #336]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a53      	ldr	r2, [pc, #332]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004be2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fd fc6a 	bl	80024c0 <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bf0:	f7fd fc66 	bl	80024c0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	@ 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e092      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c02:	4b4b      	ldr	r3, [pc, #300]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 8088 	bne.w	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c16:	4b46      	ldr	r3, [pc, #280]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a45      	ldr	r2, [pc, #276]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fd fc4d 	bl	80024c0 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c2a:	f7fd fc49 	bl	80024c0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	@ 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e075      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c48:	d0ef      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d024      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d120      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c72:	4b2f      	ldr	r3, [pc, #188]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	019a      	lsls	r2, r3, #6
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	4927      	ldr	r1, [pc, #156]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c9a:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4920      	ldr	r1, [pc, #128]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d018      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cc8:	d113      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cca:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd0:	0e1b      	lsrs	r3, r3, #24
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	019a      	lsls	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	4911      	ldr	r1, [pc, #68]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfe:	f7fd fbdf 	bl	80024c0 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d06:	f7fd fbdb 	bl	80024c0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b64      	cmp	r3, #100	@ 0x64
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e007      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d24:	d1ef      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800

08004d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e09d      	b.n	8004e82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d56:	d009      	beq.n	8004d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
 8004d5e:	e005      	b.n	8004d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd f83e 	bl	8001e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dac:	d902      	bls.n	8004db4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e002      	b.n	8004dba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dc2:	d007      	beq.n	8004dd4 <HAL_SPI_Init+0xa0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 0204 	and.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e049      	b.n	8004f30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fd f80b 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 ffe5 	bl	8005e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e054      	b.n	8004ffa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a22      	ldr	r2, [pc, #136]	@ (800500c <HAL_TIM_Base_Start_IT+0xd4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a21      	ldr	r2, [pc, #132]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1f      	ldr	r2, [pc, #124]	@ (8005014 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005018 <HAL_TIM_Base_Start_IT+0xe0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800501c <HAL_TIM_Base_Start_IT+0xe4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x80>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005020 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d115      	bne.n	8004fe4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <HAL_TIM_Base_Start_IT+0xec>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d015      	beq.n	8004ff6 <HAL_TIM_Base_Start_IT+0xbe>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd0:	d011      	beq.n	8004ff6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e008      	b.n	8004ff6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e000      	b.n	8004ff8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40010400 	.word	0x40010400
 800501c:	40014000 	.word	0x40014000
 8005020:	40001800 	.word	0x40001800
 8005024:	00010007 	.word	0x00010007

08005028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e049      	b.n	80050ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f841 	bl	80050d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 ff16 	bl	8005e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_TIM_PWM_Start+0x24>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e03c      	b.n	800518a <HAL_TIM_PWM_Start+0x9e>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d109      	bne.n	800512a <HAL_TIM_PWM_Start+0x3e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e02f      	b.n	800518a <HAL_TIM_PWM_Start+0x9e>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d109      	bne.n	8005144 <HAL_TIM_PWM_Start+0x58>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e022      	b.n	800518a <HAL_TIM_PWM_Start+0x9e>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d109      	bne.n	800515e <HAL_TIM_PWM_Start+0x72>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e015      	b.n	800518a <HAL_TIM_PWM_Start+0x9e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b10      	cmp	r3, #16
 8005162:	d109      	bne.n	8005178 <HAL_TIM_PWM_Start+0x8c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e008      	b.n	800518a <HAL_TIM_PWM_Start+0x9e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e092      	b.n	80052b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0xb6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	e023      	b.n	80051ea <HAL_TIM_PWM_Start+0xfe>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xc6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b0:	e01b      	b.n	80051ea <HAL_TIM_PWM_Start+0xfe>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c0:	e013      	b.n	80051ea <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xe6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xf6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e0:	e003      	b.n	80051ea <HAL_TIM_PWM_Start+0xfe>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 fb1e 	bl	8006834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a30      	ldr	r2, [pc, #192]	@ (80052c0 <HAL_TIM_PWM_Start+0x1d4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_TIM_PWM_Start+0x120>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2f      	ldr	r2, [pc, #188]	@ (80052c4 <HAL_TIM_PWM_Start+0x1d8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_TIM_PWM_Start+0x124>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_TIM_PWM_Start+0x126>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a25      	ldr	r2, [pc, #148]	@ (80052c0 <HAL_TIM_PWM_Start+0x1d4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005238:	d01d      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a22      	ldr	r2, [pc, #136]	@ (80052c8 <HAL_TIM_PWM_Start+0x1dc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a20      	ldr	r2, [pc, #128]	@ (80052cc <HAL_TIM_PWM_Start+0x1e0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <HAL_TIM_PWM_Start+0x1e4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_TIM_PWM_Start+0x1d8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_TIM_PWM_Start+0x1e8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIM_PWM_Start+0x18a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a19      	ldr	r2, [pc, #100]	@ (80052d8 <HAL_TIM_PWM_Start+0x1ec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d115      	bne.n	80052a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <HAL_TIM_PWM_Start+0x1f0>)
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d015      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x1c8>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528e:	d011      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e008      	b.n	80052b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fa9e 	bl	8006834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a36      	ldr	r2, [pc, #216]	@ (80053d8 <HAL_TIM_PWM_Stop+0xf8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIM_PWM_Stop+0x2c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a35      	ldr	r2, [pc, #212]	@ (80053dc <HAL_TIM_PWM_Stop+0xfc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <HAL_TIM_PWM_Stop+0x30>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <HAL_TIM_PWM_Stop+0x32>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_TIM_PWM_Stop+0x66>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_TIM_PWM_Stop+0x66>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <HAL_TIM_PWM_Stop+0x96>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d107      	bne.n	8005376 <HAL_TIM_PWM_Stop+0x96>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0201 	bic.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Stop+0xa6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005384:	e023      	b.n	80053ce <HAL_TIM_PWM_Stop+0xee>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Stop+0xb6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005394:	e01b      	b.n	80053ce <HAL_TIM_PWM_Stop+0xee>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Stop+0xc6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a4:	e013      	b.n	80053ce <HAL_TIM_PWM_Stop+0xee>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Stop+0xd6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Stop+0xee>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Stop+0xe6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c4:	e003      	b.n	80053ce <HAL_TIM_PWM_Stop+0xee>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e049      	b.n	8005486 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f841 	bl	800548e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 fd3a 	bl	8005e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0x1e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e023      	b.n	800550a <HAL_TIM_IC_Start_IT+0x66>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0x2e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e01b      	b.n	800550a <HAL_TIM_IC_Start_IT+0x66>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start_IT+0x3e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e013      	b.n	800550a <HAL_TIM_IC_Start_IT+0x66>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_IC_Start_IT+0x4e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e00b      	b.n	800550a <HAL_TIM_IC_Start_IT+0x66>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_IC_Start_IT+0x5e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e003      	b.n	800550a <HAL_TIM_IC_Start_IT+0x66>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005508:	b2db      	uxtb	r3, r3
 800550a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <HAL_TIM_IC_Start_IT+0x78>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e013      	b.n	8005544 <HAL_TIM_IC_Start_IT+0xa0>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b04      	cmp	r3, #4
 8005520:	d104      	bne.n	800552c <HAL_TIM_IC_Start_IT+0x88>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005528:	b2db      	uxtb	r3, r3
 800552a:	e00b      	b.n	8005544 <HAL_TIM_IC_Start_IT+0xa0>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b08      	cmp	r3, #8
 8005530:	d104      	bne.n	800553c <HAL_TIM_IC_Start_IT+0x98>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e003      	b.n	8005544 <HAL_TIM_IC_Start_IT+0xa0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005542:	b2db      	uxtb	r3, r3
 8005544:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800554c:	7b7b      	ldrb	r3, [r7, #13]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0e2      	b.n	800571c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_TIM_IC_Start_IT+0xc2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005564:	e023      	b.n	80055ae <HAL_TIM_IC_Start_IT+0x10a>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d104      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0xd2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005574:	e01b      	b.n	80055ae <HAL_TIM_IC_Start_IT+0x10a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d104      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0xe2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005584:	e013      	b.n	80055ae <HAL_TIM_IC_Start_IT+0x10a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b0c      	cmp	r3, #12
 800558a:	d104      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0xf2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005594:	e00b      	b.n	80055ae <HAL_TIM_IC_Start_IT+0x10a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b10      	cmp	r3, #16
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_IC_Start_IT+0x102>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a4:	e003      	b.n	80055ae <HAL_TIM_IC_Start_IT+0x10a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_IT+0x11a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055bc:	e013      	b.n	80055e6 <HAL_TIM_IC_Start_IT+0x142>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0x12a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055cc:	e00b      	b.n	80055e6 <HAL_TIM_IC_Start_IT+0x142>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_IT+0x13a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055dc:	e003      	b.n	80055e6 <HAL_TIM_IC_Start_IT+0x142>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d841      	bhi.n	8005670 <HAL_TIM_IC_Start_IT+0x1cc>
 80055ec:	a201      	add	r2, pc, #4	@ (adr r2, 80055f4 <HAL_TIM_IC_Start_IT+0x150>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005671 	.word	0x08005671
 80055fc:	08005671 	.word	0x08005671
 8005600:	08005671 	.word	0x08005671
 8005604:	0800563b 	.word	0x0800563b
 8005608:	08005671 	.word	0x08005671
 800560c:	08005671 	.word	0x08005671
 8005610:	08005671 	.word	0x08005671
 8005614:	0800564d 	.word	0x0800564d
 8005618:	08005671 	.word	0x08005671
 800561c:	08005671 	.word	0x08005671
 8005620:	08005671 	.word	0x08005671
 8005624:	0800565f 	.word	0x0800565f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0202 	orr.w	r2, r2, #2
 8005636:	60da      	str	r2, [r3, #12]
      break;
 8005638:	e01d      	b.n	8005676 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0204 	orr.w	r2, r2, #4
 8005648:	60da      	str	r2, [r3, #12]
      break;
 800564a:	e014      	b.n	8005676 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	60da      	str	r2, [r3, #12]
      break;
 800565c:	e00b      	b.n	8005676 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0210 	orr.w	r2, r2, #16
 800566c:	60da      	str	r2, [r3, #12]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	bf00      	nop
  }

  if (status == HAL_OK)
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d14e      	bne.n	800571a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f8d5 	bl	8006834 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a25      	ldr	r2, [pc, #148]	@ (8005724 <HAL_TIM_IC_Start_IT+0x280>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569c:	d01d      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a21      	ldr	r2, [pc, #132]	@ (8005728 <HAL_TIM_IC_Start_IT+0x284>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <HAL_TIM_IC_Start_IT+0x288>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005730 <HAL_TIM_IC_Start_IT+0x28c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005734 <HAL_TIM_IC_Start_IT+0x290>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <HAL_TIM_IC_Start_IT+0x294>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIM_IC_Start_IT+0x236>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a19      	ldr	r2, [pc, #100]	@ (800573c <HAL_TIM_IC_Start_IT+0x298>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d115      	bne.n	8005706 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <HAL_TIM_IC_Start_IT+0x29c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d015      	beq.n	8005718 <HAL_TIM_IC_Start_IT+0x274>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f2:	d011      	beq.n	8005718 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005704:	e008      	b.n	8005718 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e000      	b.n	800571a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800
 8005740:	00010007 	.word	0x00010007

08005744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d020      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01b      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0202 	mvn.w	r2, #2
 8005778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fb64 	bl	8005e5c <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb56 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb67 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d020      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0204 	mvn.w	r2, #4
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fb3e 	bl	8005e5c <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb30 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fb41 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0208 	mvn.w	r2, #8
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2204      	movs	r2, #4
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fb18 	bl	8005e5c <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb0a 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb1b 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0210 	mvn.w	r2, #16
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2208      	movs	r2, #8
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 faf2 	bl	8005e5c <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fae4 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 faf5 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0201 	mvn.w	r2, #1
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb ff08 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fa07 	bl	8006cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 f9ff 	bl	8006d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 faaf 	bl	8005e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f06f 0220 	mvn.w	r2, #32
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f9c7 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIM_IC_ConfigChannel+0x1e>
 800596c:	2302      	movs	r3, #2
 800596e:	e088      	b.n	8005a82 <HAL_TIM_IC_ConfigChannel+0x130>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11b      	bne.n	80059b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800598e:	f000 fd8d 	bl	80064ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 020c 	bic.w	r2, r2, #12
 80059a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6999      	ldr	r1, [r3, #24]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
 80059b4:	e060      	b.n	8005a78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d11c      	bne.n	80059f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059cc:	f000 fe11 	bl	80065f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	619a      	str	r2, [r3, #24]
 80059f4:	e040      	b.n	8005a78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a0c:	f000 fe5e 	bl	80066cc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 020c 	bic.w	r2, r2, #12
 8005a1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69d9      	ldr	r1, [r3, #28]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	61da      	str	r2, [r3, #28]
 8005a32:	e021      	b.n	8005a78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d11c      	bne.n	8005a74 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a4a:	f000 fe7b 	bl	8006744 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	021a      	lsls	r2, r3, #8
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	61da      	str	r2, [r3, #28]
 8005a72:	e001      	b.n	8005a78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0ff      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b14      	cmp	r3, #20
 8005ab6:	f200 80f0 	bhi.w	8005c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005aba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b15 	.word	0x08005b15
 8005ac4:	08005c9b 	.word	0x08005c9b
 8005ac8:	08005c9b 	.word	0x08005c9b
 8005acc:	08005c9b 	.word	0x08005c9b
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005c9b 	.word	0x08005c9b
 8005ad8:	08005c9b 	.word	0x08005c9b
 8005adc:	08005c9b 	.word	0x08005c9b
 8005ae0:	08005b97 	.word	0x08005b97
 8005ae4:	08005c9b 	.word	0x08005c9b
 8005ae8:	08005c9b 	.word	0x08005c9b
 8005aec:	08005c9b 	.word	0x08005c9b
 8005af0:	08005bd7 	.word	0x08005bd7
 8005af4:	08005c9b 	.word	0x08005c9b
 8005af8:	08005c9b 	.word	0x08005c9b
 8005afc:	08005c9b 	.word	0x08005c9b
 8005b00:	08005c19 	.word	0x08005c19
 8005b04:	08005c9b 	.word	0x08005c9b
 8005b08:	08005c9b 	.word	0x08005c9b
 8005b0c:	08005c9b 	.word	0x08005c9b
 8005b10:	08005c59 	.word	0x08005c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fa68 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]
      break;
 8005b52:	e0a5      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 faba 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]
      break;
 8005b94:	e084      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fb11 	bl	80061c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0204 	bic.w	r2, r2, #4
 8005bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      break;
 8005bd4:	e064      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fb67 	bl	80062b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	021a      	lsls	r2, r3, #8
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	61da      	str	r2, [r3, #28]
      break;
 8005c16:	e043      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fb9e 	bl	8006360 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c56:	e023      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fbd0 	bl	8006404 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c98:	e002      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop

08005cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e0b4      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x186>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	4b56      	ldr	r3, [pc, #344]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x190>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d08:	d03e      	beq.n	8005d88 <HAL_TIM_ConfigClockSource+0xd4>
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d0e:	f200 8087 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d16:	f000 8086 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x172>
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d1e:	d87f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b70      	cmp	r3, #112	@ 0x70
 8005d22:	d01a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xa6>
 8005d24:	2b70      	cmp	r3, #112	@ 0x70
 8005d26:	d87b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b60      	cmp	r3, #96	@ 0x60
 8005d2a:	d050      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x11a>
 8005d2c:	2b60      	cmp	r3, #96	@ 0x60
 8005d2e:	d877      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b50      	cmp	r3, #80	@ 0x50
 8005d32:	d03c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0xfa>
 8005d34:	2b50      	cmp	r3, #80	@ 0x50
 8005d36:	d873      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d058      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x13a>
 8005d3c:	2b40      	cmp	r3, #64	@ 0x40
 8005d3e:	d86f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b30      	cmp	r3, #48	@ 0x30
 8005d42:	d064      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15a>
 8005d44:	2b30      	cmp	r3, #48	@ 0x30
 8005d46:	d86b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d060      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15a>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d867      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d05c      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15a>
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d05a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15a>
 8005d58:	e062      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	f000 fd43 	bl	80067f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	609a      	str	r2, [r3, #8]
      break;
 8005d86:	e04f      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d98:	f000 fd2c 	bl	80067f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005daa:	609a      	str	r2, [r3, #8]
      break;
 8005dac:	e03c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fbea 	bl	8006594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2150      	movs	r1, #80	@ 0x50
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fcf9 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e02c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fc46 	bl	800666c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2160      	movs	r1, #96	@ 0x60
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fce9 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8005dec:	e01c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 fbca 	bl	8006594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2140      	movs	r1, #64	@ 0x40
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fcd9 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 fcd0 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e003      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	fffeff88 	.word	0xfffeff88

08005e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a46      	ldr	r2, [pc, #280]	@ (8005fc4 <TIM_Base_SetConfig+0x12c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a43      	ldr	r2, [pc, #268]	@ (8005fc8 <TIM_Base_SetConfig+0x130>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a42      	ldr	r2, [pc, #264]	@ (8005fcc <TIM_Base_SetConfig+0x134>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_Base_SetConfig+0x40>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a41      	ldr	r2, [pc, #260]	@ (8005fd0 <TIM_Base_SetConfig+0x138>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0x40>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a40      	ldr	r2, [pc, #256]	@ (8005fd4 <TIM_Base_SetConfig+0x13c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d108      	bne.n	8005eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a35      	ldr	r2, [pc, #212]	@ (8005fc4 <TIM_Base_SetConfig+0x12c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02b      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef8:	d027      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a32      	ldr	r2, [pc, #200]	@ (8005fc8 <TIM_Base_SetConfig+0x130>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d023      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a31      	ldr	r2, [pc, #196]	@ (8005fcc <TIM_Base_SetConfig+0x134>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01f      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a30      	ldr	r2, [pc, #192]	@ (8005fd0 <TIM_Base_SetConfig+0x138>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d01b      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a2f      	ldr	r2, [pc, #188]	@ (8005fd4 <TIM_Base_SetConfig+0x13c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d017      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005fd8 <TIM_Base_SetConfig+0x140>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a2d      	ldr	r2, [pc, #180]	@ (8005fdc <TIM_Base_SetConfig+0x144>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00f      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe0 <TIM_Base_SetConfig+0x148>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe4 <TIM_Base_SetConfig+0x14c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <TIM_Base_SetConfig+0x150>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a29      	ldr	r2, [pc, #164]	@ (8005fec <TIM_Base_SetConfig+0x154>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d108      	bne.n	8005f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a10      	ldr	r2, [pc, #64]	@ (8005fc4 <TIM_Base_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_Base_SetConfig+0xf8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a12      	ldr	r2, [pc, #72]	@ (8005fd4 <TIM_Base_SetConfig+0x13c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d103      	bne.n	8005f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d105      	bne.n	8005fb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800
 8005fe4:	40001800 	.word	0x40001800
 8005fe8:	40001c00 	.word	0x40001c00
 8005fec:	40002000 	.word	0x40002000

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f023 0201 	bic.w	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <TIM_OC1_SetConfig+0xd8>)
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 0302 	bic.w	r3, r3, #2
 8006038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a21      	ldr	r2, [pc, #132]	@ (80060cc <TIM_OC1_SetConfig+0xdc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC1_SetConfig+0x64>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a20      	ldr	r2, [pc, #128]	@ (80060d0 <TIM_OC1_SetConfig+0xe0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10c      	bne.n	800606e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0308 	bic.w	r3, r3, #8
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a16      	ldr	r2, [pc, #88]	@ (80060cc <TIM_OC1_SetConfig+0xdc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_OC1_SetConfig+0x8e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a15      	ldr	r2, [pc, #84]	@ (80060d0 <TIM_OC1_SetConfig+0xe0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d111      	bne.n	80060a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	621a      	str	r2, [r3, #32]
}
 80060bc:	bf00      	nop
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	fffeff8f 	.word	0xfffeff8f
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f023 0210 	bic.w	r2, r3, #16
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b2e      	ldr	r3, [pc, #184]	@ (80061b8 <TIM_OC2_SetConfig+0xe4>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0320 	bic.w	r3, r3, #32
 800611e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <TIM_OC2_SetConfig+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC2_SetConfig+0x68>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <TIM_OC2_SetConfig+0xec>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10d      	bne.n	8006158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a18      	ldr	r2, [pc, #96]	@ (80061bc <TIM_OC2_SetConfig+0xe8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC2_SetConfig+0x94>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a17      	ldr	r2, [pc, #92]	@ (80061c0 <TIM_OC2_SetConfig+0xec>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d113      	bne.n	8006190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800616e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	feff8fff 	.word	0xfeff8fff
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4b2d      	ldr	r3, [pc, #180]	@ (80062a4 <TIM_OC3_SetConfig+0xe0>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800620c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a22      	ldr	r2, [pc, #136]	@ (80062a8 <TIM_OC3_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC3_SetConfig+0x66>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a21      	ldr	r2, [pc, #132]	@ (80062ac <TIM_OC3_SetConfig+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d10d      	bne.n	8006246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a17      	ldr	r2, [pc, #92]	@ (80062a8 <TIM_OC3_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_OC3_SetConfig+0x92>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <TIM_OC3_SetConfig+0xe8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d113      	bne.n	800627e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800625c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	621a      	str	r2, [r3, #32]
}
 8006298:	bf00      	nop
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	fffeff8f 	.word	0xfffeff8f
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400

080062b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4b1e      	ldr	r3, [pc, #120]	@ (8006354 <TIM_OC4_SetConfig+0xa4>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	031b      	lsls	r3, r3, #12
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a13      	ldr	r2, [pc, #76]	@ (8006358 <TIM_OC4_SetConfig+0xa8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC4_SetConfig+0x68>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a12      	ldr	r2, [pc, #72]	@ (800635c <TIM_OC4_SetConfig+0xac>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d109      	bne.n	800632c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800631e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	019b      	lsls	r3, r3, #6
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	feff8fff 	.word	0xfeff8fff
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <TIM_OC5_SetConfig+0x98>)
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a12      	ldr	r2, [pc, #72]	@ (80063fc <TIM_OC5_SetConfig+0x9c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC5_SetConfig+0x5e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a11      	ldr	r2, [pc, #68]	@ (8006400 <TIM_OC5_SetConfig+0xa0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d109      	bne.n	80063d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	fffeff8f 	.word	0xfffeff8f
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400

08006404 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <TIM_OC6_SetConfig+0x9c>)
 8006430:	4013      	ands	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	051b      	lsls	r3, r3, #20
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a13      	ldr	r2, [pc, #76]	@ (80064a4 <TIM_OC6_SetConfig+0xa0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_OC6_SetConfig+0x60>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a12      	ldr	r2, [pc, #72]	@ (80064a8 <TIM_OC6_SetConfig+0xa4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d109      	bne.n	8006478 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	feff8fff 	.word	0xfeff8fff
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400

080064ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0201 	bic.w	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a28      	ldr	r2, [pc, #160]	@ (8006578 <TIM_TI1_SetConfig+0xcc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01b      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e0:	d017      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4a25      	ldr	r2, [pc, #148]	@ (800657c <TIM_TI1_SetConfig+0xd0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a24      	ldr	r2, [pc, #144]	@ (8006580 <TIM_TI1_SetConfig+0xd4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00f      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a23      	ldr	r2, [pc, #140]	@ (8006584 <TIM_TI1_SetConfig+0xd8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00b      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a22      	ldr	r2, [pc, #136]	@ (8006588 <TIM_TI1_SetConfig+0xdc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a21      	ldr	r2, [pc, #132]	@ (800658c <TIM_TI1_SetConfig+0xe0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_TI1_SetConfig+0x66>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a20      	ldr	r2, [pc, #128]	@ (8006590 <TIM_TI1_SetConfig+0xe4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d101      	bne.n	8006516 <TIM_TI1_SetConfig+0x6a>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <TIM_TI1_SetConfig+0x6c>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e003      	b.n	8006536 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800653c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	b2db      	uxtb	r3, r3
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f023 030a 	bic.w	r3, r3, #10
 8006550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f003 030a 	and.w	r3, r3, #10
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40010400 	.word	0x40010400
 800658c:	40014000 	.word	0x40014000
 8006590:	40001800 	.word	0x40001800

08006594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0201 	bic.w	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 030a 	bic.w	r3, r3, #10
 80065d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b087      	sub	sp, #28
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0210 	bic.w	r2, r3, #16
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	b29b      	uxth	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006644:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0210 	bic.w	r2, r3, #16
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	031b      	lsls	r3, r3, #12
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	621a      	str	r2, [r3, #32]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f023 0303 	bic.w	r3, r3, #3
 80066f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006708:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	b2db      	uxtb	r3, r3
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800671c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006770:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006782:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	031b      	lsls	r3, r3, #12
 8006788:	b29b      	uxth	r3, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	031b      	lsls	r3, r3, #12
 800679c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	f043 0307 	orr.w	r3, r3, #7
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800680e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	021a      	lsls	r2, r3, #8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	431a      	orrs	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2201      	movs	r2, #1
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_TIMEx_PWMN_Start+0x24>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	bf14      	ite	ne
 800689c:	2301      	movne	r3, #1
 800689e:	2300      	moveq	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	e022      	b.n	80068ea <HAL_TIMEx_PWMN_Start+0x6a>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d109      	bne.n	80068be <HAL_TIMEx_PWMN_Start+0x3e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e015      	b.n	80068ea <HAL_TIMEx_PWMN_Start+0x6a>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d109      	bne.n	80068d8 <HAL_TIMEx_PWMN_Start+0x58>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e008      	b.n	80068ea <HAL_TIMEx_PWMN_Start+0x6a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e073      	b.n	80069da <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_TIMEx_PWMN_Start+0x82>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006900:	e013      	b.n	800692a <HAL_TIMEx_PWMN_Start+0xaa>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b04      	cmp	r3, #4
 8006906:	d104      	bne.n	8006912 <HAL_TIMEx_PWMN_Start+0x92>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006910:	e00b      	b.n	800692a <HAL_TIMEx_PWMN_Start+0xaa>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d104      	bne.n	8006922 <HAL_TIMEx_PWMN_Start+0xa2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006920:	e003      	b.n	800692a <HAL_TIMEx_PWMN_Start+0xaa>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2204      	movs	r2, #4
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f9ee 	bl	8006d14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006946:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a25      	ldr	r2, [pc, #148]	@ (80069e4 <HAL_TIMEx_PWMN_Start+0x164>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d022      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695a:	d01d      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a21      	ldr	r2, [pc, #132]	@ (80069e8 <HAL_TIMEx_PWMN_Start+0x168>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a20      	ldr	r2, [pc, #128]	@ (80069ec <HAL_TIMEx_PWMN_Start+0x16c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1e      	ldr	r2, [pc, #120]	@ (80069f0 <HAL_TIMEx_PWMN_Start+0x170>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <HAL_TIMEx_PWMN_Start+0x174>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <HAL_TIMEx_PWMN_Start+0x178>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIMEx_PWMN_Start+0x118>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1a      	ldr	r2, [pc, #104]	@ (80069fc <HAL_TIMEx_PWMN_Start+0x17c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d115      	bne.n	80069c4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	4b18      	ldr	r3, [pc, #96]	@ (8006a00 <HAL_TIMEx_PWMN_Start+0x180>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d015      	beq.n	80069d6 <HAL_TIMEx_PWMN_Start+0x156>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b0:	d011      	beq.n	80069d6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	e008      	b.n	80069d6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e000      	b.n	80069d8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40001800 	.word	0x40001800
 8006a00:	00010007 	.word	0x00010007

08006a04 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f97c 	bl	8006d14 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10f      	bne.n	8006a4c <HAL_TIMEx_PWMN_Stop+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a1a      	ldr	r2, [r3, #32]
 8006a32:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a36:	4013      	ands	r3, r2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d107      	bne.n	8006a4c <HAL_TIMEx_PWMN_Stop+0x48>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a1a      	ldr	r2, [r3, #32]
 8006a52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10f      	bne.n	8006a7c <HAL_TIMEx_PWMN_Stop+0x78>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIMEx_PWMN_Stop+0x78>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <HAL_TIMEx_PWMN_Stop+0x88>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a8a:	e013      	b.n	8006ab4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d104      	bne.n	8006a9c <HAL_TIMEx_PWMN_Stop+0x98>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a9a:	e00b      	b.n	8006ab4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d104      	bne.n	8006aac <HAL_TIMEx_PWMN_Stop+0xa8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006aaa:	e003      	b.n	8006ab4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e06d      	b.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a30      	ldr	r2, [pc, #192]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a20      	ldr	r2, [pc, #128]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d022      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4a:	d01d      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a15      	ldr	r2, [pc, #84]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a16      	ldr	r2, [pc, #88]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a15      	ldr	r2, [pc, #84]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10c      	bne.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40000c00 	.word	0x40000c00
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40001800 	.word	0x40001800

08006bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e065      	b.n	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a16      	ldr	r2, [pc, #88]	@ (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a14      	ldr	r2, [pc, #80]	@ (8006cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d115      	bne.n	8006cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	051b      	lsls	r3, r3, #20
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40010400 	.word	0x40010400

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	2204      	movs	r2, #4
 8006d28:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1a      	ldr	r2, [r3, #32]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	401a      	ands	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1a      	ldr	r2, [r3, #32]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e040      	b.n	8006df2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fb f971 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2224      	movs	r2, #36	@ 0x24
 8006d8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fed1 	bl	8007b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc6a 	bl	8007684 <UART_SetConfig>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e01b      	b.n	8006df2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ff50 	bl	8007c90 <UART_CheckIdleState>
 8006df0:	4603      	mov	r3, r0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e02f      	b.n	8006e6c <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	@ 0x24
 8006e10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fb f9e0 	bl	8002200 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	@ 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d165      	bne.n	8006f56 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_UART_Transmit_DMA+0x22>
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e05e      	b.n	8006f58 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2221      	movs	r2, #33	@ 0x21
 8006ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d027      	beq.n	8006f16 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eca:	4a25      	ldr	r2, [pc, #148]	@ (8006f60 <HAL_UART_Transmit_DMA+0xec>)
 8006ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed2:	4a24      	ldr	r2, [pc, #144]	@ (8006f64 <HAL_UART_Transmit_DMA+0xf0>)
 8006ed4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eda:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <HAL_UART_Transmit_DMA+0xf4>)
 8006edc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3328      	adds	r3, #40	@ 0x28
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	f7fc f83d 	bl	8002f78 <HAL_DMA_Start_IT>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2210      	movs	r2, #16
 8006f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e020      	b.n	8006f58 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2240      	movs	r2, #64	@ 0x40
 8006f1c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3e:	623a      	str	r2, [r7, #32]
 8006f40:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	69f9      	ldr	r1, [r7, #28]
 8006f44:	6a3a      	ldr	r2, [r7, #32]
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e5      	bne.n	8006f1e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006f56:	2302      	movs	r3, #2
  }
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	@ 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	0800806d 	.word	0x0800806d
 8006f64:	08008103 	.word	0x08008103
 8006f68:	08008285 	.word	0x08008285

08006f6c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b090      	sub	sp, #64	@ 0x40
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f80:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8c:	2b80      	cmp	r3, #128	@ 0x80
 8006f8e:	d139      	bne.n	8007004 <HAL_UART_DMAStop+0x98>
 8006f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f92:	2b21      	cmp	r3, #33	@ 0x21
 8006f94:	d136      	bne.n	8007004 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d015      	beq.n	8006ffe <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fc f82e 	bl	8003038 <HAL_DMA_Abort>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fc fa42 	bl	8003470 <HAL_DMA_GetError>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d105      	bne.n	8006ffe <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e044      	b.n	8007088 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 ffaa 	bl	8007f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b40      	cmp	r3, #64	@ 0x40
 8007010:	d139      	bne.n	8007086 <HAL_UART_DMAStop+0x11a>
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	2b22      	cmp	r3, #34	@ 0x22
 8007016:	d136      	bne.n	8007086 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60bb      	str	r3, [r7, #8]
   return(result);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800702e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007038:	61ba      	str	r2, [r7, #24]
 800703a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	613b      	str	r3, [r7, #16]
   return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007058:	4618      	mov	r0, r3
 800705a:	f7fb ffed 	bl	8003038 <HAL_DMA_Abort>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007068:	4618      	mov	r0, r3
 800706a:	f7fc fa01 	bl	8003470 <HAL_DMA_GetError>
 800706e:	4603      	mov	r3, r0
 8007070:	2b20      	cmp	r3, #32
 8007072:	d105      	bne.n	8007080 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2210      	movs	r2, #16
 8007078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e003      	b.n	8007088 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 ff8f 	bl	8007fa4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3740      	adds	r7, #64	@ 0x40
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b0ba      	sub	sp, #232	@ 0xe8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80070ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80070be:	4013      	ands	r3, r2
 80070c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d115      	bne.n	80070f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8297 	beq.w	800761c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
      }
      return;
 80070f6:	e291      	b.n	800761c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8117 	beq.w	8007330 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800710e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007112:	4b85      	ldr	r3, [pc, #532]	@ (8007328 <HAL_UART_IRQHandler+0x298>)
 8007114:	4013      	ands	r3, r2
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 810a 	beq.w	8007330 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d011      	beq.n	800714c <HAL_UART_IRQHandler+0xbc>
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800712c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2201      	movs	r2, #1
 800713a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d011      	beq.n	800717c <HAL_UART_IRQHandler+0xec>
 8007158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2202      	movs	r2, #2
 800716a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007172:	f043 0204 	orr.w	r2, r3, #4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d011      	beq.n	80071ac <HAL_UART_IRQHandler+0x11c>
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2204      	movs	r2, #4
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071a2:	f043 0202 	orr.w	r2, r3, #2
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d017      	beq.n	80071e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2208      	movs	r2, #8
 80071d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071de:	f043 0208 	orr.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d012      	beq.n	800721a <HAL_UART_IRQHandler+0x18a>
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007210:	f043 0220 	orr.w	r2, r3, #32
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 81fd 	beq.w	8007620 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007254:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007262:	2b40      	cmp	r3, #64	@ 0x40
 8007264:	d005      	beq.n	8007272 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800726a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800726e:	2b00      	cmp	r3, #0
 8007270:	d04f      	beq.n	8007312 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fe96 	bl	8007fa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d141      	bne.n	800730a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800729c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1d9      	bne.n	8007286 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072de:	4a13      	ldr	r2, [pc, #76]	@ (800732c <HAL_UART_IRQHandler+0x29c>)
 80072e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fb ff16 	bl	8003118 <HAL_DMA_Abort_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d017      	beq.n	8007322 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e00f      	b.n	8007322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9b4 	bl	8007670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	e00b      	b.n	8007322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9b0 	bl	8007670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e007      	b.n	8007322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9ac 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007320:	e17e      	b.n	8007620 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007322:	bf00      	nop
    return;
 8007324:	e17c      	b.n	8007620 <HAL_UART_IRQHandler+0x590>
 8007326:	bf00      	nop
 8007328:	04000120 	.word	0x04000120
 800732c:	08008303 	.word	0x08008303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 814c 	bne.w	80075d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8145 	beq.w	80075d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 813e 	beq.w	80075d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2210      	movs	r2, #16
 800735c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	f040 80b6 	bne.w	80074da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800737a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8150 	beq.w	8007624 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800738a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800738e:	429a      	cmp	r2, r3
 8007390:	f080 8148 	bcs.w	8007624 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800739a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073a8:	f000 8086 	beq.w	80074b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1da      	bne.n	80073ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800741a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800741e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800742c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e1      	bne.n	80073f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800745c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e3      	bne.n	8007432 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007488:	f023 0310 	bic.w	r3, r3, #16
 800748c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800749a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800749c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e4      	bne.n	8007478 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb fdc0 	bl	8003038 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7f9 fee0 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074d8:	e0a4      	b.n	8007624 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8096 	beq.w	8007628 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80074fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8091 	beq.w	8007628 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800751a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007528:	647b      	str	r3, [r7, #68]	@ 0x44
 800752a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800752e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e4      	bne.n	8007506 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	623b      	str	r3, [r7, #32]
   return(result);
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007560:	633a      	str	r2, [r7, #48]	@ 0x30
 8007562:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e3      	bne.n	800753c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	60fb      	str	r3, [r7, #12]
   return(result);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0310 	bic.w	r3, r3, #16
 800759c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	69b9      	ldr	r1, [r7, #24]
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	617b      	str	r3, [r7, #20]
   return(result);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e4      	bne.n	8007588 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fe64 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075d0:	e02a      	b.n	8007628 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00e      	beq.n	80075fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01c      	beq.n	800762c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
    }
    return;
 80075fa:	e017      	b.n	800762c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d012      	beq.n	800762e <HAL_UART_IRQHandler+0x59e>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fe8a 	bl	800832e <UART_EndTransmit_IT>
    return;
 800761a:	e008      	b.n	800762e <HAL_UART_IRQHandler+0x59e>
      return;
 800761c:	bf00      	nop
 800761e:	e006      	b.n	800762e <HAL_UART_IRQHandler+0x59e>
    return;
 8007620:	bf00      	nop
 8007622:	e004      	b.n	800762e <HAL_UART_IRQHandler+0x59e>
      return;
 8007624:	bf00      	nop
 8007626:	e002      	b.n	800762e <HAL_UART_IRQHandler+0x59e>
      return;
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <HAL_UART_IRQHandler+0x59e>
    return;
 800762c:	bf00      	nop
  }

}
 800762e:	37e8      	adds	r7, #232	@ 0xe8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4ba6      	ldr	r3, [pc, #664]	@ (8007948 <UART_SetConfig+0x2c4>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	6979      	ldr	r1, [r7, #20]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a94      	ldr	r2, [pc, #592]	@ (800794c <UART_SetConfig+0x2c8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d120      	bne.n	8007742 <UART_SetConfig+0xbe>
 8007700:	4b93      	ldr	r3, [pc, #588]	@ (8007950 <UART_SetConfig+0x2cc>)
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b03      	cmp	r3, #3
 800770c:	d816      	bhi.n	800773c <UART_SetConfig+0xb8>
 800770e:	a201      	add	r2, pc, #4	@ (adr r2, 8007714 <UART_SetConfig+0x90>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007725 	.word	0x08007725
 8007718:	08007731 	.word	0x08007731
 800771c:	0800772b 	.word	0x0800772b
 8007720:	08007737 	.word	0x08007737
 8007724:	2301      	movs	r3, #1
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e150      	b.n	80079cc <UART_SetConfig+0x348>
 800772a:	2302      	movs	r3, #2
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e14d      	b.n	80079cc <UART_SetConfig+0x348>
 8007730:	2304      	movs	r3, #4
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e14a      	b.n	80079cc <UART_SetConfig+0x348>
 8007736:	2308      	movs	r3, #8
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e147      	b.n	80079cc <UART_SetConfig+0x348>
 800773c:	2310      	movs	r3, #16
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e144      	b.n	80079cc <UART_SetConfig+0x348>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a83      	ldr	r2, [pc, #524]	@ (8007954 <UART_SetConfig+0x2d0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d132      	bne.n	80077b2 <UART_SetConfig+0x12e>
 800774c:	4b80      	ldr	r3, [pc, #512]	@ (8007950 <UART_SetConfig+0x2cc>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d828      	bhi.n	80077ac <UART_SetConfig+0x128>
 800775a:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <UART_SetConfig+0xdc>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007795 	.word	0x08007795
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077a1 	.word	0x080077a1
 8007774:	080077ad 	.word	0x080077ad
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080077ad 	.word	0x080077ad
 8007780:	0800779b 	.word	0x0800779b
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077ad 	.word	0x080077ad
 8007790:	080077a7 	.word	0x080077a7
 8007794:	2300      	movs	r3, #0
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e118      	b.n	80079cc <UART_SetConfig+0x348>
 800779a:	2302      	movs	r3, #2
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e115      	b.n	80079cc <UART_SetConfig+0x348>
 80077a0:	2304      	movs	r3, #4
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e112      	b.n	80079cc <UART_SetConfig+0x348>
 80077a6:	2308      	movs	r3, #8
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e10f      	b.n	80079cc <UART_SetConfig+0x348>
 80077ac:	2310      	movs	r3, #16
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e10c      	b.n	80079cc <UART_SetConfig+0x348>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a68      	ldr	r2, [pc, #416]	@ (8007958 <UART_SetConfig+0x2d4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d120      	bne.n	80077fe <UART_SetConfig+0x17a>
 80077bc:	4b64      	ldr	r3, [pc, #400]	@ (8007950 <UART_SetConfig+0x2cc>)
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077c6:	2b30      	cmp	r3, #48	@ 0x30
 80077c8:	d013      	beq.n	80077f2 <UART_SetConfig+0x16e>
 80077ca:	2b30      	cmp	r3, #48	@ 0x30
 80077cc:	d814      	bhi.n	80077f8 <UART_SetConfig+0x174>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d009      	beq.n	80077e6 <UART_SetConfig+0x162>
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d810      	bhi.n	80077f8 <UART_SetConfig+0x174>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <UART_SetConfig+0x15c>
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d006      	beq.n	80077ec <UART_SetConfig+0x168>
 80077de:	e00b      	b.n	80077f8 <UART_SetConfig+0x174>
 80077e0:	2300      	movs	r3, #0
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e0f2      	b.n	80079cc <UART_SetConfig+0x348>
 80077e6:	2302      	movs	r3, #2
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e0ef      	b.n	80079cc <UART_SetConfig+0x348>
 80077ec:	2304      	movs	r3, #4
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e0ec      	b.n	80079cc <UART_SetConfig+0x348>
 80077f2:	2308      	movs	r3, #8
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e0e9      	b.n	80079cc <UART_SetConfig+0x348>
 80077f8:	2310      	movs	r3, #16
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e0e6      	b.n	80079cc <UART_SetConfig+0x348>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a56      	ldr	r2, [pc, #344]	@ (800795c <UART_SetConfig+0x2d8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d120      	bne.n	800784a <UART_SetConfig+0x1c6>
 8007808:	4b51      	ldr	r3, [pc, #324]	@ (8007950 <UART_SetConfig+0x2cc>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007812:	2bc0      	cmp	r3, #192	@ 0xc0
 8007814:	d013      	beq.n	800783e <UART_SetConfig+0x1ba>
 8007816:	2bc0      	cmp	r3, #192	@ 0xc0
 8007818:	d814      	bhi.n	8007844 <UART_SetConfig+0x1c0>
 800781a:	2b80      	cmp	r3, #128	@ 0x80
 800781c:	d009      	beq.n	8007832 <UART_SetConfig+0x1ae>
 800781e:	2b80      	cmp	r3, #128	@ 0x80
 8007820:	d810      	bhi.n	8007844 <UART_SetConfig+0x1c0>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <UART_SetConfig+0x1a8>
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d006      	beq.n	8007838 <UART_SetConfig+0x1b4>
 800782a:	e00b      	b.n	8007844 <UART_SetConfig+0x1c0>
 800782c:	2300      	movs	r3, #0
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	e0cc      	b.n	80079cc <UART_SetConfig+0x348>
 8007832:	2302      	movs	r3, #2
 8007834:	77fb      	strb	r3, [r7, #31]
 8007836:	e0c9      	b.n	80079cc <UART_SetConfig+0x348>
 8007838:	2304      	movs	r3, #4
 800783a:	77fb      	strb	r3, [r7, #31]
 800783c:	e0c6      	b.n	80079cc <UART_SetConfig+0x348>
 800783e:	2308      	movs	r3, #8
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e0c3      	b.n	80079cc <UART_SetConfig+0x348>
 8007844:	2310      	movs	r3, #16
 8007846:	77fb      	strb	r3, [r7, #31]
 8007848:	e0c0      	b.n	80079cc <UART_SetConfig+0x348>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a44      	ldr	r2, [pc, #272]	@ (8007960 <UART_SetConfig+0x2dc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d125      	bne.n	80078a0 <UART_SetConfig+0x21c>
 8007854:	4b3e      	ldr	r3, [pc, #248]	@ (8007950 <UART_SetConfig+0x2cc>)
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007862:	d017      	beq.n	8007894 <UART_SetConfig+0x210>
 8007864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007868:	d817      	bhi.n	800789a <UART_SetConfig+0x216>
 800786a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786e:	d00b      	beq.n	8007888 <UART_SetConfig+0x204>
 8007870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007874:	d811      	bhi.n	800789a <UART_SetConfig+0x216>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <UART_SetConfig+0x1fe>
 800787a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800787e:	d006      	beq.n	800788e <UART_SetConfig+0x20a>
 8007880:	e00b      	b.n	800789a <UART_SetConfig+0x216>
 8007882:	2300      	movs	r3, #0
 8007884:	77fb      	strb	r3, [r7, #31]
 8007886:	e0a1      	b.n	80079cc <UART_SetConfig+0x348>
 8007888:	2302      	movs	r3, #2
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	e09e      	b.n	80079cc <UART_SetConfig+0x348>
 800788e:	2304      	movs	r3, #4
 8007890:	77fb      	strb	r3, [r7, #31]
 8007892:	e09b      	b.n	80079cc <UART_SetConfig+0x348>
 8007894:	2308      	movs	r3, #8
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e098      	b.n	80079cc <UART_SetConfig+0x348>
 800789a:	2310      	movs	r3, #16
 800789c:	77fb      	strb	r3, [r7, #31]
 800789e:	e095      	b.n	80079cc <UART_SetConfig+0x348>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007964 <UART_SetConfig+0x2e0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d125      	bne.n	80078f6 <UART_SetConfig+0x272>
 80078aa:	4b29      	ldr	r3, [pc, #164]	@ (8007950 <UART_SetConfig+0x2cc>)
 80078ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078b8:	d017      	beq.n	80078ea <UART_SetConfig+0x266>
 80078ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078be:	d817      	bhi.n	80078f0 <UART_SetConfig+0x26c>
 80078c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078c4:	d00b      	beq.n	80078de <UART_SetConfig+0x25a>
 80078c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ca:	d811      	bhi.n	80078f0 <UART_SetConfig+0x26c>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <UART_SetConfig+0x254>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d4:	d006      	beq.n	80078e4 <UART_SetConfig+0x260>
 80078d6:	e00b      	b.n	80078f0 <UART_SetConfig+0x26c>
 80078d8:	2301      	movs	r3, #1
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e076      	b.n	80079cc <UART_SetConfig+0x348>
 80078de:	2302      	movs	r3, #2
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e073      	b.n	80079cc <UART_SetConfig+0x348>
 80078e4:	2304      	movs	r3, #4
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e070      	b.n	80079cc <UART_SetConfig+0x348>
 80078ea:	2308      	movs	r3, #8
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e06d      	b.n	80079cc <UART_SetConfig+0x348>
 80078f0:	2310      	movs	r3, #16
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e06a      	b.n	80079cc <UART_SetConfig+0x348>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007968 <UART_SetConfig+0x2e4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d138      	bne.n	8007972 <UART_SetConfig+0x2ee>
 8007900:	4b13      	ldr	r3, [pc, #76]	@ (8007950 <UART_SetConfig+0x2cc>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007906:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800790a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800790e:	d017      	beq.n	8007940 <UART_SetConfig+0x2bc>
 8007910:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007914:	d82a      	bhi.n	800796c <UART_SetConfig+0x2e8>
 8007916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791a:	d00b      	beq.n	8007934 <UART_SetConfig+0x2b0>
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007920:	d824      	bhi.n	800796c <UART_SetConfig+0x2e8>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <UART_SetConfig+0x2aa>
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792a:	d006      	beq.n	800793a <UART_SetConfig+0x2b6>
 800792c:	e01e      	b.n	800796c <UART_SetConfig+0x2e8>
 800792e:	2300      	movs	r3, #0
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e04b      	b.n	80079cc <UART_SetConfig+0x348>
 8007934:	2302      	movs	r3, #2
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e048      	b.n	80079cc <UART_SetConfig+0x348>
 800793a:	2304      	movs	r3, #4
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e045      	b.n	80079cc <UART_SetConfig+0x348>
 8007940:	2308      	movs	r3, #8
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e042      	b.n	80079cc <UART_SetConfig+0x348>
 8007946:	bf00      	nop
 8007948:	efff69f3 	.word	0xefff69f3
 800794c:	40011000 	.word	0x40011000
 8007950:	40023800 	.word	0x40023800
 8007954:	40004400 	.word	0x40004400
 8007958:	40004800 	.word	0x40004800
 800795c:	40004c00 	.word	0x40004c00
 8007960:	40005000 	.word	0x40005000
 8007964:	40011400 	.word	0x40011400
 8007968:	40007800 	.word	0x40007800
 800796c:	2310      	movs	r3, #16
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e02c      	b.n	80079cc <UART_SetConfig+0x348>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a72      	ldr	r2, [pc, #456]	@ (8007b40 <UART_SetConfig+0x4bc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d125      	bne.n	80079c8 <UART_SetConfig+0x344>
 800797c:	4b71      	ldr	r3, [pc, #452]	@ (8007b44 <UART_SetConfig+0x4c0>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007982:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007986:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800798a:	d017      	beq.n	80079bc <UART_SetConfig+0x338>
 800798c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007990:	d817      	bhi.n	80079c2 <UART_SetConfig+0x33e>
 8007992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007996:	d00b      	beq.n	80079b0 <UART_SetConfig+0x32c>
 8007998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800799c:	d811      	bhi.n	80079c2 <UART_SetConfig+0x33e>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <UART_SetConfig+0x326>
 80079a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079a6:	d006      	beq.n	80079b6 <UART_SetConfig+0x332>
 80079a8:	e00b      	b.n	80079c2 <UART_SetConfig+0x33e>
 80079aa:	2300      	movs	r3, #0
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e00d      	b.n	80079cc <UART_SetConfig+0x348>
 80079b0:	2302      	movs	r3, #2
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e00a      	b.n	80079cc <UART_SetConfig+0x348>
 80079b6:	2304      	movs	r3, #4
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e007      	b.n	80079cc <UART_SetConfig+0x348>
 80079bc:	2308      	movs	r3, #8
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e004      	b.n	80079cc <UART_SetConfig+0x348>
 80079c2:	2310      	movs	r3, #16
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e001      	b.n	80079cc <UART_SetConfig+0x348>
 80079c8:	2310      	movs	r3, #16
 80079ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d4:	d15b      	bne.n	8007a8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079d6:	7ffb      	ldrb	r3, [r7, #31]
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d828      	bhi.n	8007a2e <UART_SetConfig+0x3aa>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <UART_SetConfig+0x360>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a11 	.word	0x08007a11
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	08007a2f 	.word	0x08007a2f
 80079f4:	08007a1f 	.word	0x08007a1f
 80079f8:	08007a2f 	.word	0x08007a2f
 80079fc:	08007a2f 	.word	0x08007a2f
 8007a00:	08007a2f 	.word	0x08007a2f
 8007a04:	08007a27 	.word	0x08007a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a08:	f7fc fdf0 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8007a0c:	61b8      	str	r0, [r7, #24]
        break;
 8007a0e:	e013      	b.n	8007a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a10:	f7fc fe00 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8007a14:	61b8      	str	r0, [r7, #24]
        break;
 8007a16:	e00f      	b.n	8007a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a18:	4b4b      	ldr	r3, [pc, #300]	@ (8007b48 <UART_SetConfig+0x4c4>)
 8007a1a:	61bb      	str	r3, [r7, #24]
        break;
 8007a1c:	e00c      	b.n	8007a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1e:	f7fc fcd5 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8007a22:	61b8      	str	r0, [r7, #24]
        break;
 8007a24:	e008      	b.n	8007a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a2a:	61bb      	str	r3, [r7, #24]
        break;
 8007a2c:	e004      	b.n	8007a38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	77bb      	strb	r3, [r7, #30]
        break;
 8007a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d074      	beq.n	8007b28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	005a      	lsls	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	441a      	add	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d916      	bls.n	8007a88 <UART_SetConfig+0x404>
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d212      	bcs.n	8007a88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f023 030f 	bic.w	r3, r3, #15
 8007a6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	89fb      	ldrh	r3, [r7, #14]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	89fa      	ldrh	r2, [r7, #14]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e04f      	b.n	8007b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	77bb      	strb	r3, [r7, #30]
 8007a8c:	e04c      	b.n	8007b28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d828      	bhi.n	8007ae6 <UART_SetConfig+0x462>
 8007a94:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <UART_SetConfig+0x418>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae7 	.word	0x08007ae7
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ae7 	.word	0x08007ae7
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007adf 	.word	0x08007adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac0:	f7fc fd94 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8007ac4:	61b8      	str	r0, [r7, #24]
        break;
 8007ac6:	e013      	b.n	8007af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fc fda4 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8007acc:	61b8      	str	r0, [r7, #24]
        break;
 8007ace:	e00f      	b.n	8007af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b48 <UART_SetConfig+0x4c4>)
 8007ad2:	61bb      	str	r3, [r7, #24]
        break;
 8007ad4:	e00c      	b.n	8007af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad6:	f7fc fc79 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8007ada:	61b8      	str	r0, [r7, #24]
        break;
 8007adc:	e008      	b.n	8007af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae2:	61bb      	str	r3, [r7, #24]
        break;
 8007ae4:	e004      	b.n	8007af0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	77bb      	strb	r3, [r7, #30]
        break;
 8007aee:	bf00      	nop
    }

    if (pclk != 0U)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	085a      	lsrs	r2, r3, #1
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b0f      	cmp	r3, #15
 8007b0e:	d909      	bls.n	8007b24 <UART_SetConfig+0x4a0>
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b16:	d205      	bcs.n	8007b24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60da      	str	r2, [r3, #12]
 8007b22:	e001      	b.n	8007b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b34:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	40007c00 	.word	0x40007c00
 8007b44:	40023800 	.word	0x40023800
 8007b48:	00f42400 	.word	0x00f42400

08007b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4a:	d10a      	bne.n	8007c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]
  }
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08c      	sub	sp, #48	@ 0x30
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca0:	f7fa fc0e 	bl	80024c0 <HAL_GetTick>
 8007ca4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d12e      	bne.n	8007d12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f83b 	bl	8007d3e <UART_WaitOnFlagUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d021      	beq.n	8007d12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce2:	623b      	str	r3, [r7, #32]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e011      	b.n	8007d36 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	@ 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4e:	e04f      	b.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d04b      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d58:	f7fa fbb2 	bl	80024c0 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e04e      	b.n	8007e10 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d037      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b80      	cmp	r3, #128	@ 0x80
 8007d84:	d034      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b40      	cmp	r3, #64	@ 0x40
 8007d8a:	d031      	beq.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d110      	bne.n	8007dbc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2208      	movs	r2, #8
 8007da0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 f8fe 	bl	8007fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2208      	movs	r2, #8
 8007dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e029      	b.n	8007e10 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dca:	d111      	bne.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f8e4 	bl	8007fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e00f      	b.n	8007e10 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69da      	ldr	r2, [r3, #28]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d0a0      	beq.n	8007d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b096      	sub	sp, #88	@ 0x58
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2222      	movs	r2, #34	@ 0x22
 8007e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d028      	beq.n	8007e9e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e50:	4a3e      	ldr	r2, [pc, #248]	@ (8007f4c <UART_Start_Receive_DMA+0x134>)
 8007e52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e58:	4a3d      	ldr	r2, [pc, #244]	@ (8007f50 <UART_Start_Receive_DMA+0x138>)
 8007e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e60:	4a3c      	ldr	r2, [pc, #240]	@ (8007f54 <UART_Start_Receive_DMA+0x13c>)
 8007e62:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e68:	2200      	movs	r2, #0
 8007e6a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3324      	adds	r3, #36	@ 0x24
 8007e76:	4619      	mov	r1, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	f7fb f87a 	bl	8002f78 <HAL_DMA_Start_IT>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2210      	movs	r2, #16
 8007e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e051      	b.n	8007f42 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d018      	beq.n	8007ed8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ef8:	637a      	str	r2, [r7, #52]	@ 0x34
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e5      	bne.n	8007ed8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f2c:	623a      	str	r2, [r7, #32]
 8007f2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	6a3a      	ldr	r2, [r7, #32]
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e5      	bne.n	8007f0c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3758      	adds	r7, #88	@ 0x58
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0800811f 	.word	0x0800811f
 8007f50:	08008247 	.word	0x08008247
 8007f54:	08008285 	.word	0x08008285

08007f58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b089      	sub	sp, #36	@ 0x24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e6      	bne.n	8007f60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007f98:	bf00      	nop
 8007f9a:	3724      	adds	r7, #36	@ 0x24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b095      	sub	sp, #84	@ 0x54
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e6      	bne.n	8007fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e5      	bne.n	8007fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008016:	2b01      	cmp	r3, #1
 8008018:	d118      	bne.n	800804c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60bb      	str	r3, [r7, #8]
   return(result);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008060:	bf00      	nop
 8008062:	3754      	adds	r7, #84	@ 0x54
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b090      	sub	sp, #64	@ 0x40
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008082:	d037      	beq.n	80080f4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008086:	2200      	movs	r2, #0
 8008088:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800808c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	623b      	str	r3, [r7, #32]
   return(result);
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80080ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e5      	bne.n	800808c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	69b9      	ldr	r1, [r7, #24]
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	617b      	str	r3, [r7, #20]
   return(result);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e6      	bne.n	80080c0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080f2:	e002      	b.n	80080fa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80080f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80080f6:	f7f9 f89d 	bl	8001234 <HAL_UART_TxCpltCallback>
}
 80080fa:	bf00      	nop
 80080fc:	3740      	adds	r7, #64	@ 0x40
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff fa8f 	bl	8007634 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b09c      	sub	sp, #112	@ 0x70
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008134:	d071      	beq.n	800821a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008138:	2200      	movs	r2, #0
 800813a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800813e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800814c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800814e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008152:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800815c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800815e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800816a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008182:	f023 0301 	bic.w	r3, r3, #1
 8008186:	667b      	str	r3, [r7, #100]	@ 0x64
 8008188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008190:	647a      	str	r2, [r7, #68]	@ 0x44
 8008192:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800819e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e5      	bne.n	8008170 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	623b      	str	r3, [r7, #32]
   return(result);
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80081bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3308      	adds	r3, #8
 80081c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80081c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e5      	bne.n	80081a4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081da:	2220      	movs	r2, #32
 80081dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d118      	bne.n	800821a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f023 0310 	bic.w	r3, r3, #16
 80081fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	617b      	str	r3, [r7, #20]
   return(result);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e6      	bne.n	80081e8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800821a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800821c:	2200      	movs	r2, #0
 800821e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008224:	2b01      	cmp	r3, #1
 8008226:	d107      	bne.n	8008238 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800822a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800822e:	4619      	mov	r1, r3
 8008230:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008232:	f7f9 f831 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008236:	e002      	b.n	800823e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008238:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800823a:	f7ff fa05 	bl	8007648 <HAL_UART_RxCpltCallback>
}
 800823e:	bf00      	nop
 8008240:	3770      	adds	r7, #112	@ 0x70
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800825e:	2b01      	cmp	r3, #1
 8008260:	d109      	bne.n	8008276 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	b29b      	uxth	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7f9 f812 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008274:	e002      	b.n	800827c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff f9f0 	bl	800765c <HAL_UART_RxHalfCpltCallback>
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008290:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008296:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b80      	cmp	r3, #128	@ 0x80
 80082ac:	d109      	bne.n	80082c2 <UART_DMAError+0x3e>
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b21      	cmp	r3, #33	@ 0x21
 80082b2:	d106      	bne.n	80082c2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80082bc:	6978      	ldr	r0, [r7, #20]
 80082be:	f7ff fe4b 	bl	8007f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082cc:	2b40      	cmp	r3, #64	@ 0x40
 80082ce:	d109      	bne.n	80082e4 <UART_DMAError+0x60>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b22      	cmp	r3, #34	@ 0x22
 80082d4:	d106      	bne.n	80082e4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f7ff fe60 	bl	8007fa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ea:	f043 0210 	orr.w	r2, r3, #16
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f4:	6978      	ldr	r0, [r7, #20]
 80082f6:	f7ff f9bb 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fa:	bf00      	nop
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff f9a5 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	60bb      	str	r3, [r7, #8]
   return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7f8 ff5d 	bl	8001234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800837a:	bf00      	nop
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b08c      	sub	sp, #48	@ 0x30
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	4613      	mov	r3, r2
 800838e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008396:	2b20      	cmp	r3, #32
 8008398:	d142      	bne.n	8008420 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e03b      	b.n	8008422 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fd2b 	bl	8007e18 <UART_Start_Receive_DMA>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80083c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d124      	bne.n	800841a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d11d      	bne.n	8008414 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2210      	movs	r2, #16
 80083de:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	617b      	str	r3, [r7, #20]
   return(result);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f043 0310 	orr.w	r3, r3, #16
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008400:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6a39      	ldr	r1, [r7, #32]
 8008404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	61fb      	str	r3, [r7, #28]
   return(result);
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008412:	e002      	b.n	800841a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800841a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800841e:	e000      	b.n	8008422 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008420:	2302      	movs	r3, #2
  }
}
 8008422:	4618      	mov	r0, r3
 8008424:	3730      	adds	r7, #48	@ 0x30
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	60bb      	str	r3, [r7, #8]
  return(result);
 8008444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10f      	bne.n	800846a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844a:	f3ef 8310 	mrs	r3, PRIMASK
 800844e:	607b      	str	r3, [r7, #4]
  return(result);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008456:	f3ef 8311 	mrs	r3, BASEPRI
 800845a:	603b      	str	r3, [r7, #0]
  return(result);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <osKernelInitialize+0x3a>
 8008462:	4b0e      	ldr	r3, [pc, #56]	@ (800849c <osKernelInitialize+0x64>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d103      	bne.n	8008472 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800846a:	f06f 0305 	mvn.w	r3, #5
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e00c      	b.n	800848c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008472:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <osKernelInitialize+0x64>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800847a:	4b08      	ldr	r3, [pc, #32]	@ (800849c <osKernelInitialize+0x64>)
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e002      	b.n	800848c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000504 	.word	0x20000504

080084a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a6:	f3ef 8305 	mrs	r3, IPSR
 80084aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80084ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10f      	bne.n	80084d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b2:	f3ef 8310 	mrs	r3, PRIMASK
 80084b6:	607b      	str	r3, [r7, #4]
  return(result);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084be:	f3ef 8311 	mrs	r3, BASEPRI
 80084c2:	603b      	str	r3, [r7, #0]
  return(result);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <osKernelStart+0x3a>
 80084ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008508 <osKernelStart+0x68>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d103      	bne.n	80084da <osKernelStart+0x3a>
    stat = osErrorISR;
 80084d2:	f06f 0305 	mvn.w	r3, #5
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e010      	b.n	80084fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084da:	4b0b      	ldr	r3, [pc, #44]	@ (8008508 <osKernelStart+0x68>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d109      	bne.n	80084f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084e2:	f7ff ffa2 	bl	800842a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084e6:	4b08      	ldr	r3, [pc, #32]	@ (8008508 <osKernelStart+0x68>)
 80084e8:	2202      	movs	r2, #2
 80084ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084ec:	f001 f8e2 	bl	80096b4 <vTaskStartScheduler>
      stat = osOK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e002      	b.n	80084fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80084f6:	f04f 33ff 	mov.w	r3, #4294967295
 80084fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084fc:	68fb      	ldr	r3, [r7, #12]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000504 	.word	0x20000504

0800850c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b090      	sub	sp, #64	@ 0x40
 8008510:	af04      	add	r7, sp, #16
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851c:	f3ef 8305 	mrs	r3, IPSR
 8008520:	61fb      	str	r3, [r7, #28]
  return(result);
 8008522:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008524:	2b00      	cmp	r3, #0
 8008526:	f040 808f 	bne.w	8008648 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852a:	f3ef 8310 	mrs	r3, PRIMASK
 800852e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008536:	f3ef 8311 	mrs	r3, BASEPRI
 800853a:	617b      	str	r3, [r7, #20]
  return(result);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <osThreadNew+0x3e>
 8008542:	4b44      	ldr	r3, [pc, #272]	@ (8008654 <osThreadNew+0x148>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d07e      	beq.n	8008648 <osThreadNew+0x13c>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d07b      	beq.n	8008648 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008550:	2380      	movs	r3, #128	@ 0x80
 8008552:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008554:	2318      	movs	r3, #24
 8008556:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800855c:	f04f 33ff 	mov.w	r3, #4294967295
 8008560:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d045      	beq.n	80085f4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <osThreadNew+0x6a>
        name = attr->name;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <osThreadNew+0x90>
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	2b38      	cmp	r3, #56	@ 0x38
 800858e:	d805      	bhi.n	800859c <osThreadNew+0x90>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <osThreadNew+0x94>
        return (NULL);
 800859c:	2300      	movs	r3, #0
 800859e:	e054      	b.n	800864a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	089b      	lsrs	r3, r3, #2
 80085ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00e      	beq.n	80085d6 <osThreadNew+0xca>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	2ba7      	cmp	r3, #167	@ 0xa7
 80085be:	d90a      	bls.n	80085d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <osThreadNew+0xca>
        mem = 1;
 80085d0:	2301      	movs	r3, #1
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	e010      	b.n	80085f8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10c      	bne.n	80085f8 <osThreadNew+0xec>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <osThreadNew+0xec>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <osThreadNew+0xec>
          mem = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	e001      	b.n	80085f8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d110      	bne.n	8008620 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008606:	9202      	str	r2, [sp, #8]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fe4f 	bl	80092b8 <xTaskCreateStatic>
 800861a:	4603      	mov	r3, r0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	e013      	b.n	8008648 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d110      	bne.n	8008648 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	b29a      	uxth	r2, r3
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fea3 	bl	8009384 <xTaskCreate>
 800863e:	4603      	mov	r3, r0
 8008640:	2b01      	cmp	r3, #1
 8008642:	d001      	beq.n	8008648 <osThreadNew+0x13c>
          hTask = NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008648:	693b      	ldr	r3, [r7, #16]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3730      	adds	r7, #48	@ 0x30
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000504 	.word	0x20000504

08008658 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008660:	f3ef 8305 	mrs	r3, IPSR
 8008664:	613b      	str	r3, [r7, #16]
  return(result);
 8008666:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10f      	bne.n	800868c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	60fb      	str	r3, [r7, #12]
  return(result);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d105      	bne.n	8008684 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008678:	f3ef 8311 	mrs	r3, BASEPRI
 800867c:	60bb      	str	r3, [r7, #8]
  return(result);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <osDelay+0x3c>
 8008684:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <osDelay+0x58>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d103      	bne.n	8008694 <osDelay+0x3c>
    stat = osErrorISR;
 800868c:	f06f 0305 	mvn.w	r3, #5
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e007      	b.n	80086a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ffd0 	bl	8009644 <vTaskDelay>
    }
  }

  return (stat);
 80086a4:	697b      	ldr	r3, [r7, #20]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000504 	.word	0x20000504

080086b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4a07      	ldr	r2, [pc, #28]	@ (80086e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80086c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4a06      	ldr	r2, [pc, #24]	@ (80086e4 <vApplicationGetIdleTaskMemory+0x30>)
 80086ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2280      	movs	r2, #128	@ 0x80
 80086d0:	601a      	str	r2, [r3, #0]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000508 	.word	0x20000508
 80086e4:	200005b0 	.word	0x200005b0

080086e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a07      	ldr	r2, [pc, #28]	@ (8008714 <vApplicationGetTimerTaskMemory+0x2c>)
 80086f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4a06      	ldr	r2, [pc, #24]	@ (8008718 <vApplicationGetTimerTaskMemory+0x30>)
 80086fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008706:	601a      	str	r2, [r3, #0]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	200007b0 	.word	0x200007b0
 8008718:	20000858 	.word	0x20000858

0800871c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f103 0208 	add.w	r2, r3, #8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f04f 32ff 	mov.w	r2, #4294967295
 8008734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f103 0208 	add.w	r2, r3, #8
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0208 	add.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087be:	b480      	push	{r7}
 80087c0:	b085      	sub	sp, #20
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d103      	bne.n	80087de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e00c      	b.n	80087f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3308      	adds	r3, #8
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e002      	b.n	80087ec <vListInsert+0x2e>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d2f6      	bcs.n	80087e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6892      	ldr	r2, [r2, #8]
 8008846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6852      	ldr	r2, [r2, #4]
 8008850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	d103      	bne.n	8008864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	1e5a      	subs	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10d      	bne.n	80088b4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	b672      	cpsid	i
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	b662      	cpsie	i
 80088ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80088b4:	f002 f8d2 	bl	800aa5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	68f9      	ldr	r1, [r7, #12]
 80088c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e4:	3b01      	subs	r3, #1
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	22ff      	movs	r2, #255	@ 0xff
 80088f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	22ff      	movs	r2, #255	@ 0xff
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d114      	bne.n	8008934 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01a      	beq.n	8008948 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3310      	adds	r3, #16
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f978 	bl	8009c0c <xTaskRemoveFromEventList>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d012      	beq.n	8008948 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008922:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <xQueueGenericReset+0xd4>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	e009      	b.n	8008948 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3310      	adds	r3, #16
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff feef 	bl	800871c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3324      	adds	r3, #36	@ 0x24
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff feea 	bl	800871c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008948:	f002 f8be 	bl	800aac8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800894c:	2301      	movs	r3, #1
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	@ 0x38
 8008960:	af02      	add	r7, sp, #8
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10d      	bne.n	800898c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	b672      	cpsid	i
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	b662      	cpsie	i
 8008984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10d      	bne.n	80089ae <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	b672      	cpsid	i
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	b662      	cpsie	i
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	e7fd      	b.n	80089aa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <xQueueGenericCreateStatic+0x5e>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <xQueueGenericCreateStatic+0x62>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <xQueueGenericCreateStatic+0x64>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10d      	bne.n	80089e0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	b672      	cpsid	i
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	b662      	cpsie	i
 80089d8:	623b      	str	r3, [r7, #32]
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <xQueueGenericCreateStatic+0x90>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <xQueueGenericCreateStatic+0x94>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <xQueueGenericCreateStatic+0x96>
 80089f0:	2300      	movs	r3, #0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10d      	bne.n	8008a12 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	b672      	cpsid	i
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	b662      	cpsie	i
 8008a0a:	61fb      	str	r3, [r7, #28]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a12:	2350      	movs	r3, #80	@ 0x50
 8008a14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b50      	cmp	r3, #80	@ 0x50
 8008a1a:	d00d      	beq.n	8008a38 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a20:	b672      	cpsid	i
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	b662      	cpsie	i
 8008a30:	61bb      	str	r3, [r7, #24]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	4613      	mov	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f805 	bl	8008a6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3730      	adds	r7, #48	@ 0x30
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
 8008a76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e002      	b.n	8008a8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a98:	2101      	movs	r1, #1
 8008a9a:	69b8      	ldr	r0, [r7, #24]
 8008a9c:	f7ff fef2 	bl	8008884 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	@ 0x38
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10d      	bne.n	8008ae8 <xQueueGenericSend+0x38>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d103      	bne.n	8008af6 <xQueueGenericSend+0x46>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <xQueueGenericSend+0x4a>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <xQueueGenericSend+0x4c>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10d      	bne.n	8008b1c <xQueueGenericSend+0x6c>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d103      	bne.n	8008b2a <xQueueGenericSend+0x7a>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d101      	bne.n	8008b2e <xQueueGenericSend+0x7e>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <xQueueGenericSend+0x80>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10d      	bne.n	8008b50 <xQueueGenericSend+0xa0>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b38:	b672      	cpsid	i
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	b662      	cpsie	i
 8008b48:	623b      	str	r3, [r7, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b50:	f001 fa2a 	bl	8009fa8 <xTaskGetSchedulerState>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <xQueueGenericSend+0xb0>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <xQueueGenericSend+0xb4>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <xQueueGenericSend+0xb6>
 8008b64:	2300      	movs	r3, #0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10d      	bne.n	8008b86 <xQueueGenericSend+0xd6>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	b672      	cpsid	i
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	b662      	cpsie	i
 8008b7e:	61fb      	str	r3, [r7, #28]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b86:	f001 ff69 	bl	800aa5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <xQueueGenericSend+0xec>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d129      	bne.n	8008bf0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ba2:	f000 fa1b 	bl	8008fdc <prvCopyDataToQueue>
 8008ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	3324      	adds	r3, #36	@ 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 f829 	bl	8009c0c <xTaskRemoveFromEventList>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d013      	beq.n	8008be8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc0 <xQueueGenericSend+0x210>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	e00a      	b.n	8008be8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bd8:	4b39      	ldr	r3, [pc, #228]	@ (8008cc0 <xQueueGenericSend+0x210>)
 8008bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008be8:	f001 ff6e 	bl	800aac8 <vPortExitCritical>
				return pdPASS;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e063      	b.n	8008cb8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bf6:	f001 ff67 	bl	800aac8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e05c      	b.n	8008cb8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 f865 	bl	8009cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c12:	f001 ff59 	bl	800aac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c16:	f000 fdc1 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c1a:	f001 ff1f 	bl	800aa5c <vPortEnterCritical>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d103      	bne.n	8008c34 <xQueueGenericSend+0x184>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c3a:	b25b      	sxtb	r3, r3
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d103      	bne.n	8008c4a <xQueueGenericSend+0x19a>
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c4a:	f001 ff3d 	bl	800aac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c4e:	1d3a      	adds	r2, r7, #4
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	4611      	mov	r1, r2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f854 	bl	8009d04 <xTaskCheckForTimeOut>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d124      	bne.n	8008cac <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c64:	f000 fab2 	bl	80091cc <prvIsQueueFull>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d018      	beq.n	8008ca0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	3310      	adds	r3, #16
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 ff72 	bl	8009b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c7e:	f000 fa3d 	bl	80090fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c82:	f000 fd99 	bl	80097b8 <xTaskResumeAll>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af7c 	bne.w	8008b86 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <xQueueGenericSend+0x210>)
 8008c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	e772      	b.n	8008b86 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ca2:	f000 fa2b 	bl	80090fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ca6:	f000 fd87 	bl	80097b8 <xTaskResumeAll>
 8008caa:	e76c      	b.n	8008b86 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cae:	f000 fa25 	bl	80090fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cb2:	f000 fd81 	bl	80097b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3738      	adds	r7, #56	@ 0x38
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08e      	sub	sp, #56	@ 0x38
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	b672      	cpsid	i
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	b662      	cpsie	i
 8008cf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d103      	bne.n	8008d06 <xQueueGenericSendFromISR+0x42>
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueGenericSendFromISR+0x46>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueGenericSendFromISR+0x48>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10d      	bne.n	8008d2c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d14:	b672      	cpsid	i
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	b662      	cpsie	i
 8008d24:	623b      	str	r3, [r7, #32]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d103      	bne.n	8008d3a <xQueueGenericSendFromISR+0x76>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <xQueueGenericSendFromISR+0x7a>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueGenericSendFromISR+0x7c>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10d      	bne.n	8008d60 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	b672      	cpsid	i
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	b662      	cpsie	i
 8008d58:	61fb      	str	r3, [r7, #28]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d60:	f001 ff64 	bl	800ac2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d64:	f3ef 8211 	mrs	r2, BASEPRI
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	b672      	cpsid	i
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	b662      	cpsie	i
 8008d7c:	61ba      	str	r2, [r7, #24]
 8008d7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d302      	bcc.n	8008d96 <xQueueGenericSendFromISR+0xd2>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d12c      	bne.n	8008df0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008da6:	f000 f919 	bl	8008fdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008daa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d112      	bne.n	8008dda <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d016      	beq.n	8008dea <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	3324      	adds	r3, #36	@ 0x24
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 ff23 	bl	8009c0c <xTaskRemoveFromEventList>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00e      	beq.n	8008dea <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e007      	b.n	8008dea <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dde:	3301      	adds	r3, #1
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	b25a      	sxtb	r2, r3
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008dea:	2301      	movs	r3, #1
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008dee:	e001      	b.n	8008df4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3738      	adds	r7, #56	@ 0x38
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08c      	sub	sp, #48	@ 0x30
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10d      	bne.n	8008e42 <xQueueReceive+0x36>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	b672      	cpsid	i
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	b662      	cpsie	i
 8008e3a:	623b      	str	r3, [r7, #32]
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	e7fd      	b.n	8008e3e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d103      	bne.n	8008e50 <xQueueReceive+0x44>
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <xQueueReceive+0x48>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <xQueueReceive+0x4a>
 8008e54:	2300      	movs	r3, #0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10d      	bne.n	8008e76 <xQueueReceive+0x6a>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5e:	b672      	cpsid	i
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	b662      	cpsie	i
 8008e6e:	61fb      	str	r3, [r7, #28]
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	e7fd      	b.n	8008e72 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e76:	f001 f897 	bl	8009fa8 <xTaskGetSchedulerState>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <xQueueReceive+0x7a>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <xQueueReceive+0x7e>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <xQueueReceive+0x80>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <xQueueReceive+0xa0>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	b672      	cpsid	i
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	b662      	cpsie	i
 8008ea4:	61bb      	str	r3, [r7, #24]
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eac:	f001 fdd6 	bl	800aa5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01f      	beq.n	8008efc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ebc:	68b9      	ldr	r1, [r7, #8]
 8008ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec0:	f000 f8f6 	bl	80090b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	1e5a      	subs	r2, r3, #1
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	3310      	adds	r3, #16
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fe97 	bl	8009c0c <xTaskRemoveFromEventList>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd8 <xQueueReceive+0x1cc>)
 8008ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ef4:	f001 fde8 	bl	800aac8 <vPortExitCritical>
				return pdPASS;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e069      	b.n	8008fd0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f02:	f001 fde1 	bl	800aac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e062      	b.n	8008fd0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fedf 	bl	8009cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f1e:	f001 fdd3 	bl	800aac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f22:	f000 fc3b 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f26:	f001 fd99 	bl	800aa5c <vPortEnterCritical>
 8008f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f30:	b25b      	sxtb	r3, r3
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d103      	bne.n	8008f40 <xQueueReceive+0x134>
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d103      	bne.n	8008f56 <xQueueReceive+0x14a>
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f56:	f001 fdb7 	bl	800aac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f5a:	1d3a      	adds	r2, r7, #4
 8008f5c:	f107 0310 	add.w	r3, r7, #16
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fece 	bl	8009d04 <xTaskCheckForTimeOut>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d123      	bne.n	8008fb6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f70:	f000 f916 	bl	80091a0 <prvIsQueueEmpty>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d017      	beq.n	8008faa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7c:	3324      	adds	r3, #36	@ 0x24
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4611      	mov	r1, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fdec 	bl	8009b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f8a:	f000 f8b7 	bl	80090fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f8e:	f000 fc13 	bl	80097b8 <xTaskResumeAll>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d189      	bne.n	8008eac <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008f98:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd8 <xQueueReceive+0x1cc>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	e780      	b.n	8008eac <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fac:	f000 f8a6 	bl	80090fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fb0:	f000 fc02 	bl	80097b8 <xTaskResumeAll>
 8008fb4:	e77a      	b.n	8008eac <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb8:	f000 f8a0 	bl	80090fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fbc:	f000 fbfc 	bl	80097b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc2:	f000 f8ed 	bl	80091a0 <prvIsQueueEmpty>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f43f af6f 	beq.w	8008eac <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3730      	adds	r7, #48	@ 0x30
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10d      	bne.n	8009016 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d14d      	bne.n	800909e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 ffec 	bl	8009fe4 <xTaskPriorityDisinherit>
 800900c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	609a      	str	r2, [r3, #8]
 8009014:	e043      	b.n	800909e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d119      	bne.n	8009050 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6858      	ldr	r0, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009024:	461a      	mov	r2, r3
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	f002 f8bc 	bl	800b1a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d32b      	bcc.n	800909e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
 800904e:	e026      	b.n	800909e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68d8      	ldr	r0, [r3, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009058:	461a      	mov	r2, r3
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	f002 f8a2 	bl	800b1a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009068:	425b      	negs	r3, r3
 800906a:	441a      	add	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d207      	bcs.n	800908c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009084:	425b      	negs	r3, r3
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d105      	bne.n	800909e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3b01      	subs	r3, #1
 800909c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d018      	beq.n	80090f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ca:	441a      	add	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d303      	bcc.n	80090e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68d9      	ldr	r1, [r3, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ec:	461a      	mov	r2, r3
 80090ee:	6838      	ldr	r0, [r7, #0]
 80090f0:	f002 f858 	bl	800b1a4 <memcpy>
	}
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009104:	f001 fcaa 	bl	800aa5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800910e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009110:	e011      	b.n	8009136 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d012      	beq.n	8009140 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3324      	adds	r3, #36	@ 0x24
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fd74 	bl	8009c0c <xTaskRemoveFromEventList>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800912a:	f000 fe53 	bl	8009dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	3b01      	subs	r3, #1
 8009132:	b2db      	uxtb	r3, r3
 8009134:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dce9      	bgt.n	8009112 <prvUnlockQueue+0x16>
 800913e:	e000      	b.n	8009142 <prvUnlockQueue+0x46>
					break;
 8009140:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	22ff      	movs	r2, #255	@ 0xff
 8009146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800914a:	f001 fcbd 	bl	800aac8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800914e:	f001 fc85 	bl	800aa5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009158:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800915a:	e011      	b.n	8009180 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d012      	beq.n	800918a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3310      	adds	r3, #16
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fd4f 	bl	8009c0c <xTaskRemoveFromEventList>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009174:	f000 fe2e 	bl	8009dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	3b01      	subs	r3, #1
 800917c:	b2db      	uxtb	r3, r3
 800917e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dce9      	bgt.n	800915c <prvUnlockQueue+0x60>
 8009188:	e000      	b.n	800918c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800918a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	22ff      	movs	r2, #255	@ 0xff
 8009190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009194:	f001 fc98 	bl	800aac8 <vPortExitCritical>
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091a8:	f001 fc58 	bl	800aa5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091b4:	2301      	movs	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	e001      	b.n	80091be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091be:	f001 fc83 	bl	800aac8 <vPortExitCritical>

	return xReturn;
 80091c2:	68fb      	ldr	r3, [r7, #12]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091d4:	f001 fc42 	bl	800aa5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d102      	bne.n	80091ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e001      	b.n	80091ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091ee:	f001 fc6b 	bl	800aac8 <vPortExitCritical>

	return xReturn;
 80091f2:	68fb      	ldr	r3, [r7, #12]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	e014      	b.n	8009236 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800920c:	4a0f      	ldr	r2, [pc, #60]	@ (800924c <vQueueAddToRegistry+0x50>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009218:	490c      	ldr	r1, [pc, #48]	@ (800924c <vQueueAddToRegistry+0x50>)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009222:	4a0a      	ldr	r2, [pc, #40]	@ (800924c <vQueueAddToRegistry+0x50>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	4413      	add	r3, r2
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800922e:	e006      	b.n	800923e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b07      	cmp	r3, #7
 800923a:	d9e7      	bls.n	800920c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20000c58 	.word	0x20000c58

08009250 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009260:	f001 fbfc 	bl	800aa5c <vPortEnterCritical>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800926a:	b25b      	sxtb	r3, r3
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009270:	d103      	bne.n	800927a <vQueueWaitForMessageRestricted+0x2a>
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009280:	b25b      	sxtb	r3, r3
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d103      	bne.n	8009290 <vQueueWaitForMessageRestricted+0x40>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009290:	f001 fc1a 	bl	800aac8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009298:	2b00      	cmp	r3, #0
 800929a:	d106      	bne.n	80092aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	3324      	adds	r3, #36	@ 0x24
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fc83 	bl	8009bb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f7ff ff26 	bl	80090fc <prvUnlockQueue>
	}
 80092b0:	bf00      	nop
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	@ 0x38
 80092bc:	af04      	add	r7, sp, #16
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10d      	bne.n	80092e8 <xTaskCreateStatic+0x30>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d0:	b672      	cpsid	i
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	b662      	cpsie	i
 80092e0:	623b      	str	r3, [r7, #32]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <xTaskCreateStatic+0x52>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f2:	b672      	cpsid	i
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	b662      	cpsie	i
 8009302:	61fb      	str	r3, [r7, #28]
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	e7fd      	b.n	8009306 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800930a:	23a8      	movs	r3, #168	@ 0xa8
 800930c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2ba8      	cmp	r3, #168	@ 0xa8
 8009312:	d00d      	beq.n	8009330 <xTaskCreateStatic+0x78>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	61bb      	str	r3, [r7, #24]
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009330:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01e      	beq.n	8009376 <xTaskCreateStatic+0xbe>
 8009338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01b      	beq.n	8009376 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009346:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	2202      	movs	r2, #2
 800934c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009350:	2300      	movs	r3, #0
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	f107 0314 	add.w	r3, r7, #20
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f851 	bl	8009410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800936e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009370:	f000 f8f8 	bl	8009564 <prvAddNewTaskToReadyList>
 8009374:	e001      	b.n	800937a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800937a:	697b      	ldr	r3, [r7, #20]
	}
 800937c:	4618      	mov	r0, r3
 800937e:	3728      	adds	r7, #40	@ 0x28
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009384:	b580      	push	{r7, lr}
 8009386:	b08c      	sub	sp, #48	@ 0x30
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4618      	mov	r0, r3
 800939a:	f001 fc8d 	bl	800acb8 <pvPortMalloc>
 800939e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00e      	beq.n	80093c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093a6:	20a8      	movs	r0, #168	@ 0xa8
 80093a8:	f001 fc86 	bl	800acb8 <pvPortMalloc>
 80093ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80093ba:	e005      	b.n	80093c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f001 fd49 	bl	800ae54 <vPortFree>
 80093c2:	e001      	b.n	80093c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d017      	beq.n	80093fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093d6:	88fa      	ldrh	r2, [r7, #6]
 80093d8:	2300      	movs	r3, #0
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f80f 	bl	8009410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093f2:	69f8      	ldr	r0, [r7, #28]
 80093f4:	f000 f8b6 	bl	8009564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093f8:	2301      	movs	r3, #1
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	e002      	b.n	8009404 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009402:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009404:	69bb      	ldr	r3, [r7, #24]
	}
 8009406:	4618      	mov	r0, r3
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	461a      	mov	r2, r3
 8009428:	21a5      	movs	r1, #165	@ 0xa5
 800942a:	f001 fe2f 	bl	800b08c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009438:	440b      	add	r3, r1
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	f023 0307 	bic.w	r3, r3, #7
 8009446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00d      	beq.n	800946e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	617b      	str	r3, [r7, #20]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01f      	beq.n	80094b4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	e012      	b.n	80094a0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	4413      	add	r3, r2
 8009480:	7819      	ldrb	r1, [r3, #0]
 8009482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4413      	add	r3, r2
 8009488:	3334      	adds	r3, #52	@ 0x34
 800948a:	460a      	mov	r2, r1
 800948c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d006      	beq.n	80094a8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	3301      	adds	r3, #1
 800949e:	61fb      	str	r3, [r7, #28]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	2b0f      	cmp	r3, #15
 80094a4:	d9e9      	bls.n	800947a <prvInitialiseNewTask+0x6a>
 80094a6:	e000      	b.n	80094aa <prvInitialiseNewTask+0x9a>
			{
				break;
 80094a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094b2:	e003      	b.n	80094bc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094be:	2b37      	cmp	r3, #55	@ 0x37
 80094c0:	d901      	bls.n	80094c6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094c2:	2337      	movs	r3, #55	@ 0x37
 80094c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	2200      	movs	r2, #0
 80094d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	3304      	adds	r3, #4
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff f93d 	bl	800875c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	3318      	adds	r3, #24
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff f938 	bl	800875c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009500:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	2200      	movs	r2, #0
 8009506:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2200      	movs	r2, #0
 800950e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	3354      	adds	r3, #84	@ 0x54
 8009516:	224c      	movs	r2, #76	@ 0x4c
 8009518:	2100      	movs	r1, #0
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fdb6 	bl	800b08c <memset>
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	4a0d      	ldr	r2, [pc, #52]	@ (8009558 <prvInitialiseNewTask+0x148>)
 8009524:	659a      	str	r2, [r3, #88]	@ 0x58
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	4a0c      	ldr	r2, [pc, #48]	@ (800955c <prvInitialiseNewTask+0x14c>)
 800952a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	4a0c      	ldr	r2, [pc, #48]	@ (8009560 <prvInitialiseNewTask+0x150>)
 8009530:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	69b8      	ldr	r0, [r7, #24]
 8009538:	f001 f984 	bl	800a844 <pxPortInitialiseStack>
 800953c:	4602      	mov	r2, r0
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800954e:	bf00      	nop
 8009550:	3720      	adds	r7, #32
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20004ee4 	.word	0x20004ee4
 800955c:	20004f4c 	.word	0x20004f4c
 8009560:	20004fb4 	.word	0x20004fb4

08009564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800956c:	f001 fa76 	bl	800aa5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009570:	4b2d      	ldr	r3, [pc, #180]	@ (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a2c      	ldr	r2, [pc, #176]	@ (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800957a:	4b2c      	ldr	r3, [pc, #176]	@ (800962c <prvAddNewTaskToReadyList+0xc8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009582:	4a2a      	ldr	r2, [pc, #168]	@ (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009588:	4b27      	ldr	r3, [pc, #156]	@ (8009628 <prvAddNewTaskToReadyList+0xc4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d110      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009590:	f000 fc44 	bl	8009e1c <prvInitialiseTaskLists>
 8009594:	e00d      	b.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009596:	4b26      	ldr	r3, [pc, #152]	@ (8009630 <prvAddNewTaskToReadyList+0xcc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800959e:	4b23      	ldr	r3, [pc, #140]	@ (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d802      	bhi.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095ac:	4a1f      	ldr	r2, [pc, #124]	@ (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095b2:	4b20      	ldr	r3, [pc, #128]	@ (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <prvAddNewTaskToReadyList+0x74>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	4a18      	ldr	r2, [pc, #96]	@ (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a15      	ldr	r2, [pc, #84]	@ (800963c <prvAddNewTaskToReadyList+0xd8>)
 80095e6:	441a      	add	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7ff f8c1 	bl	8008776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095f4:	f001 fa68 	bl	800aac8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <prvAddNewTaskToReadyList+0xcc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00e      	beq.n	800961e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009600:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	429a      	cmp	r2, r3
 800960c:	d207      	bcs.n	800961e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800960e:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <prvAddNewTaskToReadyList+0xdc>)
 8009610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	2000116c 	.word	0x2000116c
 800962c:	20000c98 	.word	0x20000c98
 8009630:	20001178 	.word	0x20001178
 8009634:	20001188 	.word	0x20001188
 8009638:	20001174 	.word	0x20001174
 800963c:	20000c9c 	.word	0x20000c9c
 8009640:	e000ed04 	.word	0xe000ed04

08009644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d01a      	beq.n	800968c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009656:	4b15      	ldr	r3, [pc, #84]	@ (80096ac <vTaskDelay+0x68>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00d      	beq.n	800967a <vTaskDelay+0x36>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	b672      	cpsid	i
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	b662      	cpsie	i
 8009672:	60bb      	str	r3, [r7, #8]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800967a:	f000 f88f 	bl	800979c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800967e:	2100      	movs	r1, #0
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd23 	bl	800a0cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009686:	f000 f897 	bl	80097b8 <xTaskResumeAll>
 800968a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d107      	bne.n	80096a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009692:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <vTaskDelay+0x6c>)
 8009694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20001194 	.word	0x20001194
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	@ 0x28
 80096b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096c2:	463a      	mov	r2, r7
 80096c4:	1d39      	adds	r1, r7, #4
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fff2 	bl	80086b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	9202      	str	r2, [sp, #8]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	2300      	movs	r3, #0
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	460a      	mov	r2, r1
 80096e2:	4926      	ldr	r1, [pc, #152]	@ (800977c <vTaskStartScheduler+0xc8>)
 80096e4:	4826      	ldr	r0, [pc, #152]	@ (8009780 <vTaskStartScheduler+0xcc>)
 80096e6:	f7ff fde7 	bl	80092b8 <xTaskCreateStatic>
 80096ea:	4603      	mov	r3, r0
 80096ec:	4a25      	ldr	r2, [pc, #148]	@ (8009784 <vTaskStartScheduler+0xd0>)
 80096ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096f0:	4b24      	ldr	r3, [pc, #144]	@ (8009784 <vTaskStartScheduler+0xd0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e001      	b.n	8009702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d102      	bne.n	800970e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009708:	f000 fd34 	bl	800a174 <xTimerCreateTimerTask>
 800970c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d11d      	bne.n	8009750 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	b672      	cpsid	i
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	b662      	cpsie	i
 8009728:	613b      	str	r3, [r7, #16]
}
 800972a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800972c:	4b16      	ldr	r3, [pc, #88]	@ (8009788 <vTaskStartScheduler+0xd4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3354      	adds	r3, #84	@ 0x54
 8009732:	4a16      	ldr	r2, [pc, #88]	@ (800978c <vTaskStartScheduler+0xd8>)
 8009734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009736:	4b16      	ldr	r3, [pc, #88]	@ (8009790 <vTaskStartScheduler+0xdc>)
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800973e:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <vTaskStartScheduler+0xe0>)
 8009740:	2201      	movs	r2, #1
 8009742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009744:	4b14      	ldr	r3, [pc, #80]	@ (8009798 <vTaskStartScheduler+0xe4>)
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800974a:	f001 f909 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800974e:	e011      	b.n	8009774 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d10d      	bne.n	8009774 <vTaskStartScheduler+0xc0>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <vTaskStartScheduler+0xbc>
}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	0800b29c 	.word	0x0800b29c
 8009780:	08009ded 	.word	0x08009ded
 8009784:	20001190 	.word	0x20001190
 8009788:	20000c98 	.word	0x20000c98
 800978c:	20000018 	.word	0x20000018
 8009790:	2000118c 	.word	0x2000118c
 8009794:	20001178 	.word	0x20001178
 8009798:	20001170 	.word	0x20001170

0800979c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <vTaskSuspendAll+0x18>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a03      	ldr	r2, [pc, #12]	@ (80097b4 <vTaskSuspendAll+0x18>)
 80097a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097aa:	bf00      	nop
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	20001194 	.word	0x20001194

080097b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097c6:	4b43      	ldr	r3, [pc, #268]	@ (80098d4 <xTaskResumeAll+0x11c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10d      	bne.n	80097ea <xTaskResumeAll+0x32>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	603b      	str	r3, [r7, #0]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097ea:	f001 f937 	bl	800aa5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097ee:	4b39      	ldr	r3, [pc, #228]	@ (80098d4 <xTaskResumeAll+0x11c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	4a37      	ldr	r2, [pc, #220]	@ (80098d4 <xTaskResumeAll+0x11c>)
 80097f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f8:	4b36      	ldr	r3, [pc, #216]	@ (80098d4 <xTaskResumeAll+0x11c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d162      	bne.n	80098c6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009800:	4b35      	ldr	r3, [pc, #212]	@ (80098d8 <xTaskResumeAll+0x120>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d05e      	beq.n	80098c6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009808:	e02f      	b.n	800986a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980a:	4b34      	ldr	r3, [pc, #208]	@ (80098dc <xTaskResumeAll+0x124>)
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3318      	adds	r3, #24
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff f80a 	bl	8008830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3304      	adds	r3, #4
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff f805 	bl	8008830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982a:	4b2d      	ldr	r3, [pc, #180]	@ (80098e0 <xTaskResumeAll+0x128>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d903      	bls.n	800983a <xTaskResumeAll+0x82>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	4a2a      	ldr	r2, [pc, #168]	@ (80098e0 <xTaskResumeAll+0x128>)
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4a27      	ldr	r2, [pc, #156]	@ (80098e4 <xTaskResumeAll+0x12c>)
 8009848:	441a      	add	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fe ff90 	bl	8008776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985a:	4b23      	ldr	r3, [pc, #140]	@ (80098e8 <xTaskResumeAll+0x130>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	429a      	cmp	r2, r3
 8009862:	d302      	bcc.n	800986a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009864:	4b21      	ldr	r3, [pc, #132]	@ (80098ec <xTaskResumeAll+0x134>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800986a:	4b1c      	ldr	r3, [pc, #112]	@ (80098dc <xTaskResumeAll+0x124>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1cb      	bne.n	800980a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009878:	f000 fb76 	bl	8009f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800987c:	4b1c      	ldr	r3, [pc, #112]	@ (80098f0 <xTaskResumeAll+0x138>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d010      	beq.n	80098aa <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009888:	f000 f846 	bl	8009918 <xTaskIncrementTick>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009892:	4b16      	ldr	r3, [pc, #88]	@ (80098ec <xTaskResumeAll+0x134>)
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3b01      	subs	r3, #1
 800989c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f1      	bne.n	8009888 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80098a4:	4b12      	ldr	r3, [pc, #72]	@ (80098f0 <xTaskResumeAll+0x138>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098aa:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <xTaskResumeAll+0x134>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098b2:	2301      	movs	r3, #1
 80098b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098b6:	4b0f      	ldr	r3, [pc, #60]	@ (80098f4 <xTaskResumeAll+0x13c>)
 80098b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098c6:	f001 f8ff 	bl	800aac8 <vPortExitCritical>

	return xAlreadyYielded;
 80098ca:	68bb      	ldr	r3, [r7, #8]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20001194 	.word	0x20001194
 80098d8:	2000116c 	.word	0x2000116c
 80098dc:	2000112c 	.word	0x2000112c
 80098e0:	20001174 	.word	0x20001174
 80098e4:	20000c9c 	.word	0x20000c9c
 80098e8:	20000c98 	.word	0x20000c98
 80098ec:	20001180 	.word	0x20001180
 80098f0:	2000117c 	.word	0x2000117c
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098fe:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <xTaskGetTickCount+0x1c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009904:	687b      	ldr	r3, [r7, #4]
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20001170 	.word	0x20001170

08009918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009922:	4b50      	ldr	r3, [pc, #320]	@ (8009a64 <xTaskIncrementTick+0x14c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 808c 	bne.w	8009a44 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800992c:	4b4e      	ldr	r3, [pc, #312]	@ (8009a68 <xTaskIncrementTick+0x150>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009934:	4a4c      	ldr	r2, [pc, #304]	@ (8009a68 <xTaskIncrementTick+0x150>)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d123      	bne.n	8009988 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009940:	4b4a      	ldr	r3, [pc, #296]	@ (8009a6c <xTaskIncrementTick+0x154>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <xTaskIncrementTick+0x4e>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994e:	b672      	cpsid	i
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	b662      	cpsie	i
 800995e:	603b      	str	r3, [r7, #0]
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <xTaskIncrementTick+0x4a>
 8009966:	4b41      	ldr	r3, [pc, #260]	@ (8009a6c <xTaskIncrementTick+0x154>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	4b40      	ldr	r3, [pc, #256]	@ (8009a70 <xTaskIncrementTick+0x158>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a3e      	ldr	r2, [pc, #248]	@ (8009a6c <xTaskIncrementTick+0x154>)
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	4a3e      	ldr	r2, [pc, #248]	@ (8009a70 <xTaskIncrementTick+0x158>)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	4b3e      	ldr	r3, [pc, #248]	@ (8009a74 <xTaskIncrementTick+0x15c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	4a3c      	ldr	r2, [pc, #240]	@ (8009a74 <xTaskIncrementTick+0x15c>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	f000 faf0 	bl	8009f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009988:	4b3b      	ldr	r3, [pc, #236]	@ (8009a78 <xTaskIncrementTick+0x160>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	429a      	cmp	r2, r3
 8009990:	d349      	bcc.n	8009a26 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009992:	4b36      	ldr	r3, [pc, #216]	@ (8009a6c <xTaskIncrementTick+0x154>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d104      	bne.n	80099a6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999c:	4b36      	ldr	r3, [pc, #216]	@ (8009a78 <xTaskIncrementTick+0x160>)
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	601a      	str	r2, [r3, #0]
					break;
 80099a4:	e03f      	b.n	8009a26 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a6:	4b31      	ldr	r3, [pc, #196]	@ (8009a6c <xTaskIncrementTick+0x154>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d203      	bcs.n	80099c6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099be:	4a2e      	ldr	r2, [pc, #184]	@ (8009a78 <xTaskIncrementTick+0x160>)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099c4:	e02f      	b.n	8009a26 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe ff30 	bl	8008830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d004      	beq.n	80099e2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	3318      	adds	r3, #24
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe ff27 	bl	8008830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e6:	4b25      	ldr	r3, [pc, #148]	@ (8009a7c <xTaskIncrementTick+0x164>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d903      	bls.n	80099f6 <xTaskIncrementTick+0xde>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	4a22      	ldr	r2, [pc, #136]	@ (8009a7c <xTaskIncrementTick+0x164>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a1f      	ldr	r2, [pc, #124]	@ (8009a80 <xTaskIncrementTick+0x168>)
 8009a04:	441a      	add	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fe feb2 	bl	8008776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a16:	4b1b      	ldr	r3, [pc, #108]	@ (8009a84 <xTaskIncrementTick+0x16c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d3b8      	bcc.n	8009992 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a24:	e7b5      	b.n	8009992 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a26:	4b17      	ldr	r3, [pc, #92]	@ (8009a84 <xTaskIncrementTick+0x16c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	4914      	ldr	r1, [pc, #80]	@ (8009a80 <xTaskIncrementTick+0x168>)
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d907      	bls.n	8009a4e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e004      	b.n	8009a4e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a44:	4b10      	ldr	r3, [pc, #64]	@ (8009a88 <xTaskIncrementTick+0x170>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8009a88 <xTaskIncrementTick+0x170>)
 8009a4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a8c <xTaskIncrementTick+0x174>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a5a:	697b      	ldr	r3, [r7, #20]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20001194 	.word	0x20001194
 8009a68:	20001170 	.word	0x20001170
 8009a6c:	20001124 	.word	0x20001124
 8009a70:	20001128 	.word	0x20001128
 8009a74:	20001184 	.word	0x20001184
 8009a78:	2000118c 	.word	0x2000118c
 8009a7c:	20001174 	.word	0x20001174
 8009a80:	20000c9c 	.word	0x20000c9c
 8009a84:	20000c98 	.word	0x20000c98
 8009a88:	2000117c 	.word	0x2000117c
 8009a8c:	20001180 	.word	0x20001180

08009a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a96:	4b2c      	ldr	r3, [pc, #176]	@ (8009b48 <vTaskSwitchContext+0xb8>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8009b4c <vTaskSwitchContext+0xbc>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aa4:	e049      	b.n	8009b3a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8009aa6:	4b29      	ldr	r3, [pc, #164]	@ (8009b4c <vTaskSwitchContext+0xbc>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <vTaskSwitchContext+0xc0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e013      	b.n	8009adc <vTaskSwitchContext+0x4c>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10d      	bne.n	8009ad6 <vTaskSwitchContext+0x46>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	b672      	cpsid	i
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	b662      	cpsie	i
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <vTaskSwitchContext+0x42>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	491d      	ldr	r1, [pc, #116]	@ (8009b54 <vTaskSwitchContext+0xc4>)
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0e1      	beq.n	8009ab4 <vTaskSwitchContext+0x24>
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4a16      	ldr	r2, [pc, #88]	@ (8009b54 <vTaskSwitchContext+0xc4>)
 8009afc:	4413      	add	r3, r2
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	3308      	adds	r3, #8
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d104      	bne.n	8009b20 <vTaskSwitchContext+0x90>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	605a      	str	r2, [r3, #4]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	4a0c      	ldr	r2, [pc, #48]	@ (8009b58 <vTaskSwitchContext+0xc8>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	4a09      	ldr	r2, [pc, #36]	@ (8009b50 <vTaskSwitchContext+0xc0>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b30:	4b09      	ldr	r3, [pc, #36]	@ (8009b58 <vTaskSwitchContext+0xc8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3354      	adds	r3, #84	@ 0x54
 8009b36:	4a09      	ldr	r2, [pc, #36]	@ (8009b5c <vTaskSwitchContext+0xcc>)
 8009b38:	6013      	str	r3, [r2, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20001194 	.word	0x20001194
 8009b4c:	20001180 	.word	0x20001180
 8009b50:	20001174 	.word	0x20001174
 8009b54:	20000c9c 	.word	0x20000c9c
 8009b58:	20000c98 	.word	0x20000c98
 8009b5c:	20000018 	.word	0x20000018

08009b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10d      	bne.n	8009b8c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	b672      	cpsid	i
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	b662      	cpsie	i
 8009b84:	60fb      	str	r3, [r7, #12]
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b8c:	4b07      	ldr	r3, [pc, #28]	@ (8009bac <vTaskPlaceOnEventList+0x4c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3318      	adds	r3, #24
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7fe fe12 	bl	80087be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	6838      	ldr	r0, [r7, #0]
 8009b9e:	f000 fa95 	bl	800a0cc <prvAddCurrentTaskToDelayedList>
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000c98 	.word	0x20000c98

08009bb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10d      	bne.n	8009bde <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	617b      	str	r3, [r7, #20]
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	e7fd      	b.n	8009bda <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <vTaskPlaceOnEventListRestricted+0x58>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4619      	mov	r1, r3
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7fe fdc5 	bl	8008776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	68b8      	ldr	r0, [r7, #8]
 8009bfc:	f000 fa66 	bl	800a0cc <prvAddCurrentTaskToDelayedList>
	}
 8009c00:	bf00      	nop
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000c98 	.word	0x20000c98

08009c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10d      	bne.n	8009c3e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	b672      	cpsid	i
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	b662      	cpsie	i
 8009c36:	60fb      	str	r3, [r7, #12]
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	3318      	adds	r3, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fdf4 	bl	8008830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c48:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc0 <xTaskRemoveFromEventList+0xb4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d11d      	bne.n	8009c8c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fdeb 	bl	8008830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5e:	4b19      	ldr	r3, [pc, #100]	@ (8009cc4 <xTaskRemoveFromEventList+0xb8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d903      	bls.n	8009c6e <xTaskRemoveFromEventList+0x62>
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	4a16      	ldr	r2, [pc, #88]	@ (8009cc4 <xTaskRemoveFromEventList+0xb8>)
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4a13      	ldr	r2, [pc, #76]	@ (8009cc8 <xTaskRemoveFromEventList+0xbc>)
 8009c7c:	441a      	add	r2, r3
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f7fe fd76 	bl	8008776 <vListInsertEnd>
 8009c8a:	e005      	b.n	8009c98 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	3318      	adds	r3, #24
 8009c90:	4619      	mov	r1, r3
 8009c92:	480e      	ldr	r0, [pc, #56]	@ (8009ccc <xTaskRemoveFromEventList+0xc0>)
 8009c94:	f7fe fd6f 	bl	8008776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd0 <xTaskRemoveFromEventList+0xc4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d905      	bls.n	8009cb2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009caa:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd4 <xTaskRemoveFromEventList+0xc8>)
 8009cac:	2201      	movs	r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	e001      	b.n	8009cb6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cb6:	697b      	ldr	r3, [r7, #20]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20001194 	.word	0x20001194
 8009cc4:	20001174 	.word	0x20001174
 8009cc8:	20000c9c 	.word	0x20000c9c
 8009ccc:	2000112c 	.word	0x2000112c
 8009cd0:	20000c98 	.word	0x20000c98
 8009cd4:	20001180 	.word	0x20001180

08009cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ce0:	4b06      	ldr	r3, [pc, #24]	@ (8009cfc <vTaskInternalSetTimeOutState+0x24>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ce8:	4b05      	ldr	r3, [pc, #20]	@ (8009d00 <vTaskInternalSetTimeOutState+0x28>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	605a      	str	r2, [r3, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	20001184 	.word	0x20001184
 8009d00:	20001170 	.word	0x20001170

08009d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10d      	bne.n	8009d30 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d18:	b672      	cpsid	i
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	b662      	cpsie	i
 8009d28:	613b      	str	r3, [r7, #16]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10d      	bne.n	8009d52 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3a:	b672      	cpsid	i
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	b662      	cpsie	i
 8009d4a:	60fb      	str	r3, [r7, #12]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009d52:	f000 fe83 	bl	800aa5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d56:	4b1d      	ldr	r3, [pc, #116]	@ (8009dcc <xTaskCheckForTimeOut+0xc8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d102      	bne.n	8009d76 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e023      	b.n	8009dbe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b15      	ldr	r3, [pc, #84]	@ (8009dd0 <xTaskCheckForTimeOut+0xcc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d007      	beq.n	8009d92 <xTaskCheckForTimeOut+0x8e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d302      	bcc.n	8009d92 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e015      	b.n	8009dbe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d20b      	bcs.n	8009db4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ff95 	bl	8009cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e004      	b.n	8009dbe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dbe:	f000 fe83 	bl	800aac8 <vPortExitCritical>

	return xReturn;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20001170 	.word	0x20001170
 8009dd0:	20001184 	.word	0x20001184

08009dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dd8:	4b03      	ldr	r3, [pc, #12]	@ (8009de8 <vTaskMissedYield+0x14>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	20001180 	.word	0x20001180

08009dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009df4:	f000 f852 	bl	8009e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b06      	ldr	r3, [pc, #24]	@ (8009e14 <prvIdleTask+0x28>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d9f9      	bls.n	8009df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e00:	4b05      	ldr	r3, [pc, #20]	@ (8009e18 <prvIdleTask+0x2c>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e10:	e7f0      	b.n	8009df4 <prvIdleTask+0x8>
 8009e12:	bf00      	nop
 8009e14:	20000c9c 	.word	0x20000c9c
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	e00c      	b.n	8009e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a12      	ldr	r2, [pc, #72]	@ (8009e7c <prvInitialiseTaskLists+0x60>)
 8009e34:	4413      	add	r3, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fc70 	bl	800871c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b37      	cmp	r3, #55	@ 0x37
 8009e46:	d9ef      	bls.n	8009e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e48:	480d      	ldr	r0, [pc, #52]	@ (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e4a:	f7fe fc67 	bl	800871c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e4e:	480d      	ldr	r0, [pc, #52]	@ (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e50:	f7fe fc64 	bl	800871c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e54:	480c      	ldr	r0, [pc, #48]	@ (8009e88 <prvInitialiseTaskLists+0x6c>)
 8009e56:	f7fe fc61 	bl	800871c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e5a:	480c      	ldr	r0, [pc, #48]	@ (8009e8c <prvInitialiseTaskLists+0x70>)
 8009e5c:	f7fe fc5e 	bl	800871c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e60:	480b      	ldr	r0, [pc, #44]	@ (8009e90 <prvInitialiseTaskLists+0x74>)
 8009e62:	f7fe fc5b 	bl	800871c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e66:	4b0b      	ldr	r3, [pc, #44]	@ (8009e94 <prvInitialiseTaskLists+0x78>)
 8009e68:	4a05      	ldr	r2, [pc, #20]	@ (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvInitialiseTaskLists+0x7c>)
 8009e6e:	4a05      	ldr	r2, [pc, #20]	@ (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e70:	601a      	str	r2, [r3, #0]
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000c9c 	.word	0x20000c9c
 8009e80:	200010fc 	.word	0x200010fc
 8009e84:	20001110 	.word	0x20001110
 8009e88:	2000112c 	.word	0x2000112c
 8009e8c:	20001140 	.word	0x20001140
 8009e90:	20001158 	.word	0x20001158
 8009e94:	20001124 	.word	0x20001124
 8009e98:	20001128 	.word	0x20001128

08009e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea2:	e019      	b.n	8009ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ea4:	f000 fdda 	bl	800aa5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <prvCheckTasksWaitingTermination+0x50>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fcbb 	bl	8008830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	4a0a      	ldr	r2, [pc, #40]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ece:	f000 fdfb 	bl	800aac8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f810 	bl	8009ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed8:	4b06      	ldr	r3, [pc, #24]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e1      	bne.n	8009ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20001140 	.word	0x20001140
 8009ef0:	2000116c 	.word	0x2000116c
 8009ef4:	20001154 	.word	0x20001154

08009ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3354      	adds	r3, #84	@ 0x54
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 f8c9 	bl	800b09c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d108      	bne.n	8009f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 ff9b 	bl	800ae54 <vPortFree>
				vPortFree( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 ff98 	bl	800ae54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f24:	e01b      	b.n	8009f5e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d103      	bne.n	8009f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 ff8f 	bl	800ae54 <vPortFree>
	}
 8009f36:	e012      	b.n	8009f5e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d00d      	beq.n	8009f5e <prvDeleteTCB+0x66>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	60fb      	str	r3, [r7, #12]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <prvDeleteTCB+0x62>
	}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa0 <prvResetNextTaskUnblockTime+0x38>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f78:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f80:	e008      	b.n	8009f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f82:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <prvResetNextTaskUnblockTime+0x38>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4a04      	ldr	r2, [pc, #16]	@ (8009fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8009f92:	6013      	str	r3, [r2, #0]
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20001124 	.word	0x20001124
 8009fa4:	2000118c 	.word	0x2000118c

08009fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fae:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <xTaskGetSchedulerState+0x34>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	e008      	b.n	8009fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fbc:	4b08      	ldr	r3, [pc, #32]	@ (8009fe0 <xTaskGetSchedulerState+0x38>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e001      	b.n	8009fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fce:	687b      	ldr	r3, [r7, #4]
	}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20001178 	.word	0x20001178
 8009fe0:	20001194 	.word	0x20001194

08009fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d05c      	beq.n	800a0b4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ffa:	4b31      	ldr	r3, [pc, #196]	@ (800a0c0 <xTaskPriorityDisinherit+0xdc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	429a      	cmp	r2, r3
 800a002:	d00d      	beq.n	800a020 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a008:	b672      	cpsid	i
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	b662      	cpsie	i
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	e7fd      	b.n	800a01c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10d      	bne.n	800a044 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	b672      	cpsid	i
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	b662      	cpsie	i
 800a03c:	60bb      	str	r3, [r7, #8]
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	e7fd      	b.n	800a040 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a056:	429a      	cmp	r2, r3
 800a058:	d02c      	beq.n	800a0b4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d128      	bne.n	800a0b4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3304      	adds	r3, #4
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fbe2 	bl	8008830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a084:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <xTaskPriorityDisinherit+0xe0>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d903      	bls.n	800a094 <xTaskPriorityDisinherit+0xb0>
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c4 <xTaskPriorityDisinherit+0xe0>)
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4a09      	ldr	r2, [pc, #36]	@ (800a0c8 <xTaskPriorityDisinherit+0xe4>)
 800a0a2:	441a      	add	r2, r3
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7fe fb63 	bl	8008776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0b4:	697b      	ldr	r3, [r7, #20]
	}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000c98 	.word	0x20000c98
 800a0c4:	20001174 	.word	0x20001174
 800a0c8:	20000c9c 	.word	0x20000c9c

0800a0cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0d6:	4b21      	ldr	r3, [pc, #132]	@ (800a15c <prvAddCurrentTaskToDelayedList+0x90>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0dc:	4b20      	ldr	r3, [pc, #128]	@ (800a160 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fba4 	bl	8008830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d10a      	bne.n	800a106 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d007      	beq.n	800a106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a160 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4819      	ldr	r0, [pc, #100]	@ (800a164 <prvAddCurrentTaskToDelayedList+0x98>)
 800a100:	f7fe fb39 	bl	8008776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a104:	e026      	b.n	800a154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a10e:	4b14      	ldr	r3, [pc, #80]	@ (800a160 <prvAddCurrentTaskToDelayedList+0x94>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d209      	bcs.n	800a132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a11e:	4b12      	ldr	r3, [pc, #72]	@ (800a168 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b0f      	ldr	r3, [pc, #60]	@ (800a160 <prvAddCurrentTaskToDelayedList+0x94>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7fe fb47 	bl	80087be <vListInsert>
}
 800a130:	e010      	b.n	800a154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a132:	4b0e      	ldr	r3, [pc, #56]	@ (800a16c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b0a      	ldr	r3, [pc, #40]	@ (800a160 <prvAddCurrentTaskToDelayedList+0x94>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f7fe fb3d 	bl	80087be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a144:	4b0a      	ldr	r3, [pc, #40]	@ (800a170 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d202      	bcs.n	800a154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a14e:	4a08      	ldr	r2, [pc, #32]	@ (800a170 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6013      	str	r3, [r2, #0]
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20001170 	.word	0x20001170
 800a160:	20000c98 	.word	0x20000c98
 800a164:	20001158 	.word	0x20001158
 800a168:	20001128 	.word	0x20001128
 800a16c:	20001124 	.word	0x20001124
 800a170:	2000118c 	.word	0x2000118c

0800a174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	@ 0x28
 800a178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a17e:	f000 fb21 	bl	800a7c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a182:	4b1e      	ldr	r3, [pc, #120]	@ (800a1fc <xTimerCreateTimerTask+0x88>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d021      	beq.n	800a1ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a192:	1d3a      	adds	r2, r7, #4
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe faa3 	bl	80086e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	9202      	str	r2, [sp, #8]
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	460a      	mov	r2, r1
 800a1b4:	4912      	ldr	r1, [pc, #72]	@ (800a200 <xTimerCreateTimerTask+0x8c>)
 800a1b6:	4813      	ldr	r0, [pc, #76]	@ (800a204 <xTimerCreateTimerTask+0x90>)
 800a1b8:	f7ff f87e 	bl	80092b8 <xTaskCreateStatic>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	4a12      	ldr	r2, [pc, #72]	@ (800a208 <xTimerCreateTimerTask+0x94>)
 800a1c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1c2:	4b11      	ldr	r3, [pc, #68]	@ (800a208 <xTimerCreateTimerTask+0x94>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10d      	bne.n	800a1f0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	b672      	cpsid	i
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	b662      	cpsie	i
 800a1e8:	613b      	str	r3, [r7, #16]
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a1f0:	697b      	ldr	r3, [r7, #20]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	200011c8 	.word	0x200011c8
 800a200:	0800b2a4 	.word	0x0800b2a4
 800a204:	0800a34d 	.word	0x0800a34d
 800a208:	200011cc 	.word	0x200011cc

0800a20c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	@ 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10d      	bne.n	800a240 <xTimerGenericCommand+0x34>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	b672      	cpsid	i
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	b662      	cpsie	i
 800a238:	623b      	str	r3, [r7, #32]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a240:	4b19      	ldr	r3, [pc, #100]	@ (800a2a8 <xTimerGenericCommand+0x9c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d02a      	beq.n	800a29e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b05      	cmp	r3, #5
 800a258:	dc18      	bgt.n	800a28c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a25a:	f7ff fea5 	bl	8009fa8 <xTaskGetSchedulerState>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b02      	cmp	r3, #2
 800a262:	d109      	bne.n	800a278 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a264:	4b10      	ldr	r3, [pc, #64]	@ (800a2a8 <xTimerGenericCommand+0x9c>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	f107 0110 	add.w	r1, r7, #16
 800a26c:	2300      	movs	r3, #0
 800a26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a270:	f7fe fc1e 	bl	8008ab0 <xQueueGenericSend>
 800a274:	6278      	str	r0, [r7, #36]	@ 0x24
 800a276:	e012      	b.n	800a29e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a278:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a8 <xTimerGenericCommand+0x9c>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	2300      	movs	r3, #0
 800a282:	2200      	movs	r2, #0
 800a284:	f7fe fc14 	bl	8008ab0 <xQueueGenericSend>
 800a288:	6278      	str	r0, [r7, #36]	@ 0x24
 800a28a:	e008      	b.n	800a29e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a28c:	4b06      	ldr	r3, [pc, #24]	@ (800a2a8 <xTimerGenericCommand+0x9c>)
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	f107 0110 	add.w	r1, r7, #16
 800a294:	2300      	movs	r3, #0
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	f7fe fd14 	bl	8008cc4 <xQueueGenericSendFromISR>
 800a29c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3728      	adds	r7, #40	@ 0x28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	200011c8 	.word	0x200011c8

0800a2ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b6:	4b24      	ldr	r3, [pc, #144]	@ (800a348 <prvProcessExpiredTimer+0x9c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fab3 	bl	8008830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d025      	beq.n	800a324 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	18d1      	adds	r1, r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	6978      	ldr	r0, [r7, #20]
 800a2e6:	f000 f8d7 	bl	800a498 <prvInsertTimerInActiveList>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d022      	beq.n	800a336 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	6978      	ldr	r0, [r7, #20]
 800a2fc:	f7ff ff86 	bl	800a20c <xTimerGenericCommand>
 800a300:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d116      	bne.n	800a336 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30c:	b672      	cpsid	i
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	b662      	cpsie	i
 800a31c:	60fb      	str	r3, [r7, #12]
}
 800a31e:	bf00      	nop
 800a320:	bf00      	nop
 800a322:	e7fd      	b.n	800a320 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a32a:	f023 0301 	bic.w	r3, r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	6978      	ldr	r0, [r7, #20]
 800a33c:	4798      	blx	r3
}
 800a33e:	bf00      	nop
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	200011c0 	.word	0x200011c0

0800a34c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a354:	f107 0308 	add.w	r3, r7, #8
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 f859 	bl	800a410 <prvGetNextExpireTime>
 800a35e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4619      	mov	r1, r3
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f805 	bl	800a374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a36a:	f000 f8d7 	bl	800a51c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a36e:	bf00      	nop
 800a370:	e7f0      	b.n	800a354 <prvTimerTask+0x8>
	...

0800a374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a37e:	f7ff fa0d 	bl	800979c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f000 f866 	bl	800a458 <prvSampleTimeNow>
 800a38c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d130      	bne.n	800a3f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10a      	bne.n	800a3b0 <prvProcessTimerOrBlockTask+0x3c>
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d806      	bhi.n	800a3b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3a2:	f7ff fa09 	bl	80097b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3a6:	68f9      	ldr	r1, [r7, #12]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ff7f 	bl	800a2ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ae:	e024      	b.n	800a3fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d008      	beq.n	800a3c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <prvProcessTimerOrBlockTask+0x90>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <prvProcessTimerOrBlockTask+0x50>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e000      	b.n	800a3c6 <prvProcessTimerOrBlockTask+0x52>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a408 <prvProcessTimerOrBlockTask+0x94>)
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f7fe ff3b 	bl	8009250 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3da:	f7ff f9ed 	bl	80097b8 <xTaskResumeAll>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3e4:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <prvProcessTimerOrBlockTask+0x98>)
 800a3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	f3bf 8f6f 	isb	sy
}
 800a3f4:	e001      	b.n	800a3fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3f6:	f7ff f9df 	bl	80097b8 <xTaskResumeAll>
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	200011c4 	.word	0x200011c4
 800a408:	200011c8 	.word	0x200011c8
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a418:	4b0e      	ldr	r3, [pc, #56]	@ (800a454 <prvGetNextExpireTime+0x44>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <prvGetNextExpireTime+0x16>
 800a422:	2201      	movs	r2, #1
 800a424:	e000      	b.n	800a428 <prvGetNextExpireTime+0x18>
 800a426:	2200      	movs	r2, #0
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d105      	bne.n	800a440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a434:	4b07      	ldr	r3, [pc, #28]	@ (800a454 <prvGetNextExpireTime+0x44>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	e001      	b.n	800a444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a444:	68fb      	ldr	r3, [r7, #12]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	200011c0 	.word	0x200011c0

0800a458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a460:	f7ff fa4a 	bl	80098f8 <xTaskGetTickCount>
 800a464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a466:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <prvSampleTimeNow+0x3c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d205      	bcs.n	800a47c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a470:	f000 f940 	bl	800a6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	e002      	b.n	800a482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a482:	4a04      	ldr	r2, [pc, #16]	@ (800a494 <prvSampleTimeNow+0x3c>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a488:	68fb      	ldr	r3, [r7, #12]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200011d0 	.word	0x200011d0

0800a498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d812      	bhi.n	800a4e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	1ad2      	subs	r2, r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d302      	bcc.n	800a4d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e01b      	b.n	800a50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4d2:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <prvInsertTimerInActiveList+0x7c>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f7fe f96e 	bl	80087be <vListInsert>
 800a4e2:	e012      	b.n	800a50a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d206      	bcs.n	800a4fa <prvInsertTimerInActiveList+0x62>
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d302      	bcc.n	800a4fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e007      	b.n	800a50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4fa:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <prvInsertTimerInActiveList+0x80>)
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3304      	adds	r3, #4
 800a502:	4619      	mov	r1, r3
 800a504:	4610      	mov	r0, r2
 800a506:	f7fe f95a 	bl	80087be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a50a:	697b      	ldr	r3, [r7, #20]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	200011c4 	.word	0x200011c4
 800a518:	200011c0 	.word	0x200011c0

0800a51c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08e      	sub	sp, #56	@ 0x38
 800a520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a522:	e0d4      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da1b      	bge.n	800a562 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a52a:	1d3b      	adds	r3, r7, #4
 800a52c:	3304      	adds	r3, #4
 800a52e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10d      	bne.n	800a552 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	b672      	cpsid	i
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	b662      	cpsie	i
 800a54a:	61fb      	str	r3, [r7, #28]
}
 800a54c:	bf00      	nop
 800a54e:	bf00      	nop
 800a550:	e7fd      	b.n	800a54e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a558:	6850      	ldr	r0, [r2, #4]
 800a55a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a55c:	6892      	ldr	r2, [r2, #8]
 800a55e:	4611      	mov	r1, r2
 800a560:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f2c0 80b2 	blt.w	800a6ce <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe f958 	bl	8008830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a580:	463b      	mov	r3, r7
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff ff68 	bl	800a458 <prvSampleTimeNow>
 800a588:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	f200 809b 	bhi.w	800a6c8 <prvProcessReceivedCommands+0x1ac>
 800a592:	a201      	add	r2, pc, #4	@ (adr r2, 800a598 <prvProcessReceivedCommands+0x7c>)
 800a594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c1 	.word	0x0800a5c1
 800a5a4:	0800a63b 	.word	0x0800a63b
 800a5a8:	0800a64f 	.word	0x0800a64f
 800a5ac:	0800a69f 	.word	0x0800a69f
 800a5b0:	0800a5c1 	.word	0x0800a5c1
 800a5b4:	0800a5c1 	.word	0x0800a5c1
 800a5b8:	0800a63b 	.word	0x0800a63b
 800a5bc:	0800a64f 	.word	0x0800a64f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	18d1      	adds	r1, r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e0:	f7ff ff5a 	bl	800a498 <prvInsertTimerInActiveList>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d070      	beq.n	800a6cc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d065      	beq.n	800a6cc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	441a      	add	r2, r3
 800a608:	2300      	movs	r3, #0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	2300      	movs	r3, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a612:	f7ff fdfb 	bl	800a20c <xTimerGenericCommand>
 800a616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d156      	bne.n	800a6cc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	b672      	cpsid	i
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	b662      	cpsie	i
 800a632:	61bb      	str	r3, [r7, #24]
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	e7fd      	b.n	800a636 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	b2da      	uxtb	r2, r3
 800a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a648:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a64c:	e03f      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a654:	f043 0301 	orr.w	r3, r3, #1
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10d      	bne.n	800a68a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	b672      	cpsid	i
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	b662      	cpsie	i
 800a682:	617b      	str	r3, [r7, #20]
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop
 800a688:	e7fd      	b.n	800a686 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	18d1      	adds	r1, r2, r3
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a698:	f7ff fefe 	bl	800a498 <prvInsertTimerInActiveList>
					break;
 800a69c:	e017      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6ae:	f000 fbd1 	bl	800ae54 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6b2:	e00c      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ba:	f023 0301 	bic.w	r3, r3, #1
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6c6:	e002      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <prvProcessReceivedCommands+0x1b2>
					break;
 800a6cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ce:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <prvProcessReceivedCommands+0x1d4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	1d39      	adds	r1, r7, #4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fb98 	bl	8008e0c <xQueueReceive>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f47f af20 	bne.w	800a524 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	3730      	adds	r7, #48	@ 0x30
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	200011c8 	.word	0x200011c8

0800a6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6fa:	e04b      	b.n	800a794 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a706:	4b2d      	ldr	r3, [pc, #180]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe f88b 	bl	8008830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d031      	beq.n	800a794 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4413      	add	r3, r2
 800a738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d90e      	bls.n	800a760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a74e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3304      	adds	r3, #4
 800a756:	4619      	mov	r1, r3
 800a758:	4610      	mov	r0, r2
 800a75a:	f7fe f830 	bl	80087be <vListInsert>
 800a75e:	e019      	b.n	800a794 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a760:	2300      	movs	r3, #0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	2100      	movs	r1, #0
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fd4e 	bl	800a20c <xTimerGenericCommand>
 800a770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10d      	bne.n	800a794 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	b672      	cpsid	i
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	b662      	cpsie	i
 800a78c:	603b      	str	r3, [r7, #0]
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	e7fd      	b.n	800a790 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a794:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1ae      	bne.n	800a6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a79e:	4b07      	ldr	r3, [pc, #28]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	@ (800a7c0 <prvSwitchTimerLists+0xcc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <prvSwitchTimerLists+0xc8>)
 800a7aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7ac:	4a04      	ldr	r2, [pc, #16]	@ (800a7c0 <prvSwitchTimerLists+0xcc>)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6013      	str	r3, [r2, #0]
}
 800a7b2:	bf00      	nop
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200011c0 	.word	0x200011c0
 800a7c0:	200011c4 	.word	0x200011c4

0800a7c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ca:	f000 f947 	bl	800aa5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d120      	bne.n	800a818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7d6:	4814      	ldr	r0, [pc, #80]	@ (800a828 <prvCheckForValidListAndQueue+0x64>)
 800a7d8:	f7fd ffa0 	bl	800871c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7dc:	4813      	ldr	r0, [pc, #76]	@ (800a82c <prvCheckForValidListAndQueue+0x68>)
 800a7de:	f7fd ff9d 	bl	800871c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7e2:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <prvCheckForValidListAndQueue+0x6c>)
 800a7e4:	4a10      	ldr	r2, [pc, #64]	@ (800a828 <prvCheckForValidListAndQueue+0x64>)
 800a7e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7e8:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <prvCheckForValidListAndQueue+0x70>)
 800a7ea:	4a10      	ldr	r2, [pc, #64]	@ (800a82c <prvCheckForValidListAndQueue+0x68>)
 800a7ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4b11      	ldr	r3, [pc, #68]	@ (800a838 <prvCheckForValidListAndQueue+0x74>)
 800a7f4:	4a11      	ldr	r2, [pc, #68]	@ (800a83c <prvCheckForValidListAndQueue+0x78>)
 800a7f6:	2110      	movs	r1, #16
 800a7f8:	200a      	movs	r0, #10
 800a7fa:	f7fe f8af 	bl	800895c <xQueueGenericCreateStatic>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4a08      	ldr	r2, [pc, #32]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a804:	4b07      	ldr	r3, [pc, #28]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	490b      	ldr	r1, [pc, #44]	@ (800a840 <prvCheckForValidListAndQueue+0x7c>)
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fcf2 	bl	80091fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a818:	f000 f956 	bl	800aac8 <vPortExitCritical>
}
 800a81c:	bf00      	nop
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	200011c8 	.word	0x200011c8
 800a828:	20001198 	.word	0x20001198
 800a82c:	200011ac 	.word	0x200011ac
 800a830:	200011c0 	.word	0x200011c0
 800a834:	200011c4 	.word	0x200011c4
 800a838:	20001274 	.word	0x20001274
 800a83c:	200011d4 	.word	0x200011d4
 800a840:	0800b2ac 	.word	0x0800b2ac

0800a844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3b04      	subs	r3, #4
 800a854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a85c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3b04      	subs	r3, #4
 800a862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f023 0201 	bic.w	r2, r3, #1
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a874:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a8 <pxPortInitialiseStack+0x64>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b14      	subs	r3, #20
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b04      	subs	r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f06f 0202 	mvn.w	r2, #2
 800a892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3b20      	subs	r3, #32
 800a898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a89a:	68fb      	ldr	r3, [r7, #12]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	0800a8ad 	.word	0x0800a8ad

0800a8ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8b6:	4b15      	ldr	r3, [pc, #84]	@ (800a90c <prvTaskExitError+0x60>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d00d      	beq.n	800a8dc <prvTaskExitError+0x30>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	b672      	cpsid	i
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	b662      	cpsie	i
 800a8d4:	60fb      	str	r3, [r7, #12]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <prvTaskExitError+0x2c>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e0:	b672      	cpsid	i
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	b662      	cpsie	i
 800a8f0:	60bb      	str	r3, [r7, #8]
}
 800a8f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8f4:	bf00      	nop
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0fc      	beq.n	800a8f6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	20000014 	.word	0x20000014

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	@ (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a966:	4b37      	ldr	r3, [pc, #220]	@ (800aa44 <xPortStartScheduler+0xe4>)
 800a968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	22ff      	movs	r2, #255	@ 0xff
 800a976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b2f      	ldr	r3, [pc, #188]	@ (800aa48 <xPortStartScheduler+0xe8>)
 800a98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a98e:	4b2f      	ldr	r3, [pc, #188]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a990:	2207      	movs	r2, #7
 800a992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a994:	e009      	b.n	800a9aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a996:	4b2d      	ldr	r3, [pc, #180]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	4a2b      	ldr	r2, [pc, #172]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9b2:	2b80      	cmp	r3, #128	@ 0x80
 800a9b4:	d0ef      	beq.n	800a996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9b6:	4b25      	ldr	r3, [pc, #148]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1c3 0307 	rsb	r3, r3, #7
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d00d      	beq.n	800a9de <xPortStartScheduler+0x7e>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	b672      	cpsid	i
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	b662      	cpsie	i
 800a9d6:	60bb      	str	r3, [r7, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9de:	4b1b      	ldr	r3, [pc, #108]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	021b      	lsls	r3, r3, #8
 800a9e4:	4a19      	ldr	r2, [pc, #100]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a9e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9e8:	4b18      	ldr	r3, [pc, #96]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9f0:	4a16      	ldr	r2, [pc, #88]	@ (800aa4c <xPortStartScheduler+0xec>)
 800a9f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9fc:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <xPortStartScheduler+0xf0>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a13      	ldr	r2, [pc, #76]	@ (800aa50 <xPortStartScheduler+0xf0>)
 800aa02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa08:	4b11      	ldr	r3, [pc, #68]	@ (800aa50 <xPortStartScheduler+0xf0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a10      	ldr	r2, [pc, #64]	@ (800aa50 <xPortStartScheduler+0xf0>)
 800aa0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa14:	f000 f8dc 	bl	800abd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa18:	4b0e      	ldr	r3, [pc, #56]	@ (800aa54 <xPortStartScheduler+0xf4>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa1e:	f000 f8fb 	bl	800ac18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa22:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <xPortStartScheduler+0xf8>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a0c      	ldr	r2, [pc, #48]	@ (800aa58 <xPortStartScheduler+0xf8>)
 800aa28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa2e:	f7ff ff83 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa32:	f7ff f82d 	bl	8009a90 <vTaskSwitchContext>
	prvTaskExitError();
 800aa36:	f7ff ff39 	bl	800a8ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	e000e400 	.word	0xe000e400
 800aa48:	200012c4 	.word	0x200012c4
 800aa4c:	200012c8 	.word	0x200012c8
 800aa50:	e000ed20 	.word	0xe000ed20
 800aa54:	20000014 	.word	0x20000014
 800aa58:	e000ef34 	.word	0xe000ef34

0800aa5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	b672      	cpsid	i
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	b662      	cpsie	i
 800aa76:	607b      	str	r3, [r7, #4]
}
 800aa78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa7a:	4b11      	ldr	r3, [pc, #68]	@ (800aac0 <vPortEnterCritical+0x64>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	4a0f      	ldr	r2, [pc, #60]	@ (800aac0 <vPortEnterCritical+0x64>)
 800aa82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa84:	4b0e      	ldr	r3, [pc, #56]	@ (800aac0 <vPortEnterCritical+0x64>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d112      	bne.n	800aab2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	@ (800aac4 <vPortEnterCritical+0x68>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00d      	beq.n	800aab2 <vPortEnterCritical+0x56>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	b672      	cpsid	i
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	b662      	cpsie	i
 800aaaa:	603b      	str	r3, [r7, #0]
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	e7fd      	b.n	800aaae <vPortEnterCritical+0x52>
	}
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	20000014 	.word	0x20000014
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aace:	4b13      	ldr	r3, [pc, #76]	@ (800ab1c <vPortExitCritical+0x54>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <vPortExitCritical+0x2a>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	b672      	cpsid	i
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	b662      	cpsie	i
 800aaea:	607b      	str	r3, [r7, #4]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab1c <vPortExitCritical+0x54>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	4a08      	ldr	r2, [pc, #32]	@ (800ab1c <vPortExitCritical+0x54>)
 800aafa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aafc:	4b07      	ldr	r3, [pc, #28]	@ (800ab1c <vPortExitCritical+0x54>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <vPortExitCritical+0x48>
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f383 8811 	msr	BASEPRI, r3
}
 800ab0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	20000014 	.word	0x20000014

0800ab20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab20:	f3ef 8009 	mrs	r0, PSP
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	4b15      	ldr	r3, [pc, #84]	@ (800ab80 <pxCurrentTCBConst>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	f01e 0f10 	tst.w	lr, #16
 800ab30:	bf08      	it	eq
 800ab32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	6010      	str	r0, [r2, #0]
 800ab3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab44:	b672      	cpsid	i
 800ab46:	f380 8811 	msr	BASEPRI, r0
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	b662      	cpsie	i
 800ab54:	f7fe ff9c 	bl	8009a90 <vTaskSwitchContext>
 800ab58:	f04f 0000 	mov.w	r0, #0
 800ab5c:	f380 8811 	msr	BASEPRI, r0
 800ab60:	bc09      	pop	{r0, r3}
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	6808      	ldr	r0, [r1, #0]
 800ab66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6a:	f01e 0f10 	tst.w	lr, #16
 800ab6e:	bf08      	it	eq
 800ab70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab74:	f380 8809 	msr	PSP, r0
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop

0800ab80 <pxCurrentTCBConst>:
 800ab80:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop

0800ab88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	b672      	cpsid	i
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	b662      	cpsie	i
 800aba2:	607b      	str	r3, [r7, #4]
}
 800aba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aba6:	f7fe feb7 	bl	8009918 <xTaskIncrementTick>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abb0:	4b06      	ldr	r3, [pc, #24]	@ (800abcc <SysTick_Handler+0x44>)
 800abb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	2300      	movs	r3, #0
 800abba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f383 8811 	msr	BASEPRI, r3
}
 800abc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <vPortSetupTimerInterrupt+0x34>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abda:	4b0b      	ldr	r3, [pc, #44]	@ (800ac08 <vPortSetupTimerInterrupt+0x38>)
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac0c <vPortSetupTimerInterrupt+0x3c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a0a      	ldr	r2, [pc, #40]	@ (800ac10 <vPortSetupTimerInterrupt+0x40>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	099b      	lsrs	r3, r3, #6
 800abec:	4a09      	ldr	r2, [pc, #36]	@ (800ac14 <vPortSetupTimerInterrupt+0x44>)
 800abee:	3b01      	subs	r3, #1
 800abf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abf2:	4b04      	ldr	r3, [pc, #16]	@ (800ac04 <vPortSetupTimerInterrupt+0x34>)
 800abf4:	2207      	movs	r2, #7
 800abf6:	601a      	str	r2, [r3, #0]
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	e000e010 	.word	0xe000e010
 800ac08:	e000e018 	.word	0xe000e018
 800ac0c:	20000008 	.word	0x20000008
 800ac10:	10624dd3 	.word	0x10624dd3
 800ac14:	e000e014 	.word	0xe000e014

0800ac18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac28 <vPortEnableVFP+0x10>
 800ac1c:	6801      	ldr	r1, [r0, #0]
 800ac1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac22:	6001      	str	r1, [r0, #0]
 800ac24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac26:	bf00      	nop
 800ac28:	e000ed88 	.word	0xe000ed88

0800ac2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac32:	f3ef 8305 	mrs	r3, IPSR
 800ac36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b0f      	cmp	r3, #15
 800ac3c:	d917      	bls.n	800ac6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac3e:	4a1a      	ldr	r2, [pc, #104]	@ (800aca8 <vPortValidateInterruptPriority+0x7c>)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac48:	4b18      	ldr	r3, [pc, #96]	@ (800acac <vPortValidateInterruptPriority+0x80>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	7afa      	ldrb	r2, [r7, #11]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d20d      	bcs.n	800ac6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac56:	b672      	cpsid	i
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	b662      	cpsie	i
 800ac66:	607b      	str	r3, [r7, #4]
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	e7fd      	b.n	800ac6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac6e:	4b10      	ldr	r3, [pc, #64]	@ (800acb0 <vPortValidateInterruptPriority+0x84>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac76:	4b0f      	ldr	r3, [pc, #60]	@ (800acb4 <vPortValidateInterruptPriority+0x88>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d90d      	bls.n	800ac9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	b672      	cpsid	i
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	b662      	cpsie	i
 800ac92:	603b      	str	r3, [r7, #0]
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	e7fd      	b.n	800ac96 <vPortValidateInterruptPriority+0x6a>
	}
 800ac9a:	bf00      	nop
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	e000e3f0 	.word	0xe000e3f0
 800acac:	200012c4 	.word	0x200012c4
 800acb0:	e000ed0c 	.word	0xe000ed0c
 800acb4:	200012c8 	.word	0x200012c8

0800acb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	@ 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acc4:	f7fe fd6a 	bl	800979c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acc8:	4b5d      	ldr	r3, [pc, #372]	@ (800ae40 <pvPortMalloc+0x188>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acd0:	f000 f920 	bl	800af14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acd4:	4b5b      	ldr	r3, [pc, #364]	@ (800ae44 <pvPortMalloc+0x18c>)
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 8094 	bne.w	800ae0a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d020      	beq.n	800ad2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ace8:	2208      	movs	r2, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d017      	beq.n	800ad2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f023 0307 	bic.w	r3, r3, #7
 800ad00:	3308      	adds	r3, #8
 800ad02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00d      	beq.n	800ad2a <pvPortMalloc+0x72>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	b672      	cpsid	i
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	b662      	cpsie	i
 800ad22:	617b      	str	r3, [r7, #20]
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	e7fd      	b.n	800ad26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d06c      	beq.n	800ae0a <pvPortMalloc+0x152>
 800ad30:	4b45      	ldr	r3, [pc, #276]	@ (800ae48 <pvPortMalloc+0x190>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d867      	bhi.n	800ae0a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad3a:	4b44      	ldr	r3, [pc, #272]	@ (800ae4c <pvPortMalloc+0x194>)
 800ad3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad3e:	4b43      	ldr	r3, [pc, #268]	@ (800ae4c <pvPortMalloc+0x194>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad44:	e004      	b.n	800ad50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d903      	bls.n	800ad62 <pvPortMalloc+0xaa>
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f1      	bne.n	800ad46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad62:	4b37      	ldr	r3, [pc, #220]	@ (800ae40 <pvPortMalloc+0x188>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d04e      	beq.n	800ae0a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2208      	movs	r2, #8
 800ad72:	4413      	add	r3, r2
 800ad74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	2308      	movs	r3, #8
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d922      	bls.n	800add4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4413      	add	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00d      	beq.n	800adbc <pvPortMalloc+0x104>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	b672      	cpsid	i
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	b662      	cpsie	i
 800adb4:	613b      	str	r3, [r7, #16]
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adce:	69b8      	ldr	r0, [r7, #24]
 800add0:	f000 f902 	bl	800afd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800add4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae48 <pvPortMalloc+0x190>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	4a1a      	ldr	r2, [pc, #104]	@ (800ae48 <pvPortMalloc+0x190>)
 800ade0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ade2:	4b19      	ldr	r3, [pc, #100]	@ (800ae48 <pvPortMalloc+0x190>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae50 <pvPortMalloc+0x198>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d203      	bcs.n	800adf6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adee:	4b16      	ldr	r3, [pc, #88]	@ (800ae48 <pvPortMalloc+0x190>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a17      	ldr	r2, [pc, #92]	@ (800ae50 <pvPortMalloc+0x198>)
 800adf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	4b12      	ldr	r3, [pc, #72]	@ (800ae44 <pvPortMalloc+0x18c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae0a:	f7fe fcd5 	bl	80097b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <pvPortMalloc+0x17c>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1c:	b672      	cpsid	i
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	b662      	cpsie	i
 800ae2c:	60fb      	str	r3, [r7, #12]
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	e7fd      	b.n	800ae30 <pvPortMalloc+0x178>
	return pvReturn;
 800ae34:	69fb      	ldr	r3, [r7, #28]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3728      	adds	r7, #40	@ 0x28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20004ed4 	.word	0x20004ed4
 800ae44:	20004ee0 	.word	0x20004ee0
 800ae48:	20004ed8 	.word	0x20004ed8
 800ae4c:	20004ecc 	.word	0x20004ecc
 800ae50:	20004edc 	.word	0x20004edc

0800ae54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d04e      	beq.n	800af04 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae66:	2308      	movs	r3, #8
 800ae68:	425b      	negs	r3, r3
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	4b24      	ldr	r3, [pc, #144]	@ (800af0c <vPortFree+0xb8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10d      	bne.n	800ae9e <vPortFree+0x4a>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae86:	b672      	cpsid	i
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	b662      	cpsie	i
 800ae96:	60fb      	str	r3, [r7, #12]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00d      	beq.n	800aec2 <vPortFree+0x6e>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	b672      	cpsid	i
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	b662      	cpsie	i
 800aeba:	60bb      	str	r3, [r7, #8]
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	e7fd      	b.n	800aebe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	4b11      	ldr	r3, [pc, #68]	@ (800af0c <vPortFree+0xb8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4013      	ands	r3, r2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d019      	beq.n	800af04 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d115      	bne.n	800af04 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	4b0b      	ldr	r3, [pc, #44]	@ (800af0c <vPortFree+0xb8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	43db      	mvns	r3, r3
 800aee2:	401a      	ands	r2, r3
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aee8:	f7fe fc58 	bl	800979c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	4b07      	ldr	r3, [pc, #28]	@ (800af10 <vPortFree+0xbc>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4413      	add	r3, r2
 800aef6:	4a06      	ldr	r2, [pc, #24]	@ (800af10 <vPortFree+0xbc>)
 800aef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aefa:	6938      	ldr	r0, [r7, #16]
 800aefc:	f000 f86c 	bl	800afd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af00:	f7fe fc5a 	bl	80097b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af04:	bf00      	nop
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20004ee0 	.word	0x20004ee0
 800af10:	20004ed8 	.word	0x20004ed8

0800af14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af1a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af20:	4b27      	ldr	r3, [pc, #156]	@ (800afc0 <prvHeapInit+0xac>)
 800af22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00c      	beq.n	800af48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3307      	adds	r3, #7
 800af32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0307 	bic.w	r3, r3, #7
 800af3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	4a1f      	ldr	r2, [pc, #124]	@ (800afc0 <prvHeapInit+0xac>)
 800af44:	4413      	add	r3, r2
 800af46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af4c:	4a1d      	ldr	r2, [pc, #116]	@ (800afc4 <prvHeapInit+0xb0>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af52:	4b1c      	ldr	r3, [pc, #112]	@ (800afc4 <prvHeapInit+0xb0>)
 800af54:	2200      	movs	r2, #0
 800af56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	4413      	add	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af60:	2208      	movs	r2, #8
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0307 	bic.w	r3, r3, #7
 800af6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4a15      	ldr	r2, [pc, #84]	@ (800afc8 <prvHeapInit+0xb4>)
 800af74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af76:	4b14      	ldr	r3, [pc, #80]	@ (800afc8 <prvHeapInit+0xb4>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2200      	movs	r2, #0
 800af7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af7e:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <prvHeapInit+0xb4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	1ad2      	subs	r2, r2, r3
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af94:	4b0c      	ldr	r3, [pc, #48]	@ (800afc8 <prvHeapInit+0xb4>)
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4a0a      	ldr	r2, [pc, #40]	@ (800afcc <prvHeapInit+0xb8>)
 800afa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4a09      	ldr	r2, [pc, #36]	@ (800afd0 <prvHeapInit+0xbc>)
 800afaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afac:	4b09      	ldr	r3, [pc, #36]	@ (800afd4 <prvHeapInit+0xc0>)
 800afae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800afb2:	601a      	str	r2, [r3, #0]
}
 800afb4:	bf00      	nop
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	200012cc 	.word	0x200012cc
 800afc4:	20004ecc 	.word	0x20004ecc
 800afc8:	20004ed4 	.word	0x20004ed4
 800afcc:	20004edc 	.word	0x20004edc
 800afd0:	20004ed8 	.word	0x20004ed8
 800afd4:	20004ee0 	.word	0x20004ee0

0800afd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afe0:	4b28      	ldr	r3, [pc, #160]	@ (800b084 <prvInsertBlockIntoFreeList+0xac>)
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e002      	b.n	800afec <prvInsertBlockIntoFreeList+0x14>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d8f7      	bhi.n	800afe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	4413      	add	r3, r2
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d108      	bne.n	800b01a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	441a      	add	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d118      	bne.n	800b060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	4b15      	ldr	r3, [pc, #84]	@ (800b088 <prvInsertBlockIntoFreeList+0xb0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	429a      	cmp	r2, r3
 800b038:	d00d      	beq.n	800b056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	441a      	add	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e008      	b.n	800b068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b056:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <prvInsertBlockIntoFreeList+0xb0>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	e003      	b.n	800b068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d002      	beq.n	800b076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b076:	bf00      	nop
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20004ecc 	.word	0x20004ecc
 800b088:	20004ed4 	.word	0x20004ed4

0800b08c <memset>:
 800b08c:	4402      	add	r2, r0
 800b08e:	4603      	mov	r3, r0
 800b090:	4293      	cmp	r3, r2
 800b092:	d100      	bne.n	800b096 <memset+0xa>
 800b094:	4770      	bx	lr
 800b096:	f803 1b01 	strb.w	r1, [r3], #1
 800b09a:	e7f9      	b.n	800b090 <memset+0x4>

0800b09c <_reclaim_reent>:
 800b09c:	4b2d      	ldr	r3, [pc, #180]	@ (800b154 <_reclaim_reent+0xb8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4283      	cmp	r3, r0
 800b0a2:	b570      	push	{r4, r5, r6, lr}
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	d053      	beq.n	800b150 <_reclaim_reent+0xb4>
 800b0a8:	69c3      	ldr	r3, [r0, #28]
 800b0aa:	b31b      	cbz	r3, 800b0f4 <_reclaim_reent+0x58>
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	b163      	cbz	r3, 800b0ca <_reclaim_reent+0x2e>
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	69e3      	ldr	r3, [r4, #28]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	5959      	ldr	r1, [r3, r5]
 800b0b8:	b9b1      	cbnz	r1, 800b0e8 <_reclaim_reent+0x4c>
 800b0ba:	3504      	adds	r5, #4
 800b0bc:	2d80      	cmp	r5, #128	@ 0x80
 800b0be:	d1f8      	bne.n	800b0b2 <_reclaim_reent+0x16>
 800b0c0:	69e3      	ldr	r3, [r4, #28]
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	68d9      	ldr	r1, [r3, #12]
 800b0c6:	f000 f87b 	bl	800b1c0 <_free_r>
 800b0ca:	69e3      	ldr	r3, [r4, #28]
 800b0cc:	6819      	ldr	r1, [r3, #0]
 800b0ce:	b111      	cbz	r1, 800b0d6 <_reclaim_reent+0x3a>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 f875 	bl	800b1c0 <_free_r>
 800b0d6:	69e3      	ldr	r3, [r4, #28]
 800b0d8:	689d      	ldr	r5, [r3, #8]
 800b0da:	b15d      	cbz	r5, 800b0f4 <_reclaim_reent+0x58>
 800b0dc:	4629      	mov	r1, r5
 800b0de:	4620      	mov	r0, r4
 800b0e0:	682d      	ldr	r5, [r5, #0]
 800b0e2:	f000 f86d 	bl	800b1c0 <_free_r>
 800b0e6:	e7f8      	b.n	800b0da <_reclaim_reent+0x3e>
 800b0e8:	680e      	ldr	r6, [r1, #0]
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 f868 	bl	800b1c0 <_free_r>
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	e7e1      	b.n	800b0b8 <_reclaim_reent+0x1c>
 800b0f4:	6961      	ldr	r1, [r4, #20]
 800b0f6:	b111      	cbz	r1, 800b0fe <_reclaim_reent+0x62>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f861 	bl	800b1c0 <_free_r>
 800b0fe:	69e1      	ldr	r1, [r4, #28]
 800b100:	b111      	cbz	r1, 800b108 <_reclaim_reent+0x6c>
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f85c 	bl	800b1c0 <_free_r>
 800b108:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b10a:	b111      	cbz	r1, 800b112 <_reclaim_reent+0x76>
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 f857 	bl	800b1c0 <_free_r>
 800b112:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b114:	b111      	cbz	r1, 800b11c <_reclaim_reent+0x80>
 800b116:	4620      	mov	r0, r4
 800b118:	f000 f852 	bl	800b1c0 <_free_r>
 800b11c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b11e:	b111      	cbz	r1, 800b126 <_reclaim_reent+0x8a>
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f84d 	bl	800b1c0 <_free_r>
 800b126:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b128:	b111      	cbz	r1, 800b130 <_reclaim_reent+0x94>
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f848 	bl	800b1c0 <_free_r>
 800b130:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b132:	b111      	cbz	r1, 800b13a <_reclaim_reent+0x9e>
 800b134:	4620      	mov	r0, r4
 800b136:	f000 f843 	bl	800b1c0 <_free_r>
 800b13a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b13c:	b111      	cbz	r1, 800b144 <_reclaim_reent+0xa8>
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 f83e 	bl	800b1c0 <_free_r>
 800b144:	6a23      	ldr	r3, [r4, #32]
 800b146:	b11b      	cbz	r3, 800b150 <_reclaim_reent+0xb4>
 800b148:	4620      	mov	r0, r4
 800b14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b14e:	4718      	bx	r3
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	bf00      	nop
 800b154:	20000018 	.word	0x20000018

0800b158 <__libc_init_array>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	4d0d      	ldr	r5, [pc, #52]	@ (800b190 <__libc_init_array+0x38>)
 800b15c:	4c0d      	ldr	r4, [pc, #52]	@ (800b194 <__libc_init_array+0x3c>)
 800b15e:	1b64      	subs	r4, r4, r5
 800b160:	10a4      	asrs	r4, r4, #2
 800b162:	2600      	movs	r6, #0
 800b164:	42a6      	cmp	r6, r4
 800b166:	d109      	bne.n	800b17c <__libc_init_array+0x24>
 800b168:	4d0b      	ldr	r5, [pc, #44]	@ (800b198 <__libc_init_array+0x40>)
 800b16a:	4c0c      	ldr	r4, [pc, #48]	@ (800b19c <__libc_init_array+0x44>)
 800b16c:	f000 f87e 	bl	800b26c <_init>
 800b170:	1b64      	subs	r4, r4, r5
 800b172:	10a4      	asrs	r4, r4, #2
 800b174:	2600      	movs	r6, #0
 800b176:	42a6      	cmp	r6, r4
 800b178:	d105      	bne.n	800b186 <__libc_init_array+0x2e>
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b180:	4798      	blx	r3
 800b182:	3601      	adds	r6, #1
 800b184:	e7ee      	b.n	800b164 <__libc_init_array+0xc>
 800b186:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18a:	4798      	blx	r3
 800b18c:	3601      	adds	r6, #1
 800b18e:	e7f2      	b.n	800b176 <__libc_init_array+0x1e>
 800b190:	0800b324 	.word	0x0800b324
 800b194:	0800b324 	.word	0x0800b324
 800b198:	0800b324 	.word	0x0800b324
 800b19c:	0800b328 	.word	0x0800b328

0800b1a0 <__retarget_lock_acquire_recursive>:
 800b1a0:	4770      	bx	lr

0800b1a2 <__retarget_lock_release_recursive>:
 800b1a2:	4770      	bx	lr

0800b1a4 <memcpy>:
 800b1a4:	440a      	add	r2, r1
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1ac:	d100      	bne.n	800b1b0 <memcpy+0xc>
 800b1ae:	4770      	bx	lr
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	d1f9      	bne.n	800b1b2 <memcpy+0xe>
 800b1be:	bd10      	pop	{r4, pc}

0800b1c0 <_free_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	2900      	cmp	r1, #0
 800b1c6:	d041      	beq.n	800b24c <_free_r+0x8c>
 800b1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1cc:	1f0c      	subs	r4, r1, #4
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfb8      	it	lt
 800b1d2:	18e4      	addlt	r4, r4, r3
 800b1d4:	f000 f83e 	bl	800b254 <__malloc_lock>
 800b1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b250 <_free_r+0x90>)
 800b1da:	6813      	ldr	r3, [r2, #0]
 800b1dc:	b933      	cbnz	r3, 800b1ec <_free_r+0x2c>
 800b1de:	6063      	str	r3, [r4, #4]
 800b1e0:	6014      	str	r4, [r2, #0]
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e8:	f000 b83a 	b.w	800b260 <__malloc_unlock>
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d908      	bls.n	800b202 <_free_r+0x42>
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	1821      	adds	r1, r4, r0
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf01      	itttt	eq
 800b1f8:	6819      	ldreq	r1, [r3, #0]
 800b1fa:	685b      	ldreq	r3, [r3, #4]
 800b1fc:	1809      	addeq	r1, r1, r0
 800b1fe:	6021      	streq	r1, [r4, #0]
 800b200:	e7ed      	b.n	800b1de <_free_r+0x1e>
 800b202:	461a      	mov	r2, r3
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	b10b      	cbz	r3, 800b20c <_free_r+0x4c>
 800b208:	42a3      	cmp	r3, r4
 800b20a:	d9fa      	bls.n	800b202 <_free_r+0x42>
 800b20c:	6811      	ldr	r1, [r2, #0]
 800b20e:	1850      	adds	r0, r2, r1
 800b210:	42a0      	cmp	r0, r4
 800b212:	d10b      	bne.n	800b22c <_free_r+0x6c>
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	4401      	add	r1, r0
 800b218:	1850      	adds	r0, r2, r1
 800b21a:	4283      	cmp	r3, r0
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	d1e0      	bne.n	800b1e2 <_free_r+0x22>
 800b220:	6818      	ldr	r0, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	6053      	str	r3, [r2, #4]
 800b226:	4408      	add	r0, r1
 800b228:	6010      	str	r0, [r2, #0]
 800b22a:	e7da      	b.n	800b1e2 <_free_r+0x22>
 800b22c:	d902      	bls.n	800b234 <_free_r+0x74>
 800b22e:	230c      	movs	r3, #12
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	e7d6      	b.n	800b1e2 <_free_r+0x22>
 800b234:	6820      	ldr	r0, [r4, #0]
 800b236:	1821      	adds	r1, r4, r0
 800b238:	428b      	cmp	r3, r1
 800b23a:	bf04      	itt	eq
 800b23c:	6819      	ldreq	r1, [r3, #0]
 800b23e:	685b      	ldreq	r3, [r3, #4]
 800b240:	6063      	str	r3, [r4, #4]
 800b242:	bf04      	itt	eq
 800b244:	1809      	addeq	r1, r1, r0
 800b246:	6021      	streq	r1, [r4, #0]
 800b248:	6054      	str	r4, [r2, #4]
 800b24a:	e7ca      	b.n	800b1e2 <_free_r+0x22>
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
 800b24e:	bf00      	nop
 800b250:	20005020 	.word	0x20005020

0800b254 <__malloc_lock>:
 800b254:	4801      	ldr	r0, [pc, #4]	@ (800b25c <__malloc_lock+0x8>)
 800b256:	f7ff bfa3 	b.w	800b1a0 <__retarget_lock_acquire_recursive>
 800b25a:	bf00      	nop
 800b25c:	2000501c 	.word	0x2000501c

0800b260 <__malloc_unlock>:
 800b260:	4801      	ldr	r0, [pc, #4]	@ (800b268 <__malloc_unlock+0x8>)
 800b262:	f7ff bf9e 	b.w	800b1a2 <__retarget_lock_release_recursive>
 800b266:	bf00      	nop
 800b268:	2000501c 	.word	0x2000501c

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
